(function () { "use strict";
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var Entity = function() {
	this.isDead = false;
	this.isPlayer = false;
};
Entity.__name__ = ["Entity"];
Entity.prototype = {
	update: function() {
		this.sprite.get_transform().get_pos().set_xy(this.body.get_position().get_x(),this.body.get_position().get_y());
		this.sprite.set_rotation_z(this.body.zpp_inner.rot * 57.2957795130823797);
	}
	,destroy: function() {
		this.sprite.destroy();
		Luxe.physics.nape.space.zpp_inner.wrap_bodies.remove(this.body);
	}
	,__class__: Entity
};
var nape = {};
nape.callbacks = {};
nape.callbacks.CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_CbType();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbType.__name__ = ["nape","callbacks","CbType"];
nape.callbacks.CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"}
nape.callbacks.CbType.get_ANY_BODY = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_BODY;
};
nape.callbacks.CbType.get_ANY_CONSTRAINT = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT;
};
nape.callbacks.CbType.get_ANY_SHAPE = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE;
};
nape.callbacks.CbType.get_ANY_COMPOUND = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND;
};
nape.callbacks.CbType.prototype = {
	get_id: function() {
		return this.zpp_inner.id;
	}
	,including: function(includes) {
		return new nape.callbacks.OptionType(this).including(includes);
	}
	,excluding: function(excludes) {
		return new nape.callbacks.OptionType(this).excluding(excludes);
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,toString: function() {
		if(this == zpp_nape.callbacks.ZPP_CbType.ANY_BODY) return "ANY_BODY"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE) return "ANY_SHAPE"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND) return "ANY_COMPOUND"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT) return "ANY_CONSTRAINT"; else return "CbType#" + this.zpp_inner.id;
	}
	,__class__: nape.callbacks.CbType
	,__properties__: {get_constraints:"get_constraints",get_interactors:"get_interactors",get_userData:"get_userData",get_id:"get_id"}
};
var zpp_nape = {};
zpp_nape.callbacks = {};
zpp_nape.callbacks.ZPP_CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CbSet();
};
zpp_nape.callbacks.ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_nape.callbacks.ZPP_CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.callbacks.ZPP_CbType.prototype = {
	addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cb.invalidate_pairs();
			cx_ite = cx_ite.next;
		}
	}
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_bodylisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,invalidateconstraint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_conlisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.callbacks.ZPP_CbType
};
zpp_nape.ZPP_ID = function() { };
zpp_nape.ZPP_ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_nape.ZPP_ID.Constraint = function() {
	return zpp_nape.ZPP_ID._Constraint++;
};
zpp_nape.ZPP_ID.Interactor = function() {
	return zpp_nape.ZPP_ID._Interactor++;
};
zpp_nape.ZPP_ID.CbType = function() {
	return zpp_nape.ZPP_ID._CbType++;
};
zpp_nape.ZPP_ID.CbSet = function() {
	return zpp_nape.ZPP_ID._CbSet++;
};
zpp_nape.ZPP_ID.Listener = function() {
	return zpp_nape.ZPP_ID._Listener++;
};
zpp_nape.ZPP_ID.ZPP_SimpleVert = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleVert++;
};
zpp_nape.ZPP_ID.ZPP_SimpleSeg = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleSeg++;
};
zpp_nape.ZPP_ID.InteractionGroup = function() {
	return zpp_nape.ZPP_ID._InteractionGroup++;
};
zpp_nape.ZPP_ID.Space = function() {
	return zpp_nape.ZPP_ID._Space++;
};
zpp_nape.util = {};
zpp_nape.util.ZNPList_ZPP_InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionListener
};
zpp_nape.util.ZNPList_ZPP_BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_BodyListener
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ConstraintListener
};
zpp_nape.util.ZNPList_ZPP_Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_nape.util.ZNPList_ZPP_Constraint.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Constraint
};
zpp_nape.util.ZNPList_ZPP_Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_nape.util.ZNPList_ZPP_Interactor.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Interactor
};
zpp_nape.util.ZNPList_ZPP_CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_nape.util.ZNPList_ZPP_CbSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSet
};
var CollisionLayers = function() { };
CollisionLayers.__name__ = ["CollisionLayers"];
nape.dynamics = {};
nape.dynamics.InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
		this.zpp_inner = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
nape.dynamics.InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape.dynamics.InteractionFilter.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.zpp_inner.collisionGroup != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionGroup;
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.zpp_inner.collisionMask != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionMask;
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.zpp_inner.sensorGroup != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorGroup;
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.zpp_inner.sensorMask != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorMask;
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.zpp_inner.fluidGroup != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidGroup;
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidMask: function(fluidMask) {
		if(this.zpp_inner.fluidMask != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidMask;
	}
	,shouldCollide: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldCollide";
		return this.zpp_inner.shouldCollide(filter.zpp_inner);
	}
	,shouldSense: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldSense";
		return this.zpp_inner.shouldSense(filter.zpp_inner);
	}
	,shouldFlow: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldFlow";
		return this.zpp_inner.shouldFlow(filter.zpp_inner);
	}
	,copy: function() {
		return new nape.dynamics.InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
	}
	,toString: function() {
		return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
	}
	,__class__: nape.dynamics.InteractionFilter
	,__properties__: {set_fluidMask:"set_fluidMask",get_fluidMask:"get_fluidMask",set_fluidGroup:"set_fluidGroup",get_fluidGroup:"get_fluidGroup",set_sensorMask:"set_sensorMask",get_sensorMask:"get_sensorMask",set_sensorGroup:"set_sensorGroup",get_sensorGroup:"get_sensorGroup",set_collisionMask:"set_collisionMask",get_collisionMask:"get_collisionMask",set_collisionGroup:"set_collisionGroup",get_collisionGroup:"get_collisionGroup",get_shapes:"get_shapes",get_userData:"get_userData"}
};
zpp_nape.dynamics = {};
zpp_nape.dynamics.ZPP_InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
zpp_nape.dynamics.ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_nape.dynamics.ZPP_InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.dynamics.InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.collisionGroup = this.collisionGroup;
		ret.collisionMask = this.collisionMask;
		ret.sensorGroup = this.sensorGroup;
		ret.sensorMask = this.sensorMask;
		ret.fluidGroup = this.fluidGroup;
		ret.fluidMask = this.fluidMask;
		return ret;
	}
	,shouldCollide: function(x) {
		return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
	}
	,shouldSense: function(x) {
		return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
	}
	,shouldFlow: function(x) {
		return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionFilter
};
zpp_nape.util.ZNPList_ZPP_Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_nape.util.ZNPList_ZPP_Shape.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Shape
};
var CollisionFilters = function() { };
CollisionFilters.__name__ = ["CollisionFilters"];
var Textures = function() { };
Textures.__name__ = ["Textures"];
Textures.Prepare = function() {
	Textures.PICKUP100 = Luxe.loadTexture("assets/moneyStack100.png");
	Textures.PICKUP100.set_onload(function(t) {
		t.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PICKUP200 = Luxe.loadTexture("assets/moneyStack200.png");
	Textures.PICKUP200.set_onload(function(t1) {
		t1.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PICKUP500 = Luxe.loadTexture("assets/moneyStack500.png");
	Textures.PICKUP500.set_onload(function(t2) {
		t2.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PICKUPCC = Luxe.loadTexture("assets/creditCard.png");
	Textures.PICKUPCC.set_onload(function(t3) {
		t3.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PROJECTILE100 = Luxe.loadTexture("assets/projectile100.png");
	Textures.PROJECTILE100.set_onload(function(t4) {
		t4.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PROJECTILE200 = Luxe.loadTexture("assets/projectile200.png");
	Textures.PROJECTILE200.set_onload(function(t5) {
		t5.set_filter(phoenix.FilterType.nearest);
	});
	Textures.PROJECTILE500 = Luxe.loadTexture("assets/projectile500.png");
	Textures.PROJECTILE500.set_onload(function(t6) {
		t6.set_filter(phoenix.FilterType.nearest);
	});
	Textures.ENEMY = Luxe.loadTexture("assets/policemanWalk.png");
	Textures.ENEMY.set_onload(function(t7) {
		t7.set_filter(phoenix.FilterType.nearest);
	});
	Textures.HAPPY = Luxe.loadTexture("assets/happyBubble.png");
	Textures.HAPPY.set_onload(function(t8) {
		t8.set_filter(phoenix.FilterType.nearest);
	});
	Textures.MONEYEXPLO = Luxe.loadTexture("assets/moneyExplosion.png");
	Textures.MONEYEXPLO.set_onload(function(t9) {
		t9.set_filter(phoenix.FilterType.nearest);
	});
	Textures.MONEYBAG = Luxe.loadTexture("assets/moneyBag.png");
	Textures.MONEYBAG.set_onload(function(t10) {
		t10.set_filter(phoenix.FilterType.nearest);
	});
};
var GameWorld = function() {
	this.entities = new Array();
};
GameWorld.__name__ = ["GameWorld"];
GameWorld.prototype = {
	AddEntity: function(entity) {
		this.entities.push(entity);
		entity.body.get_userData().entity = entity;
	}
	,Step: function() {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.update();
		}
		var toClear = new Array();
		var _g2 = 0;
		var _g11 = this.entities;
		while(_g2 < _g11.length) {
			var entity1 = _g11[_g2];
			++_g2;
			if(entity1.isDead) {
				entity1.destroy();
				toClear.push(entity1);
			}
		}
		var _g12 = 0;
		var _g3 = toClear.length;
		while(_g12 < _g3) {
			var i = _g12++;
			HxOverrides.remove(this.entities,toClear[i]);
		}
	}
	,Clear: function(removePlayer) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(!removePlayer && entity.isPlayer) {
			} else entity.destroy();
		}
		while(this.entities.length > 0) this.entities.pop();
	}
	,__class__: GameWorld
};
var EntityFactory = function() { };
EntityFactory.__name__ = ["EntityFactory"];
EntityFactory.SpawnPlayer = function() {
	var player = new Player();
	EntityFactory.world.AddEntity(player);
	return player;
};
EntityFactory.SpawnIndicator = function(x,y,qtt) {
	var txt = "+" + qtt + "€";
	var thecolor;
	switch(qtt) {
	case 100:
		thecolor = new phoenix.Color(0,1,0,1);
		break;
	case 200:
		thecolor = new phoenix.Color(1,1,0,1);
		break;
	case 500:
		thecolor = new phoenix.Color(1,0,1,1);
		break;
	default:
		thecolor = new phoenix.Color(1,1,1,1);
	}
	var text = new luxe.Text({ pos : new phoenix.Vector(x - 16.0,y - 40.0), point_size : 16, text : txt, batcher : Entity.batcher, color : thecolor},{ fileName : "Entity.hx", lineNumber : 193, className : "EntityFactory", methodName : "SpawnIndicator"});
	luxe.tween.Actuate.tween(text.color,1,{ a : 0});
	luxe.tween.Actuate.tween(text.get_pos(),1,{ y : text.get_pos().y - 28});
	haxe.Timer.delay(function() {
		text.destroy();
	},1000);
};
EntityFactory.SpawnMoneyExplosion = function(x,y) {
	var texture = Luxe.loadTexture("assets/moneyExplosion.png");
	texture.set_onload(function(t) {
		t.set_filter(phoenix.FilterType.nearest);
		var sprite = new luxe.Sprite({ texture : t, pos : new phoenix.Vector(x,y), batcher : Entity.batcher, size : new phoenix.Vector(32,64)});
		var animJson = "{\n\t\t\t\t\"explo\" : {\n\t\t\t\t\t\"frame_size\" : { \"x\":\"32\", \"y\":\"64\" },\n\t\t\t\t\t\t\"frameset\" : [ \"1-4\" ],\n\t\t\t\t\t\t\"loop\" : \"false\",\n\t\t\t\t\t\t\"speed\" : \"12\",\n\t\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t\t}}";
		var anim = new luxe.components.sprite.SpriteAnimation({ name : "exploanim"});
		sprite.component_count++;
		sprite._components.add(anim);
		anim.add_from_json(animJson);
		anim.set_animation("explo");
		anim.restart();
		haxe.Timer.delay(function() {
			sprite.destroy();
		},1000);
		luxe.tween.Actuate.tween(sprite.color,1,{ a : 0});
	});
};
EntityFactory.SpawnProjectile = function(x,y,vel,moneyPerShot,flip) {
	var vy = 0;
	if(vel.y > 0) vy = 0.5; else if(vel.y < 0) vy = -0.5;
	var proj = new Projectile(new phoenix.Vector(x,y),vel.x,0,moneyPerShot,flip);
	EntityFactory.world.AddEntity(proj);
	return proj;
};
EntityFactory.SpawnEnemy = function(x,y) {
	var enemy = new Enemy(x,y);
	EntityFactory.world.AddEntity(enemy);
	return enemy;
};
EntityFactory.SpawnBoss = function(x,y) {
	var enemy = new Boss(480,300);
	EntityFactory.world.AddEntity(enemy);
	return enemy;
};
EntityFactory.Spawn100EPickup = function(x,y) {
	var pickup = new Pickup(x,y,Textures.PICKUP100,function(player) {
		player.moneyPerShot = 100;
		player.inUseWeapon.destroy();
		player.inUseWeapon = new luxe.Sprite({ texture : Textures.PICKUP100, batcher : Entity.batcher, uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(20,20)});
	});
	EntityFactory.world.AddEntity(pickup);
	return pickup;
};
EntityFactory.SpawnMoneyBag = function(x,y) {
	var pickup = new Pickup(x,y,Textures.MONEYBAG,function(player) {
		player.money += 5000;
		GlobalParams.bankMoney += 5000;
		EntityFactory.SpawnIndicator(Player.position.get_x(),Player.position.get_y(),5000);
	});
	pickup.step = function(pickup1) {
		pickup1.body.set_rotation(0);
		var _g = pickup1.body.get_velocity();
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * 0.95);
		var _g1 = pickup1.body.get_velocity();
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * 0.95);
	};
	pickup.body.get_velocity().set_y(100 + Math.random() * 100);
	pickup.body.get_velocity().set_x(Math.random() * 100);
	EntityFactory.world.AddEntity(pickup);
	return pickup;
};
EntityFactory.Spawn200EPickup = function(x,y) {
	var pickup = new Pickup(x,y,Textures.PICKUP200,function(player) {
		player.moneyPerShot = 200;
		player.inUseWeapon.destroy();
		player.inUseWeapon = new luxe.Sprite({ texture : Textures.PICKUP200, batcher : Entity.batcher, uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(20,20)});
	});
	EntityFactory.world.AddEntity(pickup);
	return pickup;
};
EntityFactory.Spawn500EPickup = function(x,y) {
	var pickup = new Pickup(x,y,Textures.PICKUP500,function(player) {
		player.moneyPerShot = 500;
		player.inUseWeapon.destroy();
		player.inUseWeapon = new luxe.Sprite({ texture : Textures.PICKUP500, batcher : Entity.batcher, uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(20,20)});
	});
	EntityFactory.world.AddEntity(pickup);
	return pickup;
};
EntityFactory.SpawnCreditCardPickup = function(x,y) {
	var pickup = new Pickup(x,y,Textures.PICKUPCC,function(player) {
		player.gotCreditCard = true;
		player.inUseWeapon.destroy();
		player.inUseWeapon = new luxe.Sprite({ texture : Textures.PICKUPCC, batcher : Entity.batcher, uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(20,20)});
	});
	EntityFactory.world.AddEntity(pickup);
	return pickup;
};
var DoorType = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","UP","DOWN"] };
DoorType.LEFT = ["LEFT",0];
DoorType.LEFT.toString = $estr;
DoorType.LEFT.__enum__ = DoorType;
DoorType.RIGHT = ["RIGHT",1];
DoorType.RIGHT.toString = $estr;
DoorType.RIGHT.__enum__ = DoorType;
DoorType.UP = ["UP",2];
DoorType.UP.toString = $estr;
DoorType.UP.__enum__ = DoorType;
DoorType.DOWN = ["DOWN",3];
DoorType.DOWN.toString = $estr;
DoorType.DOWN.__enum__ = DoorType;
var Cajero = function(x,y) {
	Entity.call(this);
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : Luxe.loadTexture("assets/atm.png"), size : new phoenix.Vector(32,64), uv : new phoenix.Rectangle(0,0,32,64), pos : new phoenix.Vector(x,y)});
	this.sprite.texture.set_filter(phoenix.FilterType.nearest);
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(x - 16,y - 32,32,64)));
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.WALL);
	this.body.setShapeFilters(CollisionFilters.WALL);
	this.Hide();
};
Cajero.__name__ = ["Cajero"];
Cajero.__super__ = Entity;
Cajero.prototype = $extend(Entity.prototype,{
	Show: function() {
		this.body.set_space(Luxe.physics.nape.space);
		this.sprite.set_visible(true);
		this.body.get_position().set_y(-1000);
	}
	,Hide: function() {
		this.body.set_space(null);
		this.sprite.uv.set_x(0);
		this.sprite.set_visible(false);
	}
	,Open: function(howMuch) {
		this.sprite.uv.set_x(32);
		var _g1 = 0;
		var _g = Math.round(howMuch);
		while(_g1 < _g) {
			var i = _g1++;
			EntityFactory.SpawnMoneyBag(480,320);
		}
	}
	,update: function() {
		if(this.body.get_space() != null) this.body.set_rotation(0);
		var _g = this.body.get_velocity();
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * 0.95);
		var _g1 = this.body.get_velocity();
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * 0.95);
		Entity.prototype.update.call(this);
	}
	,__class__: Cajero
});
var Door = function(x,y,orientation) {
	Entity.call(this);
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : Luxe.loadTexture("assets/door.png"), uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(x + 16,y + 16)});
	this.sprite.texture.set_filter(phoenix.FilterType.nearest);
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(x,y,32,32)));
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.WALL);
	this.body.setShapeFilters(CollisionFilters.WALL);
	switch(orientation) {
	case "left":
		this.sprite.set_rotation_z(270);
		break;
	case "down":
		this.sprite.set_rotation_z(0);
		break;
	case "right":
		this.sprite.set_rotation_z(90);
		break;
	case "up":
		this.sprite.set_rotation_z(180);
		break;
	}
};
Door.__name__ = ["Door"];
Door.__super__ = Entity;
Door.prototype = $extend(Entity.prototype,{
	Open: function() {
		this.isOpened = true;
		this.sprite.uv.set_x(32);
		this.body.set_space(null);
	}
	,Close: function() {
		this.isOpened = false;
		this.sprite.uv.set_x(0);
		this.body.set_space(Luxe.physics.nape.space);
	}
	,__class__: Door
});
nape.geom = {};
nape.geom.Vec2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
nape.geom.Vec2.__name__ = ["nape","geom","Vec2"];
nape.geom.Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape.geom.Vec2.get(x,y,true);
};
nape.geom.Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec2 == null) ret = new nape.geom.Vec2(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec2;
		zpp_nape.util.ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec2) zpp_nape.util.ZPP_PubPool.nextVec2 = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		ret.zpp_inner.immutable();
		if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
		if(!((function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape.geom.Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	return nape.geom.Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
};
nape.geom.Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype = {
	dispose: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(this.zpp_inner._inuse) throw "Error: This Vec2 is not disposable";
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextVec2 != null) zpp_nape.util.ZPP_PubPool.nextVec2.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec2 = o;
		zpp_nape.util.ZPP_PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
	}
	,copy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,get_x: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) != x) {
			if(x != x) throw "Error: Vec2::" + "x" + " cannot be NaN";
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) != y) {
			if(y != y) throw "Error: Vec2::" + "y" + " cannot be NaN";
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_length: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(length != length) throw "Error: Vec2::length cannot be NaN";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == 0) throw "Error: Cannot set length of a zero vector";
		var t = length / Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,lsq: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,set: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot assign null Vec2";
		var ret = this.setxy((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,setxy: function(x,y) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
		if(!((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,get_angle: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,set_angle: function(angle) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
		var l;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		l = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		this.setxy(l * Math.cos(angle),l * Math.sin(angle));
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,rotate: function(angle) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(angle != angle) throw "Error: Cannot rotate Vec2 by NaN";
		if(angle % (Math.PI * 2) != 0) {
			var ax = Math.sin(angle);
			var ay = Math.cos(angle);
			var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
			this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
			this.zpp_inner.x = t;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,reflect: function(vec,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vec != null && vec.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot reflect in zero vector";
		var normal = ((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)),true);
			return $r;
		}(this))).normalise();
		var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
		if(vec.zpp_inner.weak) {
			vec.dispose();
			true;
		} else false;
		return ret;
	}
	,normalise: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
		var d;
		d = (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return this;
	}
	,unit: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
		var scale = 1 / zpp_nape.util.ZPP_Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scale,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scale,weak);
	}
	,add: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot add null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,addMul: function(vector,scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot add null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,sub: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot subtract null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,mul: function(scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(scalar != scalar) throw "Error: Cannot multiply with NaN";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
	}
	,addeq: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot add null vectors";
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,subeq: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot subtract null vectors";
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,muleq: function(scalar) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(scalar != scalar) throw "Error: Cannot multiply with NaN";
		return this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar);
	}
	,dot: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot take dot product with null vector";
		var ret;
		ret = (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,cross: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot take cross product with null vector";
		var ret;
		ret = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,perp: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get(-(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape.geom.Vec2
	,__properties__: {set_angle:"set_angle",get_angle:"get_angle",set_length:"set_length",get_length:"get_length",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
zpp_nape.geom = {};
zpp_nape.geom.ZPP_Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_nape.geom.ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Vec2(); else {
		ret = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,immutable: function() {
		if(this._immutable) throw "Error: Vec2 is immutable";
		if(this._isimmutable != null) this._isimmutable();
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Vec2();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
			zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,alloc: function() {
		this.weak = false;
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_Vec2.get(this.x,this.y,null);
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_nape.geom.ZPP_Vec2
};
var Player = function() {
	this.active = true;
	this.anim = new luxe.components.sprite.SpriteAnimation({ name : "anim"});
	this.gotCreditCard = false;
	this.leftCreditCard = haxe.Timer.stamp();
	this.moneyPerShot = 100;
	this.speed = 200;
	this.shotRate = 0.4;
	this.nextShot = 0.0;
	this.facing = new phoenix.Vector(1,0);
	this.money = 1000000;
	Entity.call(this);
	this.isPlayer = true;
	this.texture = Luxe.loadTexture("assets/player-walk.png");
	this.texture.set_onload(function(t) {
		t.set_filter(phoenix.FilterType.nearest);
	});
	this.sprite = new luxe.Sprite({ name : "player", batcher : Entity.batcher, texture : this.texture, pos : Luxe.core.screen.get_mid(), size : new phoenix.Vector(32,64)});
	this.sprite.add(this.anim);
	this.sprite.set_flipx(true);
	var animJson = "{\n\t\t\t\"thiefWalk\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"32\", \"y\":\"64\" },\n\t\t\t\t\t\"frameset\" : [ \"1-4\" ],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"12\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t},\n\t\t\t\"thiefStand\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"32\", \"y\":\"64\" },\n\t\t\t\t\t\"frameset\" : [ \"2\" ],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"12\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t}\n\t\t}";
	this.anim.add_from_json(animJson);
	this.anim.set_animation("thiefWalk");
	this.anim.play();
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(16,new nape.geom.Vec2(0,16)));
	this.body.get_position().setxy(200,200);
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.PLAYER);
	this.body.setShapeFilters(CollisionFilters.PLAYER);
	Luxe.input.bind_key("left",snow.system.input.Keycodes.left);
	Luxe.input.bind_key("right",snow.system.input.Keycodes.right);
	Luxe.input.bind_key("up",snow.system.input.Keycodes.up);
	Luxe.input.bind_key("down",snow.system.input.Keycodes.down);
	Luxe.input.bind_key("shoot",snow.system.input.Keycodes.key_z);
	Luxe.input.bind_key("open",snow.system.input.Keycodes.key_x);
	this.text = new luxe.Text({ pos : new phoenix.Vector(48,4), point_size : 20, text : "0€"},{ fileName : "Entity.hx", lineNumber : 497, className : "Player", methodName : "new"});
	this.inUseWeapon = new luxe.Sprite({ texture : Textures.PICKUP500, batcher : Entity.batcher, uv : new phoenix.Rectangle(0,0,32,32), size : new phoenix.Vector(32,32), pos : new phoenix.Vector(20,20)});
};
Player.__name__ = ["Player"];
Player.__super__ = Entity;
Player.prototype = $extend(Entity.prototype,{
	update: function() {
		if(this.active) {
			if(this.gotCreditCard) {
				this.leftCreditCard = haxe.Timer.stamp() + 25.0;
				this.gotCreditCard = false;
			}
			if(haxe.Timer.stamp() > this.leftCreditCard) this.shotRate = 0.4; else this.shotRate = 0.05;
			this.text.set_text(this.money + "€");
			var doShot = Luxe.input.inputdown("shoot");
			this.lastFacing = this.facing;
			var left = 0;
			var up = 0;
			if(doShot) {
				this.speed = 100;
				this.anim.set_speed(6);
			} else {
				this.anim.set_speed(12);
				this.speed = 200;
			}
			if(Luxe.input.inputdown("up")) {
				this.body.get_velocity().set_y(-this.speed * 0.7);
				up = -0.2;
			} else if(Luxe.input.inputdown("down")) {
				this.body.get_velocity().set_y(this.speed * 0.7);
				up = 0.2;
			} else this.body.get_velocity().set_y(0);
			if(Luxe.input.inputdown("left")) {
				this.body.get_velocity().set_x(-this.speed);
				left = -1;
				if(!doShot) this.sprite.set_flipx(true);
			} else if(Luxe.input.inputdown("right")) {
				this.body.get_velocity().set_x(this.speed);
				left = 1;
				if(!doShot) this.sprite.set_flipx(false);
			} else this.body.get_velocity().set_x(0);
			if(left == 0 && up == 0) {
				if(this.anim.get_animation() != "thiefStand") this.anim.set_animation("thiefStand");
			} else {
				if(this.anim.get_animation() != "thiefWalk") this.anim.set_animation("thiefWalk");
				if(!doShot) {
					if(left == 0 || this.facing.x == 0) this.facing.set_x(this.lastFacing.x); else this.facing.set_x(left);
					this.facing.set_y(up);
				}
			}
			if(doShot) {
				if(haxe.Timer.stamp() > this.nextShot) {
					if(haxe.Timer.stamp() > this.leftCreditCard) {
						this.money -= this.moneyPerShot;
						GlobalParams.sobornoMoney += this.moneyPerShot;
					} else GlobalParams.creditCardMoney += this.moneyPerShot;
					this.nextShot = haxe.Timer.stamp() + this.shotRate;
					EntityFactory.SpawnProjectile(this.body.get_position().get_x(),this.body.get_position().get_y() + 5,this.facing,this.moneyPerShot,this.sprite.flipx);
				}
			}
			if(Player.damageDealt != 0) {
				GlobalParams.shakeAmount += 10;
				EntityFactory.SpawnIndicator(this.body.get_position().get_x(),this.body.get_position().get_y(),Player.damageDealt);
				this.money -= Player.damageDealt;
				Player.damageDealt = 0;
				this.sprite.color.set_r(0);
				this.sprite.color.set_b(0);
				luxe.tween.Actuate.tween(this.sprite.color,0.3,{ r : 1, b : 1});
			}
		} else {
			this.body.get_velocity().set_x(0);
			this.body.get_velocity().set_y(0);
		}
		this.body.set_rotation(0);
		Entity.prototype.update.call(this);
		Player.position.set_x(this.body.get_position().get_x());
		Player.position.set_y(this.body.get_position().get_y());
	}
	,__class__: Player
});
var Enemy = function(x,y) {
	this.finalVelocity = new nape.geom.Vec2(0,0);
	this.speedy = 120;
	this.speedx = 150;
	this.active = false;
	this.nextAttack = haxe.Timer.stamp();
	this.attackPower = 10000;
	this.attackRate = 0.5;
	this.health = 1000;
	this.facing = new phoenix.Vector(0,0);
	var _g = this;
	Entity.call(this);
	Enemy.numEnemiesActive += 1;
	this.texture = Textures.ENEMY;
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : this.texture, pos : new phoenix.Vector(x,y), size : new phoenix.Vector(32,64)});
	this.anim = new luxe.components.sprite.SpriteAnimation({ name : "enemyanim"});
	this.sprite.add(this.anim);
	var animJson = "{\n\t\t\t\"heroWalk\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"32\", \"y\":\"64\" },\n\t\t\t\t\t\"frameset\" : [ \"1-4\" ],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"12\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t},\n\t\t\t\"heroStand\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"32\", \"y\":\"64\" },\n\t\t\t\t\t\"frameset\" : [ \"2\" ],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"12\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t}\n\t\t}";
	this.anim.add_from_json(animJson);
	this.anim.set_animation("heroWalk");
	this.anim.set_animation("heroWalk");
	this.anim.play();
	haxe.Timer.delay(function() {
		_g.active = true;
	},1000);
	this.happySprite = new luxe.Sprite({ batcher : Entity.batcher, texture : Textures.HAPPY, pos : new phoenix.Vector(0,0), size : new phoenix.Vector(32,32)});
	var _g1 = this.happySprite.get_transform().get_local().pos;
	_g1.set_y(_g1.y - 16);
	var _g2 = this.happySprite.get_transform().get_local().pos;
	_g2.set_x(_g2.x + 10);
	this.happySprite.set_visible(false);
	this.happySprite.set_parent(this.sprite);
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(16,new nape.geom.Vec2(0,16)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(16,new nape.geom.Vec2(0,-4)));
	this.body.get_position().setxy(x,y);
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.ENEMY);
	this.body.setShapeFilters(CollisionFilters.ENEMY);
};
Enemy.__name__ = ["Enemy"];
Enemy.__super__ = Entity;
Enemy.prototype = $extend(Entity.prototype,{
	update: function() {
		this.body.set_rotation(0);
		if(this.active) {
			if(this.health > 0) {
				var ray = nape.geom.Ray.fromSegment(this.body.get_position(),Player.position);
				ray.zpp_inner.maxdist = 500;
				ray.zpp_inner.maxdist;
				var rayResult = Luxe.physics.nape.space.rayCast(ray,false,CollisionFilters.RAYFILTER);
				var playerInSight = false;
				if(rayResult != null) {
					if(((function($this) {
						var $r;
						if(rayResult.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = rayResult.zpp_inner.shape;
						return $r;
					}(this))).get_filter() == CollisionFilters.PLAYER) playerInSight = true;
				}
				if(playerInSight) {
					this.finalVelocity.set_x(this.body.get_position().get_x() - Player.position.get_x());
					this.finalVelocity.set_y(this.body.get_position().get_y() - Player.position.get_y());
					this.body.set_velocity(this.finalVelocity.normalise());
					this.body.get_velocity().set_x(-this.body.get_velocity().get_x() * this.speedx);
					this.body.get_velocity().set_y(-this.body.get_velocity().get_y() * this.speedy);
					if(this.body.get_velocity().get_x() < 0) this.sprite.set_flipx(true); else this.sprite.set_flipx(false);
				} else {
					this.body.get_velocity().set_x(0);
					this.body.get_velocity().set_y(0);
				}
				var playerNear = false;
				ray = nape.geom.Ray.fromSegment(this.body.get_position(),Player.position);
				ray.zpp_inner.maxdist = 40;
				ray.zpp_inner.maxdist;
				rayResult = Luxe.physics.nape.space.rayCast(ray);
				if(rayResult != null) {
					if(((function($this) {
						var $r;
						if(rayResult.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = rayResult.zpp_inner.shape;
						return $r;
					}(this))).get_filter() == CollisionFilters.PLAYER) playerNear = true;
				}
				if(playerNear && this.nextAttack < haxe.Timer.stamp()) {
					Player.damageDealt += this.attackPower;
					GlobalParams.stolenMoney += this.attackPower;
					this.nextAttack = haxe.Timer.stamp() + this.attackRate;
					EntityFactory.SpawnMoneyExplosion(Player.position.get_x(),Player.position.get_y());
				}
			} else {
				var _g = this.body.get_velocity();
				_g.set_x((function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) * 0.95);
				var _g1 = this.body.get_velocity();
				_g1.set_y((function($this) {
					var $r;
					if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) * 0.95);
				this.happySprite.set_visible(true);
				this.body.set_space(null);
				this.anim.set_animation("heroStand");
			}
		}
		Entity.prototype.update.call(this);
	}
	,__class__: Enemy
});
var GlobalParams = function() { };
GlobalParams.__name__ = ["GlobalParams"];
var Boss = function(x,y) {
	this.finalVelocity = new nape.geom.Vec2(0,0);
	this.yOffset = { val : 0};
	this.speedy = 60;
	this.speedx = 75;
	this.active = false;
	this.nextAttack = haxe.Timer.stamp();
	this.attackPower = 10000;
	this.attackRate = 0.5;
	this.health = 100000;
	this.facing = new phoenix.Vector(0,0);
	var _g = this;
	Entity.call(this);
	Enemy.numEnemiesActive += 1;
	this.texture = Luxe.loadTexture("assets/bossWalk.png");
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : this.texture, pos : new phoenix.Vector(x,y), size : new phoenix.Vector(64,128)});
	this.anim = new luxe.components.sprite.SpriteAnimation({ name : "enemyanim"});
	this.sprite.add(this.anim);
	var animJson = "{\n\t\t\t\"heroWalk\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"64\", \"y\":\"128\" },\n\t\t\t\t\t\"frameset\" : [ \"1-4\" ],\n\t\t\t\t\t\"events\": [{\"frame\":2, \"event\":\"foot.1\"}, {\"frame\":4, \"event\":\"foot.1\"}],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"1\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t},\n\t\t\t\"heroStand\" : {\n\t\t\t\t\"frame_size\" : { \"x\":\"64\", \"y\":\"128\" },\n\t\t\t\t\t\"frameset\" : [ \"2\" ],\n\t\t\t\t\t\"loop\" : \"true\",\n\t\t\t\t\t\"speed\" : \"1\",\n\t\t\t\t\t\"filter_type\" : \"nearest\"\n\t\t\t}\n\t\t}";
	this.anim.add_from_json(animJson);
	this.anim.set_animation("heroWalk");
	this.anim.set_animation("heroWalk");
	this.anim.play();
	if(GlobalParams.isPause) this.anim.set_animation("heroStand"); else this.anim.set_animation("heroWalk");
	this.sprite.events.listen("foot.1",function(e) {
		if(Math.abs(Player.position.get_x() - _g.body.get_position().get_x()) < 192. && Math.abs(Player.position.get_y() - _g.body.get_position().get_y() - 32) < 32) {
			Player.damageDealt += 100000;
			GlobalParams.stolenMoney += 100000;
		}
		GlobalParams.shakeAmount = 100;
		var step = new luxe.Sprite({ batcher : Entity.batcher, texture : Luxe.loadTexture("assets/bossStep.png"), pos : new phoenix.Vector(_g.body.get_position().get_x(),_g.body.get_position().get_y() + 64), size : new phoenix.Vector(384,85)});
		haxe.Timer.delay(function() {
			luxe.tween.Actuate.tween(step.color,1.5,{ a : 0});
		},200);
		haxe.Timer.delay(function() {
			step.destroy();
		},2000);
	});
	haxe.Timer.delay(function() {
		_g.active = true;
	},1000);
	this.happySprite = new luxe.Sprite({ batcher : Entity.batcher, texture : Textures.HAPPY, pos : new phoenix.Vector(0,0), size : new phoenix.Vector(32,32)});
	var _g1 = this.happySprite.get_transform().get_local().pos;
	_g1.set_y(_g1.y - 16);
	var _g2 = this.happySprite.get_transform().get_local().pos;
	_g2.set_x(_g2.x + 10);
	this.happySprite.set_visible(false);
	this.happySprite.set_parent(this.sprite);
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(32,new nape.geom.Vec2(0,16)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(32,new nape.geom.Vec2(0,-4)));
	this.body.get_position().setxy(x,y);
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.ENEMY);
	this.body.setShapeFilters(CollisionFilters.ENEMY);
};
Boss.__name__ = ["Boss"];
Boss.__super__ = Entity;
Boss.prototype = $extend(Entity.prototype,{
	update: function() {
		this.sprite.color.set_g(0.5);
		this.sprite.color.set_b(0.5);
		this.body.set_rotation(0);
		if(this.active) {
			if(this.health > 0) {
				var ray = nape.geom.Ray.fromSegment(this.body.get_position(),Player.position);
				ray.zpp_inner.maxdist = 500;
				ray.zpp_inner.maxdist;
				var rayResult = Luxe.physics.nape.space.rayCast(ray,false,CollisionFilters.RAYFILTER);
				var playerInSight = false;
				if(rayResult != null) {
					if(((function($this) {
						var $r;
						if(rayResult.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = rayResult.zpp_inner.shape;
						return $r;
					}(this))).get_filter() == CollisionFilters.PLAYER) playerInSight = true;
				}
				if(playerInSight) {
					this.finalVelocity.set_x(this.body.get_position().get_x() - Player.position.get_x());
					this.finalVelocity.set_y(this.body.get_position().get_y() - Player.position.get_y());
					this.body.set_velocity(this.finalVelocity.normalise());
					this.body.get_velocity().set_x(-this.body.get_velocity().get_x() * this.speedx);
					this.body.get_velocity().set_y(-this.body.get_velocity().get_y() * this.speedy);
					if(this.body.get_velocity().get_x() < 0) this.sprite.set_flipx(true); else this.sprite.set_flipx(false);
				} else {
					this.body.get_velocity().set_x(0);
					this.body.get_velocity().set_y(0);
				}
				var playerNear = false;
				ray = nape.geom.Ray.fromSegment(this.body.get_position(),Player.position);
				ray.zpp_inner.maxdist = 92;
				ray.zpp_inner.maxdist;
				rayResult = Luxe.physics.nape.space.rayCast(ray);
				if(rayResult != null) {
					if(((function($this) {
						var $r;
						if(rayResult.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = rayResult.zpp_inner.shape;
						return $r;
					}(this))).get_filter() == CollisionFilters.PLAYER) playerNear = true;
				}
				if(playerNear && this.nextAttack < haxe.Timer.stamp()) {
					Player.damageDealt += this.attackPower;
					this.nextAttack = haxe.Timer.stamp() + this.attackRate;
					EntityFactory.SpawnMoneyExplosion(Player.position.get_x(),Player.position.get_y());
				}
			} else {
				var _g = this.body.get_velocity();
				_g.set_x((function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) * 0.95);
				var _g1 = this.body.get_velocity();
				_g1.set_y((function($this) {
					var $r;
					if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) * 0.95);
				this.happySprite.set_visible(true);
				this.anim.set_animation("heroStand");
			}
		}
		Entity.prototype.update.call(this);
		this.sprite.get_transform().get_pos().set_y(this.body.get_position().get_y() + this.yOffset.val);
	}
	,__class__: Boss
});
var Pickup = function(x,y,tex,cb) {
	this.step = function(pickup) {
	};
	Entity.call(this);
	this.texture = tex;
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : this.texture, pos : new phoenix.Vector(x,y), size : new phoenix.Vector(32,32)});
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(16));
	this.body.get_position().setxy(x,y);
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.PICKUP);
	this.body.setShapeFilters(CollisionFilters.PICKUP);
	this.cb = cb;
};
Pickup.__name__ = ["Pickup"];
Pickup.__super__ = Entity;
Pickup.prototype = $extend(Entity.prototype,{
	update: function() {
		this.step(this);
		Entity.prototype.update.call(this);
	}
	,__class__: Pickup
});
var Projectile = function(pos,velx,vely,moneyPerShot,flip) {
	this.projectileSpeed = 500;
	Entity.call(this);
	if(moneyPerShot == 100) this.texture = Textures.PROJECTILE100;
	if(moneyPerShot == 200) this.texture = Textures.PROJECTILE200;
	if(moneyPerShot == 500) this.texture = Textures.PROJECTILE500;
	this.power = moneyPerShot;
	this.sprite = new luxe.Sprite({ batcher : Entity.batcher, texture : this.texture, pos : pos, size : new phoenix.Vector(32,32)});
	this.sprite.set_flipx(flip);
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(-2,-2,8,4)));
	this.body.get_position().setxy(pos.x,pos.y);
	this.body.set_space(Luxe.physics.nape.space);
	this.body.get_cbTypes().add(CollisionLayers.PROJECTILE);
	this.body.setShapeFilters(CollisionFilters.PROJECTILE);
	this.body.get_velocity().set_x(velx * this.projectileSpeed);
	this.body.get_velocity().set_y(vely * this.projectileSpeed);
};
Projectile.__name__ = ["Projectile"];
Projectile.__super__ = Entity;
Projectile.prototype = $extend(Entity.prototype,{
	update: function() {
		Entity.prototype.update.call(this);
	}
	,__class__: Projectile
});
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var Luxe = function() { };
Luxe.__name__ = ["Luxe"];
Luxe.__properties__ = {set_alpha:"set_alpha",get_alpha:"get_alpha",set_cur_frame_start:"set_cur_frame_start",get_cur_frame_start:"get_cur_frame_start",set_current_time:"set_current_time",get_current_time:"get_current_time",set_last_frame_start:"set_last_frame_start",get_last_frame_start:"get_last_frame_start",set_delta_sim:"set_delta_sim",get_delta_sim:"get_delta_sim",set_dt:"set_dt",get_dt:"get_dt",set_max_frame_time:"set_max_frame_time",get_max_frame_time:"get_max_frame_time",set_update_rate:"set_update_rate",get_update_rate:"get_update_rate",set_fixed_delta:"set_fixed_delta",get_fixed_delta:"get_fixed_delta",set_timescale:"set_timescale",get_timescale:"get_timescale",get_screen:"get_screen",get_time:"get_time",get_snow:"get_snow"}
Luxe.on = function(event,handler) {
	Luxe.core.emitter.on(event,handler,{ fileName : "Luxe.hx", lineNumber : 86, className : "Luxe", methodName : "on"});
};
Luxe.off = function(event,handler) {
	return Luxe.core.emitter.off(event,handler,{ fileName : "Luxe.hx", lineNumber : 91, className : "Luxe", methodName : "off"});
};
Luxe.shutdown = function() {
	Luxe.core.shutdown();
};
Luxe.showConsole = function(_show) {
	Luxe.core.show_console(_show);
};
Luxe.loadJSON = function(_id,_onload) {
	if(Luxe.resources.json.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadJSON - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 114, className : "Luxe", methodName : "loadJSON"});
		var res = Luxe.resources.find_json(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	var res1 = new luxe.resource.JSONResource(_id,null,Luxe.resources);
	snow.system.assets.AssetText.load(Luxe.core.app.assets,_id).then(function(_asset) {
		res1.json = JSON.parse(_asset.text);
		if(_onload != null) _onload(res1);
		Luxe.resources.cache(res1);
	});
	return res1;
};
Luxe.loadText = function(_id,_onload) {
	if(Luxe.resources.text.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadText - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 144, className : "Luxe", methodName : "loadText"});
		var res = Luxe.resources.find_text(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	var res1 = new luxe.resource.TextResource(_id,null,Luxe.resources);
	snow.system.assets.AssetText.load(Luxe.core.app.assets,_id).then(function(_asset) {
		res1.text = _asset.text;
		if(_onload != null) _onload(res1);
		Luxe.resources.cache(res1);
	});
	return res1;
};
Luxe.loadData = function(_id,_onload) {
	if(Luxe.resources.data.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadData - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 175, className : "Luxe", methodName : "loadData"});
		var res = Luxe.resources.find_data(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	var res1 = new luxe.resource.DataResource(_id,null,Luxe.resources);
	snow.system.assets.AssetBytes.load(Luxe.core.app.assets,_id).then(function(_asset) {
		res1.data = _asset.bytes;
		if(_onload != null) _onload(res1);
		Luxe.resources.cache(res1);
	});
	return res1;
};
Luxe.loadSound = function(_name,_id,_is_music,_onload) {
	if(_is_music == null) _is_music = false;
	if(Luxe.resources.sounds.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadSound - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 206, className : "Luxe", methodName : "loadSound"});
		var res = Luxe.resources.find_sound(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	Luxe.audio.create(_id,_name,_is_music);
	var res1 = new luxe.resource.SoundResource(_id,_name,Luxe.resources);
	if(_onload != null) _onload(res1);
	Luxe.resources.cache(res1);
	return res1;
};
Luxe.loadTexture = function(_id,_onload,_silent) {
	if(_silent == null) _silent = false;
	return phoenix.Texture.load(_id,_onload,_silent);
};
Luxe.loadTextures = function(_ids,_onload,_silent) {
	if(_silent == null) _silent = false;
	var total_count = _ids.length;
	var loaded_count = 0;
	var loaded = [];
	var on_single_texture_complete = function(texture) {
		loaded.push(texture);
		loaded_count++;
		if(loaded_count == total_count) _onload(loaded);
	};
	var _g = 0;
	while(_g < _ids.length) {
		var _id = _ids[_g];
		++_g;
		Luxe.loadTexture(_id,on_single_texture_complete,_silent);
	}
};
Luxe.loadFont = function(_id,_texture_path,_onload,_silent) {
	if(_silent == null) _silent = false;
	if(Luxe.resources.fonts.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadFont - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 263, className : "Luxe", methodName : "loadFont"});
		var res = Luxe.resources.find_font(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	return phoenix.BitmapFont.load({ id : _id, texture_path : _texture_path, onload : _onload, silent : _silent});
};
Luxe.loadShader = function(_ps_id,_vs_id,_onload,_silent) {
	if(_silent == null) _silent = false;
	if(_vs_id == null) _vs_id = "default";
	if(_ps_id == null) _ps_id = "default";
	var _id = "" + _ps_id + "|" + _vs_id;
	if(Luxe.resources.shaders.exists(_id)) {
		haxe.Log.trace("     i / luxe / " + ("loadShader - return existing " + _id),{ fileName : "Luxe.hx", lineNumber : 280, className : "Luxe", methodName : "loadShader"});
		var res = Luxe.resources.find_shader(_id);
		if(_onload != null) _onload(res);
		return res;
	}
	return phoenix.Shader.load(_ps_id,_vs_id,_onload,_silent);
};
Luxe.get_snow = function() {
	return Luxe.core.app;
};
Luxe.get_screen = function() {
	return Luxe.core.screen;
};
Luxe.get_time = function() {
	return snow.Snow.core.timestamp();
};
Luxe.get_timescale = function() {
	return Luxe.core.timescale;
};
Luxe.get_fixed_delta = function() {
	return Luxe.core.fixed_delta;
};
Luxe.get_update_rate = function() {
	return Luxe.core.update_rate;
};
Luxe.get_max_frame_time = function() {
	return Luxe.core.max_frame_time;
};
Luxe.get_dt = function() {
	return Luxe.core.delta_time;
};
Luxe.get_delta_sim = function() {
	return Luxe.core.delta_sim;
};
Luxe.get_last_frame_start = function() {
	return Luxe.core.last_frame_start;
};
Luxe.get_current_time = function() {
	return Luxe.core.current_time;
};
Luxe.get_cur_frame_start = function() {
	return Luxe.core.cur_frame_start;
};
Luxe.get_alpha = function() {
	return Luxe.core.alpha;
};
Luxe.set_timescale = function(value) {
	return Luxe.core.timescale = value;
};
Luxe.set_fixed_delta = function(value) {
	return Luxe.core.fixed_delta = value;
};
Luxe.set_update_rate = function(value) {
	return Luxe.core.update_rate = value;
};
Luxe.set_max_frame_time = function(value) {
	return Luxe.core.max_frame_time = value;
};
Luxe.set_dt = function(value) {
	return Luxe.core.delta_time = value;
};
Luxe.set_delta_sim = function(value) {
	return Luxe.core.delta_sim = value;
};
Luxe.set_last_frame_start = function(value) {
	return Luxe.core.last_frame_start = value;
};
Luxe.set_current_time = function(value) {
	return Luxe.core.current_time = value;
};
Luxe.set_cur_frame_start = function(value) {
	return Luxe.core.cur_frame_start = value;
};
Luxe.set_alpha = function(value) {
	return Luxe.core.alpha = value;
};
var _Luxe = {};
_Luxe.Ev_Impl_ = function() { };
_Luxe.Ev_Impl_.__name__ = ["_Luxe","Ev_Impl_"];
var LuxeApp = function() { };
LuxeApp.__name__ = ["LuxeApp"];
LuxeApp.main = function() {
	LuxeApp._conf = { window : { width : 960, height : 640, fullscreen : false, resizable : true, borderless : false, title : "luxe app"}};
	LuxeApp._conf.window.width = 960;
	LuxeApp._conf.window.height = 640;
	LuxeApp._conf.window.fullscreen = false;
	LuxeApp._conf.window.resizable = true;
	LuxeApp._conf.window.borderless = false;
	LuxeApp._conf.window.title = "luxe empty project";
	LuxeApp._snow = new snow.Snow();
	LuxeApp._game = new Main();
	LuxeApp._core = new luxe.Core(LuxeApp._game,LuxeApp._conf);
	var _snow_config = { has_loop : true, config_custom_assets : false, config_custom_runtime : false, config_runtime_path : "config.json", config_assets_path : "manifest", app_package : "com.luxeengine.empty"};
	LuxeApp._snow.init(_snow_config,LuxeApp._core);
};
var luxe = {};
luxe.Emitter = function() {
	this._checking = false;
	this._to_remove = new List();
	this.connected = new List();
	this.bindings = new haxe.ds.IntMap();
};
luxe.Emitter.__name__ = ["luxe","Emitter"];
luxe.Emitter.prototype = {
	emit: function(event,data,pos) {
		this._check();
		var list = this.bindings.get(event);
		if(list != null && list.length > 0) {
			var _g = 0;
			while(_g < list.length) {
				var handler = list[_g];
				++_g;
				handler(data);
			}
		}
		this._check();
	}
	,on: function(event,handler,pos) {
		this._check();
		if(!this.bindings.exists(event)) {
			this.bindings.set(event,[handler]);
			this.connected.push({ handler : handler, event : event, pos : pos});
		} else {
			var list = this.bindings.get(event);
			if(HxOverrides.indexOf(list,handler,0) == -1) {
				list.push(handler);
				this.connected.push({ handler : handler, event : event, pos : pos});
			}
		}
	}
	,off: function(event,handler,pos) {
		this._check();
		var success = false;
		if(this.bindings.exists(event)) {
			this._to_remove.push({ event : event, handler : handler});
			var $it0 = this.connected.iterator();
			while( $it0.hasNext() ) {
				var _info = $it0.next();
				if(_info.event == event && _info.handler == handler) this.connected.remove(_info);
			}
			success = true;
		}
		return success;
	}
	,connections: function(handler) {
		var list = [];
		var $it0 = this.connected.iterator();
		while( $it0.hasNext() ) {
			var _info = $it0.next();
			if(_info.handler == handler) list.push(_info);
		}
		return list;
	}
	,_check: function() {
		if(this._checking) return;
		this._checking = true;
		if(this._to_remove.length > 0) {
			var $it0 = this._to_remove.iterator();
			while( $it0.hasNext() ) {
				var _node = $it0.next();
				var list = this.bindings.get(_node.event);
				HxOverrides.remove(list,_node.handler);
				if(list.length == 0) this.bindings.remove(_node.event);
			}
			this._to_remove = null;
			this._to_remove = new List();
		}
		this._checking = false;
	}
	,__class__: luxe.Emitter
};
luxe.Game = function() {
	luxe.Emitter.call(this);
};
luxe.Game.__name__ = ["luxe","Game"];
luxe.Game.__super__ = luxe.Emitter;
luxe.Game.prototype = $extend(luxe.Emitter.prototype,{
	config: function(config) {
		return config;
	}
	,ready: function() {
	}
	,update: function(dt) {
	}
	,onevent: function(event) {
	}
	,ondestroy: function() {
	}
	,onprerender: function() {
	}
	,onrender: function() {
	}
	,onpostrender: function() {
	}
	,oninputdown: function(_name,e) {
	}
	,oninputup: function(_name,e) {
	}
	,onmousedown: function(event) {
	}
	,onmouseup: function(event) {
	}
	,onmousewheel: function(event) {
	}
	,onmousemove: function(event) {
	}
	,onkeydown: function(event) {
	}
	,onkeyup: function(event) {
	}
	,ontextinput: function(event) {
	}
	,ontouchdown: function(event) {
	}
	,ontouchup: function(event) {
	}
	,ontouchmove: function(event) {
	}
	,ongamepadaxis: function(event) {
	}
	,ongamepaddown: function(event) {
	}
	,ongamepadup: function(event) {
	}
	,ongamepaddevice: function(event) {
	}
	,onwindowmoved: function(event) {
	}
	,onwindowresized: function(event) {
	}
	,onwindowsized: function(event) {
	}
	,onwindowminimized: function(event) {
	}
	,onwindowrestored: function(event) {
	}
	,__class__: luxe.Game
});
var Main = function() {
	this.lost = false;
	this.shakeAmount = 10;
	this.wasOpened = false;
	this.doorsClosed = true;
	this.okgo = false;
	this.currentRoom = 1;
	this.indicators = new Array();
	this.cajeroComing = false;
	this.rightDoorTiles = new Array();
	this.leftDoorTiles = new Array();
	this.downDoorTiles = new Array();
	this.upDoorTiles = new Array();
	this.pickupSpawnList = new Array();
	this.enemySpawnList = new Array();
	this.doorList = new Array();
	luxe.Game.call(this);
};
Main.__name__ = ["Main"];
Main.__super__ = luxe.Game;
Main.prototype = $extend(luxe.Game.prototype,{
	projToWall: function(collision) {
		collision.zpp_inner.int1.outer_i.get_userData().entity.isDead = true;
	}
	,AddInteractionListener: function(type1,type2,cb) {
		var il = new nape.callbacks.InteractionListener((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this)),type1,type2,cb);
		Luxe.physics.nape.space.zpp_inner.wrap_listeners.add(il);
	}
	,TiledLayerToMatrix: function(tiledLayer) {
		var themap = new Array();
		var _g = 0;
		var _g1 = tiledLayer.tiles;
		while(_g < _g1.length) {
			var tilearray = _g1[_g];
			++_g;
			var col = new Array();
			var _g2 = 0;
			while(_g2 < tilearray.length) {
				var tile = tilearray[_g2];
				++_g2;
				col.push(tile.id);
			}
			themap.push(col);
		}
		return themap;
	}
	,GetNonEmptyTiles: function(tiledLayer) {
		var map = this.TiledLayerToMatrix(tiledLayer);
		var tiles = new Array();
		var _g1 = 0;
		var _g = map.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = map[i].length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(map[i][j] != 0) tiles.push(new phoenix.Vector(j,i));
			}
		}
		return tiles;
	}
	,RandomRange: function(a,b) {
		return (b - a) * Math.random() + a;
	}
	,SpawnRandomEnemy: function() {
		var n = Math.round(this.RandomRange(0,this.enemySpawnList.length - 1));
		var e = this.enemySpawnList[n];
		EntityFactory.SpawnEnemy(e.x * 32 + 16,e.y * 32 + 16);
	}
	,SpawnRandomPickup: function() {
		var n = Math.round(this.RandomRange(0,this.pickupSpawnList.length - 1));
		var e = this.pickupSpawnList[n];
		var r = Math.random();
		if(r < 0.5) EntityFactory.Spawn100EPickup(e.x * 32 + 16,e.y * 32 + 16); else if(r < 0.75) EntityFactory.Spawn200EPickup(e.x * 32 + 16,e.y * 32 + 16); else if(r < 0.9) EntityFactory.Spawn500EPickup(e.x * 32 + 16,e.y * 32 + 16); else EntityFactory.SpawnCreditCardPickup(e.x * 32 + 16,e.y * 32 + 16);
	}
	,DebugLayer: function(layer) {
		var themap = this.TiledLayerToMatrix(layer);
		var str = "";
		var _g1 = 0;
		var _g = themap.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = themap[i].length;
			while(_g3 < _g2) {
				var j = _g3++;
				str += Std.string(themap[i]);
			}
			str += "\n";
		}
		haxe.Log.trace(str,{ fileName : "Main.hx", lineNumber : 139, className : "Main", methodName : "DebugLayer"});
	}
	,OpenDoors: function(doors) {
		var _g1 = 0;
		var _g = doors.length;
		while(_g1 < _g) {
			var i = _g1++;
			doors[i].Open();
		}
	}
	,CloseDoors: function(doors) {
		var _g1 = 0;
		var _g = doors.length;
		while(_g1 < _g) {
			var i = _g1++;
			doors[i].Close();
		}
	}
	,CloseAllDoors: function() {
		this.CloseDoors(this.rightDoorTiles);
		this.CloseDoors(this.leftDoorTiles);
		this.CloseDoors(this.upDoorTiles);
		this.CloseDoors(this.downDoorTiles);
		this.doorsClosed = true;
	}
	,OpenAllDoors: function() {
		this.doorsClosed = false;
		this.OpenDoors(this.rightDoorTiles);
		this.OpenDoors(this.leftDoorTiles);
		this.OpenDoors(this.upDoorTiles);
		this.OpenDoors(this.downDoorTiles);
	}
	,RegenScene: function(createPlayer) {
		this.lost = false;
		this.wasOpened = false;
		this.cajero.Hide();
		this.cajeroComing = false;
		this.gameWorld.Clear(createPlayer);
		Enemy.numEnemiesActive = 0;
		var numEnemies = Math.floor(this.currentRoom / 2) + 1;
		if(this.currentRoom == 2) EntityFactory.SpawnBoss(400,400); else {
			var _g = 0;
			while(_g < numEnemies) {
				var i = _g++;
				this.SpawnRandomEnemy();
			}
		}
		if(Math.random() < 0.70) this.SpawnRandomPickup();
		if(createPlayer) {
			this.player = EntityFactory.SpawnPlayer();
			this.currentRoom = 1;
		} else {
			this.gameWorld.AddEntity(this.player);
			this.currentRoom += 1;
		}
	}
	,DispatchIndicators: function() {
		var _g1 = 0;
		var _g = this.indicators.length;
		while(_g1 < _g) {
			var i = _g1++;
			EntityFactory.SpawnIndicator(this.indicators[i].entity.body.position.x,this.indicators[i].entity.body.position.y,this.indicators[i].text);
		}
		while(this.indicators.length > 0) this.indicators.pop();
	}
	,FadeOut: function() {
		luxe.tween.Actuate.tween(this.fade.color,0.5,{ a : 1});
	}
	,FadeIn: function() {
		luxe.tween.Actuate.tween(this.fade.color,0.5,{ a : 0});
	}
	,ready: function() {
		var _g = this;
		this.tileBatcher = Luxe.renderer.create_batcher({ layer : 0});
		this.fadeBatcher = Luxe.renderer.create_batcher({ layer : 2});
		this.entityBatcher = Luxe.renderer.create_batcher({ layer : 1});
		Entity.batcher = this.entityBatcher;
		this.AddInteractionListener(CollisionLayers.PROJECTILE,CollisionLayers.WALL,$bind(this,this.projToWall));
		this.AddInteractionListener(CollisionLayers.PROJECTILE,CollisionLayers.ENEMY,function(collision) {
			var proj = collision.zpp_inner.int1.outer_i.get_userData().entity;
			var enem = collision.zpp_inner.int2.outer_i.get_userData().entity;
			EntityFactory.SpawnIndicator(collision.zpp_inner.int1.outer_i.get_castBody().get_position().get_x(),collision.zpp_inner.int1.outer_i.get_castBody().get_position().get_y(),js.Boot.__cast(proj.power , Int));
			enem.sprite.color.r = 0;
			enem.sprite.color.b = 0;
			luxe.tween.Actuate.tween(enem.sprite.color,0.3,{ r : 1, b : 1});
			proj.isDead = true;
			if(enem.health > 0) {
				enem.health = enem.health - proj.power;
				if(enem.health <= 0) Enemy.numEnemiesActive -= 1;
			}
		});
		this.AddInteractionListener(CollisionLayers.PICKUP,CollisionLayers.PLAYER,function(collision1) {
			collision1.zpp_inner.int1.outer_i.get_userData().entity.isDead = true;
			(js.Boot.__cast(collision1.zpp_inner.int1.outer_i.get_userData().entity , Pickup)).cb(_g.player);
		});
		Luxe.physics.nape.space.get_gravity().set_x(0);
		Luxe.physics.nape.space.get_gravity().set_y(0);
		Luxe.loadJSON("assets/parcel.json",function(json_asset) {
			var preload = new luxe.Parcel();
			preload.from_json(json_asset.json);
			new luxe.ParcelProgress({ parcel : preload, background : new phoenix.Color(1,0.5,0.25,1), oncomplete : function(_) {
				Textures.Prepare();
				_g.drawer = new luxe.physics.nape.DebugDraw();
				_g.gameWorld = new GameWorld();
				EntityFactory.world = _g.gameWorld;
				Luxe.renderer.clear_color = new phoenix.Color().rgb(11494970);
				_g.fade = new luxe.Sprite({ texture : Luxe.loadTexture("assets/fade.png"), pos : new phoenix.Vector(0,0), size : new phoenix.Vector(Luxe.core.screen.w * 2.5,Luxe.core.screen.h * 2.5), batcher : _g.fadeBatcher});
				_g.gameover = new luxe.Sprite({ texture : Luxe.loadTexture("assets/gameover.png"), pos : new phoenix.Vector(Luxe.core.screen.w / 2,Luxe.core.screen.h / 2), size : new phoenix.Vector(Luxe.core.screen.w,Luxe.core.screen.h), batcher : _g.fadeBatcher});
				_g.gameover.set_visible(false);
				_g.camera = new phoenix.Camera();
				_g.tileBatcher.view = _g.camera;
				_g.entityBatcher.view = _g.camera;
				_g.fadeBatcher.view = _g.camera;
				Luxe.renderer.add_batch(_g.tileBatcher);
				Luxe.renderer.add_batch(_g.entityBatcher);
				Luxe.renderer.add_batch(_g.fadeBatcher);
				var that = _g;
				Luxe.loadText("assets/test-map.json",function(res) {
					_g.tilemap = new luxe.importers.tiled.TiledMap({ tiled_file_data : res.text, format : "json", pos : new phoenix.Vector(0,0)});
					_g.tilemap.display({ batcher : _g.tileBatcher, scale : 1, grid : false, filter : phoenix.FilterType.nearest});
					var themap = that.TiledLayerToMatrix(that.tilemap.layers.get("collisionLayer"));
					var _g2 = 0;
					var _g1 = themap.length;
					while(_g2 < _g1) {
						var i = _g2++;
						var _g4 = 0;
						var _g3 = themap[i].length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(themap[i][j] != 0) {
								var b = new nape.phys.Body((function($this) {
									var $r;
									if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
										zpp_nape.util.ZPP_Flags.internal = true;
										zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
										zpp_nape.util.ZPP_Flags.internal = false;
									}
									$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
									return $r;
								}(this)));
								b.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(j * 32,i * 32,32,32)));
								b.set_space(Luxe.physics.nape.space);
								((function($this) {
									var $r;
									if(b.zpp_inner_i.wrap_cbTypes == null) b.zpp_inner_i.setupcbTypes();
									$r = b.zpp_inner_i.wrap_cbTypes;
									return $r;
								}(this))).add(CollisionLayers.WALL);
								b.setShapeFilters(CollisionFilters.WALL);
							}
						}
					}
					_g.DebugLayer(that.tilemap.layers.get("enemySpawnLayer"));
					_g.doorList = _g.GetNonEmptyTiles(that.tilemap.layers.get("doorLayer"));
					haxe.Log.trace(_g.doorList.length,{ fileName : "Main.hx", lineNumber : 300, className : "Main", methodName : "ready"});
					var _g21 = 0;
					var _g11 = _g.doorList.length;
					while(_g21 < _g11) {
						var i1 = _g21++;
						var v = _g.doorList[i1];
						if(v.x == 0 && v.y != 0) _g.leftDoorTiles.push(new Door(v.x * 32,v.y * 32,"left")); else if(v.x == that.tilemap.width - 1) _g.rightDoorTiles.push(new Door(v.x * 32,v.y * 32,"right")); else if(v.y != 0 && v.x != that.tilemap.width) _g.upDoorTiles.push(new Door(v.x * 32,v.y * 32,"up")); else _g.downDoorTiles.push(new Door(v.x * 32,v.y * 32,"down"));
					}
					_g.enemySpawnList = _g.GetNonEmptyTiles(that.tilemap.layers.get("enemySpawnLayer"));
					_g.pickupSpawnList = _g.GetNonEmptyTiles(that.tilemap.layers.get("pickupSpawnLayer"));
					that.RegenScene(true);
					_g.CloseAllDoors();
					_g.okgo = true;
				});
				_g.cajero = new Cajero(480,300);
				haxe.Log.trace("FINISH LOAD!",{ fileName : "Main.hx", lineNumber : 316, className : "Main", methodName : "ready"});
				haxe.Timer.delay(function() {
					_g.FadeIn();
				},2000);
				_g.statsText = new luxe.Text({ pos : new phoenix.Vector(Luxe.core.screen.get_mid().x - 100,Luxe.core.screen.get_mid().y), point_size : 24, text : "", batcher : _g.fadeBatcher, color : new phoenix.Color(1,1,1,1)},{ fileName : "Main.hx", lineNumber : 319, className : "Main", methodName : "ready"});
				_g.statsText.set_visible(false);
			}});
			preload.load();
		});
	}
	,CheckWarp: function() {
		if(!this.doorsClosed) {
			var v = this.rightDoorTiles[0].sprite.get_transform().get_pos();
			var v1 = new phoenix.Vector(v.x + 32,v.y + 16);
			var dist = phoenix.Vector.Subtract(v1,this.player.sprite.get_transform().get_pos()).get_length();
			if(dist < 40) {
				this.RegenScene(false);
				haxe.Log.trace(this.leftDoorTiles[0].body.get_position(),{ fileName : "Main.hx", lineNumber : 343, className : "Main", methodName : "CheckWarp"});
				this.player.body.get_position().set_x(40);
				this.player.body.get_position().set_y((Luxe.core.screen.h + 96) / 2);
				this.CloseAllDoors();
			} else {
				v = this.rightDoorTiles[1].sprite.get_transform().get_pos();
				v1 = new phoenix.Vector(v.x + 32,v.y + 16);
				dist = phoenix.Vector.Subtract(v1,this.player.sprite.get_transform().get_pos()).get_length();
				if(dist < 40) {
					this.RegenScene(false);
					haxe.Log.trace(this.leftDoorTiles[0].body.get_position(),{ fileName : "Main.hx", lineNumber : 353, className : "Main", methodName : "CheckWarp"});
					this.player.body.get_position().set_x(40);
					this.player.body.get_position().set_y((Luxe.core.screen.h + 96) / 2);
					this.CloseAllDoors();
				}
			}
			v = this.leftDoorTiles[0].sprite.get_transform().get_pos();
			v1 = new phoenix.Vector(v.x,v.y + 16);
			dist = phoenix.Vector.Subtract(v1,this.player.sprite.get_transform().get_pos()).get_length();
			if(dist < 40) {
				this.RegenScene(false);
				this.player.body.get_position().set_x(this.tilemap.width * 32 - 40);
				this.player.body.get_position().set_y((Luxe.core.screen.h + 96) / 2);
				this.CloseAllDoors();
			} else {
				v = this.leftDoorTiles[1].sprite.get_transform().get_pos();
				v1 = new phoenix.Vector(v.x,v.y + 16);
				dist = phoenix.Vector.Subtract(v1,this.player.sprite.get_transform().get_pos()).get_length();
				if(dist < 40) {
					this.RegenScene(false);
					this.player.body.get_position().set_x(this.tilemap.width * 32 - 40);
					this.player.body.get_position().set_y((Luxe.core.screen.h + 96) / 2);
					this.CloseAllDoors();
				}
			}
			dist = phoenix.Vector.Subtract(this.upDoorTiles[0].sprite.get_transform().get_pos(),this.player.sprite.get_transform().get_pos()).get_length();
			if(dist < 32) {
				this.RegenScene(false);
				this.player.body.get_position().set_x(this.tilemap.width * 32 / 2);
				this.player.body.get_position().set_y(54);
				this.CloseAllDoors();
			} else {
				dist = phoenix.Vector.Subtract(this.upDoorTiles[1].sprite.get_transform().get_pos(),this.player.sprite.get_transform().get_pos()).get_length();
				if(dist < 32) {
					this.RegenScene(false);
					this.player.body.get_position().set_x(this.tilemap.width * 32 / 2);
					this.player.body.get_position().set_y(54);
					this.CloseAllDoors();
				}
			}
			dist = phoenix.Vector.Subtract(this.downDoorTiles[0].sprite.get_transform().get_pos(),this.player.sprite.get_transform().get_pos()).get_length();
			if(dist < 32) {
				this.RegenScene(false);
				this.player.body.get_position().set_x(this.tilemap.width * 32 / 2);
				this.player.body.get_position().set_y(Luxe.core.screen.h - 54);
				this.CloseAllDoors();
			} else {
				dist = phoenix.Vector.Subtract(this.downDoorTiles[1].sprite.get_transform().get_pos(),this.player.sprite.get_transform().get_pos()).get_length();
				if(dist < 32) {
					this.RegenScene(false);
					this.player.body.get_position().set_x(this.tilemap.width * 32 / 2);
					this.player.body.get_position().set_y(Luxe.core.screen.h - 54);
					this.CloseAllDoors();
				}
			}
		}
	}
	,onkeyup: function(e) {
		if(e.keycode == snow.system.input.Keycodes.escape) Luxe.shutdown();
		if(e.keycode == snow.system.input.Keycodes.key_k) this.player.money = 0;
		if(e.keycode == snow.system.input.Keycodes.key_j) {
			this.doorsClosed = !this.doorsClosed;
			if(!this.doorsClosed) this.OpenAllDoors(); else this.CloseAllDoors();
		}
		if(e.keycode == snow.system.input.Keycodes.key_p) this.SpawnRandomEnemy();
		if(this.lost && e.keycode == snow.system.input.Keycodes.space) {
			this.RegenScene(true);
			this.okgo = true;
			this.gameover.set_visible(false);
		}
	}
	,ShakeCam: function(howMuch) {
		this.camera.get_pos().set_x((Math.random() - 0.5) * 2 * howMuch);
		this.camera.get_pos().set_y((Math.random() - 0.5) * 2 * howMuch);
	}
	,update: function(dt) {
		var _g = this;
		if(this.player != null && this.player.money < 0) {
			this.lost = true;
			this.okgo = false;
			this.camera.get_pos().set_x(0);
			this.camera.get_pos().set_y(0);
			this.gameover.set_visible(true);
			this.statsText.set_text("Money spent with credit card " + GlobalParams.creditCardMoney + "€\n" + "Money spent in bribes " + GlobalParams.sobornoMoney + "€\n" + "Money stolen by law " + GlobalParams.stolenMoney + "€\n" + "Money drawn from bank " + GlobalParams.bankMoney + "€\n" + "Final money " + this.player.money + "€\n");
			this.statsText.set_visible(true);
		}
		if(this.okgo) {
			this.ShakeCam(GlobalParams.shakeAmount);
			GlobalParams.shakeAmount *= 0.90;
			this.gameWorld.Step();
			this.CheckWarp();
			if(Enemy.numEnemiesActive == 0) {
				if(!this.cajero.sprite.visible) {
					if(!this.cajeroComing) {
						this.cajeroComing = true;
						haxe.Timer.delay(function() {
							_g.OpenAllDoors();
							GlobalParams.shakeAmount += 300;
							_g.cajero.Show();
						},2000);
					}
				}
				haxe.Log.trace("OPEN!",{ fileName : "Main.hx", lineNumber : 483, className : "Main", methodName : "update"});
				var dist = nape.geom.Vec2.distance(new nape.geom.Vec2(480,300),Player.position);
				haxe.Log.trace(dist,{ fileName : "Main.hx", lineNumber : 485, className : "Main", methodName : "update"});
				if(dist < 64 && Luxe.input.inputdown("open") && !this.wasOpened) {
					this.wasOpened = true;
					this.cajero.Open(this.currentRoom * 3);
				}
			}
		}
	}
	,__class__: Main
});
var IMap = function() { };
IMap.__name__ = ["IMap"];
IMap.prototype = {
	__class__: IMap
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = s + c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
var XmlType = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var haxe = {};
haxe.StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(new Error().stack);
	a.shift();
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		var m = [];
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
};
haxe.Log = function() { };
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Resource = function() { };
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.crypto.Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe.Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe.io.Bytes.ofString(x.str);
			return haxe.crypto.Base64.decode(x.data);
		}
	}
	return null;
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Utf8 = function(size) {
	this.__b = "";
};
haxe.Utf8.__name__ = ["haxe","Utf8"];
haxe.Utf8.prototype = {
	__class__: haxe.Utf8
};
haxe.crypto = {};
haxe.crypto.Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe.crypto.Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe.crypto.Adler32.read = function(i) {
	var a = new haxe.crypto.Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe.crypto.Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,__class__: haxe.crypto.Adler32
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		if(b1 == b2 && pos > srcpos) {
			var i = len;
			while(i > 0) {
				i--;
				b1[i + pos] = b2[i + srcpos];
			}
			return;
		}
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			b1[i1 + pos] = b2[i1 + srcpos];
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.crypto.Base64 = function() { };
haxe.crypto.Base64.__name__ = ["haxe","crypto","Base64"];
haxe.crypto.Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.crypto.Md5 = function() {
};
haxe.crypto.Md5.__name__ = ["haxe","crypto","Md5"];
haxe.crypto.Md5.encode = function(s) {
	var m = new haxe.crypto.Md5();
	var h = m.doEncode(haxe.crypto.Md5.str2blks(s));
	return m.hex(h);
};
haxe.crypto.Md5.str2blks = function(str) {
	var nblk = (str.length + 8 >> 6) + 1;
	var blks = new Array();
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	while(i1 < str.length) {
		blks[i1 >> 2] |= HxOverrides.cca(str,i1) << (str.length * 8 + i1) % 4 * 8;
		i1++;
	}
	blks[i1 >> 2] |= 128 << (str.length * 8 + i1) % 4 * 8;
	var l = str.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe.crypto.Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe.crypto.Md5
};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
haxe.io.BytesBuffer = function() {
	this.b = new Array();
};
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe.io.Bytes(this.b.length,this.b);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Input = function() { };
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw "Not implemented";
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,read: function(nbytes) {
		var s = haxe.io.Bytes.alloc(nbytes);
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) throw haxe.io.Error.Blocked;
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) return ch2 | ch1 << 8; else return ch1 | ch2 << 8;
	}
	,__class__: haxe.io.Input
};
haxe.io.BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw haxe.io.Error.OutsideBounds;
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe.io.BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe.io.BytesInput.__super__ = haxe.io.Input;
haxe.io.BytesInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new haxe.io.Eof();
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw haxe.io.Error.OutsideBounds;
		if(this.len == 0 && len > 0) throw new haxe.io.Eof();
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe.io.BytesInput
});
haxe.io.Eof = function() {
};
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.directory = function(path) {
	var s = new haxe.io.Path(path);
	if(s.dir == null) return "";
	return s.dir;
};
haxe.io.Path.extension = function(path) {
	var s = new haxe.io.Path(path);
	if(s.ext == null) return "";
	return s.ext;
};
haxe.io.Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		return s != null && s != "";
	});
	if(paths1.length == 0) return "";
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe.io.Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe.io.Path.normalize(path);
};
haxe.io.Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join("/");
	if(path == null || path == slash) return slash;
	var target = [];
	var src;
	var parts;
	var token;
	src = path.split(slash);
	var _g1 = 0;
	var _g = src.length;
	while(_g1 < _g) {
		var i = _g1++;
		token = src[i];
		if(token == "..") target.pop(); else if(token != ".") target.push(token);
	}
	var tmp = target.join(slash);
	var regex = new EReg("([^:])/+","g");
	var result = regex.replace(tmp,"$1" + slash);
	return result;
};
haxe.io.Path.addTrailingSlash = function(path) {
	if(path.length == 0) return "/";
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) return path + "\\"; else return path;
	} else if(c1 != path.length - 1) return path + "/"; else return path;
};
haxe.io.Path.prototype = {
	__class__: haxe.io.Path
};
haxe.xml = {};
haxe.xml.Parser = function() { };
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
haxe.zip = {};
haxe.zip.Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe.zip.Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.HuffTools = function() {
};
haxe.zip.HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe.zip.HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw "assert";
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return haxe.zip.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw "assert";
		}
		var size = 1 << d;
		var table = new Array();
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(haxe.zip.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe.zip.Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw "Invalid huffman";
		var idx = v << 5 | len;
		if(bits.exists(idx)) return haxe.zip.Huffman.Found(bits.get(idx));
		v <<= 1;
		len += 1;
		return haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = new Array();
		var tmp = new Array();
		if(maxbits > 32) throw "Invalid huffman";
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw "Invalid huffman";
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe.ds.IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.set(n << 5 | l,i3);
			}
		}
		return this.treeCompress(haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe.zip.HuffTools
};
haxe.zip._InflateImpl = {};
haxe.zip._InflateImpl.Window = function(hasCrc) {
	this.buffer = haxe.io.Bytes.alloc(65536);
	this.pos = 0;
	if(hasCrc) this.crc = new haxe.crypto.Adler32();
};
haxe.zip._InflateImpl.Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe.zip._InflateImpl.Window.prototype = {
	slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = haxe.io.Bytes.alloc(65536);
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: haxe.zip._InflateImpl.Window
};
haxe.zip._InflateImpl.State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe.zip._InflateImpl.State.Head = ["Head",0];
haxe.zip._InflateImpl.State.Head.toString = $estr;
haxe.zip._InflateImpl.State.Head.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Block = ["Block",1];
haxe.zip._InflateImpl.State.Block.toString = $estr;
haxe.zip._InflateImpl.State.Block.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.CData = ["CData",2];
haxe.zip._InflateImpl.State.CData.toString = $estr;
haxe.zip._InflateImpl.State.CData.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Flat = ["Flat",3];
haxe.zip._InflateImpl.State.Flat.toString = $estr;
haxe.zip._InflateImpl.State.Flat.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Crc = ["Crc",4];
haxe.zip._InflateImpl.State.Crc.toString = $estr;
haxe.zip._InflateImpl.State.Crc.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Dist = ["Dist",5];
haxe.zip._InflateImpl.State.Dist.toString = $estr;
haxe.zip._InflateImpl.State.Dist.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.DistOne = ["DistOne",6];
haxe.zip._InflateImpl.State.DistOne.toString = $estr;
haxe.zip._InflateImpl.State.DistOne.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Done = ["Done",7];
haxe.zip._InflateImpl.State.Done.toString = $estr;
haxe.zip._InflateImpl.State.Done.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip.InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new haxe.zip.HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = haxe.zip._InflateImpl.State.Head; else this.state = haxe.zip._InflateImpl.State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe.zip._InflateImpl.Window(crc);
};
haxe.zip.InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe.zip.InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = haxe.io.Bytes.alloc(bufsize);
	var output = new haxe.io.BytesBuffer();
	var inflate = new haxe.zip.InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
haxe.zip.InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe.zip.InflateImpl.FIXED_HUFFMAN != null) return haxe.zip.InflateImpl.FIXED_HUFFMAN;
		var a = new Array();
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe.zip.InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw "Invalid data";
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw "Invalid data";
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw "Invalid data";
				break;
			default:
				throw "Invalid data";
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8 || cinfo != 7) throw "Invalid data";
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw "Invalid data";
			if(fdict) throw "Unsupported dictionary";
			this.state = haxe.zip._InflateImpl.State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe.zip._InflateImpl.State.Done;
				return true;
			}
			var crc = haxe.crypto.Adler32.read(this.input);
			if(!calc.equals(crc)) throw "Invalid CRC";
			this.state = haxe.zip._InflateImpl.State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw "Invalid data";
				this.state = haxe.zip._InflateImpl.State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = new Array();
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			default:
				throw "Invalid data";
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = haxe.zip._InflateImpl.State.Crc; else this.state = haxe.zip._InflateImpl.State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = haxe.zip._InflateImpl.State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = haxe.zip._InflateImpl.State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = haxe.zip._InflateImpl.State.Crc; else this.state = haxe.zip._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw "Invalid data";
				this.len = haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw "Invalid data";
				this.dist = haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw "Invalid data";
				if(this.dist == 1) this.state = haxe.zip._InflateImpl.State.DistOne; else this.state = haxe.zip._InflateImpl.State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: haxe.zip.InflateImpl
};
haxe.zip.Uncompress = function() { };
haxe.zip.Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe.zip.Uncompress.run = function(src,bufsize) {
	return haxe.zip.InflateImpl.run(new haxe.io.BytesInput(src),bufsize);
};
var js = {};
js.Boot = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.html = {};
js.html._CanvasElement = {};
js.html._CanvasElement.CanvasUtil = function() { };
js.html._CanvasElement.CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js.html._CanvasElement.CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
luxe.Audio = function(_core) {
	this.core = _core;
};
luxe.Audio.__name__ = ["luxe","Audio"];
luxe.Audio.prototype = {
	init: function() {
		null;
	}
	,destroy: function() {
		null;
	}
	,create: function(_id,_name,_streaming) {
		if(_streaming == null) _streaming = false;
		if(_name == null) _name = "";
		return this.core.app.audio.create(_id,_name,_streaming);
	}
	,create_from_bytes: function(_name,_bytes,_format) {
		if(_name == null) _name = "";
		return this.core.app.audio.create_from_bytes(_name,_bytes,_format);
	}
	,uncreate: function(_name) {
		return this.core.app.audio.uncreate(_name);
	}
	,add: function(sound) {
		return this.core.app.audio.add(sound);
	}
	,on: function(_name,_event,_handler) {
		return this.core.app.audio.on(_name,_event,_handler);
	}
	,off: function(_name,_event,_handler) {
		return this.core.app.audio.off(_name,_event,_handler);
	}
	,get: function(_name) {
		return this.core.app.audio.get(_name);
	}
	,exists: function(_name) {
		return this.get(_name) != null;
	}
	,on_complete: function(_name,handler) {
	}
	,loop: function(_name) {
		return this.core.app.audio.loop(_name);
	}
	,stop: function(_name) {
		return this.core.app.audio.stop(_name);
	}
	,play: function(_name) {
		return this.core.app.audio.play(_name);
	}
	,pause: function(_name) {
		return this.core.app.audio.pause(_name);
	}
	,toggle: function(_name) {
		return this.core.app.audio.toggle(_name);
	}
	,volume: function(_name,_volume) {
		return this.core.app.audio.volume(_name,_volume);
	}
	,pan: function(_name,_pan) {
		return this.core.app.audio.pan(_name,_pan);
	}
	,pitch: function(_name,_pitch) {
		return this.core.app.audio.pitch(_name,_pitch);
	}
	,position: function(_name,_position) {
		return this.core.app.audio.position(_name,_position);
	}
	,duration: function(_name) {
		return this.core.app.audio.duration(_name);
	}
	,process: function() {
	}
	,__class__: luxe.Audio
};
luxe.SizeMode = { __ename__ : true, __constructs__ : ["fit","cover","contain"] };
luxe.SizeMode.fit = ["fit",0];
luxe.SizeMode.fit.toString = $estr;
luxe.SizeMode.fit.__enum__ = luxe.SizeMode;
luxe.SizeMode.cover = ["cover",1];
luxe.SizeMode.cover.toString = $estr;
luxe.SizeMode.cover.__enum__ = luxe.SizeMode;
luxe.SizeMode.contain = ["contain",2];
luxe.SizeMode.contain.toString = $estr;
luxe.SizeMode.contain.__enum__ = luxe.SizeMode;
luxe.Objects = function(_name,_id) {
	if(_id == null) _id = "";
	if(_name == null) _name = "";
	this.name = "";
	this.id = "";
	luxe.Emitter.call(this);
	this.name = _name;
	if(_id == "") this.id = Luxe.utils.uniqueid(); else this.id = _id;
};
luxe.Objects.__name__ = ["luxe","Objects"];
luxe.Objects.__super__ = luxe.Emitter;
luxe.Objects.prototype = $extend(luxe.Emitter.prototype,{
	__class__: luxe.Objects
});
luxe.Entity = function(_options,_pos_info) {
	this.component_count = 0;
	this.active = true;
	this.fixed_rate = 0;
	this.started = false;
	this.inited = false;
	this.destroyed = false;
	luxe.Objects.call(this,"entity");
	this.name += "." + this.id;
	this.options = _options;
	this._components = new luxe.components.Components(this);
	this.children = new Array();
	this.events = new luxe.Events();
	if(this.options != null && this.options.transform != null) this.set_transform(this.options.transform); else this.set_transform(new phoenix.Transform());
	this.get_transform().listen_pos($bind(this,this.set_pos_from_transform));
	this.get_transform().listen_scale($bind(this,this.set_scale_from_transform));
	this.get_transform().listen_origin($bind(this,this.set_origin_from_transform));
	this.get_transform().listen_parent($bind(this,this.set_parent_from_transform));
	this.get_transform().listen_rotation($bind(this,this.set_rotation_from_transform));
	if(this.options != null) {
		if(this.options.name_unique == null) this.options.name_unique = false;
		if(this.options.name != null) {
			this.name = this.options.name;
			if(this.options.name_unique) this.name += "." + this.id;
		}
		if(this.options.pos != null) {
			var _op = this.options.pos;
			this.set_pos(new phoenix.Vector(_op.x,_op.y,_op.z,_op.w));
		}
		if(this.options.scale != null) {
			var _os = this.options.scale;
			this.set_scale(new phoenix.Vector(_os.x,_os.y,_os.z,_os.w));
		}
		var _should_add = true;
		if(this.options.no_scene != null) {
			if(this.options.no_scene == true) {
				_should_add = false;
				null;
			}
		}
		if(this.options.parent != null) {
			_should_add = false;
			this.set_parent(this.options.parent);
			null;
		}
		if(_should_add) {
			if(this.options.scene != null) {
				this.set_scene(this.options.scene);
				null;
			} else {
				this.set_scene(Luxe.scene);
				null;
			}
		}
	} else {
		this.set_scene(Luxe.scene);
		null;
	}
	if(this.get_scene() != null) this.get_scene().add(this,_pos_info); else null;
	null;
};
luxe.Entity.__name__ = ["luxe","Entity"];
luxe.Entity.__super__ = luxe.Objects;
luxe.Entity.prototype = $extend(luxe.Objects.prototype,{
	init: function() {
	}
	,update: function(dt) {
	}
	,onfixedupdate: function(rate) {
	}
	,onreset: function() {
	}
	,ondestroy: function() {
	}
	,onkeyup: function(event) {
	}
	,onkeydown: function(event) {
	}
	,ontextinput: function(event) {
	}
	,oninputdown: function(name,event) {
	}
	,oninputup: function(name,event) {
	}
	,onmousedown: function(event) {
	}
	,onmouseup: function(event) {
	}
	,onmousemove: function(event) {
	}
	,onmousewheel: function(event) {
	}
	,ontouchdown: function(event) {
	}
	,ontouchup: function(event) {
	}
	,ontouchmove: function(event) {
	}
	,ongamepadup: function(event) {
	}
	,ongamepaddown: function(event) {
	}
	,ongamepadaxis: function(event) {
	}
	,ongamepaddevice: function(event) {
	}
	,onwindowmoved: function(event) {
	}
	,onwindowresized: function(event) {
	}
	,onwindowsized: function(event) {
	}
	,onwindowminimized: function(event) {
	}
	,onwindowrestored: function(event) {
	}
	,add: function(_component) {
		this.component_count++;
		return this._components.add(_component);
	}
	,remove: function(_name) {
		this.component_count--;
		return this._components.remove(_name);
	}
	,get: function(_name,_in_children) {
		if(_in_children == null) _in_children = false;
		return this._components.get(_name,_in_children);
	}
	,get_any: function(_name,_in_children,_first_only) {
		if(_first_only == null) _first_only = true;
		if(_in_children == null) _in_children = false;
		return this._components.get_any(_name,_in_children,_first_only);
	}
	,has: function(_name) {
		return this._components.has(_name);
	}
	,_init: function() {
		this.init();
		this.emit(2,null,{ fileName : "Entity.hx", lineNumber : 291, className : "luxe.Entity", methodName : "_init"});
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.init();
			}
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._init();
			}
		}
		this.inited = true;
	}
	,_reset: function(_) {
		this.onreset();
		this.emit(3,null,{ fileName : "Entity.hx", lineNumber : 321, className : "luxe.Entity", methodName : "_reset"});
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.onreset();
			}
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._reset(_);
				null;
			}
		}
		this._set_fixed_rate_timer(this.fixed_rate,{ fileName : "Entity.hx", lineNumber : 339, className : "luxe.Entity", methodName : "_reset"});
		this.started = true;
	}
	,destroy: function(_from_parent) {
		if(_from_parent == null) _from_parent = false;
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child.destroy(true);
			}
		}
		this.children = null;
		this.children = [];
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.onremoved();
				_component.ondestroy();
			}
		}
		this.emit(6,null,{ fileName : "Entity.hx", lineNumber : 372, className : "luxe.Entity", methodName : "destroy"});
		this.ondestroy();
		if(this.get_parent() != null && !_from_parent) this.get_parent()._remove_child(this);
		if(this.fixed_rate_timer != null) {
			this.fixed_rate_timer.stop();
			this.fixed_rate_timer = null;
		}
		this.destroyed = true;
		this.inited = false;
		this.started = false;
		if(this.get_scene() != null) this.get_scene().remove(this);
		if(this.events != null) {
			this.events.destroy();
			this.events = null;
		}
	}
	,_update: function(dt) {
		if(this.destroyed) return;
		if(!this.get_active() || !this.inited || !this.started) return;
		this.get_transform().clean_check();
		this.update(dt);
		if(this.events != null) this.events.process();
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.update(dt);
			}
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._update(dt);
			}
		}
	}
	,_fixed_update: function() {
		if(this.destroyed) return;
		if(!this.get_active() || !this.inited || !this.started) return;
		this.emit(5,null,{ fileName : "Entity.hx", lineNumber : 460, className : "luxe.Entity", methodName : "_fixed_update"});
		this.onfixedupdate(this.fixed_rate);
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.onfixedupdate(this.fixed_rate);
			}
		}
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				_child._fixed_update();
			}
		}
	}
	,_find_emit_source: function() {
		var source = null;
		if(this.get_scene() != null) source = this.get_scene(); else if(this.get_parent() != null) {
			var looking = true;
			while(looking) if(this.get_parent().get_scene() == null) {
				if(this.get_parent().get_parent() == null) {
					haxe.Log.trace("   i / entity / " + "entity has no parent or scene, currently no core events will reach it.",{ fileName : "Entity.hx", lineNumber : 498, className : "luxe.Entity", methodName : "_find_emit_source"});
					looking = false;
					break;
				} else {
				}
			} else {
				source = this.get_parent().get_scene();
				looking = false;
				break;
			}
		} else haxe.Log.trace("   i / entity / " + "entity has no parent or scene, currently no core events will reach it.",{ fileName : "Entity.hx", lineNumber : 517, className : "luxe.Entity", methodName : "_find_emit_source"});
		return source;
	}
	,_listen: function(_event,_handler,_self) {
		if(_self == null) _self = false;
		if(!_self) this.on(_event,_handler,{ fileName : "Entity.hx", lineNumber : 536, className : "luxe.Entity", methodName : "_listen"});
		var source = this._find_emit_source();
		if(source != null) switch(_event) {
		case 11:
			source.on(_event,$bind(this,this._keyup),{ fileName : "Entity.hx", lineNumber : 546, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 10:
			source.on(_event,$bind(this,this._keydown),{ fileName : "Entity.hx", lineNumber : 547, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 12:
			source.on(_event,$bind(this,this._textinput),{ fileName : "Entity.hx", lineNumber : 548, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 15:
			source.on(_event,$bind(this,this._mousedown),{ fileName : "Entity.hx", lineNumber : 550, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 16:
			source.on(_event,$bind(this,this._mouseup),{ fileName : "Entity.hx", lineNumber : 551, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 17:
			source.on(_event,$bind(this,this._mousemove),{ fileName : "Entity.hx", lineNumber : 552, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 18:
			source.on(_event,$bind(this,this._mousewheel),{ fileName : "Entity.hx", lineNumber : 553, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 19:
			source.on(_event,$bind(this,this._touchdown),{ fileName : "Entity.hx", lineNumber : 555, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 20:
			source.on(_event,$bind(this,this._touchup),{ fileName : "Entity.hx", lineNumber : 556, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 21:
			source.on(_event,$bind(this,this._touchmove),{ fileName : "Entity.hx", lineNumber : 557, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 14:
			source.on(_event,$bind(this,this._inputup),{ fileName : "Entity.hx", lineNumber : 559, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 13:
			source.on(_event,$bind(this,this._inputdown),{ fileName : "Entity.hx", lineNumber : 560, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 23:
			source.on(_event,$bind(this,this._gamepaddown),{ fileName : "Entity.hx", lineNumber : 562, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 24:
			source.on(_event,$bind(this,this._gamepadup),{ fileName : "Entity.hx", lineNumber : 563, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 22:
			source.on(_event,$bind(this,this._gamepadaxis),{ fileName : "Entity.hx", lineNumber : 564, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 25:
			source.on(_event,$bind(this,this._gamepaddevice),{ fileName : "Entity.hx", lineNumber : 565, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 27:
			source.on(_event,$bind(this,this._windowmoved),{ fileName : "Entity.hx", lineNumber : 567, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 28:
			source.on(_event,$bind(this,this._windowresized),{ fileName : "Entity.hx", lineNumber : 568, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 29:
			source.on(_event,$bind(this,this._windowsized),{ fileName : "Entity.hx", lineNumber : 569, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 30:
			source.on(_event,$bind(this,this._windowminimized),{ fileName : "Entity.hx", lineNumber : 570, className : "luxe.Entity", methodName : "_listen"});
			break;
		case 31:
			source.on(_event,$bind(this,this._windowrestored),{ fileName : "Entity.hx", lineNumber : 571, className : "luxe.Entity", methodName : "_listen"});
			break;
		}
	}
	,_unlisten: function(_event,_handler,_self) {
		if(_self == null) _self = false;
		var source = this._find_emit_source();
		if(!_self) this.off(_event,_handler,{ fileName : "Entity.hx", lineNumber : 585, className : "luxe.Entity", methodName : "_unlisten"});
		if(source != null) switch(_event) {
		case 11:
			source.off(_event,$bind(this,this._keyup),{ fileName : "Entity.hx", lineNumber : 591, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 10:
			source.off(_event,$bind(this,this._keydown),{ fileName : "Entity.hx", lineNumber : 592, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 12:
			source.off(_event,$bind(this,this._textinput),{ fileName : "Entity.hx", lineNumber : 593, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 15:
			source.off(_event,$bind(this,this._mousedown),{ fileName : "Entity.hx", lineNumber : 595, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 16:
			source.off(_event,$bind(this,this._mouseup),{ fileName : "Entity.hx", lineNumber : 596, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 17:
			source.off(_event,$bind(this,this._mousemove),{ fileName : "Entity.hx", lineNumber : 597, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 18:
			source.off(_event,$bind(this,this._mousewheel),{ fileName : "Entity.hx", lineNumber : 598, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 19:
			source.off(_event,$bind(this,this._touchdown),{ fileName : "Entity.hx", lineNumber : 600, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 20:
			source.off(_event,$bind(this,this._touchup),{ fileName : "Entity.hx", lineNumber : 601, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 21:
			source.off(_event,$bind(this,this._touchmove),{ fileName : "Entity.hx", lineNumber : 602, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 14:
			source.off(_event,$bind(this,this._inputup),{ fileName : "Entity.hx", lineNumber : 604, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 13:
			source.off(_event,$bind(this,this._inputdown),{ fileName : "Entity.hx", lineNumber : 605, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 23:
			source.off(_event,$bind(this,this._gamepaddown),{ fileName : "Entity.hx", lineNumber : 607, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 24:
			source.off(_event,$bind(this,this._gamepadup),{ fileName : "Entity.hx", lineNumber : 608, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 22:
			source.off(_event,$bind(this,this._gamepadaxis),{ fileName : "Entity.hx", lineNumber : 609, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 25:
			source.off(_event,$bind(this,this._gamepaddevice),{ fileName : "Entity.hx", lineNumber : 610, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 27:
			source.off(_event,$bind(this,this._windowmoved),{ fileName : "Entity.hx", lineNumber : 612, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 28:
			source.off(_event,$bind(this,this._windowresized),{ fileName : "Entity.hx", lineNumber : 613, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 29:
			source.off(_event,$bind(this,this._windowsized),{ fileName : "Entity.hx", lineNumber : 614, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 30:
			source.off(_event,$bind(this,this._windowminimized),{ fileName : "Entity.hx", lineNumber : 615, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		case 31:
			source.off(_event,$bind(this,this._windowrestored),{ fileName : "Entity.hx", lineNumber : 616, className : "luxe.Entity", methodName : "_unlisten"});
			break;
		}
	}
	,_detach_scene: function() {
		if(this.get_scene() != null) {
			this.get_scene().off(3,$bind(this,this._reset),{ fileName : "Entity.hx", lineNumber : 630, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(6,$bind(this,this.destroy),{ fileName : "Entity.hx", lineNumber : 631, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(11,$bind(this,this._keyup),{ fileName : "Entity.hx", lineNumber : 634, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(10,$bind(this,this._keydown),{ fileName : "Entity.hx", lineNumber : 635, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(12,$bind(this,this._textinput),{ fileName : "Entity.hx", lineNumber : 636, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(15,$bind(this,this._mousedown),{ fileName : "Entity.hx", lineNumber : 637, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(16,$bind(this,this._mouseup),{ fileName : "Entity.hx", lineNumber : 638, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(17,$bind(this,this._mousemove),{ fileName : "Entity.hx", lineNumber : 639, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(18,$bind(this,this._mousewheel),{ fileName : "Entity.hx", lineNumber : 640, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(19,$bind(this,this._touchdown),{ fileName : "Entity.hx", lineNumber : 641, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(20,$bind(this,this._touchup),{ fileName : "Entity.hx", lineNumber : 642, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(21,$bind(this,this._touchmove),{ fileName : "Entity.hx", lineNumber : 643, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(14,$bind(this,this._inputup),{ fileName : "Entity.hx", lineNumber : 644, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(13,$bind(this,this._inputdown),{ fileName : "Entity.hx", lineNumber : 645, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(23,$bind(this,this._gamepaddown),{ fileName : "Entity.hx", lineNumber : 646, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(24,$bind(this,this._gamepadup),{ fileName : "Entity.hx", lineNumber : 647, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(22,$bind(this,this._gamepadaxis),{ fileName : "Entity.hx", lineNumber : 648, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(25,$bind(this,this._gamepaddevice),{ fileName : "Entity.hx", lineNumber : 649, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(27,$bind(this,this._windowmoved),{ fileName : "Entity.hx", lineNumber : 650, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(28,$bind(this,this._windowresized),{ fileName : "Entity.hx", lineNumber : 651, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(29,$bind(this,this._windowsized),{ fileName : "Entity.hx", lineNumber : 652, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(30,$bind(this,this._windowminimized),{ fileName : "Entity.hx", lineNumber : 653, className : "luxe.Entity", methodName : "_detach_scene"});
			this.get_scene().off(31,$bind(this,this._windowrestored),{ fileName : "Entity.hx", lineNumber : 654, className : "luxe.Entity", methodName : "_detach_scene"});
		}
	}
	,_attach_scene: function() {
		if(this.get_scene() != null) {
			this.get_scene().on(3,$bind(this,this._reset),{ fileName : "Entity.hx", lineNumber : 663, className : "luxe.Entity", methodName : "_attach_scene"});
			this.get_scene().on(6,$bind(this,this.destroy),{ fileName : "Entity.hx", lineNumber : 664, className : "luxe.Entity", methodName : "_attach_scene"});
		}
	}
	,_keyup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onkeyup(_event);
		this.emit(11,_event,{ fileName : "Entity.hx", lineNumber : 680, className : "luxe.Entity", methodName : "_keyup"});
	}
	,_keydown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onkeydown(_event);
		this.emit(10,_event,{ fileName : "Entity.hx", lineNumber : 693, className : "luxe.Entity", methodName : "_keydown"});
	}
	,_textinput: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ontextinput(_event);
		this.emit(12,_event,{ fileName : "Entity.hx", lineNumber : 706, className : "luxe.Entity", methodName : "_textinput"});
	}
	,_mousedown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onmousedown(_event);
		this.emit(15,_event,{ fileName : "Entity.hx", lineNumber : 722, className : "luxe.Entity", methodName : "_mousedown"});
	}
	,_mouseup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onmouseup(_event);
		this.emit(16,_event,{ fileName : "Entity.hx", lineNumber : 736, className : "luxe.Entity", methodName : "_mouseup"});
	}
	,_mousewheel: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onmousewheel(_event);
		this.emit(18,_event,{ fileName : "Entity.hx", lineNumber : 749, className : "luxe.Entity", methodName : "_mousewheel"});
	}
	,_mousemove: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onmousemove(_event);
		this.emit(17,_event,{ fileName : "Entity.hx", lineNumber : 762, className : "luxe.Entity", methodName : "_mousemove"});
	}
	,_touchdown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ontouchdown(_event);
		this.emit(19,_event,{ fileName : "Entity.hx", lineNumber : 776, className : "luxe.Entity", methodName : "_touchdown"});
	}
	,_touchup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ontouchup(_event);
		this.emit(20,_event,{ fileName : "Entity.hx", lineNumber : 789, className : "luxe.Entity", methodName : "_touchup"});
	}
	,_touchmove: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ontouchmove(_event);
		this.emit(21,_event,{ fileName : "Entity.hx", lineNumber : 802, className : "luxe.Entity", methodName : "_touchmove"});
	}
	,_gamepadaxis: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ongamepadaxis(_event);
		this.emit(22,_event,{ fileName : "Entity.hx", lineNumber : 816, className : "luxe.Entity", methodName : "_gamepadaxis"});
	}
	,_gamepaddown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ongamepaddown(_event);
		this.emit(23,_event,{ fileName : "Entity.hx", lineNumber : 829, className : "luxe.Entity", methodName : "_gamepaddown"});
	}
	,_gamepadup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ongamepadup(_event);
		this.emit(24,_event,{ fileName : "Entity.hx", lineNumber : 842, className : "luxe.Entity", methodName : "_gamepadup"});
	}
	,_gamepaddevice: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.ongamepaddevice(_event);
		this.emit(25,_event,{ fileName : "Entity.hx", lineNumber : 855, className : "luxe.Entity", methodName : "_gamepaddevice"});
	}
	,_windowmoved: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onwindowmoved(_event);
		this.emit(27,_event,{ fileName : "Entity.hx", lineNumber : 870, className : "luxe.Entity", methodName : "_windowmoved"});
	}
	,_windowresized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onwindowresized(_event);
		this.emit(28,_event,{ fileName : "Entity.hx", lineNumber : 883, className : "luxe.Entity", methodName : "_windowresized"});
	}
	,_windowsized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onwindowsized(_event);
		this.emit(29,_event,{ fileName : "Entity.hx", lineNumber : 896, className : "luxe.Entity", methodName : "_windowsized"});
	}
	,_windowminimized: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onwindowminimized(_event);
		this.emit(30,_event,{ fileName : "Entity.hx", lineNumber : 909, className : "luxe.Entity", methodName : "_windowminimized"});
	}
	,_windowrestored: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.onwindowrestored(_event);
		this.emit(31,_event,{ fileName : "Entity.hx", lineNumber : 922, className : "luxe.Entity", methodName : "_windowrestored"});
	}
	,_inputdown: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.oninputdown(_event.name,_event.event);
		this.emit(13,_event,{ fileName : "Entity.hx", lineNumber : 937, className : "luxe.Entity", methodName : "_inputdown"});
	}
	,_inputup: function(_event) {
		if(!this.get_active() || !this.inited || !this.started) return;
		this.oninputup(_event.name,_event.event);
		this.emit(14,_event,{ fileName : "Entity.hx", lineNumber : 950, className : "luxe.Entity", methodName : "_inputup"});
	}
	,get_fixed_rate: function() {
		return this.fixed_rate;
	}
	,set_fixed_rate: function(_rate) {
		this.fixed_rate = _rate;
		if(this.started) {
			if(this.fixed_rate_timer != null) {
				this.fixed_rate_timer.stop();
				this.fixed_rate_timer = null;
			}
			if(_rate != 0 && this.get_parent() == null && !this.destroyed) {
				this.fixed_rate_timer = new snow.api.Timer(_rate);
				this.fixed_rate_timer.run = $bind(this,this._fixed_update);
			}
		}
		return this.fixed_rate;
	}
	,_stop_fixed_rate_timer: function() {
		if(this.fixed_rate_timer != null) {
			this.fixed_rate_timer.stop();
			this.fixed_rate_timer = null;
		}
	}
	,_set_fixed_rate_timer: function(_rate,_pos) {
		if(this.fixed_rate_timer != null) {
			this.fixed_rate_timer.stop();
			this.fixed_rate_timer = null;
		}
		if(_rate != 0 && this.get_parent() == null && !this.destroyed) {
			this.fixed_rate_timer = new snow.api.Timer(_rate);
			this.fixed_rate_timer.run = $bind(this,this._fixed_update);
		}
	}
	,get_components: function() {
		return this._components.components;
	}
	,_add_child: function(child) {
		this.children.push(child);
		if(child.get_scene() != null) {
			var removed = child.get_scene().remove(child);
		} else null;
	}
	,_remove_child: function(child) {
		HxOverrides.remove(this.children,child);
	}
	,set_pos_from_transform: function(_pos) {
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.entity_pos_change(_pos);
			}
		}
	}
	,set_rotation_from_transform: function(_rotation) {
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.entity_rotation_change(_rotation);
			}
		}
	}
	,set_scale_from_transform: function(_scale) {
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.entity_scale_change(_scale);
			}
		}
	}
	,set_origin_from_transform: function(_origin) {
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.entity_origin_change(_origin);
			}
		}
	}
	,set_parent_from_transform: function(_parent) {
		if(this.component_count > 0) {
			var _g_index = 0;
			var _g_map = this._components.components;
			while(_g_index < _g_map._keys.length) {
				var _component = _g_map.get(_g_map._keys[_g_index++]);
				_component.entity_parent_change(_parent);
			}
		}
	}
	,set_pos: function(_p) {
		return this.get_transform().set_pos(_p);
	}
	,get_pos: function() {
		return this.get_transform().get_pos();
	}
	,set_rotation: function(_r) {
		return this.get_transform().set_rotation(_r);
	}
	,get_rotation: function() {
		return this.get_transform().get_rotation();
	}
	,set_scale: function(_s) {
		return this.get_transform().set_scale(_s);
	}
	,get_scale: function() {
		return this.get_transform().get_scale();
	}
	,set_origin: function(_origin) {
		return this.get_transform().set_origin(_origin);
	}
	,get_origin: function() {
		return this.get_transform().get_origin();
	}
	,set_transform: function(_transform) {
		return this.transform = _transform;
	}
	,get_transform: function() {
		return this.transform;
	}
	,set_parent: function(other) {
		if(this.get_parent() != null) this.get_parent()._remove_child(this);
		this.parent = other;
		if(this.get_parent() != null) {
			this.get_parent()._add_child(this);
			this.get_transform().set_parent(this.get_parent().get_transform());
		} else this.get_transform().set_parent(null);
		return this.get_parent();
	}
	,get_parent: function() {
		return this.parent;
	}
	,set_scene: function(_scene) {
		this._detach_scene();
		this.scene = _scene;
		this._attach_scene();
		return this.get_scene();
	}
	,get_scene: function() {
		return this.scene;
	}
	,set_active: function(_active) {
		return this.active = _active;
	}
	,get_active: function() {
		return this.active;
	}
	,__class__: luxe.Entity
	,__properties__: {set_origin:"set_origin",get_origin:"get_origin",set_scale:"set_scale",get_scale:"get_scale",set_rotation:"set_rotation",get_rotation:"get_rotation",set_pos:"set_pos",get_pos:"get_pos",set_transform:"set_transform",get_transform:"get_transform",set_active:"set_active",get_active:"get_active",set_scene:"set_scene",get_scene:"get_scene",set_parent:"set_parent",get_parent:"get_parent",set_fixed_rate:"set_fixed_rate",get_fixed_rate:"get_fixed_rate",get_components:"get_components"}
});
luxe.Camera = function(options) {
	this._connected = false;
	this.minimum_shake = 0.1;
	this.shaking = false;
	this._size_factor = new phoenix.Vector();
	this._rotation_radian = new phoenix.Vector();
	this._rotation_cache = new phoenix.Quaternion();
	this.set_size_mode(luxe.SizeMode.fit);
	var _name = "untitled camera";
	if(options != null) {
		if(options.name != null) _name = options.name;
	} else options = { no_scene : false};
	if(options.view == null) this.view = new phoenix.Camera(options); else this.view = options.view;
	luxe.Entity.call(this,{ name : _name, no_scene : options.no_scene},{ fileName : "Camera.hx", lineNumber : 91, className : "luxe.Camera", methodName : "new"});
	this._final_pos = this.view.get_pos();
};
luxe.Camera.__name__ = ["luxe","Camera"];
luxe.Camera.__super__ = luxe.Entity;
luxe.Camera.prototype = $extend(luxe.Entity.prototype,{
	get_viewport: function() {
		return this.view.get_viewport();
	}
	,set_viewport: function(_v) {
		return this.view.set_viewport(_v);
	}
	,get_center: function() {
		return this.view.get_center();
	}
	,set_center: function(_c) {
		this.set_pos(new phoenix.Vector(_c.x - this.get_viewport().w / 2,_c.y - this.get_viewport().h / 2));
		return this.view.set_center(_c);
	}
	,get_minimum_zoom: function() {
		return this.view.minimum_zoom;
	}
	,set_minimum_zoom: function(_m) {
		return this.view.minimum_zoom = _m;
	}
	,get_zoom: function() {
		return this.view.zoom;
	}
	,set_zoom: function(_z) {
		this.view.set_zoom(_z);
		if(this.get_size() != null) {
			var _g = this.view.get_scale();
			_g.set_x(_g.x * (1 / this._size_factor.x));
			var _g1 = this.view.get_scale();
			_g1.set_y(_g1.y * (1 / this._size_factor.y));
		}
		return this.view.zoom;
	}
	,get_size: function() {
		return this.size;
	}
	,get_size_mode: function() {
		return this.size_mode;
	}
	,set_size_mode: function(_m) {
		if(this.get_size_mode() != null) {
			this.size_mode = _m;
			if(this.get_size() != null) this.set_size(this.get_size());
		}
		return this.size_mode = _m;
	}
	,_onwindowsized: function(_event) {
		if(this.get_size() != null) {
			this.set_viewport(new phoenix.Rectangle(this.get_viewport().x,this.get_viewport().y,_event.event.x,_event.event.y));
			this.set_size(this.get_size());
		}
	}
	,set_size: function(_size) {
		if(_size == null) {
			this.set_center(new phoenix.Vector(this.get_viewport().w / 2,this.get_viewport().h / 2));
			this.size = _size;
			this._size_factor.set_x(this._size_factor.set_y(1));
			this.set_zoom(this.get_zoom());
			this._connected = false;
			Luxe.off(29,$bind(this,this._onwindowsized));
			return this.get_size();
		}
		if(!this._connected) {
			Luxe.on(29,$bind(this,this._onwindowsized));
			this._connected = true;
		}
		var _ratio_x = this.get_viewport().w / _size.x;
		var _ratio_y = this.get_viewport().h / _size.y;
		var _shortest = Math.max(_ratio_x,_ratio_y);
		var _longest = Math.min(_ratio_x,_ratio_y);
		var _g = this.get_size_mode();
		switch(_g[1]) {
		case 0:
			_ratio_x = _ratio_y = _longest;
			break;
		case 1:
			_ratio_x = _ratio_y = _shortest;
			break;
		case 2:
			break;
		}
		this._size_factor.set_x(_ratio_x);
		this._size_factor.set_y(_ratio_y);
		this.view.get_scale().set_x(1 / (this._size_factor.x * this.get_zoom()));
		this.view.get_scale().set_y(1 / (this._size_factor.y * this.get_zoom()));
		this.set_center(new phoenix.Vector(_size.x / 2,_size.y / 2));
		return this.size = new phoenix.Vector(_size.x,_size.y,_size.z,_size.w);
	}
	,focus: function(_p,_t,oncomplete) {
		if(_t == null) _t = 0.6;
		var _g = this;
		luxe.tween.Actuate.tween(this.view.get_center(),_t,{ x : _p.x, y : _p.y},true).onComplete(oncomplete).ease(luxe.tween.easing.Quad.get_easeInOut()).onUpdate(function() {
			_g.get_transform().get_pos().set_xy(_g.view.get_pos().x,_g.view.get_pos().y);
		});
	}
	,screen_point_to_world: function(_vector) {
		return this.view.screen_point_to_world(_vector);
	}
	,world_point_to_screen: function(_vector,_viewport) {
		return this.view.world_point_to_screen(_vector,_viewport);
	}
	,set_pos_from_transform: function(_pos) {
		var vw = this.view.get_viewport().w;
		var vh = this.view.get_viewport().h;
		var hvw = vw / 2;
		var hvh = vh / 2;
		var _px = _pos.x;
		var _py = _pos.y;
		if(this.bounds != null) {
			if(_px < this.bounds.x) _px = this.bounds.x;
			if(_py < this.bounds.y) _py = this.bounds.y;
			if(_px + hvw > this.bounds.w - vw) _px = this.bounds.w - vw - hvw;
			if(_py + hvh > this.bounds.h - vh) _py = this.bounds.h - vh - hvh;
		}
		var prev = _pos.ignore_listeners;
		_pos.ignore_listeners = true;
		_pos.set_xy(_px,_py);
		_pos.ignore_listeners = prev;
		luxe.Entity.prototype.set_pos_from_transform.call(this,_pos);
		this.update_view_pos = _pos;
	}
	,set_rotation_from_transform: function(_rotation) {
		luxe.Entity.prototype.set_rotation_from_transform.call(this,_rotation);
		if(this.view != null) this.view.set_rotation(_rotation);
	}
	,set_scale_from_transform: function(_scale) {
		luxe.Entity.prototype.set_scale_from_transform.call(this,_scale);
		if(this.view != null) this.view.set_scale(_scale);
	}
	,shake: function(amount) {
		this.shake_amount = amount;
		this.shaking = true;
	}
	,update: function(dt) {
		if(this.shaking) {
			this._final_pos.set_xyz(this.get_transform().get_pos().x,this.get_transform().get_pos().y,this.get_transform().get_pos().z);
			this.shake_vector = Luxe.utils.geometry.random_point_in_unit_circle();
			var _g = this.shake_vector;
			_g.set_x(_g.x * this.shake_amount);
			var _g1 = this.shake_vector;
			_g1.set_y(_g1.y * this.shake_amount);
			var _g2 = this.shake_vector;
			_g2.set_z(_g2.z * this.shake_amount);
			this.shake_amount *= 0.9;
			if(this.shake_amount <= this.minimum_shake) {
				this.shake_amount = 0;
				this.shaking = false;
			}
			this._final_pos.set_xyz(this._final_pos.x + this.shake_vector.x,this._final_pos.y + this.shake_vector.y,this._final_pos.z + this.shake_vector.z);
			this.update_view_pos = this._final_pos;
		}
		if(this.update_view_pos != null && this.view != null) {
			this.view.set_pos(this.update_view_pos.clone());
			this.update_view_pos = null;
		}
	}
	,init: function() {
	}
	,ondestroy: function() {
		luxe.Entity.prototype.ondestroy.call(this);
	}
	,__class__: luxe.Camera
	,__properties__: $extend(luxe.Entity.prototype.__properties__,{set_size_mode:"set_size_mode",get_size_mode:"get_size_mode",set_size:"set_size",get_size:"get_size",set_minimum_zoom:"set_minimum_zoom",get_minimum_zoom:"get_minimum_zoom",set_zoom:"set_zoom",get_zoom:"get_zoom",set_center:"set_center",get_center:"get_center",set_viewport:"set_viewport",get_viewport:"get_viewport"})
});
luxe.ID = function(_name,_id) {
	if(_id == null) _id = "";
	if(_name == null) _name = "";
	this.name = "";
	this.name = _name;
	if(_id == "") this.id = Luxe.utils.uniqueid(); else this.id = _id;
};
luxe.ID.__name__ = ["luxe","ID"];
luxe.ID.prototype = {
	__class__: luxe.ID
};
luxe.Component = function(_options) {
	var _name = "";
	if(_options != null) {
		if(_options.name != null) _name = _options.name;
	}
	luxe.ID.call(this,_name == ""?Luxe.utils.uniqueid():_name);
};
luxe.Component.__name__ = ["luxe","Component"];
luxe.Component.__super__ = luxe.ID;
luxe.Component.prototype = $extend(luxe.ID.prototype,{
	init: function() {
	}
	,update: function(dt) {
	}
	,onadded: function() {
	}
	,onremoved: function() {
	}
	,onfixedupdate: function(rate) {
	}
	,onreset: function() {
	}
	,ondestroy: function() {
	}
	,onkeyup: function(event) {
	}
	,onkeydown: function(event) {
	}
	,ontextinput: function(event) {
	}
	,oninputdown: function(event) {
	}
	,oninputup: function(event) {
	}
	,onmousedown: function(event) {
	}
	,onmouseup: function(event) {
	}
	,onmousemove: function(event) {
	}
	,onmousewheel: function(event) {
	}
	,ontouchdown: function(event) {
	}
	,ontouchup: function(event) {
	}
	,ontouchmove: function(event) {
	}
	,ongamepadup: function(event) {
	}
	,ongamepaddown: function(event) {
	}
	,ongamepadaxis: function(event) {
	}
	,ongamepaddevice: function(event) {
	}
	,onwindowmoved: function(event) {
	}
	,onwindowresized: function(event) {
	}
	,onwindowsized: function(event) {
	}
	,onwindowminimized: function(event) {
	}
	,onwindowrestored: function(event) {
	}
	,add: function(component) {
		return this.get_entity().add(component);
	}
	,remove: function(_name) {
		return this.get_entity().remove(_name);
	}
	,get: function(_name,in_children) {
		if(in_children == null) in_children = false;
		return this.get_entity().get(_name,in_children);
	}
	,get_any: function(_name,in_children,first_only) {
		if(first_only == null) first_only = true;
		if(in_children == null) in_children = false;
		return this.get_entity().get_any(_name,in_children,first_only);
	}
	,has: function(_name) {
		return this.get_entity().has(_name);
	}
	,_detach_entity: function() {
		if(this.get_entity() != null) {
		}
	}
	,_attach_entity: function() {
		if(this.get_entity() != null) {
		}
	}
	,set_entity: function(_entity) {
		this._detach_entity();
		this.entity = _entity;
		this._attach_entity();
		return this.get_entity();
	}
	,get_entity: function() {
		return this.entity;
	}
	,set_pos: function(_p) {
		return this.get_entity().get_transform().set_pos(_p);
	}
	,get_pos: function() {
		return this.get_entity().get_transform().get_pos();
	}
	,set_rotation: function(_r) {
		return this.get_entity().get_transform().set_rotation(_r);
	}
	,get_rotation: function() {
		return this.get_entity().get_transform().get_rotation();
	}
	,set_scale: function(_s) {
		return this.get_entity().get_transform().set_scale(_s);
	}
	,get_scale: function() {
		return this.get_entity().get_transform().get_scale();
	}
	,set_origin: function(_o) {
		return this.get_entity().get_transform().set_origin(_o);
	}
	,get_origin: function() {
		return this.get_entity().get_transform().get_origin();
	}
	,set_transform: function(_o) {
		return this.get_entity().set_transform(_o);
	}
	,get_transform: function() {
		return this.get_entity().get_transform();
	}
	,entity_pos_change: function(_pos) {
	}
	,entity_scale_change: function(_scale) {
	}
	,entity_rotation_change: function(_rotation) {
	}
	,entity_origin_change: function(_origin) {
	}
	,entity_parent_change: function(_parent) {
	}
	,__class__: luxe.Component
	,__properties__: {set_origin:"set_origin",get_origin:"get_origin",set_scale:"set_scale",get_scale:"get_scale",set_rotation:"set_rotation",get_rotation:"get_rotation",set_pos:"set_pos",get_pos:"get_pos",set_entity:"set_entity",get_entity:"get_entity"}
});
var snow = {};
snow.App = function() {
	this.next_render = 0;
	this.next_tick = 0;
	this.alpha = 1.0;
	this.cur_frame_start = 0.0;
	this.current_time = 0;
	this.last_frame_start = 0.0;
	this.delta_sim = 0.0166666666666666664;
	this.delta_time = 0.0166666666666666664;
	this.max_frame_time = 0.25;
	this.update_rate = 0;
	this.render_rate = 0.0166666666666666664;
	this.fixed_delta = 0;
	this.timescale = 1;
};
snow.App.__name__ = ["snow","App"];
snow.App.prototype = {
	config: function(config) {
		return config;
	}
	,ready: function() {
	}
	,update: function(dt) {
	}
	,ondestroy: function() {
	}
	,onevent: function(event) {
	}
	,onkeydown: function(keycode,scancode,repeat,mod,timestamp,window_id) {
	}
	,onkeyup: function(keycode,scancode,repeat,mod,timestamp,window_id) {
	}
	,ontextinput: function(text,start,length,type,timestamp,window_id) {
	}
	,onmousedown: function(x,y,button,timestamp,window_id) {
	}
	,onmouseup: function(x,y,button,timestamp,window_id) {
	}
	,onmousewheel: function(x,y,timestamp,window_id) {
	}
	,onmousemove: function(x,y,xrel,yrel,timestamp,window_id) {
	}
	,ontouchdown: function(x,y,touch_id,timestamp) {
	}
	,ontouchup: function(x,y,touch_id,timestamp) {
	}
	,ontouchmove: function(x,y,dx,dy,touch_id,timestamp) {
	}
	,ongamepadaxis: function(gamepad,axis,value,timestamp) {
	}
	,ongamepaddown: function(gamepad,button,value,timestamp) {
	}
	,ongamepadup: function(gamepad,button,value,timestamp) {
	}
	,ongamepaddevice: function(gamepad,type,timestamp) {
	}
	,on_internal_init: function() {
		this.cur_frame_start = snow.Snow.core.timestamp();
		this.last_frame_start = this.cur_frame_start;
		this.current_time = 0;
		this.delta_time = 0.016;
	}
	,on_internal_update: function() {
		if(this.update_rate != 0) {
			if(this.next_tick < snow.Snow.core.timestamp()) this.next_tick = snow.Snow.core.timestamp() + this.update_rate; else return;
		}
		this.cur_frame_start = snow.Snow.core.timestamp();
		this.delta_time = this.cur_frame_start - this.last_frame_start;
		this.last_frame_start = this.cur_frame_start;
		if(this.delta_time > this.max_frame_time) this.delta_time = this.max_frame_time;
		var used_delta;
		if(this.fixed_delta == 0) used_delta = this.delta_time; else used_delta = this.fixed_delta;
		used_delta *= this.timescale;
		this.delta_sim = used_delta;
		this.current_time += used_delta;
		this.app.do_internal_update(used_delta);
	}
	,on_internal_render: function() {
		if(this.render_rate != 0) {
			if(this.next_render < snow.Snow.core.timestamp()) {
				this.app.render();
				this.next_render += this.render_rate;
			}
		}
	}
	,__class__: snow.App
};
luxe.Core = function(_game,_config) {
	this.inited = false;
	this.has_shutdown = false;
	this.shutting_down = false;
	this.headless = false;
	this.console_visible = false;
	snow.App.call(this);
	this.appconfig = _config;
	this.game = _game;
	this.game.app = this;
	this.emitter = new luxe.Emitter();
	Luxe.core = this;
	Luxe.utils = new luxe.utils.Utils(this);
};
luxe.Core.__name__ = ["luxe","Core"];
luxe.Core.__super__ = snow.App;
luxe.Core.prototype = $extend(snow.App.prototype,{
	ready: function() {
		var _g = this;
		Luxe.version = haxe.Resource.getString("version");
		Luxe.build = Luxe.version + haxe.Resource.getString("build");
		haxe.Log.trace("     i / luxe / " + ("version " + Luxe.build),{ fileName : "Core.hx", lineNumber : 112, className : "luxe.Core", methodName : "ready"});
		this.headless = this.app.window == null;
		if(!this.headless) {
			var _font_name = "default.png";
			var _font_image = snow.api.buffers._Uint8Array.Uint8Array_Impl_.fromBytes(haxe.Resource.getBytes(_font_name));
			var _font_load = snow.system.assets.AssetImage.load_from_bytes(this.app.assets,_font_name,_font_image);
			_font_load.then(function(asset) {
				_g.init(asset);
			}).error(function(error) {
				haxe.Log.trace("     i / luxe / " + "failed to load default font, things will probably not look right... $error",{ fileName : "Core.hx", lineNumber : 133, className : "luxe.Core", methodName : "ready"});
				_g.init(null);
			});
		} else this.init(null);
	}
	,ondestroy: function() {
		this.shutting_down = true;
		haxe.Log.trace("     i / luxe / " + "shutting down...",{ fileName : "Core.hx", lineNumber : 151, className : "luxe.Core", methodName : "ondestroy"});
		this.game.ondestroy();
		this.emitter.emit(6,null,{ fileName : "Core.hx", lineNumber : 157, className : "luxe.Core", methodName : "ondestroy"});
		if(this.renderer != null) this.renderer.destroy();
		this.physics.destroy();
		this.input.destroy();
		this.audio.destroy();
		this.timer.destroy();
		this.events.destroy();
		this.debug.destroy();
		this.emitter = null;
		this.input = null;
		this.audio = null;
		this.events = null;
		this.timer = null;
		this.debug = null;
		Luxe.utils = null;
		this.has_shutdown = true;
		haxe.Log.trace("     i / luxe / " + "goodbye.",{ fileName : "Core.hx", lineNumber : 183, className : "luxe.Core", methodName : "ondestroy"});
	}
	,init: function(asset) {
		Luxe.debug = this.debug = new luxe.Debug(this);
		Luxe.io = this.io = new luxe.IO(this);
		this.draw = new luxe.Draw(this);
		this.timer = new luxe.Timer(this);
		this.events = new luxe.Events();
		this.audio = new luxe.Audio(this);
		this.input = new luxe.Input(this);
		this.physics = new luxe.Physics(this);
		this.resources = new luxe.resource.Resources();
		Luxe.resources = this.resources;
		if(!this.headless) {
			this.app.window.onevent = $bind(this,this.window_event);
			this.renderer = new phoenix.Renderer(this,asset);
			Luxe.renderer = this.renderer;
		}
		var _window_w = 0;
		var _window_h = 0;
		if(this.app.window != null) {
			_window_w = this.app.window.width;
			_window_h = this.app.window.height;
		}
		this.screen = new luxe.Screen(this,_window_w,_window_h);
		this.debug.init();
		this.io.init();
		this.timer.init();
		this.audio.init();
		this.input.init();
		if(!this.headless) this.renderer.init();
		this.physics.init();
		Luxe.audio = this.audio;
		Luxe.draw = this.draw;
		Luxe.events = this.events;
		Luxe.timer = this.timer;
		Luxe.input = this.input;
		if(!this.headless) Luxe.camera = new luxe.Camera({ name : "default camera", view : this.renderer.camera});
		Luxe.physics = this.physics;
		this.scene = new luxe.Scene("default scene");
		Luxe.scene = this.scene;
		if(!this.headless) {
			this.scene.add(Luxe.camera,{ fileName : "Core.hx", lineNumber : 260, className : "luxe.Core", methodName : "init"});
			this.debug.create_debug_console();
		}
		if(this.app.window != null && !this.headless) {
			this.app.window.onrender = $bind(this,this.render);
			this.debug.start(luxe.Tag.update,50);
			this.debug.start(luxe.Tag.renderdt,50);
		}
		this.internal_ready();
	}
	,internal_ready: function() {
		this.game.ready();
		if(!this.shutting_down) {
			this.emitter.emit(2,null,{ fileName : "Core.hx", lineNumber : 294, className : "luxe.Core", methodName : "internal_ready"});
			this.inited = true;
			this.physics.reset();
			if(!this.app.snow_config.has_loop) this.shutdown();
		}
	}
	,shutdown: function() {
		this.shutting_down = true;
		snow.Snow.next(($_=this.app,$bind($_,$_.shutdown)));
	}
	,on: function(event,handler) {
		this.emitter.on(event,handler,{ fileName : "Core.hx", lineNumber : 321, className : "luxe.Core", methodName : "on"});
	}
	,off: function(event,handler) {
		return this.emitter.off(event,handler,{ fileName : "Core.hx", lineNumber : 325, className : "luxe.Core", methodName : "off"});
	}
	,emit: function(event,data) {
		return this.emitter.emit(event,data,{ fileName : "Core.hx", lineNumber : 329, className : "luxe.Core", methodName : "emit"});
	}
	,onevent: function(event) {
		if(!this.inited) return;
		this.game.onevent(event);
	}
	,update: function(dt) {
		if(this.has_shutdown) return;
		if(!this.inited) return;
		this.debug.end(luxe.Tag.update);
		this.debug.start(luxe.Tag.update);
		this.timer.process();
		this.input.process();
		this.audio.process();
		this.events.process();
		this.physics.process();
		this.debug.start(luxe.Tag.updates);
		this.emitter.emit(4,dt,{ fileName : "Core.hx", lineNumber : 378, className : "luxe.Core", methodName : "update"});
		this.debug.end(luxe.Tag.updates);
		this.debug.start(luxe.Tag.game_update);
		this.game.update(dt);
		this.debug.end(luxe.Tag.game_update);
		this.debug.process();
	}
	,window_event: function(_event) {
		if(this.shutting_down) return;
		if(!this.inited) return;
		this.emitter.emit(26,_event,{ fileName : "Core.hx", lineNumber : 398, className : "luxe.Core", methodName : "window_event"});
		var _g = _event.type;
		switch(_g) {
		case 5:
			this.emitter.emit(27,_event,{ fileName : "Core.hx", lineNumber : 403, className : "luxe.Core", methodName : "window_event"});
			this.game.onwindowmoved(_event);
			break;
		case 6:
			this.screen.internal_resized(_event.event.x,_event.event.y);
			this.renderer.internal_resized(_event.event.x,_event.event.y);
			this.emitter.emit(28,_event,{ fileName : "Core.hx", lineNumber : 410, className : "luxe.Core", methodName : "window_event"});
			this.game.onwindowresized(_event);
			break;
		case 7:
			this.screen.internal_resized(_event.event.x,_event.event.y);
			this.renderer.internal_resized(_event.event.x,_event.event.y);
			this.emitter.emit(29,_event,{ fileName : "Core.hx", lineNumber : 417, className : "luxe.Core", methodName : "window_event"});
			this.game.onwindowsized(_event);
			break;
		case 8:
			this.emitter.emit(30,_event,{ fileName : "Core.hx", lineNumber : 422, className : "luxe.Core", methodName : "window_event"});
			this.game.onwindowminimized(_event);
			break;
		case 10:
			this.emitter.emit(31,_event,{ fileName : "Core.hx", lineNumber : 427, className : "luxe.Core", methodName : "window_event"});
			this.game.onwindowrestored(_event);
			break;
		default:
		}
	}
	,render: function(window) {
		if(this.shutting_down) return;
		if(!this.inited) return;
		this.debug.end(luxe.Tag.renderdt);
		this.debug.start(luxe.Tag.renderdt);
		if(!this.headless) {
			this.debug.start(luxe.Tag.render);
			this.emitter.emit(7,null,{ fileName : "Core.hx", lineNumber : 449, className : "luxe.Core", methodName : "render"});
			this.game.onprerender();
			this.emitter.emit(8,null,{ fileName : "Core.hx", lineNumber : 452, className : "luxe.Core", methodName : "render"});
			this.game.onrender();
			this.renderer.process();
			this.emitter.emit(9,null,{ fileName : "Core.hx", lineNumber : 456, className : "luxe.Core", methodName : "render"});
			this.game.onpostrender();
			this.debug.end(luxe.Tag.render);
		}
	}
	,show_console: function(_show) {
		if(_show == null) _show = true;
		this.console_visible = _show;
		this.debug.show_console(this.console_visible);
	}
	,onkeydown: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(!this.inited) return;
		var event = { scancode : scancode, keycode : keycode, state : luxe.InteractState.down, mod : mod, repeat : repeat, timestamp : timestamp, window_id : window_id};
		if(!this.shutting_down) {
			this.input.check_named_keys(event,true);
			this.emitter.emit(10,event,{ fileName : "Core.hx", lineNumber : 492, className : "luxe.Core", methodName : "onkeydown"});
			this.game.onkeydown(event);
			if(scancode == snow.system.input.Scancodes.grave) this.show_console(!this.console_visible);
		}
	}
	,onkeyup: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(!this.inited) return;
		var event = { scancode : scancode, keycode : keycode, state : luxe.InteractState.up, mod : mod, repeat : repeat, timestamp : timestamp, window_id : window_id};
		if(!this.shutting_down) {
			this.input.check_named_keys(event);
			this.emitter.emit(11,event,{ fileName : "Core.hx", lineNumber : 522, className : "luxe.Core", methodName : "onkeyup"});
			this.game.onkeyup(event);
		}
	}
	,ontextinput: function(text,start,length,type,timestamp,window_id) {
		if(!this.inited) return;
		var _type = luxe.TextEventType.unknown;
		switch(type) {
		case 1:
			_type = luxe.TextEventType.edit;
			break;
		case 2:
			_type = luxe.TextEventType.input;
			break;
		default:
			return;
		}
		var event = { text : text, start : start, length : length, type : _type, timestamp : timestamp, window_id : window_id};
		if(!this.shutting_down) {
			this.emitter.emit(12,event,{ fileName : "Core.hx", lineNumber : 555, className : "luxe.Core", methodName : "ontextinput"});
			this.game.ontextinput(event);
		}
	}
	,oninputdown: function(name,event) {
		if(!this.inited) return;
		if(!this.shutting_down) {
			this.emitter.emit(13,{ name : name, event : event},{ fileName : "Core.hx", lineNumber : 571, className : "luxe.Core", methodName : "oninputdown"});
			this.game.oninputdown(name,event);
		}
	}
	,oninputup: function(name,event) {
		if(!this.inited) return;
		if(!this.shutting_down) {
			this.emitter.emit(14,{ name : name, event : event},{ fileName : "Core.hx", lineNumber : 585, className : "luxe.Core", methodName : "oninputup"});
			this.game.oninputup(name,event);
		}
	}
	,onmousedown: function(x,y,button,timestamp,window_id) {
		if(!this.inited) return;
		this.screen.cursor.set_internal(new phoenix.Vector(x,y));
		var event = { timestamp : timestamp, window_id : window_id, state : luxe.InteractState.down, button : button, x : x, y : y, xrel : x, yrel : y, pos : this.screen.cursor.get_pos()};
		if(!this.shutting_down) {
			this.input.check_named_mouse(event,true);
			this.emitter.emit(15,event,{ fileName : "Core.hx", lineNumber : 617, className : "luxe.Core", methodName : "onmousedown"});
			this.game.onmousedown(event);
		}
	}
	,onmouseup: function(x,y,button,timestamp,window_id) {
		if(!this.inited) return;
		this.screen.cursor.set_internal(new phoenix.Vector(x,y));
		var event = { timestamp : timestamp, window_id : window_id, state : luxe.InteractState.up, button : button, x : x, y : y, xrel : x, yrel : y, pos : this.screen.cursor.get_pos()};
		if(!this.shutting_down) {
			this.input.check_named_mouse(event);
			this.emitter.emit(16,event,{ fileName : "Core.hx", lineNumber : 646, className : "luxe.Core", methodName : "onmouseup"});
			this.game.onmouseup(event);
		}
	}
	,onmousemove: function(x,y,xrel,yrel,timestamp,window_id) {
		if(!this.inited) return;
		this.screen.cursor.set_internal(new phoenix.Vector(x,y));
		var event = { timestamp : timestamp, window_id : window_id, state : luxe.InteractState.move, button : 0, x : x, y : y, xrel : xrel, yrel : yrel, pos : this.screen.cursor.get_pos()};
		if(!this.shutting_down) {
			this.emitter.emit(17,event,{ fileName : "Core.hx", lineNumber : 674, className : "luxe.Core", methodName : "onmousemove"});
			this.game.onmousemove(event);
		}
	}
	,onmousewheel: function(x,y,timestamp,window_id) {
		if(!this.inited) return;
		var event = { timestamp : timestamp, window_id : window_id, state : luxe.InteractState.wheel, button : 0, x : x, y : y, xrel : x, yrel : y, pos : this.screen.cursor.get_pos()};
		if(!this.shutting_down) {
			this.input.check_named_mouse(event,false);
			this.emitter.emit(18,event,{ fileName : "Core.hx", lineNumber : 700, className : "luxe.Core", methodName : "onmousewheel"});
			this.game.onmousewheel(event);
		}
	}
	,ontouchdown: function(x,y,touch_id,timestamp) {
		if(!this.inited) return;
		this._touch_pos = new phoenix.Vector(x,y);
		var event = { state : luxe.InteractState.down, timestamp : timestamp, touch_id : touch_id, x : x, y : y, dx : x, dy : y, pos : this._touch_pos};
		if(!this.shutting_down) {
			this.emitter.emit(19,event,{ fileName : "Core.hx", lineNumber : 730, className : "luxe.Core", methodName : "ontouchdown"});
			this.game.ontouchdown(event);
			if(this.app.input.touch_count == 3) {
				if(this.console_visible) this.debug.switch_view();
			}
			if(this.app.input.touch_count == 4) this.show_console(!this.console_visible);
		}
	}
	,ontouchup: function(x,y,touch_id,timestamp) {
		if(!this.inited) return;
		this._touch_pos = new phoenix.Vector(x,y);
		var event = { state : luxe.InteractState.up, timestamp : timestamp, touch_id : touch_id, x : x, y : y, dx : x, dy : y, pos : this._touch_pos};
		if(!this.shutting_down) {
			this.emitter.emit(20,event,{ fileName : "Core.hx", lineNumber : 773, className : "luxe.Core", methodName : "ontouchup"});
			this.game.ontouchup(event);
		}
	}
	,ontouchmove: function(x,y,dx,dy,touch_id,timestamp) {
		if(!this.inited) return;
		this._touch_pos = new phoenix.Vector(x,y);
		var event = { state : luxe.InteractState.move, timestamp : timestamp, touch_id : touch_id, x : x, y : y, dx : dx, dy : dy, pos : this._touch_pos};
		if(!this.shutting_down) {
			this.emitter.emit(21,event,{ fileName : "Core.hx", lineNumber : 799, className : "luxe.Core", methodName : "ontouchmove"});
			this.game.ontouchmove(event);
		}
	}
	,ongamepadaxis: function(gamepad,axis,value,timestamp) {
		if(!this.inited) return;
		var event = { timestamp : timestamp, type : luxe.GamepadEventType.axis, state : luxe.InteractState.axis, gamepad : gamepad, button : -1, axis : axis, value : value};
		if(!this.shutting_down) {
			this.emitter.emit(22,event,{ fileName : "Core.hx", lineNumber : 824, className : "luxe.Core", methodName : "ongamepadaxis"});
			this.game.ongamepadaxis(event);
		}
	}
	,ongamepaddown: function(gamepad,button,value,timestamp) {
		if(!this.inited) return;
		var event = { timestamp : timestamp, type : luxe.GamepadEventType.button, state : luxe.InteractState.down, gamepad : gamepad, button : button, axis : -1, value : value};
		if(!this.shutting_down) {
			this.input.check_named_gamepad_buttons(event,true);
			this.emitter.emit(23,event,{ fileName : "Core.hx", lineNumber : 848, className : "luxe.Core", methodName : "ongamepaddown"});
			this.game.ongamepaddown(event);
		}
	}
	,ongamepadup: function(gamepad,button,value,timestamp) {
		if(!this.inited) return;
		var event = { timestamp : timestamp, type : luxe.GamepadEventType.button, state : luxe.InteractState.up, gamepad : gamepad, button : button, axis : -1, value : value};
		if(!this.shutting_down) {
			this.input.check_named_gamepad_buttons(event,false);
			this.emitter.emit(24,event,{ fileName : "Core.hx", lineNumber : 872, className : "luxe.Core", methodName : "ongamepadup"});
			this.game.ongamepadup(event);
		}
	}
	,ongamepaddevice: function(gamepad,type,timestamp) {
		if(!this.inited) return;
		var _event_type = luxe.GamepadEventType.unknown;
		switch(type) {
		case 1:
			_event_type = luxe.GamepadEventType.device_added;
			break;
		case 2:
			_event_type = luxe.GamepadEventType.device_removed;
			break;
		case 3:
			_event_type = luxe.GamepadEventType.device_remapped;
			break;
		default:
		}
		var event = { timestamp : timestamp, type : _event_type, state : luxe.InteractState.none, gamepad : gamepad, button : -1, axis : -1, value : 0};
		if(!this.shutting_down) this.game.ongamepaddevice(event);
	}
	,config: function(config) {
		config.window.width = this.appconfig.window.width;
		config.window.height = this.appconfig.window.height;
		config.window.fullscreen = this.appconfig.window.fullscreen;
		config.window.borderless = this.appconfig.window.borderless;
		config.window.resizable = this.appconfig.window.resizable;
		config.window.title = this.appconfig.window.title;
		return this.game.config(config);
	}
	,__class__: luxe.Core
});
luxe.Tag = function() { };
luxe.Tag.__name__ = ["luxe","Tag"];
luxe.Debug = function(_core) {
	this.last_cursor_grab = false;
	this.last_cursor_shown = true;
	this.profiling = false;
	this.profile_path = "profile.txt";
	this.started = false;
	this.last_view_index = 0;
	this.current_view_index = 0;
	this.dt_average_count = 0;
	this.dt_average_span = 60;
	this.dt_average_accum = 0;
	this.dt_average = 0;
	this.visible = false;
	this.core = _core;
};
luxe.Debug.__name__ = ["luxe","Debug"];
luxe.Debug.internal_trace = function(v,inf) {
	var _line = StringTools.rpad(inf.lineNumber == null?"null":"" + inf.lineNumber," ",4);
	console.log("" + inf.fileName + "::" + _line + " " + Std.string(v));
	if(luxe.Debug.shut_down) return;
	var $it0 = luxe.Debug.trace_callbacks.iterator();
	while( $it0.hasNext() ) {
		var _callback = $it0.next();
		_callback(v,inf);
	}
};
luxe.Debug.prototype = {
	init: function() {
		luxe.Debug.trace_callbacks = new haxe.ds.StringMap();
		luxe.Debug.views = [new luxe.debug.TraceDebugView(),new luxe.debug.StatsDebugView(),new luxe.debug.ProfilerDebugView()];
		this.current_view = luxe.Debug.views[0];
		haxe.Log.trace = luxe.Debug.internal_trace;
		null;
	}
	,start: function(_name,_max) {
		if(_max == null) _max = 0.0;
		if(!this.core.headless) luxe.debug.ProfilerDebugView.start(_name,_max);
	}
	,end: function(_name) {
		if(!this.core.headless) luxe.debug.ProfilerDebugView.end(_name);
	}
	,remove_trace_listener: function(_name) {
		luxe.Debug.trace_callbacks.remove(_name);
	}
	,add_trace_listener: function(_name,_callback) {
		luxe.Debug.trace_callbacks.set(_name,_callback);
	}
	,create_debug_console: function() {
		var _g = this;
		this.core.on(11,$bind(this,this.keyup));
		this.core.on(10,$bind(this,this.keydown));
		this.core.on(16,$bind(this,this.mouseup));
		this.core.on(15,$bind(this,this.mousedown));
		this.core.on(17,$bind(this,this.mousemove));
		this.core.on(18,$bind(this,this.mousewheel));
		this.batcher = new phoenix.Batcher(Luxe.renderer,"debug_batcher");
		this.view = new phoenix.Camera();
		this.batcher.view = this.view;
		this.batcher.set_layer(999);
		Luxe.renderer.add_batch(this.batcher);
		this.overlay = new phoenix.geometry.QuadGeometry({ x : 0, y : 0, w : Luxe.core.screen.w, h : Luxe.core.screen.h, color : new phoenix.Color(0,0,0,0.8), depth : 999, group : 999, visible : false, batcher : this.batcher});
		this.padding = new phoenix.Vector(Luxe.core.screen.w * 0.05,Luxe.core.screen.h * 0.05);
		this.debug_inspector = new luxe.debug.Inspector({ title : "luxe debug", pos : new phoenix.Vector(this.padding.x,this.padding.y), size : new phoenix.Vector(Luxe.core.screen.w - this.padding.x * 2,Luxe.core.screen.h - this.padding.y * 2), batcher : this.batcher});
		this.debug_inspector.onrefresh = $bind(this,this.refresh);
		this.core.on(29,function(_event) {
			var _w = _event.event.x;
			var _h = _event.event.y;
			var _v = new phoenix.Vector(_w,_h);
			_g.padding.set_xy(_w * 0.05,_h * 0.05);
			_g.overlay.resize(_v);
			_g.view.set_viewport(new phoenix.Rectangle(0,0,_w,_h));
			_g.debug_inspector.set_size(new phoenix.Vector(_w - _g.padding.x * 2,_h - _g.padding.y * 2));
			_g.debug_inspector.set_pos(new phoenix.Vector(_g.padding.x,_g.padding.y));
			var _g1 = 0;
			var _g2 = luxe.Debug.views;
			while(_g1 < _g2.length) {
				var view = _g2[_g1];
				++_g1;
				view.onwindowsized(_event);
			}
		});
		this.batcher.enabled = false;
		var _g3 = 0;
		var _g11 = luxe.Debug.views;
		while(_g3 < _g11.length) {
			var view1 = _g11[_g3];
			++_g3;
			view1.create();
		}
	}
	,mouseup: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onmouseup(e);
			}
		}
	}
	,mousedown: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onmousedown(e);
			}
		}
	}
	,mousewheel: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onmousewheel(e);
			}
		}
	}
	,mousemove: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onmousemove(e);
			}
		}
	}
	,keyup: function(e) {
		if(this.visible) {
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onkeyup(e);
			}
		}
	}
	,keydown: function(e) {
		if(this.visible) {
			if(e.keycode == snow.system.input.Keycodes.key_1 && this.core.console_visible) this.switch_view();
			var _g = 0;
			var _g1 = luxe.Debug.views;
			while(_g < _g1.length) {
				var view = _g1[_g];
				++_g;
				view.onkeydown(e);
			}
		}
	}
	,refresh: function() {
		this.current_view.refresh();
	}
	,switch_view: function() {
		this.last_view_index = this.current_view_index;
		this.current_view_index++;
		if(this.current_view_index > luxe.Debug.views.length - 1) this.current_view_index = 0;
		luxe.Debug.views[this.last_view_index].hide();
		this.current_view = luxe.Debug.views[this.current_view_index];
		this.current_view.show();
	}
	,show_console: function(_show) {
		if(_show == null) _show = true;
		if(_show) {
			this.last_cursor_shown = Luxe.core.screen.cursor.get_visible();
			this.last_cursor_grab = Luxe.core.screen.cursor.get_grab();
			Luxe.core.screen.cursor.set_visible(true);
			Luxe.core.screen.cursor.set_grab(false);
		} else {
			if(this.last_cursor_shown != true) Luxe.core.screen.cursor.set_visible(this.last_cursor_shown);
			if(this.last_cursor_grab != false) Luxe.core.screen.cursor.set_grab(this.last_cursor_grab);
		}
		this.visible = _show;
		this.batcher.enabled = _show;
		if(_show) {
			this.current_view.show();
			this.overlay.set_visible(true);
			this.debug_inspector.show();
		} else {
			this.current_view.hide();
			this.debug_inspector.hide();
			this.overlay.set_visible(false);
		}
	}
	,destroy: function() {
		this.core.off(11,$bind(this,this.keyup));
		this.core.off(10,$bind(this,this.keydown));
		this.core.off(16,$bind(this,this.mouseup));
		this.core.off(15,$bind(this,this.mousedown));
		this.core.off(17,$bind(this,this.mousemove));
		this.core.off(18,$bind(this,this.mousewheel));
		luxe.Debug.shut_down = true;
	}
	,process: function() {
		this.dt_average_accum += Luxe.core.delta_time;
		this.dt_average_count++;
		if(this.dt_average_count == this.dt_average_span - 1) {
			this.dt_average = this.dt_average_accum / this.dt_average_span;
			this.dt_average_accum = this.dt_average;
			this.dt_average_count = 0;
		}
		if(!this.visible) return;
		this.debug_inspector._title_text.set_text("[ " + this.current_view.name + " ] " + luxe.utils.Maths.fixed(Luxe.core.delta_time,5) + " / " + luxe.utils.Maths.fixed(this.dt_average,5));
		var _g = 0;
		var _g1 = luxe.Debug.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.process();
		}
	}
	,__class__: luxe.Debug
};
luxe.Draw = function(_core) {
	this.core = _core;
};
luxe.Draw.__name__ = ["luxe","Draw"];
luxe.Draw.prototype = {
	line: function(options) {
		if(options.p0 == null) throw "draw.line requires p0:Vector, and p1:Vector";
		if(options.p1 == null) throw "draw.line requires p0:Vector, and p1:Vector";
		if(options.id == null) options.id = "line.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.LineGeometry(options);
	}
	,rectangle: function(options) {
		if(options.id == null) options.id = "rectangle.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.RectangleGeometry(options);
	}
	,box: function(options) {
		if(options.id == null) options.id = "quad.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.QuadGeometry(options);
	}
	,ring: function(options) {
		if(options.id == null) options.id = "ring.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.RingGeometry(options);
	}
	,circle: function(options) {
		if(options.id == null) options.id = "circle.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.CircleGeometry(options);
	}
	,arc: function(options) {
		if(options.id == null) options.id = "arc.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.ArcGeometry(options);
	}
	,ngon: function(options) {
		if(options.id == null) options.id = "ngon.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		var _sides = 3;
		var _radius = 64;
		var _solid = false;
		var _x = 0;
		var _y = 0;
		var _angle = 0;
		if(options.sides != null) _sides = options.sides;
		if(options.r != null) _radius = options.r;
		if(options.x != null) _x = options.x;
		if(options.y != null) _y = options.y;
		if(options.angle != null) _angle = options.angle;
		if(options.solid != null) _solid = options.solid;
		var _geometry = new phoenix.geometry.Geometry(options);
		if(!_solid) _geometry.set_primitive_type(1); else _geometry.set_primitive_type(6);
		var _two_pi = 2 * Math.PI;
		var _sides_over_pi = Math.PI / _sides;
		var _sides_over_twopi = _two_pi / _sides;
		var _angle_rad = _angle * 0.0174532925199432781;
		if(_solid) _geometry.add(new phoenix.geometry.Vertex(new phoenix.Vector(_x,_y),options.color));
		var _count;
		if(_solid == false) _count = _sides; else _count = _sides + 1;
		var _points = [];
		var _g = 0;
		while(_g < _count) {
			var i = _g++;
			var __x = _radius * Math.sin(_angle_rad + _sides_over_pi + i * _sides_over_twopi);
			var __y = _radius * Math.cos(_angle_rad + _sides_over_pi + i * _sides_over_twopi);
			var __pos = new phoenix.Vector(_x + __x,_y + __y,0);
			_geometry.add(new phoenix.geometry.Vertex(__pos,options.color));
			if(!_solid) {
				if(i > 0) {
					var _last = _points[i - 1];
					_geometry.add(new phoenix.geometry.Vertex(__pos,options.color));
				}
			}
			_points.push(__pos);
		}
		if(!_solid) _geometry.add(new phoenix.geometry.Vertex(_points[0],options.color));
		return _geometry;
	}
	,texture: function(options) {
		if(options.id == null) options.id = "texture.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		var _x = 0;
		var _y = 0;
		var _w = 0;
		var _h = 0;
		var _tw = 64;
		var _th = 64;
		if(options.texture != null) {
			_tw = options.texture.width;
			_th = options.texture.height;
			if(options.size == null) {
				_w = _tw;
				_h = _th;
			}
		}
		if(options.pos != null) {
			_x = options.pos.x;
			_y = options.pos.y;
		}
		if(options.size != null) {
			_w = options.size.x;
			_h = options.size.y;
		}
		if(options.x == null) options.x = _x;
		if(options.y == null) options.y = _y;
		if(options.w == null) options.w = _w;
		if(options.h == null) options.h = _h;
		var _quad = new phoenix.geometry.QuadGeometry(options);
		var _ux = 0;
		var _uy = 0;
		var _uw = _tw;
		var _uh = _th;
		if(options.uv != null) {
			_ux = options.uv.x;
			_uy = options.uv.y;
			_uw = options.uv.w;
			_uh = options.uv.h;
		}
		_quad.uv(new phoenix.Rectangle(_ux,_uy,_uw,_uh));
		return _quad;
	}
	,text: function(options) {
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.TextGeometry(options);
	}
	,plane: function(options) {
		if(options.id == null) options.id = "plane.geometry";
		if(options.batcher == null) options.batcher = Luxe.renderer.batcher;
		return new phoenix.geometry.PlaneGeometry(options);
	}
	,__class__: luxe.Draw
};
luxe.Events = function() {
	this.event_connections = new haxe.ds.StringMap();
	this.event_slots = new haxe.ds.StringMap();
	this.event_filters = new haxe.ds.StringMap();
	this.event_queue = new haxe.ds.StringMap();
	this.event_schedules = new haxe.ds.StringMap();
};
luxe.Events.__name__ = ["luxe","Events"];
luxe.Events.prototype = {
	destroy: function() {
		this.clear();
	}
	,clear: function() {
		var $it0 = this.event_schedules.iterator();
		while( $it0.hasNext() ) {
			var schedule = $it0.next();
			schedule.stop();
			schedule = null;
		}
		var $it1 = this.event_connections.keys();
		while( $it1.hasNext() ) {
			var connection = $it1.next();
			this.event_connections.remove(connection);
		}
		var $it2 = this.event_filters.keys();
		while( $it2.hasNext() ) {
			var filter = $it2.next();
			this.event_filters.remove(filter);
		}
		var $it3 = this.event_slots.keys();
		while( $it3.hasNext() ) {
			var slot = $it3.next();
			this.event_slots.remove(slot);
		}
		var $it4 = this.event_queue.keys();
		while( $it4.hasNext() ) {
			var event = $it4.next();
			this.event_queue.remove(event);
		}
	}
	,does_filter_event: function(_filter,_event) {
		var _replace_stars = new EReg("\\*","gi");
		var _final_filter = _replace_stars.replace(_filter,".*?");
		var _final_search = new EReg(_final_filter,"gi");
		return _final_search.match(_event);
	}
	,listen: function(_event_name,_listener) {
		var id = Luxe.utils.uniqueid();
		var connection = new luxe._Events.EventConnection(id,_event_name,_listener);
		this.event_connections.set(id,connection);
		var _has_stars = new EReg("\\*","gi");
		if(_has_stars.match(_event_name)) {
			if(!this.event_filters.exists(_event_name)) {
				var value = new Array();
				this.event_filters.set(_event_name,value);
			}
			this.event_filters.get(_event_name).push(connection);
		} else {
			if(!this.event_slots.exists(_event_name)) {
				var value1 = new Array();
				this.event_slots.set(_event_name,value1);
			}
			this.event_slots.get(_event_name).push(connection);
		}
		return id;
	}
	,disconnect: function(event_id) {
		if(this.event_connections.exists(event_id)) {
			var connection = this.event_connections.get(event_id);
			var event_slot = this.event_slots.get(connection.event_name);
			if(event_slot != null) {
				HxOverrides.remove(event_slot,connection);
				return true;
			} else {
				var event_filter = this.event_filters.get(connection.event_name);
				if(event_filter != null) {
					HxOverrides.remove(event_filter,connection);
					return true;
				} else return false;
			}
			return true;
		} else return false;
	}
	,queue: function(event_name,properties) {
		var id = Luxe.utils.uniqueid();
		var event = new luxe._Events.EventObject(id,event_name,properties);
		this.event_queue.set(id,event);
		return id;
	}
	,dequeue: function(event_id) {
		if(this.event_queue.exists(event_id)) {
			var event = this.event_queue.get(event_id);
			event = null;
			this.event_queue.remove(event_id);
			return true;
		}
		return false;
	}
	,process: function() {
		var $it0 = this.event_queue.iterator();
		while( $it0.hasNext() ) {
			var event = $it0.next();
			this.fire(event.name,event.properties);
		}
		if(this.event_queue.keys().hasNext()) {
			this.event_queue = null;
			this.event_queue = new haxe.ds.StringMap();
		}
	}
	,fire: function(_event_name,_properties) {
		var $it0 = this.event_filters.iterator();
		while( $it0.hasNext() ) {
			var _filter = $it0.next();
			if(_filter.length > 0) {
				var _filter_name = _filter[0].event_name;
				if(this.does_filter_event(_filter_name,_event_name)) {
					_properties = this.tag_properties(_properties,_event_name,_filter.length);
					var _g = 0;
					while(_g < _filter.length) {
						var _connection = _filter[_g];
						++_g;
						_connection.listener(_properties);
					}
				}
			}
		}
		if(this.event_slots.exists(_event_name)) {
			var connections = this.event_slots.get(_event_name);
			var _g1 = 0;
			while(_g1 < connections.length) {
				var connection = connections[_g1];
				++_g1;
				connection.listener(_properties);
			}
		} else return false;
		return false;
	}
	,schedule: function(time,event_name,properties) {
		var _g = this;
		var id = Luxe.utils.uniqueid();
		var _timer = Luxe.timer.schedule(time,function() {
			_g.fire(event_name,properties);
		});
		this.event_schedules.set(id,_timer);
		return id;
	}
	,unschedule: function(schedule_id) {
		if(this.event_schedules.exists(schedule_id)) {
			var timer = this.event_schedules.get(schedule_id);
			timer.stop();
			this.event_schedules.remove(schedule_id);
			return true;
		}
		return false;
	}
	,tag_properties: function(_properties,_name,_count) {
		if(_properties == null) _properties = { };
		_properties._event_name_ = _name;
		_properties._event_connection_count_ = _count;
		return _properties;
	}
	,__class__: luxe.Events
};
luxe._Events = {};
luxe._Events.EventConnection = function(_id,_event_name,_listener) {
	this.id = _id;
	this.listener = _listener;
	this.event_name = _event_name;
};
luxe._Events.EventConnection.__name__ = ["luxe","_Events","EventConnection"];
luxe._Events.EventConnection.prototype = {
	__class__: luxe._Events.EventConnection
};
luxe._Events.EventObject = function(_id,_event_name,_event_properties) {
	this.id = _id;
	this.name = _event_name;
	this.properties = _event_properties;
};
luxe._Events.EventObject.__name__ = ["luxe","_Events","EventObject"];
luxe._Events.EventObject.prototype = {
	__class__: luxe._Events.EventObject
};
luxe.IO = function(_core) {
	this.core = _core;
};
luxe.IO.__name__ = ["luxe","IO"];
luxe.IO.prototype = {
	url_open: function(_url) {
		this.core.app.io.module.url_open(_url);
	}
	,init: function() {
	}
	,__class__: luxe.IO
};
luxe._Input = {};
luxe._Input.MouseButton_Impl_ = function() { };
luxe._Input.MouseButton_Impl_.__name__ = ["luxe","_Input","MouseButton_Impl_"];
luxe.InteractState = { __ename__ : true, __constructs__ : ["unknown","none","down","up","move","wheel","axis"] };
luxe.InteractState.unknown = ["unknown",0];
luxe.InteractState.unknown.toString = $estr;
luxe.InteractState.unknown.__enum__ = luxe.InteractState;
luxe.InteractState.none = ["none",1];
luxe.InteractState.none.toString = $estr;
luxe.InteractState.none.__enum__ = luxe.InteractState;
luxe.InteractState.down = ["down",2];
luxe.InteractState.down.toString = $estr;
luxe.InteractState.down.__enum__ = luxe.InteractState;
luxe.InteractState.up = ["up",3];
luxe.InteractState.up.toString = $estr;
luxe.InteractState.up.__enum__ = luxe.InteractState;
luxe.InteractState.move = ["move",4];
luxe.InteractState.move.toString = $estr;
luxe.InteractState.move.__enum__ = luxe.InteractState;
luxe.InteractState.wheel = ["wheel",5];
luxe.InteractState.wheel.toString = $estr;
luxe.InteractState.wheel.__enum__ = luxe.InteractState;
luxe.InteractState.axis = ["axis",6];
luxe.InteractState.axis.toString = $estr;
luxe.InteractState.axis.__enum__ = luxe.InteractState;
luxe.TextEventType = { __ename__ : true, __constructs__ : ["unknown","edit","input"] };
luxe.TextEventType.unknown = ["unknown",0];
luxe.TextEventType.unknown.toString = $estr;
luxe.TextEventType.unknown.__enum__ = luxe.TextEventType;
luxe.TextEventType.edit = ["edit",1];
luxe.TextEventType.edit.toString = $estr;
luxe.TextEventType.edit.__enum__ = luxe.TextEventType;
luxe.TextEventType.input = ["input",2];
luxe.TextEventType.input.toString = $estr;
luxe.TextEventType.input.__enum__ = luxe.TextEventType;
luxe.GamepadEventType = { __ename__ : true, __constructs__ : ["unknown","axis","button","device_added","device_removed","device_remapped"] };
luxe.GamepadEventType.unknown = ["unknown",0];
luxe.GamepadEventType.unknown.toString = $estr;
luxe.GamepadEventType.unknown.__enum__ = luxe.GamepadEventType;
luxe.GamepadEventType.axis = ["axis",1];
luxe.GamepadEventType.axis.toString = $estr;
luxe.GamepadEventType.axis.__enum__ = luxe.GamepadEventType;
luxe.GamepadEventType.button = ["button",2];
luxe.GamepadEventType.button.toString = $estr;
luxe.GamepadEventType.button.__enum__ = luxe.GamepadEventType;
luxe.GamepadEventType.device_added = ["device_added",3];
luxe.GamepadEventType.device_added.toString = $estr;
luxe.GamepadEventType.device_added.__enum__ = luxe.GamepadEventType;
luxe.GamepadEventType.device_removed = ["device_removed",4];
luxe.GamepadEventType.device_removed.toString = $estr;
luxe.GamepadEventType.device_removed.__enum__ = luxe.GamepadEventType;
luxe.GamepadEventType.device_remapped = ["device_remapped",5];
luxe.GamepadEventType.device_remapped.toString = $estr;
luxe.GamepadEventType.device_remapped.__enum__ = luxe.GamepadEventType;
luxe.InputType = { __ename__ : true, __constructs__ : ["mouse","touch","keys","gamepad"] };
luxe.InputType.mouse = ["mouse",0];
luxe.InputType.mouse.toString = $estr;
luxe.InputType.mouse.__enum__ = luxe.InputType;
luxe.InputType.touch = ["touch",1];
luxe.InputType.touch.toString = $estr;
luxe.InputType.touch.__enum__ = luxe.InputType;
luxe.InputType.keys = ["keys",2];
luxe.InputType.keys.toString = $estr;
luxe.InputType.keys.__enum__ = luxe.InputType;
luxe.InputType.gamepad = ["gamepad",3];
luxe.InputType.gamepad.toString = $estr;
luxe.InputType.gamepad.__enum__ = luxe.InputType;
luxe.Input = function(_core) {
	this.core = _core;
};
luxe.Input.__name__ = ["luxe","Input"];
luxe.Input.prototype = {
	init: function() {
		this.key_bindings = new haxe.ds.StringMap();
		this.mouse_bindings = new haxe.ds.StringMap();
		this.gamepad_bindings = new haxe.ds.StringMap();
		this._named_input_down = new haxe.ds.StringMap();
		this._named_input_pressed = new haxe.ds.StringMap();
		this._named_input_released = new haxe.ds.StringMap();
		null;
	}
	,destroy: function() {
		null;
	}
	,process: function() {
		var $it0 = this._named_input_pressed.keys();
		while( $it0.hasNext() ) {
			var _event = $it0.next();
			if(this._named_input_pressed.get(_event)) this._named_input_pressed.remove(_event); else this._named_input_pressed.set(_event,true);
		}
		var $it1 = this._named_input_released.keys();
		while( $it1.hasNext() ) {
			var _event1 = $it1.next();
			if(this._named_input_released.get(_event1)) this._named_input_released.remove(_event1); else this._named_input_released.set(_event1,true);
		}
	}
	,inputpressed: function(_event) {
		return this._named_input_pressed.exists(_event);
	}
	,inputreleased: function(_event) {
		return this._named_input_released.exists(_event);
	}
	,inputdown: function(_event) {
		return this._named_input_down.exists(_event);
	}
	,keypressed: function(_code) {
		return this.core.app.input.keypressed(_code);
	}
	,keyreleased: function(_code) {
		return this.core.app.input.keyreleased(_code);
	}
	,keydown: function(_code) {
		return this.core.app.input.keydown(_code);
	}
	,scanpressed: function(_code) {
		return this.core.app.input.scanpressed(_code);
	}
	,scanreleased: function(_code) {
		return this.core.app.input.scanreleased(_code);
	}
	,scandown: function(_code) {
		return this.core.app.input.scandown(_code);
	}
	,mousepressed: function(_button) {
		return this.core.app.input.mousepressed(_button);
	}
	,mousereleased: function(_button) {
		return this.core.app.input.mousereleased(_button);
	}
	,mousedown: function(_button) {
		return this.core.app.input.mousedown(_button);
	}
	,gamepadpressed: function(_gamepad,_button) {
		return this.core.app.input.gamepadpressed(_gamepad,_button);
	}
	,gamepadreleased: function(_gamepad,_button) {
		return this.core.app.input.gamepadreleased(_gamepad,_button);
	}
	,gamepaddown: function(_gamepad,_button) {
		return this.core.app.input.gamepaddown(_gamepad,_button);
	}
	,gamepadaxis: function(_gamepad,_axis) {
		return this.core.app.input.gamepadaxis(_gamepad,_axis);
	}
	,bind_key: function(_name,_key) {
		if(!this.key_bindings.exists(_name)) {
			var value = new haxe.ds.IntMap();
			this.key_bindings.set(_name,value);
		}
		var kb = this.key_bindings.get(_name);
		kb.set(_key,true);
	}
	,bind_mouse: function(_name,_button) {
		if(!this.mouse_bindings.exists(_name)) {
			var value = new haxe.ds.IntMap();
			this.mouse_bindings.set(_name,value);
		}
		var mb = this.mouse_bindings.get(_name);
		mb.set(_button,true);
	}
	,bind_gamepad: function(_name,_gamepad_button,_gamepad_id) {
		if(!this.gamepad_bindings.exists(_name)) {
			var value = new haxe.ds.IntMap();
			this.gamepad_bindings.set(_name,value);
		}
		var gp = this.gamepad_bindings.get(_name);
		gp.set(_gamepad_button,_gamepad_id);
	}
	,check_named_keys: function(e,_down) {
		if(_down == null) _down = false;
		var _fired = [];
		var $it0 = this.key_bindings.keys();
		while( $it0.hasNext() ) {
			var _name = $it0.next();
			var _b = this.key_bindings.get(_name);
			var _is_down_repeat = _down && e.repeat;
			if(_b.exists(e.keycode) && !_is_down_repeat) {
				if(!Lambda.has(_fired,_name)) _fired.push(_name);
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				this._named_input_pressed.set(_f,false);
				this._named_input_down.set(_f,true);
				this.core.oninputdown(_f,{ name : _f, type : luxe.InputType.keys, state : luxe.InteractState.down, key_event : e});
			} else {
				this._named_input_released.set(_f,false);
				this._named_input_down.remove(_f);
				this.core.oninputup(_f,{ name : _f, type : luxe.InputType.keys, state : luxe.InteractState.up, key_event : e});
			}
		}
	}
	,check_named_mouse: function(e,_down) {
		if(_down == null) _down = false;
		var _fired = [];
		var $it0 = this.mouse_bindings.keys();
		while( $it0.hasNext() ) {
			var _name = $it0.next();
			var _b = this.mouse_bindings.get(_name);
			if(_b.exists(e.button)) {
				if(!Lambda.has(_fired,_name)) _fired.push(_name);
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				this._named_input_pressed.set(_f,false);
				this._named_input_down.set(_f,true);
				this.core.oninputdown(_f,{ name : _f, type : luxe.InputType.mouse, state : luxe.InteractState.down, mouse_event : e});
			} else {
				this._named_input_released.set(_f,false);
				this._named_input_down.remove(_f);
				this.core.oninputup(_f,{ name : _f, type : luxe.InputType.mouse, state : luxe.InteractState.up, mouse_event : e});
			}
		}
	}
	,check_named_gamepad_buttons: function(e,_down) {
		if(_down == null) _down = false;
		var _fired = [];
		var $it0 = this.gamepad_bindings.keys();
		while( $it0.hasNext() ) {
			var _name = $it0.next();
			var _b = this.gamepad_bindings.get(_name);
			if(_b.exists(e.button)) {
				var _kb = _b.get(e.button);
				var _accepted_gamepad = _kb == null || _kb == e.gamepad;
				if(!Lambda.has(_fired,_name) && _accepted_gamepad) _fired.push(_name);
			}
		}
		var _g = 0;
		while(_g < _fired.length) {
			var _f = _fired[_g];
			++_g;
			if(_down) {
				this._named_input_pressed.set(_f,false);
				this._named_input_down.set(_f,true);
				this.core.oninputdown(_f,{ name : _f, type : luxe.InputType.gamepad, state : luxe.InteractState.down, gamepad_event : e});
			} else {
				this._named_input_released.set(_f,false);
				this._named_input_down.remove(_f);
				this.core.oninputup(_f,{ name : _f, type : luxe.InputType.gamepad, state : luxe.InteractState.up, gamepad_event : e});
			}
		}
	}
	,__class__: luxe.Input
};
luxe._Log = {};
luxe._Log.LogError = { __ename__ : true, __constructs__ : ["RequireString"] };
luxe._Log.LogError.RequireString = function(detail) { var $x = ["RequireString",0,detail]; $x.__enum__ = luxe._Log.LogError; $x.toString = $estr; return $x; };
luxe.Log = function() { };
luxe.Log.__name__ = ["luxe","Log"];
luxe.Log._get_spacing = function(_file) {
	var _spaces = "";
	var _trace_length = _file.length + 4;
	var _diff = luxe.Log._log_width - _trace_length;
	if(_diff > 0) {
		var _g = 0;
		while(_g < _diff) {
			var i = _g++;
			_spaces += " ";
		}
	}
	return _spaces;
};
luxe.DebugError = { __ename__ : true, __constructs__ : ["assertion","null_assertion"] };
luxe.DebugError.assertion = function(expr) { var $x = ["assertion",0,expr]; $x.__enum__ = luxe.DebugError; $x.toString = $estr; return $x; };
luxe.DebugError.null_assertion = function(expr) { var $x = ["null_assertion",1,expr]; $x.__enum__ = luxe.DebugError; $x.toString = $estr; return $x; };
luxe.Visual = function(_options,_pos_info) {
	this.ignore_texture_on_geometry_change = false;
	this._creating_geometry = false;
	this._has_custom_origin = false;
	this.radians = 0.0;
	this.group = 0;
	this.depth = 0.0;
	this.visible = true;
	this.locked = false;
	var _g = this;
	if(_options == null) throw "Visual needs not-null options at the moment";
	this._rotation_euler = new phoenix.Vector();
	this._rotation_quat = new phoenix.Quaternion();
	luxe.Entity.call(this,_options,_pos_info);
	this.set_color(new phoenix.Color());
	this.set_size(new phoenix.Vector());
	if(this.options.texture != null) this.set_texture(this.options.texture);
	if(this.options.shader != null) this.set_shader(this.options.shader);
	if(this.options.color != null) this.set_color(this.options.color);
	if(this.options.depth != null) this.set_depth(this.options.depth);
	if(this.options.group != null) this.set_group(this.options.group);
	if(this.options.visible != null) this.set_visible(this.options.visible);
	if(this.options.size != null) {
		this.set_size(this.options.size);
		this._create_geometry();
	} else if(this.texture != null) {
		if(this.texture.loaded) {
			this.set_size(new phoenix.Vector(this.texture.width,this.texture.height));
			this._create_geometry();
		} else this.texture.set_onload(function(_texture) {
			_g.set_size(new phoenix.Vector(_texture.width,_texture.height));
			_g._create_geometry();
		});
	} else {
		this.set_size(new phoenix.Vector(64,64));
		this._create_geometry();
	}
};
luxe.Visual.__name__ = ["luxe","Visual"];
luxe.Visual.__super__ = luxe.Entity;
luxe.Visual.prototype = $extend(luxe.Entity.prototype,{
	_create_geometry: function() {
		if(this.options.geometry == null) {
			if(this.options.no_geometry == null || this.options.no_geometry == false) {
				this._creating_geometry = true;
				var _batcher = null;
				if(this.options.no_batcher_add == null || this.options.no_batcher_add == false) {
					if(this.options.batcher != null) _batcher = this.options.batcher; else _batcher = Luxe.renderer.batcher;
				}
				this.set_geometry(new phoenix.geometry.QuadGeometry({ id : this.name + ".visual", x : 0, y : 0, w : this.size.x, h : this.size.y, scale : new phoenix.Vector(1,1,1), texture : this.texture, color : this.color, shader : this.shader, batcher : _batcher, depth : this.options.depth == null?0:this.options.depth, group : this.options.group == null?0:this.options.group, visible : this.options.visible == null?this.visible:this.options.visible}));
				this._creating_geometry = false;
				this.on_geometry_created();
			}
		} else this.set_geometry(this.options.geometry);
		if(this.geometry != null) {
			this.geometry.id = this.name + ".visual";
			this.geometry.transform.id = this.name + ".visual.transform";
		}
		if(this.options.origin != null) {
			this._has_custom_origin = true;
			this.set_origin(this.options.origin);
		}
		if(this.options.rotation_z != null) this.set_rotation_z(this.options.rotation_z);
	}
	,ondestroy: function() {
		if(this.geometry != null && this.geometry.added) this.geometry.drop(true);
		this.set_geometry(null);
		this.set_texture(null);
	}
	,on_geometry_created: function() {
	}
	,set_visible: function(_v) {
		this.visible = _v;
		if(this.geometry != null) this.geometry.set_visible(this.visible);
		return this.visible;
	}
	,set_depth: function(_v) {
		if(this.geometry != null) this.geometry.set_depth(_v);
		return this.depth = _v;
	}
	,set_group: function(_v) {
		if(this.geometry != null) this.geometry.set_group(_v);
		return this.group = _v;
	}
	,set_color: function(_c) {
		if(this.color != null && this.geometry != null) this.geometry.set_color(_c);
		return this.color = _c;
	}
	,set_texture: function(_t) {
		if(this.geometry != null && this.geometry.get_texture() != _t) this.geometry.set_texture(_t);
		return this.texture = _t;
	}
	,set_shader: function(_s) {
		if(this.geometry != null && this.geometry.get_shader() != _s) this.geometry.set_shader(_s);
		return this.shader = _s;
	}
	,set_geometry: function(_g) {
		if(this.geometry == _g) return this.geometry;
		if(this.geometry != null) this.geometry.drop();
		this.geometry = _g;
		if(this.geometry != null) {
			this.geometry.transform.set_parent(this.get_transform());
			if(this._creating_geometry == false) {
				this.geometry.set_color(this.color);
				this.geometry.set_group(this.group);
				this.geometry.set_depth(this.depth);
				this.geometry.set_visible(this.visible);
				if(!this.ignore_texture_on_geometry_change) {
				}
			}
		}
		return this.geometry;
	}
	,set_parent_from_transform: function(_parent) {
		luxe.Entity.prototype.set_parent_from_transform.call(this,_parent);
		if(this.geometry != null) this.geometry.transform.set_parent(this.get_transform());
	}
	,set_rotation_from_transform: function(_rotation) {
		luxe.Entity.prototype.set_rotation_from_transform.call(this,_rotation);
		this._rotation_euler.setEulerFromQuaternion(_rotation,null);
		this._rotation_quat.copy(_rotation);
	}
	,set_size: function(_v) {
		this.size = _v;
		if(this.size != null) phoenix.Vector.Listen(this.size,$bind(this,this._size_change));
		return this.size;
	}
	,get_rotation_z: function() {
		return luxe.utils.Maths.degrees(this.get_radians());
	}
	,set_rotation_z: function(_degrees) {
		this.set_radians(_degrees * 0.0174532925199432781);
		return _degrees;
	}
	,set_radians: function(_r) {
		this._rotation_euler.set_z(_r);
		this._rotation_quat.setFromEuler(this._rotation_euler);
		this.set_rotation(this._rotation_quat.clone());
		return this.radians = _r;
	}
	,get_radians: function() {
		return this.radians;
	}
	,set_locked: function(_l) {
		if(this.geometry != null) this.geometry.set_locked(_l);
		return this.locked = _l;
	}
	,set_clip_rect: function(_val) {
		if(this.geometry != null) this.geometry.set_clip_rect(_val);
		return this.clip_rect = _val;
	}
	,_size_change: function(_v) {
		this.set_size(this.size);
	}
	,init: function() {
	}
	,__class__: luxe.Visual
	,__properties__: $extend(luxe.Entity.prototype.__properties__,{set_rotation_z:"set_rotation_z",get_rotation_z:"get_rotation_z",set_radians:"set_radians",get_radians:"get_radians",set_clip_rect:"set_clip_rect",set_group:"set_group",set_depth:"set_depth",set_visible:"set_visible",set_color:"set_color",set_shader:"set_shader",set_texture:"set_texture",set_locked:"set_locked",set_geometry:"set_geometry",set_size:"set_size"})
});
luxe.NineSlice = function(_options) {
	this.added = false;
	this.midheight = 0.0;
	this.midwidth = 0.0;
	this.is_set = false;
	this.source_h = 0.0;
	this.source_w = 0.0;
	this.source_y = 0.0;
	this.source_x = 0.0;
	this.height = 0.0;
	this.bottom = 32;
	this.width = 0.0;
	this.right = 32;
	this.left = 32;
	this.top = 32;
	this.slices = new Array();
	if(_options == null) _options = { no_geometry : true, no_scene : true}; else {
		_options.no_geometry = true;
		_options.no_scene = true;
	}
	this.nineslice_options = _options;
	if(_options.batcher != null) this._batcher = _options.batcher; else this._batcher = Luxe.renderer.batcher;
	luxe.Visual.call(this,_options,{ fileName : "NineSlice.hx", lineNumber : 77, className : "luxe.NineSlice", methodName : "new"});
	if(_options.top != null) this.top = _options.top;
	if(_options.left != null) this.left = _options.left;
	if(_options.right != null) this.right = _options.right;
	if(_options.bottom != null) this.bottom = _options.bottom;
	if(_options.source_x != null) this.source_x = _options.source_x;
	if(_options.source_y != null) this.source_y = _options.source_y;
	if(_options.source_w != null) this.source_w = _options.source_w; else this.source_w = this.texture.width;
	if(_options.source_h != null) this.source_h = _options.source_h; else this.source_h = this.texture.height;
	this.set_geometry(null);
};
luxe.NineSlice.__name__ = ["luxe","NineSlice"];
luxe.NineSlice.__super__ = luxe.Visual;
luxe.NineSlice.prototype = $extend(luxe.Visual.prototype,{
	lock: function() {
		if(this.is_set && this._geometry != null) this._geometry.set_locked(true);
	}
	,dirty: function() {
		if(this.is_set && this._geometry != null) this._geometry.set_dirty(true);
	}
	,update_size: function(_width,_height) {
		this.width = _width;
		this.height = _height;
		this.midwidth = Math.abs(this.width - this.left - this.right);
		this.midheight = Math.abs(this.height - this.top - this.bottom);
		this.slices[0].source_width = this.left;
		this.slices[0].source_height = this.top;
		this.slices[0].source_x = this.source_x;
		this.slices[0].source_y = this.source_y;
		this.slices[0].pos.set_xy(0,0);
		this.slices[0].width = this.left;
		this.slices[0].height = this.top;
		this.slices[1].source_width = this.source_w - this.left - this.right;
		this.slices[1].source_height = this.top;
		this.slices[1].source_x = this.source_x + this.left;
		this.slices[1].source_y = this.source_y;
		this.slices[1].pos.set_xy(this.left,0);
		this.slices[1].width = this.width - this.left - this.right;
		this.slices[1].height = this.top;
		this.slices[2].source_width = this.right;
		this.slices[2].source_height = this.top;
		this.slices[2].source_x = this.source_x + (this.source_w - this.right);
		this.slices[2].source_y = this.source_y;
		this.slices[2].pos.set_xy(this.left + this.midwidth,0);
		this.slices[2].width = this.right;
		this.slices[2].height = this.top;
		this.slices[3].source_width = this.left;
		this.slices[3].source_height = this.source_h - this.top - this.bottom;
		this.slices[3].source_x = this.source_x;
		this.slices[3].source_y = this.source_y + this.top;
		this.slices[3].pos.set_xy(0,this.top);
		this.slices[3].width = this.left;
		this.slices[3].height = this.height - this.top - this.bottom;
		this.slices[4].source_width = this.source_w - this.left - this.right;
		this.slices[4].source_height = this.source_h - this.top - this.bottom;
		this.slices[4].source_x = this.source_x + this.left;
		this.slices[4].source_y = this.source_y + this.top;
		this.slices[4].pos.set_xy(this.left,this.top);
		this.slices[4].width = this.width - this.left - this.right;
		this.slices[4].height = this.height - this.top - this.bottom;
		this.slices[5].source_width = this.right;
		this.slices[5].source_height = this.source_h - this.top - this.bottom;
		this.slices[5].source_x = this.source_x + (this.source_w - this.right);
		this.slices[5].source_y = this.source_y + this.top;
		this.slices[5].pos.set_xy(this.left + this.midwidth,this.top);
		this.slices[5].width = this.right;
		this.slices[5].height = this.height - this.top - this.bottom;
		this.slices[6].source_width = this.left;
		this.slices[6].source_height = this.bottom;
		this.slices[6].source_x = this.source_x;
		this.slices[6].source_y = this.source_y + (this.source_h - this.bottom);
		this.slices[6].pos.set_xy(0,this.top + this.midheight);
		this.slices[6].width = this.left;
		this.slices[6].height = this.bottom;
		this.slices[7].source_width = this.source_w - this.left - this.right;
		this.slices[7].source_height = this.bottom;
		this.slices[7].source_x = this.source_x + this.left;
		this.slices[7].source_y = this.source_y + (this.source_h - this.bottom);
		this.slices[7].pos.set_xy(this.left,this.top + this.midheight);
		this.slices[7].width = this.width - this.left - this.right;
		this.slices[7].height = this.bottom;
		this.slices[8].source_width = this.right;
		this.slices[8].source_height = this.bottom;
		this.slices[8].source_x = this.source_x + (this.source_w - this.right);
		this.slices[8].source_y = this.source_y + (this.source_h - this.bottom);
		this.slices[8].pos.set_xy(this.left + this.midwidth,this.top + this.midheight);
		this.slices[8].width = this.right;
		this.slices[8].height = this.bottom;
	}
	,set: function(_width,_height) {
		if(this.added) {
			this._geometry.drop();
			this.added = false;
		}
		this.slices.splice(0,this.slices.length);
		this.width = _width;
		this.height = _height;
		this.midwidth = Math.abs(this.width - this.left - this.right);
		this.midheight = Math.abs(this.height - this.top - this.bottom);
		this.slices.push({ source_width : this.left, source_height : this.top, source_x : this.source_x, source_y : this.source_y, pos : new phoenix.Vector(0,0), width : this.left, height : this.top, geometry_id : 0});
		this.slices.push({ source_width : this.source_w - this.left - this.right, source_height : this.top, source_x : this.source_x + this.left, source_y : this.source_y, pos : new phoenix.Vector(this.left,0), width : this.width - this.left - this.right, height : this.top, geometry_id : 0});
		this.slices.push({ source_width : this.right, source_height : this.top, source_x : this.source_x + (this.source_w - this.right), source_y : this.source_y, pos : new phoenix.Vector(this.left + this.midwidth,0), width : this.right, height : this.top, geometry_id : 0});
		this.slices.push({ source_width : this.left, source_height : this.source_h - this.top - this.bottom, source_x : this.source_x, source_y : this.source_y + this.top, pos : new phoenix.Vector(0,this.top), width : this.left, height : this.height - this.top - this.bottom, geometry_id : 0});
		this.slices.push({ source_width : this.source_w - this.left - this.right, source_height : this.source_h - this.top - this.bottom, source_x : this.source_x + this.left, source_y : this.source_y + this.top, pos : new phoenix.Vector(this.left,this.top), width : this.width - this.left - this.right, height : this.height - this.top - this.bottom, geometry_id : 0});
		this.slices.push({ source_width : this.right, source_height : this.source_h - this.top - this.bottom, source_x : this.source_x + (this.source_w - this.right), source_y : this.source_y + this.top, pos : new phoenix.Vector(this.left + this.midwidth,this.top), width : this.right, height : this.height - this.top - this.bottom, geometry_id : 0});
		this.slices.push({ source_width : this.left, source_height : this.bottom, source_x : this.source_x, source_y : this.source_y + (this.source_h - this.bottom), pos : new phoenix.Vector(0,this.top + this.midheight), width : this.left, height : this.bottom, geometry_id : 0});
		this.slices.push({ source_width : this.source_w - this.left - this.right, source_height : this.bottom, source_x : this.source_x + this.left, source_y : this.source_y + (this.source_h - this.bottom), pos : new phoenix.Vector(this.left,this.top + this.midheight), width : this.width - this.left - this.right, height : this.bottom, geometry_id : 0});
		this.slices.push({ source_width : this.right, source_height : this.bottom, source_x : this.source_x + (this.source_w - this.right), source_y : this.source_y + (this.source_h - this.bottom), pos : new phoenix.Vector(this.left + this.midwidth,this.top + this.midheight), width : this.right, height : this.bottom, geometry_id : 0});
		this.is_set = true;
	}
	,set_size: function(_v) {
		if(!this.is_set) return _v;
		this.update_size(_v.x,_v.y);
		var _g = 0;
		var _g1 = this.slices;
		while(_g < _g1.length) {
			var slice = _g1[_g];
			++_g;
			if(this._geometry != null) this._geometry.quad_resize(slice.geometry_id,new phoenix.Rectangle(slice.pos.x,slice.pos.y,slice.width,slice.height));
		}
		return _v;
	}
	,_create: function(_pos,_w,_h,_reset) {
		if(_reset == null) _reset = false;
		if(!this.is_set || _reset) this.set(_w,_h);
		var _color = new phoenix.Color();
		this._geometry = new phoenix.geometry.QuadPackGeometry({ texture : this.texture, color : _color, depth : this.nineslice_options.depth, group : this.nineslice_options.group, visible : this.nineslice_options.visible, batcher : this._batcher});
		var _g = 0;
		var _g1 = this.slices;
		while(_g < _g1.length) {
			var slice = _g1[_g];
			++_g;
			slice.geometry_id = this._geometry.quad_add({ x : slice.pos.x, y : slice.pos.y, w : slice.width, h : slice.height, color : this.nineslice_options.color, uv : new phoenix.Rectangle(slice.source_x,slice.source_y,slice.source_width,slice.source_height)});
		}
		this._geometry.id = "NineSlice" + this._geometry.id;
		this.set_geometry(this._geometry);
		this.set_pos(_pos);
		this.added = true;
		this.is_set = true;
	}
	,create: function(_pos,_w,_h,_reset) {
		if(_reset == null) _reset = false;
		var _g = this;
		if(!this.texture.loaded) this.texture.set_onload(function(texture) {
			_g._create(_pos,_w,_h,_reset);
		}); else this._create(_pos,_w,_h,_reset);
	}
	,init: function() {
	}
	,ondestroy: function() {
		luxe.Visual.prototype.ondestroy.call(this);
	}
	,__class__: luxe.NineSlice
});
luxe.resource = {};
luxe.resource.Resources = function() {
	this.resourcelist = new Array();
	this.textures = new haxe.ds.StringMap();
	this.render_textures = new haxe.ds.StringMap();
	this.fonts = new haxe.ds.StringMap();
	this.shaders = new haxe.ds.StringMap();
	this.sounds = new haxe.ds.StringMap();
	this.data = new haxe.ds.StringMap();
	this.text = new haxe.ds.StringMap();
	this.json = new haxe.ds.StringMap();
	this.stats = new luxe.resource.ResourceStats();
};
luxe.resource.Resources.__name__ = ["luxe","resource","Resources"];
luxe.resource.Resources.prototype = {
	add: function(res) {
		this.resourcelist.push(res);
		var _g = res.type;
		switch(_g) {
		case 4:
			this.stats.textures++;
			break;
		case 6:
			this.stats.render_textures++;
			break;
		case 7:
			this.stats.fonts++;
			break;
		case 8:
			this.stats.shaders++;
			break;
		case 5:
			this.stats.sounds++;
			break;
		case 1:
			this.stats.texts++;
			break;
		case 2:
			this.stats.jsons++;
			break;
		case 3:
			this.stats.datas++;
			break;
		case 0:
			this.stats.unknown++;
			break;
		}
		this.stats.resources++;
	}
	,remove: function(res) {
		HxOverrides.remove(this.resourcelist,res);
		this.uncache(res);
		var _g = res.type;
		switch(_g) {
		case 4:
			this.stats.textures--;
			break;
		case 6:
			this.stats.render_textures--;
			break;
		case 7:
			this.stats.fonts--;
			break;
		case 8:
			this.stats.shaders--;
			break;
		case 5:
			this.stats.sounds--;
			break;
		case 1:
			this.stats.texts--;
			break;
		case 2:
			this.stats.jsons--;
			break;
		case 3:
			this.stats.datas--;
			break;
		case 0:
			this.stats.unknown--;
			break;
		}
		this.stats.resources--;
	}
	,uncache: function(res) {
		var _g = res.type;
		switch(_g) {
		case 4:
			this.textures.remove(res.id);
			break;
		case 6:
			this.render_textures.remove(res.id);
			break;
		case 7:
			this.fonts.remove(res.id);
			break;
		case 8:
			this.shaders.remove(res.id);
			break;
		case 5:
			this.sounds.remove(res.id);
			break;
		case 3:
			this.data.remove(res.id);
			break;
		case 1:
			this.text.remove(res.id);
			break;
		case 2:
			this.json.remove(res.id);
			break;
		case 0:
			break;
		}
	}
	,cache: function(res) {
		var _g = res.type;
		switch(_g) {
		case 4:
			this.textures.set(res.id,res);
			break;
		case 6:
			this.render_textures.set(res.id,res);
			break;
		case 7:
			this.fonts.set(res.id,res);
			break;
		case 8:
			this.shaders.set(res.id,res);
			break;
		case 5:
			this.sounds.set(res.id,res);
			break;
		case 1:
			this.text.set(res.id,res);
			break;
		case 2:
			this.json.set(res.id,res);
			break;
		case 3:
			this.data.set(res.id,res);
			break;
		case 0:
			break;
		}
	}
	,find_render_texture: function(_name) {
		return this.render_textures.get(_name);
	}
	,find_texture: function(_name) {
		return this.textures.get(_name);
	}
	,find_shader: function(_name) {
		return this.shaders.get(_name);
	}
	,find_font: function(_name) {
		return this.fonts.get(_name);
	}
	,find_sound: function(_name) {
		return this.sounds.get(_name);
	}
	,find_text: function(_name) {
		return this.text.get(_name);
	}
	,find_json: function(_name) {
		return this.json.get(_name);
	}
	,find_data: function(_name) {
		return this.data.get(_name);
	}
	,clear: function(and_persistent) {
		if(and_persistent == null) and_persistent = false;
		var keep = [];
		var _g = 0;
		var _g1 = this.resourcelist;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(!res.persistent || and_persistent) res.drop(); else keep.push(res);
		}
		this.resourcelist.splice(0,this.resourcelist.length);
		this.resourcelist = new Array();
		this.stats.reset();
		var _g2 = 0;
		while(_g2 < keep.length) {
			var res1 = keep[_g2];
			++_g2;
			this.add(res1);
		}
		keep = null;
	}
	,find: function(id) {
		var _g = 0;
		var _g1 = this.resourcelist;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			if(resource.id == id) return resource;
		}
		return null;
	}
	,__class__: luxe.resource.Resources
};
luxe.Parcel = function(_options) {
	this.index_jsons = 0;
	this.index_texts = 0;
	this.index_datas = 0;
	this.index_sounds = 0;
	this.index_shaders = 0;
	this.index_fonts = 0;
	this.index_textures = 0;
	this.current_count = 0;
	this.total_items = 0;
	this.time_start_load = 0;
	this.time_to_load = 0;
	luxe.resource.Resources.call(this);
	if(_options != null) this.options = _options; else this.options = { };
	if(this.options.load_spacing == null) this.options.load_spacing = 0.1;
	if(this.options.start_spacing == null) this.options.start_spacing = 0.4;
	if(this.options.sequential == null) this.options.sequential = false;
	if(this.options.silent == null) this.options.silent = false;
	this.texture_list = [];
	this.font_list = [];
	this.shader_list = [];
	this.sound_list = [];
	this.text_list = [];
	this.json_list = [];
	this.data_list = [];
};
luxe.Parcel.__name__ = ["luxe","Parcel"];
luxe.Parcel.__super__ = luxe.resource.Resources;
luxe.Parcel.prototype = $extend(luxe.resource.Resources.prototype,{
	refresh_total_items: function() {
		this.total_items = this.texture_list.length + this.shader_list.length + this.font_list.length + this.sound_list.length + this.text_list.length + this.json_list.length + this.data_list.length;
	}
	,load: function() {
		var _g = this;
		this.time_start_load = snow.Snow.core.timestamp();
		this.current_count = 0;
		this.refresh_total_items();
		if(this.total_items == 0) {
			this.do_complete();
			return;
		}
		Luxe.timer.schedule(this.options.start_spacing,function() {
			if(!_g.options.silent) haxe.Log.trace("   i / parcel / " + "starting load",{ fileName : "Parcel.hx", lineNumber : 108, className : "luxe.Parcel", methodName : "load"});
			if(!_g.options.sequential) {
				_g.start_textures_load();
				_g.start_fonts_load();
				_g.start_shaders_load();
				_g.start_sounds_load();
				_g.start_texts_load();
				_g.start_jsons_load();
				_g.start_datas_load();
			} else _g.start_textures_load();
		});
	}
	,from_json: function(_json_object) {
		if(_json_object.textures != null) {
			var _textures = _json_object.textures;
			var _g = 0;
			while(_g < _textures.length) {
				var item = _textures[_g];
				++_g;
				if(item != null) {
					var id;
					if(item.id == null) id = ""; else id = item.id;
					if(id != "") this.add_texture(id); else haxe.Log.trace("   i / parcel / " + ("texture not added due to incomplete info: " + Std.string(item)),{ fileName : "Parcel.hx", lineNumber : 142, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		if(_json_object.shaders != null) {
			var _shaders = _json_object.shaders;
			var _g1 = 0;
			while(_g1 < _shaders.length) {
				var item1 = _shaders[_g1];
				++_g1;
				if(item1 != null) {
					var ps_id;
					if(item1.ps_id == null) ps_id = "default"; else ps_id = item1.ps_id;
					var vs_id;
					if(item1.vs_id == null) vs_id = "default"; else vs_id = item1.vs_id;
					this.add_shader(ps_id,vs_id);
				}
			}
		}
		if(_json_object.fonts != null) {
			var _fonts = _json_object.fonts;
			var _g2 = 0;
			while(_g2 < _fonts.length) {
				var item2 = _fonts[_g2];
				++_g2;
				if(item2 != null) {
					var id1;
					if(item2.id == null) id1 = ""; else id1 = item2.id;
					if(id1 != "") this.add_font(id1,item2.texture_path); else haxe.Log.trace("   i / parcel / " + ("font not added due to incomplete info: " + Std.string(item2)),{ fileName : "Parcel.hx", lineNumber : 169, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		if(_json_object.sounds != null) {
			var _sounds = _json_object.sounds;
			var _g3 = 0;
			while(_g3 < _sounds.length) {
				var item3 = _sounds[_g3];
				++_g3;
				if(item3 != null) {
					var id2;
					if(item3.id == null) id2 = ""; else id2 = item3.id;
					var name;
					if(item3.name == null) name = ""; else name = item3.name;
					var is_stream;
					if(item3.is_stream == null) is_stream = false; else is_stream = item3.is_stream;
					if(id2 != "" && name != "") this.add_sound(id2,name,is_stream); else haxe.Log.trace("   i / parcel / " + ("sounds not added due to incomplete info: " + Std.string(item3)),{ fileName : "Parcel.hx", lineNumber : 185, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		if(_json_object.text != null) {
			var _texts = _json_object.text;
			var _g4 = 0;
			while(_g4 < _texts.length) {
				var item4 = _texts[_g4];
				++_g4;
				if(item4 != null) {
					var id3;
					if(item4.id == null) id3 = ""; else id3 = item4.id;
					if(id3 != "") this.add_text(id3); else haxe.Log.trace("   i / parcel / " + ("text not added due to incomplete info: " + Std.string(item4)),{ fileName : "Parcel.hx", lineNumber : 199, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		if(_json_object.json != null) {
			var _jsons = _json_object.json;
			var _g5 = 0;
			while(_g5 < _jsons.length) {
				var item5 = _jsons[_g5];
				++_g5;
				if(item5 != null) {
					var id4;
					if(item5.id == null) id4 = ""; else id4 = item5.id;
					if(id4 != "") this.add_json(id4); else haxe.Log.trace("   i / parcel / " + ("json not added due to incomplete info: " + Std.string(item5)),{ fileName : "Parcel.hx", lineNumber : 213, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		if(_json_object.data != null) {
			var _datas = _json_object.data;
			var _g6 = 0;
			while(_g6 < _datas.length) {
				var item6 = _datas[_g6];
				++_g6;
				if(item6 != null) {
					var id5;
					if(item6.id == null) id5 = ""; else id5 = item6.id;
					if(id5 != "") this.add_data(id5); else haxe.Log.trace("   i / parcel / " + ("data not added due to incomplete info: " + Std.string(item6)),{ fileName : "Parcel.hx", lineNumber : 227, className : "luxe.Parcel", methodName : "from_json"});
				}
			}
		}
		this.refresh_total_items();
	}
	,start_textures_load: function() {
		if(this.texture_list.length > 0) {
			this.index_textures = 0;
			if(this.options.sequential) this.recursive_load_textures(null); else this.load_textures();
		} else if(this.options.sequential) this.start_fonts_load();
	}
	,start_fonts_load: function() {
		if(this.font_list.length > 0) {
			this.index_fonts = 0;
			if(this.options.sequential) this.recursive_load_fonts(null); else this.load_fonts();
		} else if(this.options.sequential) this.start_shaders_load();
	}
	,start_shaders_load: function() {
		if(this.shader_list.length > 0) {
			this.index_shaders = 0;
			if(this.options.sequential) this.recursive_load_shaders(null); else this.load_shaders();
		} else if(this.options.sequential) this.start_sounds_load();
	}
	,start_sounds_load: function() {
		if(this.sound_list.length > 0) {
			this.index_sounds = 0;
			if(this.options.sequential) this.recursive_load_sounds(null); else this.load_sounds();
		} else if(this.options.sequential) this.start_texts_load();
	}
	,start_texts_load: function() {
		if(this.text_list.length > 0) {
			this.index_texts = 0;
			if(this.options.sequential) this.recursive_load_texts(null); else this.load_texts();
		} else if(this.options.sequential) this.start_jsons_load();
	}
	,start_jsons_load: function() {
		if(this.json_list.length > 0) {
			this.index_jsons = 0;
			if(this.options.sequential) this.recursive_load_jsons(null); else this.load_jsons();
		} else if(this.options.sequential) this.start_datas_load();
	}
	,start_datas_load: function() {
		if(this.data_list.length > 0) {
			this.index_datas = 0;
			if(this.options.sequential) this.recursive_load_datas(null); else this.load_datas();
		} else {
		}
	}
	,load_textures: function() {
		var _g = 0;
		var _g1 = this.texture_list;
		while(_g < _g1.length) {
			var tex = _g1[_g];
			++_g;
			this.load_texture(tex,$bind(this,this.single_item_complete));
		}
	}
	,load_fonts: function() {
		var _g = 0;
		var _g1 = this.font_list;
		while(_g < _g1.length) {
			var fnt = _g1[_g];
			++_g;
			this.load_font(fnt,$bind(this,this.single_item_complete));
		}
	}
	,load_shaders: function() {
		var _g = 0;
		var _g1 = this.shader_list;
		while(_g < _g1.length) {
			var shader = _g1[_g];
			++_g;
			this.load_shader(shader,$bind(this,this.single_item_complete));
		}
	}
	,load_sounds: function() {
		var _g = 0;
		var _g1 = this.sound_list;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			this.load_sound(sound,$bind(this,this.single_item_complete));
		}
	}
	,load_datas: function() {
		var _g = 0;
		var _g1 = this.data_list;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			this.load_data(data,$bind(this,this.single_item_complete));
		}
	}
	,load_texts: function() {
		var _g = 0;
		var _g1 = this.text_list;
		while(_g < _g1.length) {
			var text = _g1[_g];
			++_g;
			this.load_text(text,$bind(this,this.single_item_complete));
		}
	}
	,load_jsons: function() {
		var _g = 0;
		var _g1 = this.json_list;
		while(_g < _g1.length) {
			var json = _g1[_g];
			++_g;
			this.load_json(json,$bind(this,this.single_item_complete));
		}
	}
	,recursive_load_textures: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_textures == this.texture_list.length && this.options.sequential) this.start_fonts_load();
		}
		if(this.index_textures < this.texture_list.length) {
			var current = this.index_textures;
			this.index_textures++;
			this.load_texture(this.texture_list[current],$bind(this,this.recursive_load_textures));
		}
	}
	,recursive_load_shaders: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_shaders == this.shader_list.length && this.options.sequential) this.start_sounds_load();
		}
		if(this.index_shaders < this.shader_list.length) {
			var current = this.index_shaders;
			this.index_shaders++;
			this.load_shader(this.shader_list[current],$bind(this,this.recursive_load_shaders));
		}
	}
	,recursive_load_fonts: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_fonts == this.font_list.length && this.options.sequential) this.start_shaders_load();
		}
		if(this.index_fonts < this.font_list.length) {
			var current = this.index_fonts;
			this.index_fonts++;
			this.load_font(this.font_list[current],$bind(this,this.recursive_load_fonts));
		}
	}
	,recursive_load_sounds: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_sounds == this.sound_list.length && this.options.sequential) this.start_texts_load();
		}
		if(this.index_sounds < this.sound_list.length) {
			var current = this.index_sounds;
			this.index_sounds++;
			this.load_sound(this.sound_list[current],$bind(this,this.recursive_load_sounds));
		}
	}
	,recursive_load_datas: function(item) {
		if(item != null) this.single_item_complete(item);
		if(this.index_datas < this.data_list.length) {
			var current = this.index_datas;
			this.index_datas++;
			this.load_data(this.data_list[current],$bind(this,this.recursive_load_datas));
		}
	}
	,recursive_load_texts: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_texts == this.text_list.length && this.options.sequential) this.start_jsons_load();
		}
		if(this.index_texts < this.text_list.length) {
			var current = this.index_texts;
			this.index_texts++;
			this.load_text(this.text_list[current],$bind(this,this.recursive_load_texts));
		}
	}
	,recursive_load_jsons: function(item) {
		if(item != null) {
			this.single_item_complete(item);
			if(this.index_jsons == this.json_list.length && this.options.sequential) this.start_datas_load();
		}
		if(this.index_jsons < this.json_list.length) {
			var current = this.index_jsons;
			this.index_jsons++;
			this.load_json(this.json_list[current],$bind(this,this.recursive_load_jsons));
		}
	}
	,add_texture: function(_id) {
		this.texture_list.push(_id);
	}
	,add_textures: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var texture = list[_g];
			++_g;
			this.texture_list.push(texture);
		}
	}
	,add_shader: function(ps_id,vs_id) {
		if(vs_id == null) vs_id = "default";
		if(ps_id == null) ps_id = "default";
		this.shader_list.push({ ps_id : ps_id, vs_id : vs_id});
	}
	,add_shaders: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var shader_info = list[_g];
			++_g;
			this.shader_list.push(shader_info);
		}
	}
	,add_font: function(_id,_texture_path) {
		this.font_list.push({ id : _id, texture_path : _texture_path});
	}
	,add_fonts: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var font_info = list[_g];
			++_g;
			this.font_list.push(font_info);
		}
	}
	,add_sound: function(_id,_name,_is_stream) {
		if(_is_stream == null) _is_stream = false;
		this.sound_list.push({ id : _id, name : _name, is_stream : _is_stream});
	}
	,add_sounds: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var sound_info = list[_g];
			++_g;
			this.sound_list.push(sound_info);
		}
	}
	,add_text: function(_id) {
		this.text_list.push({ id : _id});
	}
	,add_texts: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var text_info = list[_g];
			++_g;
			this.text_list.push(text_info);
		}
	}
	,add_json: function(_id) {
		this.json_list.push({ id : _id});
	}
	,add_jsons: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var json_info = list[_g];
			++_g;
			this.json_list.push(json_info);
		}
	}
	,add_data: function(_id) {
		this.data_list.push({ id : _id});
	}
	,add_datas: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var data = list[_g];
			++_g;
			this.data_list.push(data);
		}
	}
	,load_texture: function(_tex,_complete) {
		var _g = this;
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadTexture(_tex,_complete,_g.options.silent);
		});
	}
	,load_shader: function(_shader,_complete) {
		var _g = this;
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadShader(_shader.ps_id,_shader.vs_id,_complete,_g.options.silent);
		});
	}
	,load_font: function(_font,_complete) {
		var _g = this;
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadFont(_font.id,_font.texture_path,_complete,_g.options.silent);
		});
	}
	,load_data: function(_data_info,_complete) {
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadData(_data_info.id,_complete);
		});
	}
	,load_text: function(_text_info,_complete) {
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadText(_text_info.id,_complete);
		});
	}
	,load_json: function(_json_info,_complete) {
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadJSON(_json_info.id,_complete);
		});
	}
	,load_sound: function(_sound,_complete) {
		Luxe.timer.schedule(this.options.load_spacing,function() {
			Luxe.loadSound(_sound.name,_sound.id,_sound.is_stream,_complete);
		});
	}
	,do_complete: function() {
		this.time_to_load = snow.Snow.core.timestamp() - this.time_start_load;
		if(this.options.oncomplete != null) this.options.oncomplete(this);
	}
	,single_item_complete: function(item) {
		var _g = this;
		item.time_to_load = snow.Snow.core.timestamp() - item.time_created;
		this.current_count++;
		if(this.options.onprogress != null) this.options.onprogress(item);
		if(this.current_count >= this.total_items) Luxe.timer.schedule(0.1,function() {
			_g.do_complete();
		});
	}
	,__class__: luxe.Parcel
});
luxe.ParcelProgress = function(_options) {
	this.height = 0;
	this.width = 0;
	var _view_width = Luxe.core.screen.w;
	var _view_height = Luxe.core.screen.h;
	if(Luxe.camera.get_size() != null) {
		_view_width = Luxe.camera.get_size().x;
		_view_height = Luxe.camera.get_size().y;
	}
	var _view_mid_x = Math.floor(_view_width / 2);
	var _view_mid_y = Math.floor(_view_height / 2);
	this.options = _options;
	if(this.options.bar == null) this.options.bar = new phoenix.Color().rgb(3421236);
	if(this.options.bar_border == null) this.options.bar_border = new phoenix.Color().rgb(1447446);
	if(this.options.background == null) this.options.background = new phoenix.Color().rgb(592137);
	if(this.options.fade_in == null) this.options.fade_in = true;
	if(this.options.fade_out == null) this.options.fade_out = true;
	if(this.options.fade_time == null) this.options.fade_time = 0.3;
	var fade_alpha = this.options.background.a;
	if(this.options.fade_in) {
		this.options.background.a = 0;
		this.options.bar.a = 0;
		this.options.bar_border.a = 0;
	}
	this.width = Math.max(Math.floor(_view_width * 0.75),2);
	this.height = Math.max(Math.floor(_view_height * 0.002),2);
	var ypos = Math.floor(_view_height * 0.60);
	var half_width = Math.floor(this.width / 2);
	var half_height = Math.floor(this.height / 2);
	this.background = new luxe.Sprite({ no_scene : true, size : new phoenix.Vector(_view_width,_view_height), centered : false, color : this.options.background, depth : 998, visible : true});
	this.progress_bar = new luxe.Sprite({ pos : new phoenix.Vector(_view_mid_x - half_width,ypos - half_height), size : new phoenix.Vector(2,this.height), no_scene : true, centered : false, color : this.options.bar, depth : 998});
	this.progress_border = new luxe.Visual({ color : this.options.bar, no_scene : true, pos : new phoenix.Vector(_view_mid_x - half_width,ypos - half_height), geometry : Luxe.draw.rectangle({ w : this.width, h : this.height, depth : 998.1}), depth : 998.1},{ fileName : "ParcelProgress.hx", lineNumber : 107, className : "luxe.ParcelProgress", methodName : "new"});
	this.options.parcel.options.oncomplete = $bind(this,this.oncomplete);
	this.options.parcel.options.onprogress = $bind(this,this.onprogress);
	if(this.options.fade_in) {
		this.background.color.tween(this.options.fade_time,{ a : fade_alpha},true);
		this.progress_bar.color.tween(this.options.fade_time,{ a : 1},true);
		this.progress_border.color.tween(this.options.fade_time,{ a : 1},true);
	}
};
luxe.ParcelProgress.__name__ = ["luxe","ParcelProgress"];
luxe.ParcelProgress.prototype = {
	set_progress: function(amount) {
		if(amount < 0) amount = 0;
		if(amount > 1) amount = 1;
		this.progress_bar.size.set_x(Math.ceil(this.width * amount));
	}
	,onprogress: function(r) {
		var amount = this.options.parcel.current_count / this.options.parcel.total_items;
		this.set_progress(amount);
	}
	,oncomplete: function(p) {
		if(this.options.fade_out) {
			this.background.color.tween(this.options.fade_time,{ a : 0},true);
			this.progress_bar.color.tween(this.options.fade_time,{ a : 0},true);
			this.progress_border.color.tween(this.options.fade_time,{ a : 0},true).onComplete($bind(this,this.do_complete));
		} else this.do_complete();
	}
	,do_complete: function() {
		if(this.options.oncomplete != null) this.options.oncomplete(this.options.parcel);
	}
	,__class__: luxe.ParcelProgress
};
luxe.Physics = function(_core) {
	this.step_delta = 0.0166666666666666664;
	this.step_rate = 0.0166666666666666664;
	this.core = _core;
};
luxe.Physics.__name__ = ["luxe","Physics"];
luxe.Physics.prototype = {
	init: function() {
		this.engines = [];
		this.nape = this.add_engine(luxe.physics.nape.PhysicsNape);
	}
	,reset: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
		if(this.step_rate != 0) this.timer = Luxe.timer.schedule(this.step_rate,$bind(this,this.fixed_update),true);
	}
	,fixed_update: function() {
		Luxe.debug.start(luxe.Physics.tag_physics);
		this.update();
		Luxe.debug.end(luxe.Physics.tag_physics);
	}
	,add_engine: function(type,_data) {
		var _engine_instance = Type.createInstance(type,[_data]);
		var _physics_engine = _engine_instance;
		_physics_engine.init();
		this.engines.push(_physics_engine);
		return _engine_instance;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.update();
		}
	}
	,process: function() {
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.process();
		}
	}
	,render: function() {
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.render();
		}
	}
	,destroy: function() {
		if(this.timer != null) this.timer.stop();
		this.timer = null;
		var _g = 0;
		var _g1 = this.engines;
		while(_g < _g1.length) {
			var engine = _g1[_g];
			++_g;
			engine.destroy();
		}
	}
	,set_step_rate: function(_rate) {
		this.step_rate = _rate;
		this.step_delta = this.step_rate;
		this.reset();
		return this.step_rate;
	}
	,__class__: luxe.Physics
	,__properties__: {set_step_rate:"set_step_rate"}
};
luxe.PhysicsEngine = function() {
	this.draw = true;
	this.paused = false;
	this.name = "engine";
	this.set_gravity(new phoenix.Vector(0,-9.8,0));
	Luxe.on(8,$bind(this,this._render));
};
luxe.PhysicsEngine.__name__ = ["luxe","PhysicsEngine"];
luxe.PhysicsEngine.prototype = {
	init: function() {
	}
	,_render: function(_) {
		this.render();
	}
	,process: function() {
	}
	,update: function() {
	}
	,render: function() {
	}
	,get_paused: function() {
		return this.paused;
	}
	,set_paused: function(_pause) {
		return this.paused = _pause;
	}
	,get_draw: function() {
		return this.draw;
	}
	,set_draw: function(_draw) {
		return this.draw = _draw;
	}
	,get_gravity: function() {
		return this.gravity;
	}
	,set_gravity: function(_gravity) {
		return this.gravity = _gravity;
	}
	,destroy: function() {
	}
	,__class__: luxe.PhysicsEngine
	,__properties__: {set_draw:"set_draw",get_draw:"get_draw",set_gravity:"set_gravity",get_gravity:"get_gravity",set_paused:"set_paused",get_paused:"get_paused"}
};
luxe.Scene = function(_name) {
	if(_name == null) _name = "untitled scene";
	this.entity_count = 0;
	this.length = 0;
	this.started = false;
	this.inited = false;
	luxe.Objects.call(this,_name);
	this.entities = new haxe.ds.StringMap();
	this._delayed_init_entities = [];
	this._delayed_reset_entities = [];
	Luxe.core.on(2,$bind(this,this.init));
	Luxe.core.on(6,$bind(this,this._destroy));
	Luxe.core.on(4,$bind(this,this.update));
	Luxe.core.on(7,$bind(this,this.prerender));
	Luxe.core.on(9,$bind(this,this.postrender));
	Luxe.core.on(8,$bind(this,this.render));
	Luxe.core.on(10,$bind(this,this.keydown));
	Luxe.core.on(11,$bind(this,this.keyup));
	Luxe.core.on(12,$bind(this,this.textinput));
	Luxe.core.on(14,$bind(this,this.inputup));
	Luxe.core.on(13,$bind(this,this.inputdown));
	Luxe.core.on(16,$bind(this,this.mouseup));
	Luxe.core.on(15,$bind(this,this.mousedown));
	Luxe.core.on(17,$bind(this,this.mousemove));
	Luxe.core.on(18,$bind(this,this.mousewheel));
	Luxe.core.on(20,$bind(this,this.touchup));
	Luxe.core.on(19,$bind(this,this.touchdown));
	Luxe.core.on(21,$bind(this,this.touchmove));
	Luxe.core.on(24,$bind(this,this.gamepadup));
	Luxe.core.on(23,$bind(this,this.gamepaddown));
	Luxe.core.on(22,$bind(this,this.gamepadaxis));
	Luxe.core.on(25,$bind(this,this.gamepaddevice));
	Luxe.core.on(27,$bind(this,this.windowmoved));
	Luxe.core.on(28,$bind(this,this.windowresized));
	Luxe.core.on(29,$bind(this,this.windowsized));
	Luxe.core.on(30,$bind(this,this.windowminimized));
	Luxe.core.on(31,$bind(this,this.windowrestored));
	if(Luxe.core.inited) this.init(null);
};
luxe.Scene.__name__ = ["luxe","Scene"];
luxe.Scene.__super__ = luxe.Objects;
luxe.Scene.prototype = $extend(luxe.Objects.prototype,{
	add: function(entity,pos) {
		if(entity == null) throw "can't put entity in a scene if the entity is null.";
		if(this.entities.exists(entity.name)) haxe.Log.trace("    i / scene / " + ("" + this.name + " / adding a second entity named " + entity.name + "! " + Luxe.utils.pos_info(pos) + "\n                This will replace the existing one, possibly leaving the previous one in limbo.\n                Use EntityOptions name_unique flag to automatically handle this for similar named entities."),{ fileName : "Scene.hx", lineNumber : 86, className : "luxe.Scene", methodName : "add"});
		entity.set_scene(this);
		this.entities.set(entity.name,entity);
		this.entity_count++;
		if(this.inited) this._delayed_init_entities.push(entity);
		if(this.started) this._delayed_reset_entities.push(entity);
	}
	,remove: function(entity) {
		if(entity == null) throw "can't remove entity from a scene if the entity is null.";
		if(entity.get_scene() == this) {
			entity.set_scene(null);
			this.entity_count--;
			return this.entities.remove(entity.name);
		} else {
			haxe.Log.trace("    i / scene / " + "can't remove the entity from this scene, it is not mine (entity.scene != this)",{ fileName : "Scene.hx", lineNumber : 123, className : "luxe.Scene", methodName : "remove"});
			return false;
		}
		return false;
	}
	,empty: function() {
		if(this.entity_count > 0) {
			var $it0 = this.entities.iterator();
			while( $it0.hasNext() ) {
				var entity = $it0.next();
				if(entity != null) {
					this.remove(entity);
					entity.destroy();
					entity = null;
				}
			}
		}
	}
	,get_named_like: function(_name,into) {
		if(this.entity_count > 0) {
			var _filter = new EReg("^((?:" + _name + ")[.]{1})","g");
			var $it0 = this.entities.iterator();
			while( $it0.hasNext() ) {
				var _entity = $it0.next();
				if(_filter.match(_entity.name)) into.push(_entity);
			}
		}
		return into;
	}
	,render: function(_) {
		this.emit(8,null,{ fileName : "Scene.hx", lineNumber : 178, className : "luxe.Scene", methodName : "render"});
	}
	,prerender: function(_) {
		this.emit(7,null,{ fileName : "Scene.hx", lineNumber : 184, className : "luxe.Scene", methodName : "prerender"});
	}
	,postrender: function(_) {
		this.emit(9,null,{ fileName : "Scene.hx", lineNumber : 190, className : "luxe.Scene", methodName : "postrender"});
	}
	,keydown: function(e) {
		this.emit(10,e,{ fileName : "Scene.hx", lineNumber : 200, className : "luxe.Scene", methodName : "keydown"});
	}
	,keyup: function(e) {
		this.emit(11,e,{ fileName : "Scene.hx", lineNumber : 208, className : "luxe.Scene", methodName : "keyup"});
	}
	,textinput: function(e) {
		this.emit(12,e,{ fileName : "Scene.hx", lineNumber : 216, className : "luxe.Scene", methodName : "textinput"});
	}
	,mousedown: function(e) {
		this.emit(15,e,{ fileName : "Scene.hx", lineNumber : 226, className : "luxe.Scene", methodName : "mousedown"});
	}
	,mousewheel: function(e) {
		this.emit(18,e,{ fileName : "Scene.hx", lineNumber : 234, className : "luxe.Scene", methodName : "mousewheel"});
	}
	,mouseup: function(e) {
		this.emit(16,e,{ fileName : "Scene.hx", lineNumber : 242, className : "luxe.Scene", methodName : "mouseup"});
	}
	,mousemove: function(e) {
		this.emit(17,e,{ fileName : "Scene.hx", lineNumber : 250, className : "luxe.Scene", methodName : "mousemove"});
	}
	,touchdown: function(event) {
		this.emit(19,event,{ fileName : "Scene.hx", lineNumber : 258, className : "luxe.Scene", methodName : "touchdown"});
	}
	,touchup: function(event) {
		this.emit(20,event,{ fileName : "Scene.hx", lineNumber : 264, className : "luxe.Scene", methodName : "touchup"});
	}
	,touchmove: function(event) {
		this.emit(21,event,{ fileName : "Scene.hx", lineNumber : 270, className : "luxe.Scene", methodName : "touchmove"});
	}
	,gamepadaxis: function(event) {
		this.emit(22,event,{ fileName : "Scene.hx", lineNumber : 278, className : "luxe.Scene", methodName : "gamepadaxis"});
	}
	,gamepadup: function(event) {
		this.emit(24,event,{ fileName : "Scene.hx", lineNumber : 284, className : "luxe.Scene", methodName : "gamepadup"});
	}
	,gamepaddown: function(event) {
		this.emit(23,event,{ fileName : "Scene.hx", lineNumber : 290, className : "luxe.Scene", methodName : "gamepaddown"});
	}
	,gamepaddevice: function(event) {
		this.emit(25,event,{ fileName : "Scene.hx", lineNumber : 296, className : "luxe.Scene", methodName : "gamepaddevice"});
	}
	,windowmoved: function(event) {
		this.emit(27,event,{ fileName : "Scene.hx", lineNumber : 305, className : "luxe.Scene", methodName : "windowmoved"});
	}
	,windowresized: function(event) {
		this.emit(28,event,{ fileName : "Scene.hx", lineNumber : 311, className : "luxe.Scene", methodName : "windowresized"});
	}
	,windowsized: function(event) {
		this.emit(29,event,{ fileName : "Scene.hx", lineNumber : 317, className : "luxe.Scene", methodName : "windowsized"});
	}
	,windowminimized: function(event) {
		this.emit(30,event,{ fileName : "Scene.hx", lineNumber : 323, className : "luxe.Scene", methodName : "windowminimized"});
	}
	,windowrestored: function(event) {
		this.emit(31,event,{ fileName : "Scene.hx", lineNumber : 329, className : "luxe.Scene", methodName : "windowrestored"});
	}
	,inputdown: function(event) {
		this.emit(13,event,{ fileName : "Scene.hx", lineNumber : 337, className : "luxe.Scene", methodName : "inputdown"});
	}
	,inputup: function(event) {
		this.emit(14,event,{ fileName : "Scene.hx", lineNumber : 343, className : "luxe.Scene", methodName : "inputup"});
	}
	,_destroy: function(_) {
		this.destroy();
	}
	,destroy: function() {
		Luxe.core.off(2,$bind(this,this.init));
		Luxe.core.off(6,$bind(this,this._destroy));
		Luxe.core.off(4,$bind(this,this.update));
		Luxe.core.off(7,$bind(this,this.prerender));
		Luxe.core.off(9,$bind(this,this.postrender));
		Luxe.core.off(8,$bind(this,this.render));
		Luxe.core.off(10,$bind(this,this.keydown));
		Luxe.core.off(11,$bind(this,this.keyup));
		Luxe.core.off(12,$bind(this,this.textinput));
		Luxe.core.off(14,$bind(this,this.inputup));
		Luxe.core.off(13,$bind(this,this.inputdown));
		Luxe.core.off(16,$bind(this,this.mouseup));
		Luxe.core.off(15,$bind(this,this.mousedown));
		Luxe.core.off(17,$bind(this,this.mousemove));
		Luxe.core.off(18,$bind(this,this.mousewheel));
		Luxe.core.off(20,$bind(this,this.touchup));
		Luxe.core.off(19,$bind(this,this.touchdown));
		Luxe.core.off(21,$bind(this,this.touchmove));
		Luxe.core.off(24,$bind(this,this.gamepadup));
		Luxe.core.off(23,$bind(this,this.gamepaddown));
		Luxe.core.off(22,$bind(this,this.gamepadaxis));
		Luxe.core.off(25,$bind(this,this.gamepaddevice));
		Luxe.core.off(27,$bind(this,this.windowmoved));
		Luxe.core.off(28,$bind(this,this.windowresized));
		Luxe.core.off(29,$bind(this,this.windowsized));
		Luxe.core.off(30,$bind(this,this.windowminimized));
		Luxe.core.off(31,$bind(this,this.windowrestored));
		this.emit(6,null,{ fileName : "Scene.hx", lineNumber : 392, className : "luxe.Scene", methodName : "destroy"});
	}
	,_do_init: function() {
		var _before_count = this.get_length();
		if(this.entity_count > 0) {
			var $it0 = this.entities.iterator();
			while( $it0.hasNext() ) {
				var entity = $it0.next();
				if(entity != null) {
					if(!entity.inited) entity._init();
				}
			}
		}
		var _after_count = this.get_length();
		return _before_count != _after_count;
	}
	,init: function(_) {
		var keep_going = true;
		while(keep_going) keep_going = this._do_init();
		this.inited = true;
		this.emit(2,null,{ fileName : "Scene.hx", lineNumber : 428, className : "luxe.Scene", methodName : "init"});
		this.reset();
	}
	,reset: function() {
		this.started = false;
		this.emit(3,null,{ fileName : "Scene.hx", lineNumber : 439, className : "luxe.Scene", methodName : "reset"});
		this.started = true;
	}
	,update: function(dt) {
		Luxe.core.debug.start("scene." + this.name);
		this.handle_delayed_additions();
		this.emit(4,dt,{ fileName : "Scene.hx", lineNumber : 452, className : "luxe.Scene", methodName : "update"});
		if(this.entity_count > 0) {
			var $it0 = this.entities.iterator();
			while( $it0.hasNext() ) {
				var entity = $it0.next();
				if(entity != null) entity._update(dt);
			}
		}
		Luxe.core.debug.end("scene." + this.name);
	}
	,handle_delayed_additions: function() {
		if(this._delayed_init_entities.length != 0 || this._delayed_reset_entities.length != 0) null;
		if(this._delayed_init_entities.length > 0) {
			var _g = 0;
			var _g1 = this._delayed_init_entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				entity._init();
			}
			this._delayed_init_entities.splice(0,this._delayed_init_entities.length);
		}
		if(this._delayed_reset_entities.length > 0) {
			var _g2 = 0;
			var _g11 = this._delayed_reset_entities;
			while(_g2 < _g11.length) {
				var entity1 = _g11[_g2];
				++_g2;
				entity1._reset(null);
			}
			this._delayed_reset_entities.splice(0,this._delayed_reset_entities.length);
		}
	}
	,get_length: function() {
		return Lambda.count(this.entities);
	}
	,toString: function() {
		return "luxe Scene: " + this.name + " / " + this.get_length() + " entities / id: " + this.id;
	}
	,__class__: luxe.Scene
	,__properties__: {get_length:"get_length"}
});
luxe.Screen = function(_core,_w,_h) {
	this.internal = false;
	this.core = _core;
	this.cursor = new luxe.Cursor(this);
	this.w = _w;
	this.h = _h;
	this.mid = new phoenix.Vector(Math.round(this.w / 2),Math.round(this.h / 2));
	this.size = new phoenix.Vector(this.w,this.h);
};
luxe.Screen.__name__ = ["luxe","Screen"];
luxe.Screen.prototype = {
	toString: function() {
		return "luxe.Screen({ w:" + this.w + ", h:" + this.h + " })";
	}
	,point_inside: function(_p) {
		if(_p.x < 0) return false;
		if(_p.y < 0) return false;
		if(_p.x > this.w) return false;
		if(_p.y > this.h) return false;
		return true;
	}
	,point_inside_xy: function(_x,_y) {
		if(_x < 0) return false;
		if(_y < 0) return false;
		if(_x > this.w) return false;
		if(_y > this.h) return false;
		return true;
	}
	,internal_resized: function(_w,_h) {
		this.w = _w;
		this.h = _h;
		this.internal = true;
		this.get_size().set_x(_w);
		this.get_size().set_y(_h);
		this.get_mid().set_x(_w / 2);
		this.get_mid().set_y(_h / 2);
		this.internal = false;
	}
	,get_mid: function() {
		if(this.internal) return this.mid;
		return this.mid.clone();
	}
	,get_size: function() {
		if(this.internal) return this.size;
		return this.size.clone();
	}
	,__class__: luxe.Screen
	,__properties__: {get_size:"get_size",get_mid:"get_mid"}
};
luxe.Cursor = function(_screen) {
	this.ignore = false;
	this.lock = false;
	this.grab = false;
	this.visible = true;
	this.screen = _screen;
	this.set_pos(new phoenix.Vector());
};
luxe.Cursor.__name__ = ["luxe","Cursor"];
luxe.Cursor.prototype = {
	set_internal: function(_pos) {
		this.ignore = true;
		this.set_pos(_pos);
		this.ignore = false;
	}
	,get_visible: function() {
		return this.visible;
	}
	,set_visible: function(_visible) {
		this.screen.core.app.windowing.enable_cursor(_visible);
		return this.visible = _visible;
	}
	,get_grab: function() {
		return this.grab;
	}
	,get_lock: function() {
		return this.lock;
	}
	,set_grab: function(_grab) {
		this.screen.core.app.window.set_grab(_grab);
		return this.grab = _grab;
	}
	,set_lock: function(_lock) {
		this.screen.core.app.windowing.enable_cursor_lock(_lock);
		return this.lock = _lock;
	}
	,get_pos: function() {
		return this.pos;
	}
	,set_pos: function(_p) {
		if(this.get_pos() != null && _p != null && !this.ignore) this.screen.core.app.window.set_cursor_position(_p.x | 0,_p.y | 0);
		return this.pos = _p;
	}
	,__class__: luxe.Cursor
	,__properties__: {set_pos:"set_pos",get_pos:"get_pos",set_lock:"set_lock",get_lock:"get_lock",set_grab:"set_grab",get_grab:"get_grab",set_visible:"set_visible",get_visible:"get_visible"}
};
luxe.Sprite = function(options) {
	this.flipy = false;
	this.flipx = false;
	this.centered = true;
	this.set_uv(new phoenix.Rectangle());
	if(options == null) throw "Sprite needs not-null options at the moment";
	if(options.centered != null) this.set_centered(options.centered);
	if(options.flipx != null) this.set_flipx(options.flipx);
	if(options.flipy != null) this.set_flipy(options.flipy);
	luxe.Visual.call(this,options,{ fileName : "Sprite.hx", lineNumber : 48, className : "luxe.Sprite", methodName : "new"});
};
luxe.Sprite.__name__ = ["luxe","Sprite"];
luxe.Sprite.__super__ = luxe.Visual;
luxe.Sprite.prototype = $extend(luxe.Visual.prototype,{
	on_geometry_created: function() {
		var _g = this;
		luxe.Visual.prototype.on_geometry_created.call(this);
		if(this.texture != null) this.texture.set_onload(function(t) {
			if(_g.options.uv == null) _g.set_uv(new phoenix.Rectangle(0,0,_g.texture.width,_g.texture.height)); else _g.set_uv(_g.options.uv);
			if(_g.texture.type == 6) _g.set_flipy(true);
		});
		this.set_centered(!(!this.centered));
		this.set_flipx(!(!this.flipx));
		this.set_flipy(!(!this.flipy));
	}
	,set_geometry: function(_g) {
		this.geometry_quad = _g;
		return luxe.Visual.prototype.set_geometry.call(this,_g);
	}
	,point_inside: function(_p) {
		if(this.geometry == null) return false;
		return Luxe.utils.geometry.point_in_geometry(_p,this.geometry);
	}
	,point_inside_AABB: function(_p) {
		if(this.get_pos() == null) return false;
		if(this.size == null) return false;
		var _s_x = this.size.x * this.get_scale().x;
		var _s_y = this.size.y * this.get_scale().y;
		if(this.centered) {
			var _hx = _s_x / 2;
			var _hy = _s_y / 2;
			if(_p.x < this.get_pos().x - _hx) return false;
			if(_p.y < this.get_pos().y - _hy) return false;
			if(_p.x > this.get_pos().x + _s_x - _hx) return false;
			if(_p.y > this.get_pos().y + _s_y - _hy) return false;
		} else {
			if(_p.x < this.get_pos().x) return false;
			if(_p.y < this.get_pos().y) return false;
			if(_p.x > this.get_pos().x + _s_x) return false;
			if(_p.y > this.get_pos().y + _s_y) return false;
		}
		return true;
	}
	,set_uv: function(_uv) {
		if(this.geometry_quad != null) this.geometry_quad.uv(_uv);
		this.uv = _uv;
		phoenix.Rectangle.listen(this.uv,$bind(this,this._uv_change));
		return this.uv;
	}
	,set_flipy: function(_v) {
		if(_v == this.flipy) return this.flipy;
		if(this.geometry_quad != null) this.geometry_quad.set_flipy(_v);
		return this.flipy = _v;
	}
	,set_flipx: function(_v) {
		if(_v == this.flipx) return this.flipx;
		if(this.geometry_quad != null) this.geometry_quad.set_flipx(_v);
		return this.flipx = _v;
	}
	,set_size: function(_v) {
		if(this.geometry_quad != null) {
			this.geometry_quad.resize(new phoenix.Vector(_v.x,_v.y));
			if(!this._has_custom_origin) {
				if(this.centered) this.set_origin(new phoenix.Vector(_v.x,_v.y,_v.z,_v.w).divideScalar(2));
			}
		}
		return luxe.Visual.prototype.set_size.call(this,_v);
	}
	,set_centered: function(_c) {
		if(this.size != null) {
			if(_c) this.set_origin(new phoenix.Vector(this.size.x / 2,this.size.y / 2)); else this.set_origin(new phoenix.Vector());
		}
		return this.centered = _c;
	}
	,_uv_change: function(_v) {
		this.set_uv(this.uv);
	}
	,init: function() {
	}
	,ondestroy: function() {
		luxe.Visual.prototype.ondestroy.call(this);
	}
	,__class__: luxe.Sprite
	,__properties__: $extend(luxe.Visual.prototype.__properties__,{set_uv:"set_uv",set_flipy:"set_flipy",set_flipx:"set_flipx",set_centered:"set_centered"})
});
luxe.Text = function(_options,_pos_info) {
	this.text_options = _options;
	this.text_bounds = new phoenix.Rectangle();
	var _batcher = null;
	if(_options.no_batcher_add == null || _options.no_batcher_add == false) {
		if(_options.batcher != null) _batcher = _options.batcher; else _batcher = Luxe.renderer.batcher;
	}
	this.geom = new phoenix.geometry.TextGeometry({ batcher : _batcher, depth : _options.depth, group : _options.group, visible : _options.visible, immediate : _options.immediate, color : _options.color, shader : _options.shader, texture : _options.texture, text : _options.text, font : _options.font, point_size : _options.point_size, line_spacing : _options.line_spacing, letter_spacing : _options.letter_spacing, bounds : _options.bounds, bounds_wrap : _options.bounds_wrap, align : _options.align, align_vertical : _options.align_vertical, sdf : _options.sdf, smoothness : _options.smoothness, thickness : _options.thickness, outline : _options.outline, outline_color : _options.outline_color, glow_threshold : _options.glow_threshold, glow_amount : _options.glow_amount, glow_color : _options.glow_color});
	this.geom.emitter.on(1,$bind(this,this.on_geom_text_update),{ fileName : "Text.hx", lineNumber : 141, className : "luxe.Text", methodName : "new"});
	_options.geometry = this.geom;
	_options.shader = this.geom.get_shader();
	luxe.Visual.call(this,_options,_pos_info);
	this._update_bounds();
};
luxe.Text.__name__ = ["luxe","Text"];
luxe.Text.__super__ = luxe.Visual;
luxe.Text.prototype = $extend(luxe.Visual.prototype,{
	get_text: function() {
		return this.geom.text;
	}
	,set_text: function(_s) {
		return this.geom.set_text(_s);
	}
	,get_font: function() {
		return this.geom.font;
	}
	,set_font: function(_f) {
		return this.geom.font = _f;
	}
	,get_point_size: function() {
		return this.geom.point_size;
	}
	,set_point_size: function(_s) {
		return this.geom.set_point_size(_s);
	}
	,get_letter_spacing: function() {
		return this.geom.letter_spacing;
	}
	,set_letter_spacing: function(_s) {
		return this.geom.set_letter_spacing(_s);
	}
	,get_line_spacing: function() {
		return this.geom.line_spacing;
	}
	,set_line_spacing: function(_s) {
		return this.geom.set_line_spacing(_s);
	}
	,get_bounds: function() {
		return this.geom.bounds;
	}
	,set_bounds: function(_b) {
		return this.geom.set_bounds(_b);
	}
	,get_bounds_wrap: function() {
		return this.geom.bounds_wrap;
	}
	,set_bounds_wrap: function(_b) {
		return this.geom.set_bounds_wrap(_b);
	}
	,get_align: function() {
		return this.geom.align;
	}
	,set_align: function(_a) {
		return this.geom.set_align(_a);
	}
	,get_align_vertical: function() {
		return this.geom.align_vertical;
	}
	,set_align_vertical: function(_a) {
		return this.geom.set_align_vertical(_a);
	}
	,get_sdf: function() {
		return this.geom.sdf;
	}
	,set_sdf: function(_s) {
		return this.geom.sdf = _s;
	}
	,get_smoothness: function() {
		return this.geom.smoothness;
	}
	,set_smoothness: function(_s) {
		return this.geom.set_smoothness(_s);
	}
	,get_thickness: function() {
		return this.geom.thickness;
	}
	,set_thickness: function(_t) {
		return this.geom.set_thickness(_t);
	}
	,get_outline: function() {
		return this.geom.outline;
	}
	,set_outline: function(_o) {
		return this.geom.set_outline(_o);
	}
	,get_outline_color: function() {
		return this.geom.outline_color;
	}
	,set_outline_color: function(_c) {
		return this.geom.set_outline_color(_c);
	}
	,get_glow_threshold: function() {
		return this.geom.glow_threshold;
	}
	,set_glow_threshold: function(_s) {
		return this.geom.set_glow_threshold(_s);
	}
	,get_glow_amount: function() {
		return this.geom.glow_amount;
	}
	,set_glow_amount: function(_e) {
		return this.geom.set_glow_amount(_e);
	}
	,get_glow_color: function() {
		return this.geom.glow_color;
	}
	,set_glow_color: function(_c) {
		return this.geom.set_glow_color(_c);
	}
	,point_inside: function(p) {
		this._update_bounds();
		return this.text_bounds.point_inside(p);
	}
	,set_pos_from_transform: function(_p) {
		luxe.Visual.prototype.set_pos_from_transform.call(this,_p);
		this._update_bounds();
		this.text_options.pos = this.get_pos();
	}
	,on_geom_text_update: function(_) {
		this._update_bounds();
	}
	,_update_bounds: function() {
		var _x = this.get_pos().x;
		var _y = this.get_pos().y;
		var _tw = this.geom.text_width;
		var _th = this.geom.text_height;
		var _bw = this.geom.text_width;
		var _bh = this.geom.text_height;
		if(this.get_bounds() != null) {
			_bh = this.get_bounds().h;
			_bw = this.get_bounds().w;
			_x = this.get_bounds().x;
			_y = this.get_bounds().y;
			var _g = this.get_align();
			switch(_g) {
			case 2:
				_x += _tw / 2;
				break;
			case 1:
				_x += _tw;
				break;
			default:
				_x += 0.0;
			}
			var _g1 = this.get_align_vertical();
			switch(_g1) {
			case 2:
				_y += _bh / 2 - _th / 2;
				break;
			case 4:
				_y += _bh - _th;
				break;
			default:
				_y += 0.0;
			}
		} else {
			var _g2 = this.get_align();
			switch(_g2) {
			case 2:
				_x -= _tw / 2;
				break;
			case 1:
				_x -= _tw;
				break;
			default:
				_x -= 0.0;
			}
			var _g3 = this.get_align_vertical();
			switch(_g3) {
			case 2:
				_y -= _th / 2;
				break;
			case 4:
				_y -= _th;
				break;
			default:
				_y -= 0.0;
			}
		}
		this.text_bounds.set(_x,_y,_tw,_th);
	}
	,init: function() {
	}
	,ondestroy: function() {
		luxe.Visual.prototype.ondestroy.call(this);
	}
	,__class__: luxe.Text
	,__properties__: $extend(luxe.Visual.prototype.__properties__,{set_glow_color:"set_glow_color",get_glow_color:"get_glow_color",set_glow_amount:"set_glow_amount",get_glow_amount:"get_glow_amount",set_glow_threshold:"set_glow_threshold",get_glow_threshold:"get_glow_threshold",set_outline_color:"set_outline_color",get_outline_color:"get_outline_color",set_outline:"set_outline",get_outline:"get_outline",set_thickness:"set_thickness",get_thickness:"get_thickness",set_smoothness:"set_smoothness",get_smoothness:"get_smoothness",set_sdf:"set_sdf",get_sdf:"get_sdf",set_align_vertical:"set_align_vertical",get_align_vertical:"get_align_vertical",set_align:"set_align",get_align:"get_align",set_bounds_wrap:"set_bounds_wrap",get_bounds_wrap:"get_bounds_wrap",set_bounds:"set_bounds",get_bounds:"get_bounds",set_line_spacing:"set_line_spacing",get_line_spacing:"get_line_spacing",set_letter_spacing:"set_letter_spacing",get_letter_spacing:"get_letter_spacing",set_point_size:"set_point_size",get_point_size:"get_point_size",set_font:"set_font",get_font:"get_font",set_text:"set_text",get_text:"get_text"})
});
luxe.Timer = function(_core) {
	this.core = _core;
	this.timers = [];
};
luxe.Timer.__name__ = ["luxe","Timer"];
luxe.Timer.prototype = {
	init: function() {
		null;
	}
	,destroy: function() {
		this.reset();
		null;
	}
	,process: function() {
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.timers;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.stop();
			t = null;
		}
		this.timers = null;
		this.timers = [];
	}
	,schedule: function(_time_in_seconds,_on_time,repeat) {
		if(repeat == null) repeat = false;
		var _g = this;
		var t = new snow.api.Timer(_time_in_seconds);
		t.run = function() {
			if(!repeat) {
				t.stop();
				HxOverrides.remove(_g.timers,t);
			}
			_on_time();
		};
		this.timers.push(t);
		return t;
	}
	,__class__: luxe.Timer
};
luxe.components = {};
luxe.components.Components = function(_entity) {
	var _map = new haxe.ds.StringMap();
	this.components = new luxe.structural.OrderedMap(_map);
	this.entity = _entity;
};
luxe.components.Components.__name__ = ["luxe","components","Components"];
luxe.components.Components.prototype = {
	add: function(_component) {
		if(_component == null) {
			haxe.Log.trace("attempt to add null component to " + this.entity.name,{ fileName : "Components.hx", lineNumber : 28, className : "luxe.components.Components", methodName : "add"});
			return _component;
		}
		_component.set_entity(this.entity);
		this.components.set(_component.name,_component);
		_component.onadded();
		if(this.entity.inited) _component.init();
		if(this.entity.started) _component.onreset();
		return _component;
	}
	,remove: function(_name) {
		if(!this.components.map.exists(_name)) {
			haxe.Log.trace("attempt to remove " + _name + " from " + this.entity.name + " failed because that component was not attached to this entity",{ fileName : "Components.hx", lineNumber : 61, className : "luxe.components.Components", methodName : "remove"});
			return false;
		}
		var _component = this.components.map.get(_name);
		_component.onremoved();
		_component.set_entity(null);
		return this.components.remove(_name);
	}
	,get: function(_name,in_children) {
		if(in_children == null) in_children = false;
		if(!in_children) return this.components.map.get(_name); else {
			var in_this_entity = this.components.map.get(_name);
			if(in_this_entity != null) return in_this_entity;
			var _g = 0;
			var _g1 = this.entity.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				var found = _child._components.get(_name,true);
				if(found != null) return found;
			}
			return null;
		}
		return null;
	}
	,get_any: function(_name,in_children,first_only) {
		if(first_only == null) first_only = true;
		if(in_children == null) in_children = false;
		var results = [];
		if(!in_children) return [this.components.map.get(_name)]; else {
			var in_this_entity = this.components.map.get(_name);
			if(in_this_entity != null) {
				if(first_only) return [in_this_entity]; else results.push(in_this_entity);
			}
			var _g = 0;
			var _g1 = this.entity.children;
			while(_g < _g1.length) {
				var _child = _g1[_g];
				++_g;
				var found = _child._components.get_any(_name,true,first_only);
				if(found != null) {
					if(first_only && found.length > 0) return [found[0]]; else results.concat(found);
				}
			}
		}
		return results;
	}
	,has: function(_name) {
		return this.components.map.exists(_name);
	}
	,__class__: luxe.components.Components
};
luxe.components.sprite = {};
luxe.components.sprite.SpriteAnimationType = { __ename__ : true, __constructs__ : ["animated_texture","animated_uv"] };
luxe.components.sprite.SpriteAnimationType.animated_texture = ["animated_texture",0];
luxe.components.sprite.SpriteAnimationType.animated_texture.toString = $estr;
luxe.components.sprite.SpriteAnimationType.animated_texture.__enum__ = luxe.components.sprite.SpriteAnimationType;
luxe.components.sprite.SpriteAnimationType.animated_uv = ["animated_uv",1];
luxe.components.sprite.SpriteAnimationType.animated_uv.toString = $estr;
luxe.components.sprite.SpriteAnimationType.animated_uv.__enum__ = luxe.components.sprite.SpriteAnimationType;
luxe.components.sprite.SpriteAnimationData = function(_sprite,_name) {
	if(_name == null) _name = "anim";
	this.frame_count = 0;
	this.reverse = false;
	this.pingpong = false;
	this.loop = false;
	this.frame_time = 0.05;
	this.name = _name;
	this.sprite = _sprite;
	this.frameset = [];
	this.frame_sources = [];
	this.frame_size = new phoenix.Vector();
};
luxe.components.sprite.SpriteAnimationData.__name__ = ["luxe","components","sprite","SpriteAnimationData"];
luxe.components.sprite.SpriteAnimationData.prototype = {
	get_frame_count: function() {
		return this.frameset.length;
	}
	,on_image_sequence_loaded: function(_textures) {
		this.image_set = _textures;
		var _g = 0;
		var _g1 = this.frameset;
		while(_g < _g1.length) {
			var _frame = _g1[_g];
			++_g;
			if(_frame.image_frame <= this.image_set.length) {
				_frame.image_source = this.image_set[_frame.image_frame - 1];
				if(this.filter_type != null) _frame.image_source.set_filter(this.filter_type);
			}
		}
	}
	,from_json: function(_animdata) {
		if(_animdata == null) throw "Null animation object passed to from_json in SpriteAnimation";
		var _json_frameset = _animdata.frameset;
		var _json_frame_size = _animdata.frame_size;
		var _json_pingpong = _animdata.pingpong;
		var _json_loop = _animdata.loop;
		var _json_reverse = _animdata.reverse;
		var _json_speed = _animdata.speed;
		var _json_image_sequence = _animdata.image_sequence;
		var _json_filter_type = _animdata.filter_type;
		var _json_events_list = _animdata.events;
		var _json_framesource_list = _animdata.frame_sources;
		if(_json_frameset == null) throw "SpriteAnimation passed invalid json, anim data requires frameset as an array of strings. In anim : " + this.name;
		var _frameset = this.parse_frameset(_json_frameset);
		this.type = luxe.components.sprite.SpriteAnimationType.animated_uv;
		if(_json_filter_type != null) switch(_json_filter_type) {
		case "nearest":
			this.filter_type = phoenix.FilterType.nearest;
			break;
		case "linear":
			this.filter_type = phoenix.FilterType.linear;
			break;
		}
		var _frame_size = new phoenix.Vector();
		if(_json_frame_size != null) {
			var _x = Std.parseFloat(_json_frame_size.x);
			var _y = Std.parseFloat(_json_frame_size.y);
			_frame_size.set_xy(_x,_y);
		}
		var _pingpong = false;
		if(_json_pingpong != null) {
			if(_json_pingpong == "true") _pingpong = true; else _pingpong = false;
		}
		var _loop = false;
		if(_json_loop != null) {
			if(_json_loop == "true") _loop = true; else _loop = false;
		}
		var _reverse = false;
		if(_json_reverse != null) {
			if(_json_reverse == "true") _reverse = true; else _reverse = false;
		}
		var _speed = 2;
		if(_json_speed != null) _speed = Std.parseFloat(_json_speed);
		var _events = null;
		if(_json_events_list != null) _events = this.parse_event_set(_json_events_list);
		this.frame_size = _frame_size;
		var _frame_sources = null;
		if(_json_framesource_list != null) _frame_sources = this.parse_frame_sources_set(_json_framesource_list);
		var _g = 0;
		while(_g < _frameset.length) {
			var _frame = _frameset[_g];
			++_g;
			this.frameset.push({ image_frame : _frame, events : this.parse_event_for_frame(_events,_frame), frame_source : this.parse_source_for_frame(_frame_sources,_frame), frame_size : this.parse_source_size_for_frame(_frame_sources,_frame), frame_pos : this.parse_source_pos_for_frame(_frame_sources,_frame)});
		}
		if(_json_image_sequence != null) {
			var _images_list = Luxe.utils.find_assets_image_sequence(_json_image_sequence);
			this.type = luxe.components.sprite.SpriteAnimationType.animated_texture;
			this.image_set = [];
			if(_images_list.length > 0) {
				this.image_set_list = _images_list;
				Luxe.loadTextures(_images_list,$bind(this,this.on_image_sequence_loaded),true);
			}
		}
		this.pingpong = _pingpong;
		this.loop = _loop;
		this.reverse = _reverse;
		this.frame_time = 1 / _speed;
		return this;
	}
	,parse_event_for_frame: function(_events,_frame) {
		if(_events == null) return [];
		if(_events.length == 0) return [];
		var _resulting_events = [];
		var _g = 0;
		while(_g < _events.length) {
			var _event = _events[_g];
			++_g;
			if(_event.frame == _frame) _resulting_events.push(_event);
		}
		return _resulting_events;
	}
	,parse_source_size_for_frame: function(_sources,_frame) {
		if(_sources != null) {
			var _g = 0;
			while(_g < _sources.length) {
				var _source = _sources[_g];
				++_g;
				if(_source.frame == _frame) return _source.size;
			}
		}
		return this.frame_size;
	}
	,parse_source_pos_for_frame: function(_sources,_frame) {
		if(_sources != null) {
			var _g = 0;
			while(_g < _sources.length) {
				var _source = _sources[_g];
				++_g;
				if(_source.frame == _frame) return _source.pos;
			}
		}
		return new phoenix.Vector();
	}
	,parse_source_for_frame: function(_sources,_frame) {
		var _g1 = this;
		var _explicit_source = null;
		if(_sources != null) {
			var _g = 0;
			while(_g < _sources.length) {
				var _source = _sources[_g];
				++_g;
				if(_source.frame == _frame) _explicit_source = _source.source;
			}
		}
		if(_explicit_source == null) {
			var result = new phoenix.Rectangle(0,0,this.frame_size.x,this.frame_size.y);
			if(this.sprite.texture != null) {
				var _g2 = this.type;
				switch(_g2[1]) {
				case 1:
					this.sprite.texture.set_onload(function(t) {
						var frames_per_row = (_g1.sprite.texture.width - _g1.sprite.texture.width % _g1.frame_size.x) / _g1.frame_size.x;
						var image_row = Math.ceil(_frame / frames_per_row);
						var image_x = (_frame - 1) * _g1.frame_size.x % _g1.sprite.texture.width;
						var image_y = (image_row - 1) * _g1.frame_size.y;
						result = new phoenix.Rectangle(image_x,image_y,_g1.frame_size.x,_g1.frame_size.y);
					});
					break;
				default:
				}
			}
			return result;
		} else return _explicit_source;
	}
	,parse_frame_sources_set: function(_sources) {
		if(_sources == null) return [];
		var resulting_sources = [];
		var _g = 0;
		while(_g < _sources.length) {
			var _json_source = _sources[_g];
			++_g;
			var _json_size = _json_source.size;
			var _json_source_rect = _json_source.source;
			var _json_pos = _json_source.pos;
			var _x = 0;
			var _y = 0;
			var _w = 0;
			var _h = 0;
			var _sx = 0;
			var _sy = 0;
			var _px = 0;
			var _py = 0;
			if(_json_source_rect != null) {
				_x = Std.parseFloat(_json_source_rect.x);
				_y = Std.parseFloat(_json_source_rect.y);
				_w = Std.parseFloat(_json_source_rect.w);
				_h = Std.parseFloat(_json_source_rect.h);
			}
			if(_json_size != null) {
				_sx = Std.parseFloat(_json_size.x);
				_sy = Std.parseFloat(_json_size.y);
			}
			if(_json_pos != null) {
				_px = Std.parseFloat(_json_pos.x);
				_py = Std.parseFloat(_json_pos.y);
			}
			var _source = { frame : Std.parseInt(_json_source.frame), source : new phoenix.Rectangle(_x,_y,_w,_h), size : new phoenix.Vector(_sx,_sy), pos : new phoenix.Vector(_px,_py)};
			resulting_sources.push(_source);
		}
		return resulting_sources;
	}
	,parse_event_set: function(_events) {
		if(_events == null) return [];
		var resulting_events = [];
		var _g = 0;
		while(_g < _events.length) {
			var _json_event = _events[_g];
			++_g;
			if(_json_event.frame != null) {
				var _event = { frame : Std.parseInt(_json_event.frame), event : _json_event.event == null?"":_json_event.event};
				resulting_events.push(_event);
			}
		}
		return resulting_events;
	}
	,parse_frameset_range: function(_frameset,regex,_frame) {
		var _start = Std.parseInt(regex.matched(1));
		var _end = Std.parseInt(regex.matched(3));
		var _count = Std["int"](Math.abs(_start - _end));
		if(_count == 0) _frameset.push(_start); else if(_start > _end) {
			var _g1 = 0;
			var _g = _count + 1;
			while(_g1 < _g) {
				var _i = _g1++;
				_frameset.push(_start - _i);
			}
		} else {
			var _g11 = _start;
			var _g2 = _end + 1;
			while(_g11 < _g2) {
				var i = _g11++;
				_frameset.push(i);
			}
		}
	}
	,parse_frameset_hold: function(_frameset,regex,_frame) {
		var _frame_index = Std.parseInt(regex.matched(1));
		var _amount = Std.parseInt(regex.matched(3));
		var _g = 0;
		while(_g < _amount) {
			var _i = _g++;
			_frameset.push(_frame_index);
		}
	}
	,parse_frameset_prev_hold: function(_frameset,regex,_frame) {
		if(_frameset.length < 1) throw " Animation frames given a hold with no prior frame, if you want to do that you can use '1 hold 10` where 1 is the frame index, 10 is the amount. ";
		var _frame1 = _frameset[_frameset.length - 1];
		var _amount = Std.parseInt(regex.matched(2));
		var _g = 0;
		while(_g < _amount) {
			var _i = _g++;
			_frameset.push(_frame1);
		}
	}
	,parse_frameset_frame: function(_frameset,regex,_frame) {
		var _frame1 = Std.parseInt(regex.matched(1));
		_frameset.push(_frame1);
	}
	,parse_frameset: function(_json_frameset) {
		var _final_frameset = [];
		var _g = 0;
		while(_g < _json_frameset.length) {
			var _frame = _json_frameset[_g];
			++_g;
			if(luxe.components.sprite.SpriteAnimationData.frame_range_regex.match(_frame)) this.parse_frameset_range(_final_frameset,luxe.components.sprite.SpriteAnimationData.frame_range_regex,_frame); else if(luxe.components.sprite.SpriteAnimationData.frame_hold_regex.match(_frame)) this.parse_frameset_hold(_final_frameset,luxe.components.sprite.SpriteAnimationData.frame_hold_regex,_frame); else if(luxe.components.sprite.SpriteAnimationData.frame_hold_prev_regex.match(_frame)) this.parse_frameset_prev_hold(_final_frameset,luxe.components.sprite.SpriteAnimationData.frame_hold_prev_regex,_frame); else if(luxe.components.sprite.SpriteAnimationData.frame_regex.match(_frame)) this.parse_frameset_frame(_final_frameset,luxe.components.sprite.SpriteAnimationData.frame_regex,_frame);
		}
		return _final_frameset;
	}
	,__class__: luxe.components.sprite.SpriteAnimationData
	,__properties__: {get_frame_count:"get_frame_count"}
};
luxe.components.sprite.SpriteAnimation = function(_options) {
	this.playing = false;
	this.reverse = false;
	this.pingpong = false;
	this.loop = false;
	this.next_frame_time = 0;
	this.frame_time = 0;
	this.time = 0;
	this.image_frame = 0;
	this.frame = 1;
	luxe.Component.call(this,_options);
};
luxe.components.sprite.SpriteAnimation.__name__ = ["luxe","components","sprite","SpriteAnimation"];
luxe.components.sprite.SpriteAnimation.__super__ = luxe.Component;
luxe.components.sprite.SpriteAnimation.prototype = $extend(luxe.Component.prototype,{
	init: function() {
		this.uv_cache = new phoenix.Rectangle();
		if(this.animation_list == null) this.animation_list = new haxe.ds.StringMap();
		this.sprite = this.get_entity();
		this.set_frame(this.frame);
		this.refresh_sprite();
		if(this.sprite == null) throw "SpriteAnimation belongs on a Sprite instance";
	}
	,add_from_json_object: function(_json_object) {
		if(this.animation_list == null) this.animation_list = new haxe.ds.StringMap();
		var anim_items = _json_object;
		var anims = Reflect.fields(anim_items);
		if(anims.length > 0) {
			var _g = 0;
			while(_g < anims.length) {
				var anim = anims[_g];
				++_g;
				var animdata = Reflect.field(anim_items,anim);
				var _anim = new luxe.components.sprite.SpriteAnimationData(this.get_entity(),anim);
				_anim.from_json(animdata);
				this.animation_list.set(anim,_anim);
			}
		} else haxe.Log.trace("SpriteAnimation on " + this.get_entity().name + " was given a json object to add but it had no properties... This is probably an error.",{ fileName : "SpriteAnimation.hx", lineNumber : 560, className : "luxe.components.sprite.SpriteAnimation", methodName : "add_from_json_object"});
	}
	,add_from_json: function(_json_string) {
		var _json_object = JSON.parse(_json_string);
		this.add_from_json_object(_json_object);
	}
	,remove_event: function(_animation,_image_frame,_event) {
		if(_event == null) _event = "";
		if(this.animation_list.exists(_animation)) {
			var _anim = this.animation_list.get(_animation);
			var _g = 0;
			var _g1 = _anim.frameset;
			while(_g < _g1.length) {
				var _anim_frame = _g1[_g];
				++_g;
				if(_anim_frame.image_frame == _image_frame) {
					var _g2 = 0;
					var _g3 = _anim_frame.events;
					while(_g2 < _g3.length) {
						var _frame_event = _g3[_g2];
						++_g2;
						if(_frame_event.frame == _image_frame && _frame_event.event == _event) {
							HxOverrides.remove(_anim_frame.events,_frame_event);
							null;
						}
					}
				}
			}
		} else haxe.Log.trace("SpriteAnimation on " + this.get_entity().name + " was asked for " + this.get_animation() + " to add an event but it is not found in the component. ",{ fileName : "SpriteAnimation.hx", lineNumber : 591, className : "luxe.components.sprite.SpriteAnimation", methodName : "remove_event"});
	}
	,remove_events: function(_animation,_image_frame) {
		if(this.animation_list.exists(_animation)) {
			var _anim = this.animation_list.get(_animation);
			var _g = 0;
			var _g1 = _anim.frameset;
			while(_g < _g1.length) {
				var _anim_frame = _g1[_g];
				++_g;
				if(_anim_frame.image_frame == _image_frame) _anim_frame.events = [];
			}
		} else haxe.Log.trace("SpriteAnimation on " + this.get_entity().name + " was asked for " + this.get_animation() + " to add an event but it is not found in the component. ",{ fileName : "SpriteAnimation.hx", lineNumber : 608, className : "luxe.components.sprite.SpriteAnimation", methodName : "remove_events"});
	}
	,add_event: function(_animation,_image_frame,_event) {
		if(_event == null) _event = "";
		if(this.animation_list.exists(_animation)) {
			var _anim = this.animation_list.get(_animation);
			var _g = 0;
			var _g1 = _anim.frameset;
			while(_g < _g1.length) {
				var _anim_frame = _g1[_g];
				++_g;
				if(_anim_frame.image_frame == _image_frame) {
					var _add_event = true;
					var _g2 = 0;
					var _g3 = _anim_frame.events;
					while(_g2 < _g3.length) {
						var _frame_event = _g3[_g2];
						++_g2;
						if(_frame_event.frame == _image_frame && _frame_event.event == _event) {
							_add_event = false;
							null;
						}
					}
					if(_add_event) {
						_anim_frame.events.push({ frame : _image_frame, event : _event});
						null;
					}
				}
			}
		} else haxe.Log.trace("SpriteAnimation on " + this.get_entity().name + " was asked for " + this.get_animation() + " to add an event but it is not found in the component. ",{ fileName : "SpriteAnimation.hx", lineNumber : 647, className : "luxe.components.sprite.SpriteAnimation", methodName : "add_event"});
	}
	,get_speed: function() {
		return this.speed;
	}
	,set_speed: function(_speed) {
		if(this.current != null) this.current.frame_time = 1 / _speed;
		return this.speed = _speed;
	}
	,get_animation: function() {
		return this.animation;
	}
	,set_animation: function(_name) {
		if(this.animation_list.exists(_name)) {
			this.current = this.animation_list.get(_name);
			this.loop = this.current.loop;
			this.pingpong = this.current.pingpong;
			this.reverse = this.current.reverse;
			this.frame_time = this.current.frame_time;
			this.next_frame_time = this.time;
			return this.animation = _name;
		}
		haxe.Log.trace("SpriteAnimation on " + this.get_entity().name + " was asked for " + this.get_animation() + " but it is not found in the component. ",{ fileName : "SpriteAnimation.hx", lineNumber : 683, className : "luxe.components.sprite.SpriteAnimation", methodName : "set_animation"});
		return this.get_animation();
	}
	,restart: function() {
		this.frame = 1;
		this.play();
	}
	,play: function() {
		this.playing = true;
	}
	,stop: function() {
		this.playing = false;
	}
	,set_frame: function(_frame) {
		if(this.sprite == null) return;
		if(this.current == null) return;
		if(this.current_frame == null) return;
		if(this.current.type == luxe.components.sprite.SpriteAnimationType.animated_uv) {
			if(this.sprite.texture == null) return;
			var frames_per_row = (this.sprite.texture.width - this.sprite.texture.width % this.current.frame_size.x) / this.current.frame_size.x;
			var image_row = Math.ceil(_frame / frames_per_row);
			var image_x = (_frame - 1) * this.current.frame_size.x % this.sprite.texture.width;
			var image_y = (image_row - 1) * this.current.frame_size.y;
			this.uv_cache.set(image_x,image_y,this.current.frame_size.x,this.current.frame_size.y);
			this.sprite.set_uv(this.uv_cache);
		} else if(this.current.type == luxe.components.sprite.SpriteAnimationType.animated_texture) {
			if(_frame <= this.current.image_set.length - 1) {
				this.sprite.set_texture(this.current.image_set[_frame - 1]);
				this.uv_cache.set(this.current_frame.frame_source.x,this.current_frame.frame_source.y,this.current_frame.frame_source.w,this.current_frame.frame_source.h);
				this.sprite.set_uv(this.uv_cache);
			}
		}
		var _anim_frame = this.current.frameset[_frame - 1];
		this.image_frame = _anim_frame.image_frame;
		this.current_frame = _anim_frame;
		this.frame = _frame;
	}
	,refresh_sprite: function() {
		if(this.sprite == null) return;
		if(this.current == null) return;
		if(this.current_frame == null) return;
		if(this.current.type == luxe.components.sprite.SpriteAnimationType.animated_uv) {
			if(this.sprite.texture == null) return;
			this.uv_cache.set(this.current_frame.frame_source.x,this.current_frame.frame_source.y,this.current_frame.frame_source.w,this.current_frame.frame_source.h);
			var _ratio_x = this.current_frame.frame_size.x / this.sprite.size.x;
			var _ratio_y = this.current_frame.frame_size.y / this.sprite.size.y;
			this.sprite.geometry.transform.local.scale.set_x(this.current_frame.frame_source.w / this.current_frame.frame_size.x * this.sprite.get_scale().x);
			this.sprite.geometry.transform.local.scale.set_y(this.current_frame.frame_source.h / this.current_frame.frame_size.y * this.sprite.get_scale().y);
			this.sprite.geometry.transform.origin.set_x(-(this.current_frame.frame_pos.x / _ratio_x * this.sprite.get_scale().x) / this.sprite.geometry.transform.local.scale.x);
			this.sprite.geometry.transform.origin.set_y(-(this.current_frame.frame_pos.y / _ratio_y * this.sprite.get_scale().y) / this.sprite.geometry.transform.local.scale.y);
			this.sprite.set_uv(this.uv_cache);
		} else if(this.current.type == luxe.components.sprite.SpriteAnimationType.animated_texture) {
			if(this.image_frame <= this.current.image_set.length) {
				this.sprite.set_texture(this.current.image_set[this.image_frame - 1]);
				this.uv_cache.set(this.current_frame.frame_source.x,this.current_frame.frame_source.y,this.current_frame.frame_source.w,this.current_frame.frame_source.h);
				this.sprite.set_uv(this.uv_cache);
			}
		}
	}
	,update: function(dt) {
		if(this.current == null) return;
		if(!this.playing) return;
		var end = false;
		this.time += dt;
		if(this.time >= this.next_frame_time) {
			this.next_frame_time = this.time + this.current.frame_time;
			if(!this.reverse) this.frame += 1; else this.frame -= 1;
			if(!this.reverse) {
				if(this.frame > this.current.get_frame_count()) {
					end = true;
					if(!this.loop) this.frame = this.current.get_frame_count();
				}
			} else if(this.frame < 1) {
				end = true;
				if(!this.loop) this.frame = 1;
			}
			if(end) {
				if(this.loop) {
					if(this.pingpong) this.reverse = !this.reverse;
					if(!this.reverse) this.frame = 1; else this.frame = this.current.get_frame_count();
				} else this.stop();
			}
			var _anim_frame = this.current.frameset[this.frame - 1];
			this.image_frame = _anim_frame.image_frame;
			this.current_frame = _anim_frame;
			var _g = 0;
			var _g1 = _anim_frame.events;
			while(_g < _g1.length) {
				var _event = _g1[_g];
				++_g;
				var _event_emit_name = _event.event;
				if(_event_emit_name == "") _event_emit_name = this.get_animation() + ".event." + _anim_frame.image_frame;
				this.get_entity().events.fire(_event_emit_name,{ animation : this.get_animation(), event : _event_emit_name, frame_event : _event, frame : _anim_frame, image_frame : _anim_frame.image_frame});
			}
			this.refresh_sprite();
		}
	}
	,ondestroy: function() {
		luxe.Component.prototype.ondestroy.call(this);
	}
	,onremoved: function() {
		luxe.Component.prototype.onremoved.call(this);
	}
	,__class__: luxe.components.sprite.SpriteAnimation
	,__properties__: $extend(luxe.Component.prototype.__properties__,{set_speed:"set_speed",get_speed:"get_speed",set_animation:"set_animation",get_animation:"get_animation"})
});
luxe.debug = {};
luxe.debug.DebugView = function() {
	this.visible = false;
	luxe.Objects.call(this);
};
luxe.debug.DebugView.__name__ = ["luxe","debug","DebugView"];
luxe.debug.DebugView.__super__ = luxe.Objects;
luxe.debug.DebugView.prototype = $extend(luxe.Objects.prototype,{
	refresh: function() {
	}
	,process: function() {
	}
	,onmousedown: function(e) {
	}
	,onmousewheel: function(e) {
	}
	,onmouseup: function(e) {
	}
	,onmousemove: function(e) {
	}
	,onkeydown: function(e) {
	}
	,onkeyup: function(e) {
	}
	,onwindowsized: function(e) {
	}
	,create: function() {
	}
	,show: function() {
		this.visible = true;
	}
	,hide: function() {
		this.visible = false;
	}
	,__class__: luxe.debug.DebugView
});
luxe.debug.BatcherDebugView = function() {
	this.as_immediate = false;
	this.dragging = false;
	luxe.debug.DebugView.call(this);
	this.name = "Batcher Debug";
};
luxe.debug.BatcherDebugView.__name__ = ["luxe","debug","BatcherDebugView"];
luxe.debug.BatcherDebugView.__super__ = luxe.debug.DebugView;
luxe.debug.BatcherDebugView.prototype = $extend(luxe.debug.DebugView.prototype,{
	create: function() {
		this.batcher = Luxe.renderer.create_batcher({ name : "debug_batcher_view", camera : new phoenix.Camera({ camera_name : "batcher_debug_view"}), layer : 1000});
	}
	,refresh: function() {
		this.clear_batcher_tree();
		this.draw_batcher_tree();
	}
	,onmousedown: function(e) {
		this.dragmstart = e.pos.clone();
		this.dragstart = this.batcher.view.get_pos().clone();
		this.dragging = true;
	}
	,onmouseup: function(e) {
		this.dragging = false;
	}
	,onmousemove: function(e) {
		if(this.dragging) {
			var diff = phoenix.Vector.Subtract(e.pos,this.dragmstart);
			this.batcher.view.set_pos(phoenix.Vector.Subtract(this.dragstart,diff));
		}
	}
	,onmousewheel: function(e) {
		if(e.y < 0) {
			var _g = this.batcher.view;
			_g.set_zoom(_g.zoom - 0.1);
		} else {
			var _g1 = this.batcher.view;
			_g1.set_zoom(_g1.zoom + 0.1);
		}
	}
	,clear_batcher_tree: function() {
		if(this._tree_geom != null) {
			this._tree_geom.drop();
			this._tree_geom = null;
		}
	}
	,keystr: function(key,key2) {
		return "ts: " + key.timestamp + "\n" + "seq: " + key.sequence + "\n" + "primitive_type: " + Std.string(key.primitive_type) + " " + Std.string(key.primitive_type) + "\n" + "texture: " + (key.texture == null?"null":Std.string(key.texture.texture)) + "\n" + "texture id: " + (key.texture == null?"null":key.texture.id) + "\n" + "shader: " + (key.shader == null?"null":key.shader.id) + "\n" + "group: " + key.group + "\n" + "depth: " + key.depth + "\n" + "clip: " + (key.clip == null?"null":"" + key.clip);
	}
	,draw_geom_node: function(l,_leaf,_p,_bbw) {
		if(_bbw == null) _bbw = 20;
		var _bw = 128;
		var _bwhalf = _bw / 2;
		var _bh = 128;
		var _g = _leaf.value;
		var c = new phoenix.Color(1,1,1,0.4).rgb(16777215);
		if(_g.dropped) c = new phoenix.Color(1,1,1,1).rgb(13369344);
		this._tree_geom.add_geometry(Luxe.draw.rectangle({ immediate : this.as_immediate, x : _p.x - _bwhalf, y : _p.y, w : _bw, h : _bh, color : c, batcher : this.batcher, depth : 999.4}));
		this._tree_geom.add_geometry(Luxe.draw.text({ immediate : this.as_immediate, bounds : new phoenix.Rectangle(_p.x - _bwhalf,_p.y,_bw,_bh), point_size : 13, color : c, batcher : this.batcher, depth : 999.4, text : this.keystr(_leaf.key,_g.key), align : 2, align_vertical : 2}));
		var t = new phoenix.Vector(_p.x,_p.y,_p.z,_p.w).set_xy(_p.x,_p.y - 16);
		var t2 = new phoenix.Vector(_p.x,_p.y,_p.z,_p.w).set_xy(_p.x,_p.y + _bw + 2);
		var talign = 2;
		this._tree_geom.add_geometry(Luxe.draw.text({ immediate : this.as_immediate, pos : t, point_size : 13, color : c, batcher : this.batcher, depth : 999.4, text : _g.id, align : talign}));
		var c2 = new phoenix.Color(1,1,1,0.4).rgb(16750916);
		var notes_l = "none";
		var notes_r = "none";
		if(_leaf.left != null) {
			notes_l = "node";
			var compare = Luxe.renderer.batcher.compare_rule(_leaf.key,_leaf.left.key);
			notes_l = Luxe.renderer.batcher.compare_rule_to_string(compare);
		}
		if(_leaf.right != null) {
			notes_r = "node";
			var compare1 = Luxe.renderer.batcher.compare_rule(_leaf.key,_leaf.right.key);
			notes_r = Luxe.renderer.batcher.compare_rule_to_string(compare1);
		}
		this._tree_geom.add_geometry(Luxe.draw.text({ immediate : this.as_immediate, pos : t2, point_size : 13, color : c2, batcher : this.batcher, depth : 999.4, text : notes_l + " / " + notes_r, align : talign}));
	}
	,draw_geom_leaf: function(L,_leaf,_p) {
		if(_leaf == null) return;
		var _bw = _leaf.nodecount / 20;
		var _bwb = _leaf.nodecount * 25;
		var _bh = 128;
		var _bh2 = 148;
		var _bwhalf = _bw / 2;
		var c = new phoenix.Color(1,1,1,0.4).rgb(16777215);
		if(_leaf != null) {
			this.draw_geom_node(L,_leaf,_p,_bw);
			if(_leaf.left != null) {
				if(Luxe.renderer.batcher.geometry_compare(_leaf.left.key,_leaf.key) < 0) c = new phoenix.Color(1,1,1,1).rgb(52224); else c = new phoenix.Color(1,1,1,1).rgb(13369344);
				this._tree_geom.add_geometry(Luxe.draw.line({ immediate : this.as_immediate, p0 : new phoenix.Vector(_p.x - _bwhalf,_p.y + _bh), p1 : new phoenix.Vector(_p.x - _bwb,_p.y + _bh2), color : c, batcher : this.batcher, depth : 999.4}));
				this.draw_geom_leaf(true,_leaf.left,new phoenix.Vector(_p.x - _bwb,_p.y + _bh2));
			}
			if(_leaf.right != null) {
				if(Luxe.renderer.batcher.geometry_compare(_leaf.right.key,_leaf.key) > 0) c = new phoenix.Color(1,1,1,1).rgb(52224); else c = new phoenix.Color(1,1,1,1).rgb(13369344);
				this._tree_geom.add_geometry(Luxe.draw.line({ immediate : this.as_immediate, p0 : new phoenix.Vector(_p.x + _bwhalf,_p.y + _bh), p1 : new phoenix.Vector(_p.x + _bwb,_p.y + _bh2), color : c, batcher : this.batcher, depth : 999.4}));
				this.draw_geom_leaf(false,_leaf.right,new phoenix.Vector(_p.x + _bwb,_p.y + _bh2));
			}
		}
	}
	,draw_batcher_tree: function() {
		this._tree_geom = null;
		this._tree_geom = new phoenix.geometry.CompositeGeometry({ batcher : this.batcher, immediate : this.as_immediate, depth : 999.4});
		var _p = new phoenix.Vector(Luxe.core.screen.w / 2,Luxe.debug.padding.y * 2 + 10);
		var _node = Luxe.renderer.batcher.geometry.root;
		this.draw_geom_leaf(true,_node,_p);
	}
	,process: function() {
		if(this.visible) {
			if(Luxe.renderer.batcher.tree_changed) this.refresh();
		}
	}
	,show: function() {
		luxe.debug.DebugView.prototype.show.call(this);
		this.refresh();
	}
	,hide: function() {
		luxe.debug.DebugView.prototype.hide.call(this);
		this.clear_batcher_tree();
	}
	,__class__: luxe.debug.BatcherDebugView
});
luxe.debug.Inspector = function(_options) {
	this.title = "Inspector";
	this.font = Luxe.renderer.font;
	this.set_size(new phoenix.Vector(Luxe.core.screen.w * 0.2 | 0,Luxe.core.screen.h * 0.6 | 0));
	this.set_pos(new phoenix.Vector(Luxe.core.screen.w / 2 - this.size.x / 2,Luxe.core.screen.h / 2 - this.size.y / 2));
	this._batcher = Luxe.renderer.batcher;
	if(_options != null) {
		if(_options.title != null) this.title = _options.title;
		if(_options.font != null) this.font = _options.font;
		if(_options.pos != null) this.set_pos(_options.pos);
		if(_options.size != null) this.set_size(_options.size);
		if(_options.batcher != null) this._batcher = _options.batcher;
	}
};
luxe.debug.Inspector.__name__ = ["luxe","debug","Inspector"];
luxe.debug.Inspector.prototype = {
	refresh: function() {
		if(this._window == null) this._create_window();
		if(this.onrefresh != null) this.onrefresh();
	}
	,show: function() {
		this.refresh();
		this._window.set_visible(true);
		this._title_text.set_visible(true);
		this._version_text.set_visible(true);
	}
	,hide: function() {
		this._window.set_visible(false);
		this._title_text.set_visible(false);
		this._version_text.set_visible(false);
	}
	,set_size: function(_size) {
		if(this.size != null && this._window != null) this._window.set_size(_size);
		if(this._version_text != null) this._version_text.set_pos(new phoenix.Vector(this.pos.x + (_size.x - 14),this.pos.y + 6));
		return this.size = _size;
	}
	,set_pos: function(_pos) {
		if(this.pos != null && this._window != null) this._window.set_pos(_pos);
		if(this._title_text != null) this._title_text.set_pos(new phoenix.Vector(_pos.x + 14,_pos.y + 6));
		if(this._version_text != null) this._version_text.set_pos(new phoenix.Vector(_pos.x + (this.size.x - 14),_pos.y + 6));
		return this.pos = _pos;
	}
	,_create_window: function() {
		if(this._window != null) this._window.destroy();
		this._window = new luxe.Sprite({ centered : false, depth : 999.1, color : new phoenix.Color().rgb(1447449), size : this.size, pos : this.pos, batcher : this._batcher});
		this._window.geometry.id = "debug.Inspector";
		this._window.set_locked(true);
		this._title_text = new luxe.Text({ name : "debug.title", batcher : this._batcher, no_scene : true, depth : 999.2, color : new phoenix.Color().rgb(16121979), pos : new phoenix.Vector(this.pos.x + 14,this.pos.y + 6), align : 0, font : this.font, text : this.title, point_size : 15, visible : false},{ fileName : "Inspector.hx", lineNumber : 128, className : "luxe.debug.Inspector", methodName : "_create_window"});
		this._version_text = new luxe.Text({ name : "debug.version", batcher : this._batcher, no_scene : true, depth : 999.2, color : new phoenix.Color().rgb(3355443), pos : new phoenix.Vector(this.pos.x + (this.size.x - 14),this.pos.y + 6), align : 1, font : this.font, text : "" + Luxe.build, point_size : 16, visible : false},{ fileName : "Inspector.hx", lineNumber : 142, className : "luxe.debug.Inspector", methodName : "_create_window"});
		if(this._title_text.geometry != null) this._title_text.geometry.id = "debug.title.text";
		if(this._version_text.geometry != null) this._version_text.geometry.id = "debug.version.text";
	}
	,__class__: luxe.debug.Inspector
	,__properties__: {set_size:"set_size",set_pos:"set_pos"}
};
luxe.debug.ProfilerDebugView = function() {
	this._setup = false;
	luxe.debug.DebugView.call(this);
	this.name = "Profiler";
	luxe.debug.ProfilerDebugView.lists = new haxe.ds.StringMap();
};
luxe.debug.ProfilerDebugView.__name__ = ["luxe","debug","ProfilerDebugView"];
luxe.debug.ProfilerDebugView.add_offset = function(_id,_offset) {
	var _item = luxe.debug.ProfilerDebugView.lists.get(_id);
	var _offsetitem = luxe.debug.ProfilerDebugView.lists.get(_offset);
	if(_item != null && _offsetitem != null) _item.offsets.push(_offsetitem); else {
		haxe.Log.trace("not found for " + _id + " or " + _offset,{ fileName : "ProfilerDebugView.hx", lineNumber : 32, className : "luxe.debug.ProfilerDebugView", methodName : "add_offset"});
		haxe.Log.trace(Std.string(_item) + " / " + Std.string(_offsetitem),{ fileName : "ProfilerDebugView.hx", lineNumber : 33, className : "luxe.debug.ProfilerDebugView", methodName : "add_offset"});
	}
};
luxe.debug.ProfilerDebugView.hide_item = function(_id) {
	var _item = luxe.debug.ProfilerDebugView.lists.get(_id);
	if(_item != null) {
		_item.hidden = true;
		_item.bar.hide();
	}
};
luxe.debug.ProfilerDebugView.show_item = function(_id) {
	var _item = luxe.debug.ProfilerDebugView.lists.get(_id);
	if(_item != null) {
		_item.hidden = false;
		_item.bar.show();
	}
};
luxe.debug.ProfilerDebugView.start = function(_id,_max) {
	if(_max == null) _max = 0.0;
	var _item = luxe.debug.ProfilerDebugView.lists.get(_id);
	if(_item == null) {
		_item = new luxe.debug._ProfilerDebugView.ProfilerValue(_id,new luxe.debug._ProfilerDebugView.ProfilerBar(_id,_max,new phoenix.Color().rgb(16121979)));
		_item.bar.set_pos(new phoenix.Vector(Luxe.debug.padding.x * 2,Luxe.debug.padding.y * 3 + Lambda.count(luxe.debug.ProfilerDebugView.lists) * 20));
		luxe.debug.ProfilerDebugView.lists.set(_id,_item);
	}
	_item.start = snow.Snow.core.timestamp();
};
luxe.debug.ProfilerDebugView.end = function(_id) {
	var _item = luxe.debug.ProfilerDebugView.lists.get(_id);
	if(_item != null) _item.set(); else throw "Profile end called for " + _id + " but no start called";
};
luxe.debug.ProfilerDebugView.__super__ = luxe.debug.DebugView;
luxe.debug.ProfilerDebugView.prototype = $extend(luxe.debug.DebugView.prototype,{
	show: function() {
		var $it0 = luxe.debug.ProfilerDebugView.lists.iterator();
		while( $it0.hasNext() ) {
			var _item = $it0.next();
			if(!_item.hidden) _item.bar.show();
		}
		if(!this._setup) {
			luxe.debug.ProfilerDebugView.add_offset("core.render","batch.debug_batcher");
			this._setup = true;
		}
	}
	,hide: function() {
		var $it0 = luxe.debug.ProfilerDebugView.lists.iterator();
		while( $it0.hasNext() ) {
			var _item = $it0.next();
			_item.bar.hide();
		}
	}
	,__class__: luxe.debug.ProfilerDebugView
});
luxe.debug._ProfilerDebugView = {};
luxe.debug._ProfilerDebugView.ProfilerValue = function(_name,_bar) {
	this.accum = 0;
	this.count = 0;
	this.hidden = false;
	this.avg = 10;
	this.start = 0.0;
	this.name = _name;
	this.bar = _bar;
	this.history = [];
	this.offsets = [];
};
luxe.debug._ProfilerDebugView.ProfilerValue.__name__ = ["luxe","debug","_ProfilerDebugView","ProfilerValue"];
luxe.debug._ProfilerDebugView.ProfilerValue.prototype = {
	set: function() {
		var _t = snow.Snow.core.timestamp() - this.start;
		var _g = 0;
		var _g1 = this.offsets;
		while(_g < _g1.length) {
			var _offset = _g1[_g];
			++_g;
			_t -= _offset.history[_offset.history.length - 1];
		}
		this.history.push(_t);
		if(this.history.length > this.avg) this.history.shift();
		this.count++;
		if(this.count == this.avg) {
			var __t = this.accum / this.avg;
			this.bar.set_value(__t);
			this.bar.set_ping(__t);
			this.accum = 0;
			this.count = 0;
		}
		this.accum += _t;
		if(this.bar.visible) this.bar.set_text(Std.string(luxe.utils.Maths.fixed(_t * 1000,4)));
	}
	,__class__: luxe.debug._ProfilerDebugView.ProfilerValue
};
luxe.debug._ProfilerDebugView.ProfilerBar = function(_name,_max,_color) {
	if(_max == null) _max = 0.0;
	this.visible = false;
	this.history = 33;
	this.max = 16.6;
	this.height2 = 8;
	this.height = 8;
	this.width = 128;
	this.color_red = new phoenix.Color().rgb(13369344);
	this.color_green = new phoenix.Color().rgb(2263108);
	this.color_normal = new phoenix.Color().rgb(15790320);
	if(_max == 0.0) this.max = 16.6666666666666679; else this.max = _max;
	this.max = luxe.utils.Maths.fixed(this.max,1);
	this.name = _name;
	this.segment = this.width / this.history;
	this.height2 = this.height * 2;
	this.text_item = new luxe.Text({ no_scene : true, name : "profiler.text." + _name, pos : new phoenix.Vector(0,0), color : _color, point_size : this.height * 1.8, depth : 999.3, text : "", batcher : Luxe.debug.batcher},{ fileName : "ProfilerDebugView.hx", lineNumber : 189, className : "luxe.debug._ProfilerDebugView.ProfilerBar", methodName : "new"});
	this.bg_geometry = Luxe.draw.box({ color : new phoenix.Color().rgb(592137), depth : 999.3, batcher : Luxe.debug.batcher, x : 0, y : 0, w : this.width, h : this.height});
	this.graphbg_geometry = Luxe.draw.box({ color : new phoenix.Color().rgb(2236962), depth : 999.3, batcher : Luxe.debug.batcher, x : 0, y : 0, w : this.width - this.segment, h : this.height * 2});
	this.bar_geometry = Luxe.draw.box({ color : _color, depth : 999.33, batcher : Luxe.debug.batcher, x : 1, y : 1, w : this.width - 2, h : this.height - 2});
	this.graph_geometry = new phoenix.geometry.Geometry({ color : _color, depth : 999.33, batcher : Luxe.debug.batcher});
	var _g1 = 0;
	var _g = this.history;
	while(_g1 < _g) {
		var i = _g1++;
		var _b = new phoenix.geometry.Vertex(new phoenix.Vector(this.segment * i,0),_color);
		this.graph_geometry.add(_b);
	}
	this.graph_geometry.set_primitive_type(3);
	this.hide();
};
luxe.debug._ProfilerDebugView.ProfilerBar.__name__ = ["luxe","debug","_ProfilerDebugView","ProfilerBar"];
luxe.debug._ProfilerDebugView.ProfilerBar.prototype = {
	hide: function() {
		this.visible = false;
		this.bar_geometry.set_visible(false);
		this.bg_geometry.set_visible(false);
		this.graph_geometry.set_visible(false);
		this.graphbg_geometry.set_visible(false);
		this.text_item.set_visible(false);
	}
	,show: function() {
		this.visible = true;
		this.bar_geometry.set_visible(true);
		this.bg_geometry.set_visible(true);
		this.graph_geometry.set_visible(true);
		this.graphbg_geometry.set_visible(true);
		this.text_item.set_visible(true);
	}
	,set_ping: function(_v) {
		var _vv = luxe.utils.Maths.fixed(_v * 1000,4);
		var _p = _vv / this.max;
		var _g1 = 0;
		var _g = this.history;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this.graph_geometry.vertices[i];
			if(i < this.history - 1) {
				var v1 = this.graph_geometry.vertices[i + 1];
				if(v1 != null) {
					v.pos.set_y(Math.floor(v1.pos.y));
					v.color = v1.color;
				}
			}
		}
		if(_p > 1) {
			_p = 1;
			this.graph_geometry.vertices[this.history - 1].color = this.color_red;
		} else if(_p < 0.2) this.graph_geometry.vertices[this.history - 1].color = this.color_green; else this.graph_geometry.vertices[this.history - 1].color = this.color_normal;
		if(_p < 0.001) _p = 0.001;
		this.graph_geometry.vertices[this.history - 1].pos.set_y(Math.floor(this.height2 * (1.0 - _p)));
		return this.ping = _v;
	}
	,set_value: function(_v) {
		var _vv = luxe.utils.Maths.fixed(_v * 1000,4);
		var _p = _vv / this.max;
		if(_p > 1) {
			_p = 1;
			this.bar_geometry.set_color(this.color_red);
		} else if(_p < 0.15) this.bar_geometry.set_color(this.color_green); else this.bar_geometry.set_color(this.color_normal);
		if(_p < 0.005) _p = 0.005;
		var nx = (this.width - 2) * _p;
		this.bar_geometry.resize(new phoenix.Vector(nx,this.height - 2));
		return this.value = _v;
	}
	,set_pos: function(_p) {
		this.bg_geometry.transform.local.set_pos(_p);
		this.bar_geometry.transform.set_pos(new phoenix.Vector(_p.x + 1,_p.y + 1));
		this.text_item.set_pos(new phoenix.Vector(_p.x + this.width * 2 + 10,_p.y - 6));
		this.graphbg_geometry.transform.set_pos(new phoenix.Vector(_p.x + this.width + 2,_p.y - 4));
		this.graph_geometry.transform.local.set_pos(this.graphbg_geometry.transform.local.pos);
		return this.pos = _p;
	}
	,set_text: function(_t) {
		this.text_item.set_text("" + this.name + " (" + this.max + "ms) | " + _t + "ms");
		return this.text = _t;
	}
	,__class__: luxe.debug._ProfilerDebugView.ProfilerBar
	,__properties__: {set_ping:"set_ping",set_value:"set_value",set_pos:"set_pos",set_text:"set_text"}
};
luxe.debug.StatsDebugView = function() {
	this.hide_debug = true;
	this.font_size = 15;
	this.debug_geometry_count = 13;
	this.debug_draw_call_count = 3;
	luxe.debug.DebugView.call(this);
	this.name = "Statistics";
	this._last_render_stats = { batchers : 0, geometry_count : 0, dynamic_batched_count : 0, static_batched_count : 0, visible_count : 0, draw_calls : 0, vert_count : 0, group_count : 0};
	this._render_stats = { batchers : 0, geometry_count : 0, dynamic_batched_count : 0, static_batched_count : 0, visible_count : 0, draw_calls : 0, vert_count : 0, group_count : 0};
};
luxe.debug.StatsDebugView.__name__ = ["luxe","debug","StatsDebugView"];
luxe.debug.StatsDebugView.__super__ = luxe.debug.DebugView;
luxe.debug.StatsDebugView.prototype = $extend(luxe.debug.DebugView.prototype,{
	get_resource_stats_string: function() {
		return Std.string(Luxe.resources.stats);
	}
	,get_render_stats_string: function() {
		return "Renderer Statistics\n" + "\tbatcher count : " + this._render_stats.batchers + "\n" + "\ttotal geometry : " + this._render_stats.geometry_count + "\n" + "\tvisible geometry : " + this._render_stats.visible_count + "\n" + "\tdynamic batch count : " + this._render_stats.dynamic_batched_count + "\n" + "\tstatic batch count : " + this._render_stats.static_batched_count + "\n" + "\ttotal draw calls : " + this._render_stats.draw_calls + "\n" + "\ttotal vert count : " + this._render_stats.vert_count;
	}
	,create: function() {
		var debug = Luxe.debug;
		this.render_stats_text = new luxe.Text({ depth : 999.3, no_scene : true, color : new phoenix.Color(0,0,0,1).rgb(16121979), pos : new phoenix.Vector(debug.padding.x * 2,debug.padding.y * 3), font : Luxe.renderer.font, text : this.get_render_stats_string(), point_size : this.font_size, batcher : debug.batcher, visible : false},{ fileName : "StatsDebugView.hx", lineNumber : 82, className : "luxe.debug.StatsDebugView", methodName : "create"});
		this.resource_stats_text = new luxe.Text({ depth : 999.3, no_scene : true, color : new phoenix.Color(0,0,0,1).rgb(16121979), pos : new phoenix.Vector(debug.padding.x * 2,debug.padding.y * 7.5), font : Luxe.renderer.font, text : this.get_resource_stats_string(), point_size : this.font_size, batcher : debug.batcher, visible : false},{ fileName : "StatsDebugView.hx", lineNumber : 94, className : "luxe.debug.StatsDebugView", methodName : "create"});
		this.resource_list_text = new luxe.Text({ depth : 999.3, no_scene : true, color : new phoenix.Color(0,0,0,1).rgb(16121979), pos : new phoenix.Vector(debug.padding.x * 7,debug.padding.y * 3), font : Luxe.renderer.font, text : "", point_size : this.font_size * 0.8, batcher : debug.batcher, visible : false},{ fileName : "StatsDebugView.hx", lineNumber : 106, className : "luxe.debug.StatsDebugView", methodName : "create"});
		this.resource_list_text.set_locked(true);
		this.resource_stats_text.set_locked(true);
	}
	,onwindowsized: function(e) {
		var debug = Luxe.debug;
		if(this.resource_list_text != null) {
			this.resource_list_text.set_pos(new phoenix.Vector(debug.padding.x * 7,debug.padding.y * 3));
			this.resource_list_text.geometry.set_dirty(true);
		}
		if(this.resource_stats_text != null) {
			this.resource_stats_text.set_pos(new phoenix.Vector(debug.padding.x * 2,debug.padding.y * 7.5));
			this.resource_stats_text.geometry.set_dirty(true);
		}
		if(this.render_stats_text != null) {
			this.render_stats_text.set_pos(new phoenix.Vector(debug.padding.x * 2,debug.padding.y * 3));
			this.render_stats_text.geometry.set_dirty(true);
		}
	}
	,refresh: function() {
		var texture_lists = "";
		var shader_lists = "";
		var font_lists = "";
		var _g = 0;
		var _g1 = Luxe.resources.resourcelist;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			var _g2 = res.type;
			switch(_g2) {
			case 4:
				var t = res;
				texture_lists += "\t" + t.id + "    (" + t.width_actual + "x" + t.height_actual + "  " + t.estimated_memory() + " )\n";
				break;
			case 7:
				font_lists += "\t" + res.id + "\n";
				break;
			case 8:
				shader_lists += "\t" + res.id + "\n";
				break;
			default:
			}
		}
		var lists = "Fonts\n";
		lists += font_lists;
		lists += "Shader\n";
		lists += shader_lists;
		lists += "Textures\n";
		lists += texture_lists;
		this.resource_list_text.set_text(lists);
		if(this.resource_list_text.geometry != null) this.resource_list_text.geometry.set_dirty(true);
	}
	,process: function() {
		if(!this.visible) return;
		var dirty = false;
		this.update_render_stats();
		if(this._last_render_stats.batchers != this._render_stats.batchers) {
			dirty = true;
			this._last_render_stats.batchers = this._render_stats.batchers;
		}
		if(this._last_render_stats.geometry_count != this._render_stats.geometry_count) {
			dirty = true;
			this._last_render_stats.geometry_count = this._render_stats.geometry_count;
		}
		if(this._last_render_stats.dynamic_batched_count != this._render_stats.dynamic_batched_count) {
			dirty = true;
			this._last_render_stats.dynamic_batched_count = this._render_stats.dynamic_batched_count;
		}
		if(this._last_render_stats.static_batched_count != this._render_stats.static_batched_count) {
			dirty = true;
			this._last_render_stats.static_batched_count = this._render_stats.static_batched_count;
		}
		if(this._last_render_stats.visible_count != this._render_stats.visible_count) {
			dirty = true;
			this._last_render_stats.visible_count = this._render_stats.visible_count;
		}
		if(this._last_render_stats.draw_calls != this._render_stats.draw_calls) {
			dirty = true;
			this._last_render_stats.draw_calls = this._render_stats.draw_calls;
		}
		if(this._last_render_stats.group_count != this._render_stats.group_count) {
			dirty = true;
			this._last_render_stats.group_count = this._render_stats.group_count;
		}
		if(this._last_render_stats.vert_count != this._render_stats.vert_count) {
			dirty = true;
			this._last_render_stats.vert_count = this._render_stats.vert_count;
		}
		if(dirty) this.refresh_render_stats();
	}
	,onkeydown: function(e) {
		if(e.keycode == snow.system.input.Keycodes.key_2 && this.visible) this.toggle_debug_stats();
	}
	,show: function() {
		luxe.debug.DebugView.prototype.show.call(this);
		this.refresh();
		this.render_stats_text.set_visible(true);
		this.resource_stats_text.set_visible(true);
		this.resource_list_text.set_visible(true);
	}
	,hide: function() {
		luxe.debug.DebugView.prototype.hide.call(this);
		this.render_stats_text.set_visible(false);
		this.resource_stats_text.set_visible(false);
		this.resource_list_text.set_visible(false);
	}
	,refresh_render_stats: function() {
		if(!this.visible) return;
		this.render_stats_text.set_text(this.get_render_stats_string());
		this.resource_stats_text.set_text(this.get_resource_stats_string());
		this.resource_stats_text.set_locked(true);
		this.render_stats_text.set_locked(true);
		if(this.render_stats_text.geometry != null) {
			this.resource_stats_text.geometry.set_dirty(true);
			this.render_stats_text.geometry.set_dirty(true);
		}
	}
	,toggle_debug_stats: function() {
		this.hide_debug = !this.hide_debug;
	}
	,update_render_stats: function() {
		this.debug_geometry_count = Luxe.debug.batcher.geometry.size();
		this.debug_draw_call_count = Luxe.debug.batcher.draw_calls;
		this._render_stats.batchers = Luxe.renderer.stats.batchers;
		this._render_stats.geometry_count = Luxe.renderer.stats.geometry_count;
		this._render_stats.visible_count = Luxe.renderer.stats.visible_count;
		this._render_stats.dynamic_batched_count = Luxe.renderer.stats.dynamic_batched_count;
		this._render_stats.static_batched_count = Luxe.renderer.stats.static_batched_count;
		this._render_stats.draw_calls = Luxe.renderer.stats.draw_calls;
		this._render_stats.vert_count = Luxe.renderer.stats.vert_count;
		if(this.hide_debug) {
			this._render_stats.batchers = this._render_stats.batchers - 1;
			this._render_stats.geometry_count = this._render_stats.geometry_count - this.debug_geometry_count;
			this._render_stats.visible_count = this._render_stats.visible_count - Luxe.debug.batcher.visible_count;
			this._render_stats.dynamic_batched_count = this._render_stats.dynamic_batched_count - Luxe.debug.batcher.dynamic_batched_count;
			this._render_stats.static_batched_count = this._render_stats.static_batched_count - Luxe.debug.batcher.static_batched_count;
			this._render_stats.draw_calls -= this.debug_draw_call_count;
			this._render_stats.vert_count -= Luxe.debug.batcher.vert_count;
		}
	}
	,__class__: luxe.debug.StatsDebugView
});
luxe.debug.TraceDebugView = function() {
	this._last_logged_length = 0;
	this.max_lines = 35;
	luxe.debug.DebugView.call(this);
	this.name = "Log";
	Luxe.debug.add_trace_listener("TraceDebugView",$bind(this,this.on_trace));
	this.logged = new Array();
	this.add_line("luxe version " + Luxe.build + " Debug Log");
};
luxe.debug.TraceDebugView.__name__ = ["luxe","debug","TraceDebugView"];
luxe.debug.TraceDebugView.__super__ = luxe.debug.DebugView;
luxe.debug.TraceDebugView.prototype = $extend(luxe.debug.DebugView.prototype,{
	on_trace: function(v,inf) {
		this.add_line(inf.fileName + ":" + inf.lineNumber + " " + Std.string(v));
	}
	,create: function() {
		var debug = Luxe.debug;
		var text_bounds = new phoenix.Rectangle(debug.padding.x + 20,debug.padding.y + 40,Luxe.core.screen.w - debug.padding.x * 2 - 20,Luxe.core.screen.h - debug.padding.y * 2 - 40);
		this.lines = new luxe.Text({ name : "debug.log.text", no_scene : true, depth : 999.3, color : new phoenix.Color().rgb(8947848), bounds : text_bounds, bounds_wrap : true, font : Luxe.renderer.font, text : "", align_vertical : 4, point_size : 12, batcher : debug.batcher, visible : false},{ fileName : "TraceDebugView.hx", lineNumber : 35, className : "luxe.debug.TraceDebugView", methodName : "create"});
		if(this.lines.geometry != null) {
			this.lines.geometry.set_clip_rect(text_bounds);
			this.lines.geometry.set_locked(true);
		}
	}
	,onwindowsized: function(e) {
		var debug = Luxe.debug;
		var text_bounds = new phoenix.Rectangle(debug.padding.x + 20,debug.padding.y + 40,Luxe.core.screen.w - debug.padding.x * 2 - 20,Luxe.core.screen.h - debug.padding.y * 2 - 40);
		this.lines.set_bounds(text_bounds);
		this.lines.set_clip_rect(text_bounds);
		if(this.lines.geometry != null) {
			this.lines.geometry.set_locked(true);
			this.lines.geometry.set_dirty(true);
		}
	}
	,add_line: function(_t) {
		if(this.logged == null) return;
		this.logged.push(_t);
		if(!this.visible) return;
		this.refresh_lines();
	}
	,refresh_lines: function() {
		if(this._last_logged_length == this.logged.length) return;
		var _final = "";
		if(this.logged.length <= this.max_lines) {
			var _g = 0;
			var _g1 = this.logged;
			while(_g < _g1.length) {
				var _line = _g1[_g];
				++_g;
				_final += _line + "\n";
			}
		} else {
			var _start = this.logged.length - this.max_lines;
			var _total = this.logged.length;
			var _g11 = _start;
			var _g2 = this.logged.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var _line1 = this.logged[i];
				_final += _line1 + "\n";
			}
		}
		this.lines.set_text(_final);
		if(this.lines.geometry != null) {
			this.lines.geometry.set_locked(true);
			this.lines.geometry.set_dirty(true);
		}
		this._last_logged_length = this.logged.length;
	}
	,refresh: function() {
	}
	,process: function() {
	}
	,show: function() {
		luxe.debug.DebugView.prototype.show.call(this);
		this.refresh_lines();
		this.lines.set_visible(true);
	}
	,hide: function() {
		luxe.debug.DebugView.prototype.hide.call(this);
		this.lines.set_visible(false);
	}
	,__class__: luxe.debug.TraceDebugView
});
luxe.importers = {};
luxe.importers.tiled = {};
luxe.importers.tiled.TiledLayer = function(_map) {
	this.visible = true;
	this.opacity = 1.0;
	this.map = _map;
	this.properties = new haxe.ds.StringMap();
	this.tiles = [];
};
luxe.importers.tiled.TiledLayer.__name__ = ["luxe","importers","tiled","TiledLayer"];
luxe.importers.tiled.TiledLayer.bytes_get_int32 = function(bytes,pos) {
	return bytes.b[pos] | bytes.b[pos + 1] << 8 | bytes.b[pos + 2] << 16 | bytes.b[pos + 3] << 24;
};
luxe.importers.tiled.TiledLayer.base64_to_array = function(input,compression) {
	if(luxe.importers.tiled.TiledLayer.base_lookup.length == 0) {
		var _g1 = 0;
		var _g = luxe.importers.tiled.TiledLayer.base_chars.length;
		while(_g1 < _g) {
			var c = _g1++;
			luxe.importers.tiled.TiledLayer.base_lookup[HxOverrides.cca(luxe.importers.tiled.TiledLayer.base_chars,c)] = c;
		}
	}
	var result = [];
	var bytes = haxe.io.Bytes.alloc(input.length / 4 * 3 | 0);
	var byte_pos = 0;
	var i = 0;
	while(i < input.length - 3) {
		var input_ch = input.charAt(i);
		if(input_ch == " " || input_ch == "\n") {
			i++;
			continue;
		}
		var a0 = luxe.importers.tiled.TiledLayer.base_lookup[HxOverrides.cca(input,i)];
		var a1 = luxe.importers.tiled.TiledLayer.base_lookup[HxOverrides.cca(input,i + 1)];
		var a2 = luxe.importers.tiled.TiledLayer.base_lookup[HxOverrides.cca(input,i + 2)];
		var a3 = luxe.importers.tiled.TiledLayer.base_lookup[HxOverrides.cca(input,i + 3)];
		if(a1 < 64) bytes.set(byte_pos++,(a0 << 2) + ((a1 & 48) >> 4));
		if(a2 < 64) bytes.set(byte_pos++,((a1 & 15) << 4) + ((a2 & 60) >> 2));
		if(a3 < 64) bytes.set(byte_pos++,((a2 & 3) << 6) + a3);
		i += 4;
	}
	if(compression != null) switch(compression) {
	case "gzip":
		throw "TiledMap: gzip compression is not currently supported. Try zlib/zip compression instead.";
		break;
	case "zlib":
		bytes = haxe.zip.Uncompress.run(bytes);
		break;
	}
	var byte_len = bytes.length;
	byte_pos = 0;
	while(byte_pos < byte_len) {
		result.push(bytes.b[byte_pos] | bytes.b[byte_pos + 1] << 8 | bytes.b[byte_pos + 2] << 16 | bytes.b[byte_pos + 3] << 24);
		byte_pos += 4;
	}
	bytes = null;
	return result;
};
luxe.importers.tiled.TiledLayer.prototype = {
	from_xml: function(xml) {
		var tileGIDs = new Array();
		var root = xml;
		this.name = root.get("name");
		this.width = Std.parseInt(root.get("width"));
		this.height = Std.parseInt(root.get("height"));
		var _opacity = root.get("opacity");
		var _visible = root.get("visible");
		if(_opacity == null) this.opacity = 1.0; else this.opacity = Std.parseFloat(_opacity);
		if(_visible == "0") this.visible = false; else this.visible = true;
		var $it0 = root.iterator();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(luxe.importers.tiled.TiledUtil.valid_element(child)) {
				var _g = child.get_nodeName();
				switch(_g) {
				case "properties":
					var $it1 = child.iterator();
					while( $it1.hasNext() ) {
						var property = $it1.next();
						if(!luxe.importers.tiled.TiledUtil.valid_element(property)) continue;
						var key = property.get("name");
						var value = property.get("value");
						this.properties.set(key,value);
					}
					break;
				case "data":
					var encoding;
					if(child.exists("encoding")) encoding = child.get("encoding"); else encoding = "";
					var node_value = child.firstChild().get_nodeValue();
					switch(encoding) {
					case "base64":
						tileGIDs = luxe.importers.tiled.TiledLayer.base64_to_array(node_value,child.get("compression"));
						break;
					case "csv":
						tileGIDs = this.csv_to_array(node_value);
						break;
					default:
						var $it2 = child.iterator();
						while( $it2.hasNext() ) {
							var tile = $it2.next();
							if(luxe.importers.tiled.TiledUtil.valid_element(tile)) {
								var gid = Std.parseInt(tile.get("gid"));
								tileGIDs.push(gid);
							}
						}
					}
					break;
				}
			}
		}
		var _g1 = 0;
		while(_g1 < tileGIDs.length) {
			var gid1 = tileGIDs[_g1];
			++_g1;
			this.tiles.push(new luxe.importers.tiled.TiledTile(this,gid1));
		}
	}
	,from_json: function(json) {
		var tileGIDs = new Array();
		this.name = Reflect.field(json,"name");
		this.width = Std.parseInt(Reflect.field(json,"width"));
		this.height = Std.parseInt(Reflect.field(json,"height"));
		this.opacity = Std.parseFloat(Reflect.field(json,"opacity"));
		if(Reflect.field(json,"visible") == "false") this.visible = false; else this.visible = true;
		var fields = Reflect.fields(json);
		var _g = 0;
		while(_g < fields.length) {
			var nodename = fields[_g];
			++_g;
			var child = Reflect.field(json,nodename);
			switch(nodename) {
			case "properties":
				var child_fields = Reflect.fields(child);
				var _g1 = 0;
				while(_g1 < child_fields.length) {
					var property_name = child_fields[_g1];
					++_g1;
					var value = Reflect.field(child,property_name);
					this.properties.set(property_name,value);
				}
				break;
			case "data":
				tileGIDs = child;
				break;
			}
		}
		var _g2 = 0;
		while(_g2 < tileGIDs.length) {
			var gid = tileGIDs[_g2];
			++_g2;
			this.tiles.push(new luxe.importers.tiled.TiledTile(this,gid));
		}
	}
	,csv_to_array: function(input) {
		var result = new Array();
		var rows = StringTools.trim(input).split("\n");
		var row;
		var _g = 0;
		while(_g < rows.length) {
			var row1 = rows[_g];
			++_g;
			if(row1 != "") {
				var resultRow = new Array();
				var entries = StringTools.trim(row1).split(",");
				var entry;
				var _g1 = 0;
				while(_g1 < entries.length) {
					var entry1 = entries[_g1];
					++_g1;
					if(entry1 != "") result.push(Std.parseInt(entry1));
				}
			}
		}
		return result;
	}
	,__class__: luxe.importers.tiled.TiledLayer
};
luxe.tilemaps = {};
luxe.tilemaps.Tilemap = function(options) {
	this.total_height = 0;
	this.total_width = 0;
	this.height = 0;
	this.width = 0;
	this.tile_height = 0;
	this.tile_width = 0;
	this.width = options.w;
	this.height = options.h;
	this.tile_width = options.tile_width;
	this.tile_height = options.tile_height;
	if(options.x != null && options.y != null) this.pos = new phoenix.Vector(options.x,options.y); else {
		this.pos = new phoenix.Vector();
		if(options.x != null) this.pos.set_x(options.x);
		if(options.y != null) this.pos.set_y(options.y);
	}
	if(options.orientation == null) this.orientation = luxe.tilemaps.TilemapOrientation.none; else this.orientation = options.orientation;
	this.properties = new haxe.ds.StringMap();
	this.tilesets = new haxe.ds.StringMap();
	this.layers = new haxe.ds.StringMap();
	this.layers_ordered = [];
};
luxe.tilemaps.Tilemap.__name__ = ["luxe","tilemaps","Tilemap"];
luxe.tilemaps.Tilemap.prototype = {
	display: function(options) {
		var _g = this.orientation;
		switch(_g[1]) {
		case 0:
			this.visual = new luxe.tilemaps.OrthoVisual(this,options);
			break;
		case 1:
			this.visual = new luxe.tilemaps.IsometricVisual(this,options);
			break;
		case 2:
			break;
		}
	}
	,inside: function(x,y) {
		if(this.width == 0 || this.height == 0) return false;
		if(x < 0) return false;
		if(y < 0) return false;
		if(y > this.height - 1) return false;
		if(x > this.width - 1) return false;
		return true;
	}
	,tile_pos: function(layer_name,x,y,scale,offset_x,offset_y) {
		if(scale == null) scale = 1.0;
		if(this.inside(x,y)) {
			var _g = this.orientation;
			switch(_g[1]) {
			case 0:
				var _worldpos = luxe.tilemaps.Ortho.tile_coord_to_worldpos(x,y,this.tile_width,this.tile_height,scale,offset_x,offset_y);
				return _worldpos.add(this.pos);
			case 1:
				var _worldpos1 = luxe.tilemaps.Isometric.tile_coord_to_worldpos(x,y,this.tile_width,this.tile_height,scale,offset_x,offset_y);
				return _worldpos1.add(this.pos);
			default:
			}
		}
		return new phoenix.Vector();
	}
	,tile_at_pos: function(layer_name,worldpos,_scale) {
		if(_scale == null) _scale = 1.0;
		var _g = this.orientation;
		switch(_g[1]) {
		case 0:
			var _tile_pos = luxe.tilemaps.Ortho.worldpos_to_tile_coord(worldpos.x - this.pos.x,worldpos.y - this.pos.y,this.tile_width,this.tile_height,_scale);
			return this.tile_at(layer_name,Math.floor(_tile_pos.x),Math.floor(_tile_pos.y));
		case 1:
			var _tile_pos1 = luxe.tilemaps.Isometric.worldpos_to_tile_coord(worldpos.x - this.pos.x,worldpos.y - this.pos.y,this.tile_width,this.tile_height,_scale);
			return this.tile_at(layer_name,Math.floor(_tile_pos1.x),Math.floor(_tile_pos1.y));
		default:
		}
		return null;
	}
	,worldpos_to_map: function(worldpos,_scale) {
		if(_scale == null) _scale = 1.0;
		var _g = this.orientation;
		switch(_g[1]) {
		case 0:
			return luxe.tilemaps.Ortho.worldpos_to_tile_coord(worldpos.x - this.pos.x,worldpos.y - this.pos.y,this.tile_width,this.tile_height,_scale);
		case 1:
			return luxe.tilemaps.Isometric.worldpos_to_tile_coord(worldpos.x - this.pos.x,worldpos.y - this.pos.y,this.tile_width,this.tile_height,_scale);
		default:
		}
		return null;
	}
	,layer: function(layer_name) {
		return this.layers.get(layer_name);
	}
	,tileset: function(layer_name) {
		return this.tilesets.get(layer_name);
	}
	,tile_at: function(layer_name,x,y) {
		if(this.inside(x,y)) {
			var _layer = this.layers.get(layer_name);
			if(_layer != null) return _layer.tiles[y][x]; else {
				haxe.Log.trace("No tile layer called '" + layer_name + "' for tile_at " + x + "," + y,{ fileName : "Tilemap.hx", lineNumber : 531, className : "luxe.tilemaps.Tilemap", methodName : "tile_at"});
				return null;
			}
		} else return null;
	}
	,iterator: function() {
		return HxOverrides.iter(this.layers_ordered);
	}
	,add_tileset: function(options) {
		var tileset = new luxe.tilemaps.Tileset(options);
		this.tilesets.set(tileset.name,tileset);
		return tileset;
	}
	,_sort_layers: function(a,b) {
		if(a.layer < b.layer) return -1;
		if(a.layer >= b.layer) return 1;
		return 1;
	}
	,sort_layers: function() {
		this.layers_ordered.sort($bind(this,this._sort_layers));
	}
	,tileset_from_id: function(_id) {
		var tileset = null;
		var max = 0;
		var $it0 = this.tilesets.iterator();
		while( $it0.hasNext() ) {
			var t = $it0.next();
			if(_id >= t.first_id && t.first_id >= max) {
				max = t.first_id;
				tileset = t;
			}
		}
		return tileset;
	}
	,remove_tile: function(layer_name,x,y) {
		if(this.inside(x,y)) {
			var _layer = this.layer(layer_name);
			if(_layer != null) _layer.tiles[y][x].set_id(0);
		}
		return false;
	}
	,remove_tileset: function(name,_destroy_textures) {
		if(_destroy_textures == null) _destroy_textures = false;
		var _tileset = this.tileset(name);
		if(_tileset != null && _destroy_textures) _tileset.texture.destroy();
		return this.tilesets.remove(name);
	}
	,remove_layer: function(name) {
		var _layer = this.layer(name);
		if(_layer != null) HxOverrides.remove(this.layers_ordered,_layer);
		return this.layers.remove(name);
	}
	,add_layer: function(options) {
		if(options.map == null) options.map = this;
		var new_layer = new luxe.tilemaps.TileLayer(options);
		this.layers.set(new_layer.name,new_layer);
		this.layers_ordered.push(new_layer);
		this.sort_layers();
		return new_layer;
	}
	,add_tiles_fill_by_id: function(layer_name,_tileid) {
		if(_tileid == null) _tileid = 0;
		var _layer = this.layers.get(layer_name);
		if(_layer != null) {
			_layer.tiles = null;
			_layer.tiles = [];
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var y = _g1++;
				var _tile_row = [];
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var x = _g3++;
					var _tile = new luxe.tilemaps.Tile({ layer : _layer, id : _tileid, x : x, y : y});
					_tile_row.push(_tile);
				}
				_layer.tiles.push(_tile_row);
			}
		} else haxe.Log.trace("No tile layer called '" + layer_name + "' for add_tiles_fill_by_id",{ fileName : "Tilemap.hx", lineNumber : 670, className : "luxe.tilemaps.Tilemap", methodName : "add_tiles_fill_by_id"});
	}
	,add_tiles_from_grid: function(layer_name,grid) {
		if(grid.length != this.height) throw "add_tiles_from_grid requires a grid of integers the same size as the tilemap! height != grid.length";
		if(grid.length != 0) {
			if(grid[0].length != this.width) throw "add_tiles_from_grid requires a grid of integers the same size as the tilemap! width != grid[0].length";
		}
		var _layer = this.layers.get(layer_name);
		if(_layer != null) {
			_layer.tiles = null;
			_layer.tiles = [];
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var y = _g1++;
				var _tile_row = [];
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var x = _g3++;
					var tileid = grid[y][x];
					var _tile = new luxe.tilemaps.Tile({ layer : _layer, id : tileid, x : x, y : y});
					_tile_row.push(_tile);
				}
				_layer.tiles.push(_tile_row);
			}
		} else haxe.Log.trace("No tile layer called '" + layer_name + "' for add_tiles_from_grid",{ fileName : "Tilemap.hx", lineNumber : 716, className : "luxe.tilemaps.Tilemap", methodName : "add_tiles_from_grid"});
	}
	,get_total_width: function() {
		return this.width * this.tile_width;
	}
	,get_total_height: function() {
		return this.height * this.tile_height;
	}
	,get_bounds: function() {
		return new phoenix.Rectangle(this.pos.x,this.pos.y,this.pos.x + this.get_total_width(),this.pos.y + this.get_total_height());
	}
	,__class__: luxe.tilemaps.Tilemap
	,__properties__: {get_bounds:"get_bounds",get_total_height:"get_total_height",get_total_width:"get_total_width"}
};
luxe.importers.tiled.TiledMap = function(options) {
	if(options.format == null) options.format = "xml";
	if(options.asset_path == null) options.asset_path = "assets/";
	if(options.pos == null) options.pos = new phoenix.Vector();
	if(options.tiled_file_data == null || options.tiled_file_data.length == 0) throw "TiledMap handed invalid file data, pass the text contents of the tmx/json file";
	this.tiledmap_data = new luxe.importers.tiled.TiledMapData();
	if(options.format == "json") this.tiledmap_data.parseFromJSON(JSON.parse(options.tiled_file_data)); else this.tiledmap_data.parseFromXML(Xml.parse(options.tiled_file_data));
	luxe.tilemaps.Tilemap.call(this,{ x : options.pos.x | 0, y : options.pos.y | 0, w : this.tiledmap_data.width, h : this.tiledmap_data.height, tile_width : this.tiledmap_data.tile_width, tile_height : this.tiledmap_data.tile_height});
	this._load_tilesets(options);
	this._load_layers(options);
	this.orientation = this.tiledmap_data.orientation;
};
luxe.importers.tiled.TiledMap.__name__ = ["luxe","importers","tiled","TiledMap"];
luxe.importers.tiled.TiledMap.__super__ = luxe.tilemaps.Tilemap;
luxe.importers.tiled.TiledMap.prototype = $extend(luxe.tilemaps.Tilemap.prototype,{
	_load_tilesets: function(options) {
		var _g = 0;
		var _g1 = this.tiledmap_data.tilesets;
		while(_g < _g1.length) {
			var _tileset = _g1[_g];
			++_g;
			this.add_tileset({ name : _tileset.name, texture : Luxe.loadTexture(options.asset_path + _tileset.texture_name), first_id : _tileset.first_id, tile_width : _tileset.tile_width, tile_height : _tileset.tile_height, spacing : _tileset.spacing, margin : _tileset.margin});
		}
	}
	,_load_layers: function(options) {
		var layer_index = 0;
		var _g = 0;
		var _g1 = this.tiledmap_data.layers;
		while(_g < _g1.length) {
			var _layer = _g1[_g];
			++_g;
			this.add_layer({ name : _layer.name, layer : layer_index, opacity : _layer.opacity, visible : _layer.visible});
			this.add_tiles_fill_by_id(_layer.name,0);
			var tilemap_layer = this.layers.get(_layer.name);
			var _gid_counter = 0;
			var _g3 = 0;
			var _g2 = _layer.height;
			while(_g3 < _g2) {
				var _y = _g3++;
				var _g5 = 0;
				var _g4 = _layer.width;
				while(_g5 < _g4) {
					var _x = _g5++;
					var next_id = _layer.tiles[_gid_counter].id;
					if(next_id != 0) tilemap_layer.tiles[_y][_x].set_id(next_id);
					_gid_counter++;
				}
			}
			layer_index++;
		}
	}
	,__class__: luxe.importers.tiled.TiledMap
});
luxe.importers.tiled.TiledMapData = function() {
	this.background_color = "";
	this.version = "";
	this.width = 0;
	this.height = 0;
	this.tile_width = 0;
	this.tile_height = 0;
	this.orientation = luxe.tilemaps.TilemapOrientation.none;
	this.tilesets = [];
	this.layers = [];
	this.properties = new haxe.ds.StringMap();
	this.object_groups = [];
};
luxe.importers.tiled.TiledMapData.__name__ = ["luxe","importers","tiled","TiledMapData"];
luxe.importers.tiled.TiledMapData.prototype = {
	toString: function() {
		return "TiledMap : layers(" + this.layers.length + ") tilesets(" + this.tilesets.length + ")" + " tilew,tileh(" + this.tile_width + "," + this.tile_height + ")";
	}
	,parseFromXML: function(xml) {
		var root = xml.firstElement();
		this.version = root.get("version");
		this.background_color = root.get("backgroundcolor");
		this.width = Std.parseInt(root.get("width"));
		this.height = Std.parseInt(root.get("height"));
		this.orientation = luxe.importers.tiled.TiledUtil.orientation_from_string(root.get("orientation"));
		this.tile_width = Std.parseInt(root.get("tilewidth"));
		this.tile_height = Std.parseInt(root.get("tileheight"));
		var $it0 = root.iterator();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(luxe.importers.tiled.TiledUtil.valid_element(child)) {
				var _g = child.get_nodeName();
				switch(_g) {
				case "tileset":
					var tileset = new luxe.importers.tiled.TiledTileset();
					if(child.get("source") != null) haxe.Log.trace("tilesets from other sources are not available right now? " + child.get("source"),{ fileName : "TiledMapData.hx", lineNumber : 78, className : "luxe.importers.tiled.TiledMapData", methodName : "parseFromXML"}); else tileset.from_xml(child);
					tileset.first_id = Std.parseInt(child.get("firstgid"));
					this.tilesets.push(tileset);
					break;
				case "properties":
					var $it1 = child.iterator();
					while( $it1.hasNext() ) {
						var property = $it1.next();
						if(!luxe.importers.tiled.TiledUtil.valid_element(property)) continue;
						var key = property.get("name");
						var value = property.get("value");
						this.properties.set(key,value);
					}
					break;
				case "layer":
					var layer = new luxe.importers.tiled.TiledLayer(this);
					layer.from_xml(child);
					this.layers.push(layer);
					break;
				case "objectgroup":
					var object_group = new luxe.importers.tiled.TiledObjectGroup(this);
					object_group.from_xml(child);
					this.object_groups.push(object_group);
					break;
				}
			}
		}
	}
	,parseFromJSON: function(json) {
		this.version = Reflect.field(json,"version");
		this.background_color = Reflect.field(json,"backgroundcolor");
		this.width = Std.parseInt(Reflect.field(json,"width"));
		this.height = Std.parseInt(Reflect.field(json,"height"));
		this.orientation = luxe.importers.tiled.TiledUtil.orientation_from_string(Reflect.field(json,"orientation"));
		this.tile_width = Std.parseInt(Reflect.field(json,"tilewidth"));
		this.tile_height = Std.parseInt(Reflect.field(json,"tileheight"));
		var fields = Reflect.fields(json);
		var _g = 0;
		while(_g < fields.length) {
			var nodename = fields[_g];
			++_g;
			var child = Reflect.field(json,nodename);
			switch(nodename) {
			case "tilesets":
				var list = child;
				var _g1 = 0;
				while(_g1 < list.length) {
					var _tileset_json = list[_g1];
					++_g1;
					var tileset = new luxe.importers.tiled.TiledTileset();
					tileset.from_json(_tileset_json);
					tileset.first_id = Std.parseInt(Reflect.field(_tileset_json,"firstgid"));
					this.tilesets.push(tileset);
				}
				break;
			case "properties":
				var child_fields = Reflect.fields(child);
				var _g11 = 0;
				while(_g11 < child_fields.length) {
					var property_name = child_fields[_g11];
					++_g11;
					var value = Reflect.field(child,property_name);
					this.properties.set(property_name,value);
				}
				break;
			case "layers":
				var list1 = child;
				var _g12 = 0;
				while(_g12 < list1.length) {
					var _layer_json = list1[_g12];
					++_g12;
					var type = Reflect.field(_layer_json,"type");
					switch(type) {
					case "tilelayer":
						var layer = new luxe.importers.tiled.TiledLayer(this);
						layer.from_json(_layer_json);
						this.layers.push(layer);
						break;
					case "objectgroup":
						var object_group = new luxe.importers.tiled.TiledObjectGroup(this);
						object_group.from_json(_layer_json);
						this.object_groups.push(object_group);
						break;
					}
				}
				break;
			}
		}
	}
	,__class__: luxe.importers.tiled.TiledMapData
};
luxe.importers.tiled.TiledPropertyTile = function(_id,_properties) {
	this.id = _id;
	this.properties = _properties;
};
luxe.importers.tiled.TiledPropertyTile.__name__ = ["luxe","importers","tiled","TiledPropertyTile"];
luxe.importers.tiled.TiledPropertyTile.prototype = {
	__class__: luxe.importers.tiled.TiledPropertyTile
};
luxe.importers.tiled.TiledObjectType = { __ename__ : true, __constructs__ : ["polyline","polygon","rectangle","ellipse"] };
luxe.importers.tiled.TiledObjectType.polyline = ["polyline",0];
luxe.importers.tiled.TiledObjectType.polyline.toString = $estr;
luxe.importers.tiled.TiledObjectType.polyline.__enum__ = luxe.importers.tiled.TiledObjectType;
luxe.importers.tiled.TiledObjectType.polygon = ["polygon",1];
luxe.importers.tiled.TiledObjectType.polygon.toString = $estr;
luxe.importers.tiled.TiledObjectType.polygon.__enum__ = luxe.importers.tiled.TiledObjectType;
luxe.importers.tiled.TiledObjectType.rectangle = ["rectangle",2];
luxe.importers.tiled.TiledObjectType.rectangle.toString = $estr;
luxe.importers.tiled.TiledObjectType.rectangle.__enum__ = luxe.importers.tiled.TiledObjectType;
luxe.importers.tiled.TiledObjectType.ellipse = ["ellipse",3];
luxe.importers.tiled.TiledObjectType.ellipse.toString = $estr;
luxe.importers.tiled.TiledObjectType.ellipse.__enum__ = luxe.importers.tiled.TiledObjectType;
luxe.importers.tiled.TiledPolyObject = function(_origin,_points) {
	this.origin = _origin;
	this.points = _points;
};
luxe.importers.tiled.TiledPolyObject.__name__ = ["luxe","importers","tiled","TiledPolyObject"];
luxe.importers.tiled.TiledPolyObject.prototype = {
	__class__: luxe.importers.tiled.TiledPolyObject
};
luxe.importers.tiled.TiledObject = function(_group) {
	this.visible = true;
	this.group = _group;
	this.properties = new haxe.ds.StringMap();
	this.pos = new phoenix.Vector();
};
luxe.importers.tiled.TiledObject.__name__ = ["luxe","importers","tiled","TiledObject"];
luxe.importers.tiled.TiledObject.prototype = {
	polyobject_from_xml: function(xml) {
		var points = new Array();
		var pointsAsString = xml.get("points");
		var pointsAsStringArray = pointsAsString.split(" ");
		var _g = 0;
		while(_g < pointsAsStringArray.length) {
			var point = pointsAsStringArray[_g];
			++_g;
			var coords = point.split(",");
			points.push(new phoenix.Vector(Std.parseInt(coords[0]),Std.parseInt(coords[1])));
		}
		return new luxe.importers.tiled.TiledPolyObject(this.pos.clone(),points);
	}
	,polyobject_from_json: function(json) {
		var points = new Array();
		var point_list = json;
		var _g = 0;
		while(_g < point_list.length) {
			var point = point_list[_g];
			++_g;
			var _x = Reflect.field(point,"x");
			var _y = Reflect.field(point,"y");
			points.push(new phoenix.Vector(_x,_y));
		}
		return new luxe.importers.tiled.TiledPolyObject(this.pos.clone(),points);
	}
	,from_xml: function(xml) {
		if(xml.get("gid") != null) this.gid = Std.parseInt(xml.get("gid")); else this.gid = 0;
		this.name = xml.get("name");
		this.type = xml.get("type");
		this.visible = xml.get("visible") != "0";
		this.pos.set_x(Std.parseInt(xml.get("x")));
		this.pos.set_y(Std.parseInt(xml.get("y")));
		this.width = Std.parseInt(xml.get("width"));
		this.height = Std.parseInt(xml.get("height"));
		if(xml.get("rotation") != null) this.rotation = Std.parseFloat(xml.get("rotation")); else this.rotation = 0;
		this.object_type = luxe.importers.tiled.TiledObjectType.rectangle;
		var $it0 = xml.iterator();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(luxe.importers.tiled.TiledUtil.valid_element(child)) {
				var _g = child.get_nodeName();
				switch(_g) {
				case "polygon":
					this.object_type = luxe.importers.tiled.TiledObjectType.polygon;
					this.polyobject = this.polyobject_from_xml(child);
					break;
				case "polyline":
					this.object_type = luxe.importers.tiled.TiledObjectType.polyline;
					this.polyobject = this.polyobject_from_xml(child);
					break;
				case "ellipse":
					this.object_type = luxe.importers.tiled.TiledObjectType.ellipse;
					var _mid_x = this.width / 2 | 0;
					var _mid_y = this.height / 2 | 0;
					var _g1 = this.pos;
					_g1.set_x(_g1.x + _mid_x);
					var _g11 = this.pos;
					_g11.set_y(_g11.y + _mid_y);
					break;
				case "properties":
					var $it1 = child.iterator();
					while( $it1.hasNext() ) {
						var property = $it1.next();
						if(luxe.importers.tiled.TiledUtil.valid_element(property)) {
							var key = property.get("name");
							var value = property.get("value");
							this.properties.set(key,value);
						}
					}
					break;
				}
			}
		}
	}
	,from_json: function(json) {
		var _gid = Reflect.field(json,"gid");
		if(_gid != null) this.gid = _gid; else this.gid = 0;
		this.name = Reflect.field(json,"name");
		this.type = Reflect.field(json,"type");
		this.visible = Reflect.field(json,"visible");
		this.pos.set_x(Reflect.field(json,"x"));
		this.pos.set_y(Reflect.field(json,"y"));
		this.width = Reflect.field(json,"width");
		this.height = Reflect.field(json,"height");
		var _rotation = Reflect.field(json,"rotation");
		if(_rotation != null) this.rotation = _rotation; else this.rotation = 0;
		this.object_type = luxe.importers.tiled.TiledObjectType.rectangle;
		var fields = Reflect.fields(json);
		var _g = 0;
		while(_g < fields.length) {
			var nodename = fields[_g];
			++_g;
			var child = Reflect.field(json,nodename);
			switch(nodename) {
			case "polygon":
				this.object_type = luxe.importers.tiled.TiledObjectType.polygon;
				this.polyobject = this.polyobject_from_json(child);
				break;
			case "polyline":
				this.object_type = luxe.importers.tiled.TiledObjectType.polyline;
				this.polyobject = this.polyobject_from_json(child);
				break;
			case "ellipse":
				this.object_type = luxe.importers.tiled.TiledObjectType.ellipse;
				var _mid_x = this.width / 2 | 0;
				var _mid_y = this.height / 2 | 0;
				var _g1 = this.pos;
				_g1.set_x(_g1.x + _mid_x);
				var _g11 = this.pos;
				_g11.set_y(_g11.y + _mid_y);
				break;
			case "properties":
				var child_fields = Reflect.fields(child);
				var _g12 = 0;
				while(_g12 < child_fields.length) {
					var property_name = child_fields[_g12];
					++_g12;
					var value = Reflect.field(child,property_name);
					this.properties.set(property_name,value);
				}
				break;
			}
		}
	}
	,__class__: luxe.importers.tiled.TiledObject
};
luxe.importers.tiled.TiledObjectGroup = function(_map) {
	this.map = _map;
	this.name = "";
	this.width = 0;
	this.height = 0;
	this.color = "";
	this.properties = new haxe.ds.StringMap();
	this.objects = [];
};
luxe.importers.tiled.TiledObjectGroup.__name__ = ["luxe","importers","tiled","TiledObjectGroup"];
luxe.importers.tiled.TiledObjectGroup.prototype = {
	from_xml: function(xml) {
		this.name = xml.get("name");
		this.color = xml.get("color");
		this.visible = xml.get("visible") != "0";
		if(xml.get("opacity") == null) this.opacity = 1; else this.opacity = Std.parseFloat(xml.get("opacity"));
		this.width = Std.parseInt(xml.get("width"));
		this.height = Std.parseInt(xml.get("height"));
		var $it0 = xml.iterator();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(luxe.importers.tiled.TiledUtil.valid_element(child)) {
				if(child.get_nodeName() == "properties") {
					var $it1 = child.iterator();
					while( $it1.hasNext() ) {
						var property = $it1.next();
						if(luxe.importers.tiled.TiledUtil.valid_element(property)) {
							var key = property.get("name");
							var value = property.get("value");
							this.properties.set(key,value);
						}
					}
				}
				if(child.get_nodeName() == "object") {
					var object = new luxe.importers.tiled.TiledObject(this);
					object.from_xml(child);
					this.objects.push(object);
				}
			}
		}
	}
	,from_json: function(json) {
		this.name = Reflect.field(json,"name");
		this.color = Reflect.field(json,"color");
		this.visible = Reflect.field(json,"visible");
		this.opacity = Reflect.field(json,"opacity");
		this.width = Reflect.field(json,"width");
		this.height = Reflect.field(json,"height");
		var fields = Reflect.fields(json);
		var _g = 0;
		while(_g < fields.length) {
			var nodename = fields[_g];
			++_g;
			var child = Reflect.field(json,nodename);
			switch(nodename) {
			case "objects":
				var list = child;
				var _g1 = 0;
				while(_g1 < list.length) {
					var _object_json = list[_g1];
					++_g1;
					var object = new luxe.importers.tiled.TiledObject(this);
					object.from_json(_object_json);
					this.objects.push(object);
				}
				break;
			case "properties":
				var child_fields = Reflect.fields(child);
				var _g11 = 0;
				while(_g11 < child_fields.length) {
					var property_name = child_fields[_g11];
					++_g11;
					var value = Reflect.field(child,property_name);
					this.properties.set(property_name,value);
				}
				break;
			}
		}
	}
	,__class__: luxe.importers.tiled.TiledObjectGroup
};
luxe.importers.tiled.TiledTile = function(_layer,_id) {
	this.layer = _layer;
	this.id = _id;
};
luxe.importers.tiled.TiledTile.__name__ = ["luxe","importers","tiled","TiledTile"];
luxe.importers.tiled.TiledTile.prototype = {
	get_width: function() {
		return this.layer.map.tile_width;
	}
	,get_height: function() {
		return this.layer.map.tile_height;
	}
	,__class__: luxe.importers.tiled.TiledTile
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
luxe.importers.tiled.TiledTileset = function() {
	this.spacing = 0;
	this.margin = 0;
	this.tile_height = 0;
	this.tile_width = 0;
	this.first_id = 1;
	this.texture_name = "";
	this.name = "";
	this.properties = new haxe.ds.StringMap();
	this.property_tiles = new haxe.ds.IntMap();
};
luxe.importers.tiled.TiledTileset.__name__ = ["luxe","importers","tiled","TiledTileset"];
luxe.importers.tiled.TiledTileset.prototype = {
	from_xml: function(xml) {
		var root = xml;
		this.name = root.get("name");
		this.tile_width = Std.parseInt(root.get("tilewidth"));
		this.tile_height = Std.parseInt(root.get("tileheight"));
		this.spacing = Std.parseInt(root.get("spacing"));
		this.margin = Std.parseInt(root.get("margin"));
		var $it0 = root.elements();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			if(luxe.importers.tiled.TiledUtil.valid_element(child)) {
				var _g = child.get_nodeName();
				switch(_g) {
				case "properties":
					var $it1 = child.iterator();
					while( $it1.hasNext() ) {
						var property = $it1.next();
						if(luxe.importers.tiled.TiledUtil.valid_element(property)) {
							var key = property.get("name");
							var value = property.get("value");
							this.properties.set(key,value);
						}
					}
					break;
				case "image":
					this.texture_name = child.get("source");
					break;
				case "tile":
					var _tile_id = Std.parseInt(child.get("id"));
					var _tile_props = new haxe.ds.StringMap();
					var $it2 = child.iterator();
					while( $it2.hasNext() ) {
						var element = $it2.next();
						if(luxe.importers.tiled.TiledUtil.valid_element(element)) {
							if(element.get_nodeName() == "properties") {
								var $it3 = element.iterator();
								while( $it3.hasNext() ) {
									var property1 = $it3.next();
									if(!luxe.importers.tiled.TiledUtil.valid_element(property1)) continue;
									var key1 = property1.get("name");
									var value1 = property1.get("value");
									_tile_props.set(key1,value1);
								}
							}
						}
					}
					var value2 = new luxe.importers.tiled.TiledPropertyTile(_tile_id,_tile_props);
					this.property_tiles.set(_tile_id,value2);
					break;
				}
			}
		}
	}
	,from_json: function(json) {
		this.name = Reflect.field(json,"name");
		this.tile_width = Reflect.field(json,"tilewidth");
		this.tile_height = Reflect.field(json,"tileheight");
		this.spacing = Reflect.field(json,"spacing");
		this.margin = Reflect.field(json,"margin");
		var fields = Reflect.fields(json);
		var _g = 0;
		while(_g < fields.length) {
			var nodename = fields[_g];
			++_g;
			var child = Reflect.field(json,nodename);
			switch(nodename) {
			case "properties":
				var child_fields = Reflect.fields(child);
				var _g1 = 0;
				while(_g1 < child_fields.length) {
					var property_name = child_fields[_g1];
					++_g1;
					var value = Reflect.field(child,property_name);
					this.properties.set(property_name,value);
				}
				break;
			case "image":
				this.texture_name = child;
				break;
			case "tile":
				var _tile_id = Reflect.field(child,"id");
				var _tile_props = new haxe.ds.StringMap();
				var tile_fields = Reflect.fields(child);
				var _g11 = 0;
				while(_g11 < tile_fields.length) {
					var tile_node = tile_fields[_g11];
					++_g11;
					if(tile_node == "properties") {
						var tile_item = Reflect.field(child,tile_node);
						var child_fields1 = Reflect.fields(tile_item);
						var _g2 = 0;
						while(_g2 < child_fields1.length) {
							var property_name1 = child_fields1[_g2];
							++_g2;
							var value1 = Reflect.field(tile_item,property_name1);
							this.properties.set(property_name1,value1);
						}
					}
				}
				var value2 = new luxe.importers.tiled.TiledPropertyTile(_tile_id,_tile_props);
				this.property_tiles.set(_tile_id,value2);
				break;
			}
		}
	}
	,__class__: luxe.importers.tiled.TiledTileset
};
luxe.importers.tiled.TiledUtil = function() { };
luxe.importers.tiled.TiledUtil.__name__ = ["luxe","importers","tiled","TiledUtil"];
luxe.importers.tiled.TiledUtil.valid_element = function(element) {
	return Std.string(element.nodeType) == "element";
};
luxe.importers.tiled.TiledUtil.orientation_from_string = function(_orientation_string) {
	switch(_orientation_string) {
	case "orthogonal":
		return luxe.tilemaps.TilemapOrientation.ortho;
	case "isometric":
		return luxe.tilemaps.TilemapOrientation.isometric;
	default:
		return luxe.tilemaps.TilemapOrientation.none;
	}
};
luxe.macros = {};
luxe.macros.BuildVersion = function() { };
luxe.macros.BuildVersion.__name__ = ["luxe","macros","BuildVersion"];
luxe.macros.BuildVersion.try_git = function(root) {
	return "";
};
luxe.options = {};
luxe.options._DrawOptions = {};
luxe.options._DrawOptions.DrawOptions = function() { };
luxe.options._DrawOptions.DrawOptions.__name__ = ["luxe","options","_DrawOptions","DrawOptions"];
var phoenix = {};
phoenix.Vector = function(_x,_y,_z,_w) {
	if(_w == null) _w = 0;
	if(_z == null) _z = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	this._construct = false;
	this.ignore_listeners = false;
	this.w = 0;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	this._construct = true;
	this.x = _x;
	if(this._construct) this.x; else {
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
		this.x;
	}
	this.y = _y;
	if(this._construct) this.y; else {
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
		this.y;
	}
	this.z = _z;
	if(this._construct) this.z; else {
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(_z);
		this.z;
	}
	this.w = _w;
	this._construct = false;
};
phoenix.Vector.__name__ = ["phoenix","Vector"];
phoenix.Vector.Add = function(a,b) {
	return new phoenix.Vector(a.x + b.x,a.y + b.y,a.z + b.z);
};
phoenix.Vector.Subtract = function(a,b) {
	return new phoenix.Vector(a.x - b.x,a.y - b.y,a.z - b.z);
};
phoenix.Vector.MultiplyVector = function(a,b) {
	return new phoenix.Vector(a.x * b.x,a.y * b.y,a.z * b.z);
};
phoenix.Vector.DivideVector = function(a,b) {
	return new phoenix.Vector(a.x / b.x,a.y / b.y,a.z / b.z);
};
phoenix.Vector.Multiply = function(a,b) {
	return new phoenix.Vector(a.x * b,a.y * b,a.z * b);
};
phoenix.Vector.Divide = function(a,b) {
	return new phoenix.Vector(a.x / b,a.y / b,a.z / b);
};
phoenix.Vector.AddScalar = function(a,b) {
	return new phoenix.Vector(a.x + b,a.y + b,a.z + b);
};
phoenix.Vector.SubtractScalar = function(a,b) {
	return new phoenix.Vector(a.x - b,a.y - b,a.z - b);
};
phoenix.Vector.Cross = function(a,b) {
	return new phoenix.Vector(a.y * b.z - a.z * b.y,a.z * b.x - a.x * b.z,a.x * b.y - a.y * b.x);
};
phoenix.Vector.RotationTo = function(a,b) {
	return a.rotationTo(b);
};
phoenix.Vector.Listen = function(_v,listener) {
	_v.listen_x = listener;
	_v.listen_y = listener;
	_v.listen_z = listener;
};
phoenix.Vector.Degrees = function(_radian_vector) {
	return new phoenix.Vector(_radian_vector.x,_radian_vector.y,_radian_vector.z,_radian_vector.w).degrees();
};
phoenix.Vector.Radians = function(_degree_vector) {
	return new phoenix.Vector(_degree_vector.x,_degree_vector.y,_degree_vector.z,_degree_vector.w).radians();
};
phoenix.Vector.prototype = {
	copy_from: function(_other) {
		this.set(_other.x,_other.y,_other.z,_other.w);
		return this;
	}
	,set: function(_x,_y,_z,_w) {
		var prev = this.ignore_listeners;
		this.ignore_listeners = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(_z);
			this.z;
		}
		this.w = _w;
		this.ignore_listeners = prev;
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		return this;
	}
	,set_xy: function(_x,_y) {
		var prev = this.ignore_listeners;
		this.ignore_listeners = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
			this.y;
		}
		this.ignore_listeners = prev;
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		return this;
	}
	,set_xyz: function(_x,_y,_z) {
		var prev = this.ignore_listeners;
		this.ignore_listeners = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(_z);
			this.z;
		}
		this.ignore_listeners = prev;
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		return this;
	}
	,lerp_xy: function(_dest_x,_dest_y,_t) {
		this.set_xy(luxe.utils.Maths.lerp(this.x,_dest_x,_t),luxe.utils.Maths.lerp(this.y,_dest_y,_t));
		return this;
	}
	,lerp_xyz: function(_dest_x,_dest_y,_dest_z,_t) {
		this.set_xyz(luxe.utils.Maths.lerp(this.x,_dest_x,_t),luxe.utils.Maths.lerp(this.y,_dest_y,_t),luxe.utils.Maths.lerp(this.z,_dest_z,_t));
		return this;
	}
	,weighted_average_xy: function(_dest_x,_dest_y,_slowness) {
		this.set_xy(luxe.utils.Maths.weighted_avg(this.x,_dest_x,_slowness),luxe.utils.Maths.weighted_avg(this.y,_dest_y,_slowness));
		return this;
	}
	,weighted_average_xyz: function(_dest_x,_dest_y,_dest_z,_slowness) {
		this.set_xyz(luxe.utils.Maths.weighted_avg(this.x,_dest_x,_slowness),luxe.utils.Maths.weighted_avg(this.y,_dest_y,_slowness),luxe.utils.Maths.weighted_avg(this.z,_dest_z,_slowness));
		return this;
	}
	,'int': function() {
		this.set_xyz(Math.round(this.x),Math.round(this.y),Math.round(this.z));
		return this;
	}
	,int_x: function() {
		this.set_x(Math.round(this.x));
		return this;
	}
	,int_y: function() {
		this.set_y(Math.round(this.y));
		return this;
	}
	,int_z: function() {
		this.set_z(Math.round(this.z));
		return this;
	}
	,toString: function() {
		return "{ x:" + this.x + ", y:" + this.y + ", z:" + this.z + " }";
	}
	,equals: function(other) {
		return this.x == other.x && this.y == other.y && this.z == other.z && this.w == other.w;
	}
	,clone: function() {
		return new phoenix.Vector(this.x,this.y,this.z,this.w);
	}
	,normalize: function() {
		return this.divideScalar(Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z));
	}
	,dot: function(other) {
		return this.x * other.x + this.y * other.y + this.z * other.z;
	}
	,cross: function(a,b) {
		this.set_xyz(a.y * b.z - a.z * b.y,a.z * b.x - a.x * b.z,a.x * b.y - a.y * b.x);
		return this;
	}
	,invert: function() {
		this.set_xyz(-this.x,-this.y,-this.z);
		return this;
	}
	,add: function(other) {
		if(other == null) throw "vector.add other was handed in as null";
		this.set_xyz(this.x + other.x,this.y + other.y,this.z + other.z);
		return this;
	}
	,add_xyz: function(_x,_y,_z) {
		if(_z == null) _z = 0;
		if(_y == null) _y = 0;
		if(_x == null) _x = 0;
		this.set_xyz(this.x + _x,this.y + _y,this.z + _z);
		return this;
	}
	,subtract: function(other) {
		if(other == null) throw "vector.subtract other was handed in as null";
		this.set_xyz(this.x - other.x,this.y - other.y,this.z - other.z);
		return this;
	}
	,subtract_xyz: function(_x,_y,_z) {
		if(_z == null) _z = 0;
		if(_y == null) _y = 0;
		if(_x == null) _x = 0;
		this.set_xyz(this.x - _x,this.y - _y,this.z - _z);
		return this;
	}
	,multiply: function(other) {
		if(other == null) throw "vector.multiply other was handed in as null";
		this.set_xyz(this.x * other.x,this.y * other.y,this.z * other.z);
		return this;
	}
	,multiply_xyz: function(_x,_y,_z) {
		if(_z == null) _z = 1;
		if(_y == null) _y = 1;
		if(_x == null) _x = 1;
		this.set_xyz(this.x * _x,this.y * _y,this.z * _z);
		return this;
	}
	,divide: function(other) {
		if(other == null) throw "vector.divide other was handed in as null";
		this.set_xyz(this.x / other.x,this.y / other.y,this.z / other.z);
		return this;
	}
	,divide_xyz: function(_x,_y,_z) {
		if(_z == null) _z = 1;
		if(_y == null) _y = 1;
		if(_x == null) _x = 1;
		this.set_xyz(this.x / _x,this.y / _y,this.z / _z);
		return this;
	}
	,addScalar: function(v) {
		this.set_xyz(this.x + v,this.y + v,this.z + v);
		return this;
	}
	,subtractScalar: function(v) {
		this.set_xyz(this.x - v,this.y - v,this.z - v);
		return this;
	}
	,multiplyScalar: function(v) {
		this.set_xyz(this.x * v,this.y * v,this.z * v);
		return this;
	}
	,divideScalar: function(v) {
		if(v != 0) this.set_xyz(this.x / v,this.y / v,this.z / v); else this.set_xyz(0,0,0);
		return this;
	}
	,set_length: function(value) {
		this.divideScalar(Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)).multiplyScalar(value);
		return value;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthsq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,get_normalized: function() {
		return phoenix.Vector.Divide(this,Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z));
	}
	,set_x: function(_x) {
		this.x = _x;
		if(this._construct) return this.x;
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
		return this.x;
	}
	,set_y: function(_y) {
		this.y = _y;
		if(this._construct) return this.y;
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
		return this.y;
	}
	,set_z: function(_z) {
		this.z = _z;
		if(this._construct) return this.z;
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(_z);
		return this.z;
	}
	,get_inverted: function() {
		return new phoenix.Vector(-this.x,-this.y,-this.z);
	}
	,set_angle2D: function(value) {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		this.set_xy(Math.cos(value) * len,Math.sin(value) * len);
		return value;
	}
	,get_angle2D: function() {
		return Math.atan2(this.y,this.x);
	}
	,truncate: function(max) {
		this.set_length(Math.min(max,Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)));
		return this;
	}
	,rotationTo: function(other) {
		var theta = Math.atan2(other.x - this.x,other.y - this.y);
		var r = -(180.0 + theta * 180.0 / Math.PI);
		return r;
	}
	,applyQuaternion: function(q) {
		var qx = q.x;
		var qy = q.y;
		var qz = q.z;
		var qw = q.w;
		var ix = qw * this.x + qy * this.z - qz * this.y;
		var iy = qw * this.y + qz * this.x - qx * this.z;
		var iz = qw * this.z + qx * this.y - qy * this.x;
		var iw = -qx * this.x - qy * this.y - qz * this.z;
		this.set_xyz(ix * qw + iw * -qx + iy * -qz - iz * -qy,iy * qw + iw * -qy + iz * -qx - ix * -qz,iz * qw + iw * -qz + ix * -qy - iy * -qx);
		return this;
	}
	,applyProjection: function(m) {
		var e = m.elements;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
		this.set_xyz((e[0] * x + e[4] * y + e[8] * z + e[12]) * d,(e[1] * x + e[5] * y + e[9] * z + e[13]) * d,(e[2] * x + e[6] * y + e[10] * z + e[14]) * d);
		return this;
	}
	,transform: function(_m) {
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var e = _m.elements;
		this.set_xyz(e[0] * _x + e[4] * _y + e[8] * _z + e[12],e[1] * _x + e[5] * _y + e[9] * _z + e[13],e[2] * _x + e[6] * _y + e[10] * _z + e[14]);
		return this;
	}
	,transformDirection: function(m) {
		var e = m.elements;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.set_xyz(e[0] * x + e[4] * y + e[8] * z,e[1] * x + e[5] * y + e[9] * z,e[2] * x + e[6] * y + e[10] * z);
		this.divideScalar(Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z));
		return this;
	}
	,setEulerFromRotationMatrix: function(m,order) {
		if(order == null) order = 0;
		var te = m.elements;
		var m11 = te[0];
		var m12 = te[4];
		var m13 = te[8];
		var m21 = te[1];
		var m22 = te[5];
		var m23 = te[9];
		var m31 = te[2];
		var m32 = te[6];
		var m33 = te[10];
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		if(order == 0) {
			_y = Math.asin(m13 < -1?-1:m13 > 1?1:m13);
			if(Math.abs(m13) < 0.99999) {
				_x = Math.atan2(-m23,m33);
				_z = Math.atan2(-m12,m11);
			} else {
				_x = Math.atan2(m32,m22);
				_z = 0;
			}
		} else if(order == 1) {
			_x = Math.asin(-(m23 < -1?-1:m23 > 1?1:m23));
			if(Math.abs(m23) < 0.99999) {
				_y = Math.atan2(m13,m33);
				_z = Math.atan2(m21,m22);
			} else {
				_y = Math.atan2(-m31,m11);
				_z = 0;
			}
		} else if(order == 2) {
			_x = Math.asin(m32 < -1?-1:m32 > 1?1:m32);
			if(Math.abs(m32) < 0.99999) {
				_y = Math.atan2(-m31,m33);
				_z = Math.atan2(-m12,m22);
			} else {
				_y = 0;
				_z = Math.atan2(m21,m11);
			}
		} else if(order == 3) {
			_y = Math.asin(-(m31 < -1?-1:m31 > 1?1:m31));
			if(Math.abs(m31) < 0.99999) {
				_x = Math.atan2(m32,m33);
				_z = Math.atan2(m21,m11);
			} else {
				_x = 0;
				_z = Math.atan2(-m12,m22);
			}
		} else if(order == 4) {
			_z = Math.asin(m21 < -1?-1:m21 > 1?1:m21);
			if(Math.abs(m21) < 0.99999) {
				_x = Math.atan2(-m23,m22);
				_y = Math.atan2(-m31,m11);
			} else {
				_x = 0;
				_y = Math.atan2(m13,m33);
			}
		} else if(order == 5) {
			_z = Math.asin(-(m12 < -1?-1:m12 > 1?1:m12));
			if(Math.abs(m12) < 0.99999) {
				_x = Math.atan2(m32,m22);
				_y = Math.atan2(m13,m11);
			} else {
				_x = Math.atan2(-m23,m33);
				_y = 0;
			}
		}
		this.set_xyz(_x,_y,_z);
		return this;
	}
	,setEulerFromQuaternion: function(q,order) {
		if(order == null) order = 0;
		var sqx = q.x * q.x;
		var sqy = q.y * q.y;
		var sqz = q.z * q.z;
		var sqw = q.w * q.w;
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		if(order == 0) {
			_x = Math.atan2(2 * (q.x * q.w - q.y * q.z),sqw - sqx - sqy + sqz);
			_y = Math.asin(luxe.utils.Maths.clamp(2 * (q.x * q.z + q.y * q.w),-1,1));
			_z = Math.atan2(2 * (q.z * q.w - q.x * q.y),sqw + sqx - sqy - sqz);
		} else if(order == 1) {
			_x = Math.asin(luxe.utils.Maths.clamp(2 * (q.x * q.w - q.y * q.z),-1,1));
			_y = Math.atan2(2 * (q.x * q.z + q.y * q.w),sqw - sqx - sqy + sqz);
			_z = Math.atan2(2 * (q.x * q.y + q.z * q.w),sqw - sqx + sqy - sqz);
		} else if(order == 2) {
			_x = Math.asin(luxe.utils.Maths.clamp(2 * (q.x * q.w + q.y * q.z),-1,1));
			_y = Math.atan2(2 * (q.y * q.w - q.z * q.x),sqw - sqx - sqy + sqz);
			_z = Math.atan2(2 * (q.z * q.w - q.x * q.y),sqw - sqx + sqy - sqz);
		} else if(order == 3) {
			_x = Math.atan2(2 * (q.x * q.w + q.z * q.y),sqw - sqx - sqy + sqz);
			_y = Math.asin(luxe.utils.Maths.clamp(2 * (q.y * q.w - q.x * q.z),-1,1));
			_z = Math.atan2(2 * (q.x * q.y + q.z * q.w),sqw + sqx - sqy - sqz);
		} else if(order == 4) {
			_x = Math.atan2(2 * (q.x * q.w - q.z * q.y),sqw - sqx + sqy - sqz);
			_y = Math.atan2(2 * (q.y * q.w - q.x * q.z),sqw + sqx - sqy - sqz);
			_z = Math.asin(luxe.utils.Maths.clamp(2 * (q.x * q.y + q.z * q.w),-1,1));
		} else if(order == 5) {
			_x = Math.atan2(2 * (q.x * q.w + q.y * q.z),sqw - sqx + sqy - sqz);
			_y = Math.atan2(2 * (q.x * q.z + q.y * q.w),sqw + sqx - sqy - sqz);
			_z = Math.asin(luxe.utils.Maths.clamp(2 * (q.z * q.w - q.x * q.y),-1,1));
		}
		this.set_xyz(_x,_y,_z);
		return this;
	}
	,degrees: function() {
		this.set_xyz(this.x * 57.2957795130823797,this.y * 57.2957795130823797,this.z * 57.2957795130823797);
		return this;
	}
	,radians: function() {
		this.set_xyz(this.x * 0.0174532925199432781,this.y * 0.0174532925199432781,this.z * 0.0174532925199432781);
		return this;
	}
	,__class__: phoenix.Vector
	,__properties__: {get_inverted:"get_inverted",get_normalized:"get_normalized",set_angle2D:"set_angle2D",get_angle2D:"get_angle2D",get_lengthsq:"get_lengthsq",set_length:"set_length",get_length:"get_length",set_z:"set_z",set_y:"set_y",set_x:"set_x"}
};
luxe.physics = {};
luxe.physics.nape = {};
luxe.physics.nape.DebugDraw = function(_options) {
	this.visible = true;
	this.drawConstraints = false;
	this.drawShapeAngleIndicators = true;
	this.drawShapeDetail = false;
	this.drawBodyDetail = true;
	this.drawBodies = true;
	if(_options == null) this.options = { }; else this.options = _options;
	if(this.options.batcher == null) this.options.batcher = Luxe.renderer.batcher;
	this.geometry = new haxe.ds.ObjectMap();
};
luxe.physics.nape.DebugDraw.__name__ = ["luxe","physics","nape","DebugDraw"];
luxe.physics.nape.DebugDraw.prototype = {
	add: function(_body,_active_color,_inactive_color) {
		if(_active_color == null) _active_color = new phoenix.Color().rgb(16121979);
		var bodyGeom = new phoenix.geometry.Geometry({ primitive_type : 1, immediate : this.options.immediate, depth : this.options.depth, group : this.options.group, visible : this.visible, batcher : this.options.batcher});
		var shapeVerts;
		var _g = _body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var _shape;
			_g.zpp_critical = false;
			_shape = _g.zpp_inner.at(_g.zpp_i++);
			if(_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shapeVerts = this.make_circle_verts((_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?_shape.zpp_inner.circle.outer_zn:null).zpp_inner_zn.radius); else shapeVerts = this.make_polygon_verts((_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON?_shape.zpp_inner.polygon.outer_zn:null).get_localVerts());
			bodyGeom.vertices = bodyGeom.vertices.concat(shapeVerts);
		}
		bodyGeom.set_color(_active_color);
		if(_inactive_color == null) {
			_inactive_color = _active_color.clone();
			_inactive_color.a = _active_color.a * 0.4;
		}
		this.geometry.set(_body,{ geometry : bodyGeom, active_color : _active_color, inactive_color : _inactive_color});
	}
	,remove: function(_body) {
		var cache = this.geometry.h[_body.__id__];
		if(cache == null) return;
		cache.geometry.drop();
		cache.active_color = null;
		cache.inactive_color = null;
		cache = null;
		this.geometry.remove(_body);
	}
	,update: function() {
		if(!this.visible) return;
		var cache;
		var $it0 = this.geometry.keys();
		while( $it0.hasNext() ) {
			var body = $it0.next();
			cache = this.geometry.h[body.__id__];
			cache.geometry.transform.local.pos.set_x(((function($this) {
				var $r;
				if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
				$r = body.zpp_inner.wrap_pos;
				return $r;
			}(this))).get_x());
			cache.geometry.transform.local.pos.set_y(((function($this) {
				var $r;
				if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
				$r = body.zpp_inner.wrap_pos;
				return $r;
			}(this))).get_y());
			luxe.physics.nape.DebugDraw.cache_euler.set_xyz(0,0,body.zpp_inner.rot);
			cache.geometry.transform.local.rotation.setFromEuler(luxe.physics.nape.DebugDraw.cache_euler);
			if((function($this) {
				var $r;
				if(body.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
				$r = body.zpp_inner.component.sleeping;
				return $r;
			}(this))) cache.geometry.set_color(cache.inactive_color); else cache.geometry.set_color(cache.active_color);
		}
	}
	,draw_immediate: function(_options) {
		var previous_options = this.options;
		var previous_immediate = this.options.immediate;
		if(_options != null) this.options = _options;
		this.options.immediate = true;
		var cache;
		var $it0 = this.geometry.keys();
		while( $it0.hasNext() ) {
			var body = $it0.next();
			cache = this.geometry.h[body.__id__];
			this.draw_body(body,cache.active_color,cache.inactive_color);
		}
		this.options = previous_options;
		this.options.immediate = previous_immediate;
	}
	,destroy: function() {
		var $it0 = this.geometry.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.remove(key);
		}
		this.geometry = null;
	}
	,set_visible: function(state) {
		if(this.visible == state) return this.visible;
		var $it0 = this.geometry.iterator();
		while( $it0.hasNext() ) {
			var cache = $it0.next();
			cache.geometry.set_visible(state);
		}
		return this.visible = state;
	}
	,draw_body: function(_body,_active_color,_inactive_color) {
		if(_body.debugDraw) {
			var _g = _body.zpp_inner.wrap_shapes.iterator();
			while(_g.hasNext()) {
				var _shape;
				_g.zpp_critical = false;
				_shape = _g.zpp_inner.at(_g.zpp_i++);
				this.draw_shape(_shape,_active_color,_inactive_color);
			}
			if(this.drawBodyDetail) {
				var detail_color = new phoenix.Color().rgb(16777215);
				detail_color.a = 0.1;
				this.draw_point((function($this) {
					var $r;
					if(_body.zpp_inner.wrap_pos == null) _body.zpp_inner.setupPosition();
					$r = _body.zpp_inner.wrap_pos;
					return $r;
				}(this)),detail_color);
				this.draw_AABB((function($this) {
					var $r;
					if(_body.zpp_inner.world) throw "Error: Space::world has no bounds";
					$r = _body.zpp_inner.aabb.wrapper();
					return $r;
				}(this)),detail_color);
			}
		}
	}
	,draw_shape: function(_shape,_active_color,_inactive_color) {
		var geom = new phoenix.geometry.Geometry({ primitive_type : 1, immediate : this.options.immediate, depth : this.options.depth, group : this.options.group, visible : this.options.visible, batcher : this.options.batcher});
		if(_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var circle;
			if(_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) circle = _shape.zpp_inner.circle.outer_zn; else circle = null;
			geom.vertices = this.make_circle_verts(circle.zpp_inner_zn.radius);
			geom.transform.local.rotation.setFromEuler(new phoenix.Vector(0,0,(_shape.zpp_inner.body != null?_shape.zpp_inner.body.outer:null).zpp_inner.rot));
			geom.transform.local.pos.set_xy((_shape.zpp_inner.body != null?_shape.zpp_inner.body.outer:null).get_position().get_x(),(_shape.zpp_inner.body != null?_shape.zpp_inner.body.outer:null).get_position().get_y());
		} else {
			var poly;
			if(_shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) poly = _shape.zpp_inner.polygon.outer_zn; else poly = null;
			geom.vertices = this.make_polygon_verts((function($this) {
				var $r;
				if(poly.zpp_inner_zn.wrap_gverts == null) poly.zpp_inner_zn.getgverts();
				$r = poly.zpp_inner_zn.wrap_gverts;
				return $r;
			}(this)));
		}
		geom.set_color((_shape.zpp_inner.body != null?_shape.zpp_inner.body.outer:null).get_isSleeping()?_inactive_color:_active_color);
	}
	,draw_constraint: function(_constraint) {
	}
	,draw_compound: function(_space) {
	}
	,draw_point: function(_p,color) {
		Luxe.draw.ring({ x : (function($this) {
			var $r;
			if(_p != null && _p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_p.zpp_inner.validate();
			$r = _p.zpp_inner.x;
			return $r;
		}(this)), y : (function($this) {
			var $r;
			if(_p != null && _p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_p.zpp_inner.validate();
			$r = _p.zpp_inner.y;
			return $r;
		}(this)), r : 2, color : color, immediate : this.options.immediate, depth : this.options.depth, group : this.options.group, visible : this.options.visible, batcher : this.options.batcher});
	}
	,draw_AABB: function(_bounds,color) {
		Luxe.draw.rectangle({ x : (function($this) {
			var $r;
			_bounds.zpp_inner.validate();
			$r = _bounds.zpp_inner.minx;
			return $r;
		}(this)), y : (function($this) {
			var $r;
			_bounds.zpp_inner.validate();
			$r = _bounds.zpp_inner.miny;
			return $r;
		}(this)), w : (function($this) {
			var $r;
			_bounds.zpp_inner.validate();
			$r = _bounds.zpp_inner.width();
			return $r;
		}(this)), h : (function($this) {
			var $r;
			_bounds.zpp_inner.validate();
			$r = _bounds.zpp_inner.height();
			return $r;
		}(this)), color : color, immediate : true, depth : this.options.depth, group : this.options.group, visible : this.options.visible, batcher : this.options.batcher});
	}
	,make_circle_verts: function(radius) {
		var tmp = Luxe.draw.ring({ x : 0, y : 0, r : radius, immediate : true, no_batcher_add : true});
		var verts = tmp.vertices.slice();
		tmp.drop();
		var x = new phoenix.geometry.Vertex(new phoenix.Vector());
		verts.splice(0,0,x);
		var x1 = verts[1].clone();
		verts.splice(0,0,x1);
		return verts;
	}
	,make_polygon_verts: function(vertexList) {
		var i = 0;
		var verts = [];
		var _g = vertexList.iterator();
		while(_g.hasNext()) {
			var v;
			_g.zpp_critical = false;
			v = _g.zpp_inner.at(_g.zpp_i++);
			verts.push(new phoenix.geometry.Vertex(new phoenix.Vector((function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)))));
			if(i != 0) verts.push(new phoenix.geometry.Vertex(new phoenix.Vector((function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)))));
			i++;
		}
		var last = vertexList.at(0);
		verts.push(new phoenix.geometry.Vertex(new phoenix.Vector((function($this) {
			var $r;
			if(last != null && last.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			last.zpp_inner.validate();
			$r = last.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(last != null && last.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			last.zpp_inner.validate();
			$r = last.zpp_inner.y;
			return $r;
		}(this)))));
		return verts;
	}
	,__class__: luxe.physics.nape.DebugDraw
	,__properties__: {set_visible:"set_visible"}
};
luxe.physics.nape.PhysicsNape = function() {
	this.position_iterations = 18;
	this.velocity_iterations = 18;
	luxe.PhysicsEngine.call(this);
};
luxe.physics.nape.PhysicsNape.__name__ = ["luxe","physics","nape","PhysicsNape"];
luxe.physics.nape.PhysicsNape.__super__ = luxe.PhysicsEngine;
luxe.physics.nape.PhysicsNape.prototype = $extend(luxe.PhysicsEngine.prototype,{
	init: function() {
		this.space = new nape.space.Space();
		this.set_gravity(new phoenix.Vector(0,980));
	}
	,update: function() {
		if(!this.get_paused()) {
			this.space.step(Luxe.physics.step_delta * Luxe.core.timescale,this.velocity_iterations,this.position_iterations);
			if(this.get_draw() && this.debugdraw != null) this.debugdraw.update();
		}
	}
	,destroy: function() {
		this.space.clear();
		this.space = null;
	}
	,set_gravity: function(_gravity) {
		if(this.space != null) this.space.set_gravity(nape.geom.Vec2.get(_gravity.x,_gravity.y,true));
		return luxe.PhysicsEngine.prototype.set_gravity.call(this,_gravity);
	}
	,set_draw: function(_draw) {
		if(this.debugdraw != null) this.debugdraw.set_visible(_draw);
		return this.draw = _draw;
	}
	,__class__: luxe.physics.nape.PhysicsNape
});
luxe.resource._Resource = {};
luxe.resource._Resource.ResourceType_Impl_ = function() { };
luxe.resource._Resource.ResourceType_Impl_.__name__ = ["luxe","resource","_Resource","ResourceType_Impl_"];
luxe.resource.Resource = function(_manager,_type,_load_time) {
	this.dropped = false;
	this.time_created = 0;
	this.time_to_load = 0;
	this.persistent = false;
	if(_manager == null) this.manager = Luxe.resources; else this.manager = _manager;
	this.type = _type;
	this.time_to_load = _load_time;
	this.time_created = snow.Snow.core.timestamp();
	this.manager.add(this);
};
luxe.resource.Resource.__name__ = ["luxe","resource","Resource"];
luxe.resource.Resource.prototype = {
	drop: function() {
		if(!this.dropped) {
			this.dropped = true;
			this.manager.remove(this);
		}
	}
	,__class__: luxe.resource.Resource
};
luxe.resource.TextResource = function(_id,_text,_manager) {
	this.id = _id;
	luxe.resource.Resource.call(this,_manager,1);
	this.text = _text;
};
luxe.resource.TextResource.__name__ = ["luxe","resource","TextResource"];
luxe.resource.TextResource.__super__ = luxe.resource.Resource;
luxe.resource.TextResource.prototype = $extend(luxe.resource.Resource.prototype,{
	__class__: luxe.resource.TextResource
});
luxe.resource.JSONResource = function(_id,_json,_manager) {
	this.id = _id;
	luxe.resource.Resource.call(this,_manager,2);
	this.json = _json;
};
luxe.resource.JSONResource.__name__ = ["luxe","resource","JSONResource"];
luxe.resource.JSONResource.__super__ = luxe.resource.Resource;
luxe.resource.JSONResource.prototype = $extend(luxe.resource.Resource.prototype,{
	__class__: luxe.resource.JSONResource
});
luxe.resource.DataResource = function(_id,_data,_manager) {
	this.id = _id;
	luxe.resource.Resource.call(this,_manager,3);
	this.data = _data;
};
luxe.resource.DataResource.__name__ = ["luxe","resource","DataResource"];
luxe.resource.DataResource.__super__ = luxe.resource.Resource;
luxe.resource.DataResource.prototype = $extend(luxe.resource.Resource.prototype,{
	__class__: luxe.resource.DataResource
});
luxe.resource.SoundResource = function(_id,_name,_manager) {
	this.id = _id;
	luxe.resource.Resource.call(this,_manager,5);
	this.name = _name;
};
luxe.resource.SoundResource.__name__ = ["luxe","resource","SoundResource"];
luxe.resource.SoundResource.__super__ = luxe.resource.Resource;
luxe.resource.SoundResource.prototype = $extend(luxe.resource.Resource.prototype,{
	__class__: luxe.resource.SoundResource
});
luxe.resource.ResourceStats = function() {
	this.unknown = 0;
	this.sounds = 0;
	this.datas = 0;
	this.jsons = 0;
	this.texts = 0;
	this.shaders = 0;
	this.render_textures = 0;
	this.textures = 0;
	this.fonts = 0;
	this.resources = 0;
};
luxe.resource.ResourceStats.__name__ = ["luxe","resource","ResourceStats"];
luxe.resource.ResourceStats.prototype = {
	toString: function() {
		return "Resource Statistics\n" + "\ttotal resources : " + this.resources + "\n" + "\ttextures : " + this.textures + " \n" + "" + "\trender textures : " + this.render_textures + " \n" + "\tfonts : " + this.fonts + "\n" + "\tshaders : " + this.shaders + "\n" + "\tsounds : " + this.sounds + "\n" + "\ttext : " + this.texts + "\n" + "\tjson : " + this.jsons + "\n" + "\tdata : " + this.datas + "\n" + "\tunknown : " + this.unknown;
	}
	,reset: function() {
		this.resources = 0;
		this.fonts = 0;
		this.textures = 0;
		this.render_textures = 0;
		this.shaders = 0;
		this.texts = 0;
		this.jsons = 0;
		this.datas = 0;
		this.sounds = 0;
		this.unknown = 0;
	}
	,__class__: luxe.resource.ResourceStats
};
luxe.structural = {};
luxe.structural.BalancedBST = function(compare_function) {
	this.compare = compare_function;
	this._array = [];
};
luxe.structural.BalancedBST.__name__ = ["luxe","structural","BalancedBST"];
luxe.structural.BalancedBST.prototype = {
	size: function() {
		return this.node_count(this.root);
	}
	,depth: function() {
		return this.node_depth(this.root);
	}
	,insert: function(_key,_value) {
		this.root = this.node_insert(this.root,_key,_value);
		this.root.color = false;
		this._array = null;
		this._array = this.toArray();
	}
	,contains: function(_key) {
		return this.find(_key) != null;
	}
	,find: function(_key) {
		return this.node_find(this.root,_key);
	}
	,rank: function(_key) {
		return this.node_rank(_key,this.root);
	}
	,select: function(_rank) {
		var _node = this.node_select(this.root,_rank);
		if(_node != null) return _node.key; else return null;
	}
	,smallest: function() {
		var _node = this.node_smallest(this.root);
		if(_node != null) return _node.key; else return null;
	}
	,largest: function() {
		var _node = this.node_largest(this.root);
		if(_node != null) return _node.key; else return null;
	}
	,remove: function(_key) {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		if(!this.contains(_key)) return false;
		this.root = this.node_remove(this.root,_key);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,remove_smallest: function() {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		this.root = this.node_remove_smallest(this.root);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,remove_largest: function() {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		this.root = this.node_remove_largest(this.root);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,floor: function(_key) {
		var _node = this.node_floor(this.root,_key);
		if(_node == null) return null;
		return _node.key;
	}
	,ceil: function(_key) {
		var _node = this.node_ceil(this.root,_key);
		if(_node == null) return null;
		return _node.key;
	}
	,toArray: function() {
		var a = new Array();
		this.traverse_node(this.root,luxe.structural.BalancedBSTTraverseMethod.order_retain,function(_node) {
			a.push(_node.value);
		});
		return a;
	}
	,keys: function() {
		var a = new Array();
		this.traverse_node(this.root,luxe.structural.BalancedBSTTraverseMethod.order_retain,function(_node) {
			a.push(_node.key);
		});
		return a;
	}
	,iterator: function() {
		return HxOverrides.iter(this._array);
	}
	,traverse_node: function(_node,_method,_on_traverse) {
		if(_node != null) switch(_method[1]) {
		case 0:
			_on_traverse(_node);
			this.traverse_node(_node.left,_method,_on_traverse);
			this.traverse_node(_node.right,_method,_on_traverse);
			break;
		case 1:
			this.traverse_node(_node.left,_method,_on_traverse);
			_on_traverse(_node);
			this.traverse_node(_node.right,_method,_on_traverse);
			break;
		case 2:
			this.traverse_node(_node.left,_method,_on_traverse);
			this.traverse_node(_node.right,_method,_on_traverse);
			_on_traverse(_node);
			break;
		}
	}
	,get_empty: function() {
		return this.root == null;
	}
	,node_depth: function(_node) {
		if(_node == null) return 0;
		var _n_depth = Math.max(this.node_depth(_node.left),this.node_depth(_node.right));
		return 1 + (_n_depth | 0);
	}
	,node_count: function(_node) {
		if(_node == null) return 0; else return _node.nodecount;
	}
	,node_insert: function(_node,_key,_value) {
		if(_node == null) return new luxe.structural.BalancedBSTNode(_key,_value,1,true);
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) _node.left = this.node_insert(_node.left,_key,_value); else if(comparison > 0) _node.right = this.node_insert(_node.right,_key,_value); else _node.value = _value;
		if(this.is_red(_node.right) && !this.is_red(_node.left)) _node = this.rotate_left(_node);
		if(this.is_red(_node.left) && this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		if(this.is_red(_node.left) && this.is_red(_node.right)) this.swap_color(_node);
		this.node_update_count(_node);
		return _node;
	}
	,node_update_count: function(_node) {
		_node.nodecount = this.node_count(_node.left) + this.node_count(_node.right) + 1;
		return _node;
	}
	,node_find: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) return this.node_find(_node.left,_key); else if(comparison > 0) return this.node_find(_node.right,_key); else return _node.value;
	}
	,node_rank: function(_key,_node) {
		if(_node == null) return 0;
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) return this.node_rank(_key,_node.left); else if(comparison > 0) return 1 + this.node_count(_node.left) + this.node_rank(_key,_node.right); else return this.node_count(_node.left);
	}
	,node_select: function(_node,_rank) {
		if(_node == null) return null;
		var _r = this.node_count(_node.left);
		if(_r > _rank) return this.node_select(_node.left,_rank); else if(_r < _rank) return this.node_select(_node.right,_rank - _r - 1); else return _node;
	}
	,node_smallest: function(_node) {
		if(_node.left == null) return _node;
		return this.node_smallest(_node.left);
	}
	,node_largest: function(_node) {
		if(_node.right == null) return _node; else return this.node_largest(_node.right);
	}
	,node_floor: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison == 0) return _node; else if(comparison < 0) return this.node_floor(_node.left,_key);
		var _n = this.node_floor(_node.right,_key);
		if(_n != null) return _n; else return _node;
	}
	,node_ceil: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison == 0) return _node; else if(comparison < 0) {
			var _n = this.node_ceil(_node.left,_key);
			if(_n != null) return _n; else return _node;
		}
		return this.node_ceil(_node.right,_key);
	}
	,node_remove_smallest: function(_node) {
		if(_node.left == null) return null;
		if(!this.is_red(_node.left) && !this.is_red(_node.left.left)) _node = this.move_red_left(_node);
		_node.left = this.node_remove_smallest(_node.left);
		this.node_update_count(_node);
		return this.balance(_node);
	}
	,node_remove_largest: function(_node) {
		if(this.is_red(_node.left)) _node = this.rotate_right(_node);
		if(_node.right == null) return null;
		if(!this.is_red(_node.right) && !this.is_red(_node.right.left)) _node = this.move_red_right(_node);
		_node.right = this.node_remove_largest(_node.right);
		this.node_update_count(_node);
		return this.balance(_node);
	}
	,node_remove: function(_node,_key) {
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) {
			if(!this.is_red(_node.left) && !this.is_red(_node.left.left)) _node = this.move_red_left(_node);
			_node.left = this.node_remove(_node.left,_key);
		} else {
			if(this.is_red(_node.left)) _node = this.rotate_right(_node);
			var comparison1 = this.compare(_key,_node.key);
			if(comparison1 == 0 && _node.right == null) return null;
			if(!this.is_red(_node.right) && !this.is_red(_node.right.left)) _node = this.move_red_right(_node);
			var comparison2 = this.compare(_key,_node.key);
			if(comparison2 == 0) {
				var _n = this.node_smallest(_node.right);
				_node.key = _n.key;
				_node.value = _n.value;
				_node.right = this.node_remove_smallest(_node.right);
			} else _node.right = this.node_remove(_node.right,_key);
		}
		return this.balance(_node);
	}
	,is_red: function(_node) {
		if(_node == null) return false;
		return _node.color == true;
	}
	,rotate_left: function(_node) {
		var _n = _node.right;
		_n.color = _node.color;
		_node.color = true;
		_node.right = _n.left;
		_n.left = _node;
		_n.nodecount = _node.nodecount;
		this.node_update_count(_node);
		return _n;
	}
	,rotate_right: function(_node) {
		var _n = _node.left;
		_n.color = _node.color;
		_node.color = true;
		_node.left = _n.right;
		_n.right = _node;
		_n.nodecount = _node.nodecount;
		this.node_update_count(_node);
		return _n;
	}
	,swap_color: function(_node) {
		_node.color = !_node.color;
		_node.left.color = !_node.left.color;
		_node.right.color = !_node.right.color;
	}
	,move_red_left: function(_node) {
		this.swap_color(_node);
		if(this.is_red(_node.right.left)) {
			_node.right = this.rotate_right(_node.right);
			_node = this.rotate_left(_node);
		}
		return _node;
	}
	,move_red_right: function(_node) {
		this.swap_color(_node);
		if(this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		return _node;
	}
	,balance: function(_node) {
		if(this.is_red(_node.right)) _node = this.rotate_left(_node);
		if(this.is_red(_node.left) && this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		if(this.is_red(_node.left) && this.is_red(_node.right)) this.swap_color(_node);
		this.node_update_count(_node);
		return _node;
	}
	,__class__: luxe.structural.BalancedBST
	,__properties__: {get_empty:"get_empty"}
};
luxe.structural._BalancedBST = {};
luxe.structural._BalancedBST.NodeColor = function() { };
luxe.structural._BalancedBST.NodeColor.__name__ = ["luxe","structural","_BalancedBST","NodeColor"];
luxe.structural.BalancedBSTNode = function(_key,_value,_node_count,_color) {
	this.left = null;
	this.right = null;
	this.key = _key;
	this.value = _value;
	this.nodecount = _node_count;
	this.color = _color;
};
luxe.structural.BalancedBSTNode.__name__ = ["luxe","structural","BalancedBSTNode"];
luxe.structural.BalancedBSTNode.prototype = {
	__class__: luxe.structural.BalancedBSTNode
};
luxe.structural.BalancedBSTTraverseMethod = { __ename__ : true, __constructs__ : ["order_pre","order_retain","order_post"] };
luxe.structural.BalancedBSTTraverseMethod.order_pre = ["order_pre",0];
luxe.structural.BalancedBSTTraverseMethod.order_pre.toString = $estr;
luxe.structural.BalancedBSTTraverseMethod.order_pre.__enum__ = luxe.structural.BalancedBSTTraverseMethod;
luxe.structural.BalancedBSTTraverseMethod.order_retain = ["order_retain",1];
luxe.structural.BalancedBSTTraverseMethod.order_retain.toString = $estr;
luxe.structural.BalancedBSTTraverseMethod.order_retain.__enum__ = luxe.structural.BalancedBSTTraverseMethod;
luxe.structural.BalancedBSTTraverseMethod.order_post = ["order_post",2];
luxe.structural.BalancedBSTTraverseMethod.order_post.toString = $estr;
luxe.structural.BalancedBSTTraverseMethod.order_post.__enum__ = luxe.structural.BalancedBSTTraverseMethod;
luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry = function(_key,_value,_node_count,_color) {
	this.left = null;
	this.right = null;
	this.key = _key;
	this.value = _value;
	this.nodecount = _node_count;
	this.color = _color;
};
luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.__name__ = ["luxe","structural","BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"];
luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.prototype = {
	__class__: luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
};
luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry = function(compare_function) {
	this.compare = compare_function;
	this._array = [];
};
luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.__name__ = ["luxe","structural","BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"];
luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry.prototype = {
	size: function() {
		return this.node_count(this.root);
	}
	,depth: function() {
		return this.node_depth(this.root);
	}
	,insert: function(_key,_value) {
		this.root = this.node_insert(this.root,_key,_value);
		this.root.color = false;
		this._array = null;
		this._array = this.toArray();
	}
	,contains: function(_key) {
		return this.find(_key) != null;
	}
	,find: function(_key) {
		return this.node_find(this.root,_key);
	}
	,rank: function(_key) {
		return this.node_rank(_key,this.root);
	}
	,select: function(_rank) {
		var _node = this.node_select(this.root,_rank);
		if(_node != null) return _node.key; else return null;
	}
	,smallest: function() {
		var _node = this.node_smallest(this.root);
		if(_node != null) return _node.key; else return null;
	}
	,largest: function() {
		var _node = this.node_largest(this.root);
		if(_node != null) return _node.key; else return null;
	}
	,remove: function(_key) {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		if(!this.contains(_key)) return false;
		this.root = this.node_remove(this.root,_key);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,remove_smallest: function() {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		this.root = this.node_remove_smallest(this.root);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,remove_largest: function() {
		if(!this.is_red(this.root.left) && !this.is_red(this.root.right)) this.root.color = true;
		this.root = this.node_remove_largest(this.root);
		if(this.root != null) this.root.color = false;
		this._array = null;
		this._array = this.toArray();
		return true;
	}
	,floor: function(_key) {
		var _node = this.node_floor(this.root,_key);
		if(_node == null) return null;
		return _node.key;
	}
	,ceil: function(_key) {
		var _node = this.node_ceil(this.root,_key);
		if(_node == null) return null;
		return _node.key;
	}
	,toArray: function() {
		var a = new Array();
		this.traverse_node(this.root,luxe.structural.BalancedBSTTraverseMethod.order_retain,function(_node) {
			a.push(_node.value);
		});
		return a;
	}
	,keys: function() {
		var a = new Array();
		this.traverse_node(this.root,luxe.structural.BalancedBSTTraverseMethod.order_retain,function(_node) {
			a.push(_node.key);
		});
		return a;
	}
	,iterator: function() {
		return HxOverrides.iter(this._array);
	}
	,traverse_node: function(_node,_method,_on_traverse) {
		if(_node != null) switch(_method[1]) {
		case 0:
			_on_traverse(_node);
			this.traverse_node(_node.left,_method,_on_traverse);
			this.traverse_node(_node.right,_method,_on_traverse);
			break;
		case 1:
			this.traverse_node(_node.left,_method,_on_traverse);
			_on_traverse(_node);
			this.traverse_node(_node.right,_method,_on_traverse);
			break;
		case 2:
			this.traverse_node(_node.left,_method,_on_traverse);
			this.traverse_node(_node.right,_method,_on_traverse);
			_on_traverse(_node);
			break;
		}
	}
	,get_empty: function() {
		return this.root == null;
	}
	,node_depth: function(_node) {
		if(_node == null) return 0;
		var _n_depth = Math.max(this.node_depth(_node.left),this.node_depth(_node.right));
		return 1 + (_n_depth | 0);
	}
	,node_count: function(_node) {
		if(_node == null) return 0; else return _node.nodecount;
	}
	,node_insert: function(_node,_key,_value) {
		if(_node == null) return new luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry(_key,_value,1,true);
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) _node.left = this.node_insert(_node.left,_key,_value); else if(comparison > 0) _node.right = this.node_insert(_node.right,_key,_value); else _node.value = _value;
		if(this.is_red(_node.right) && !this.is_red(_node.left)) _node = this.rotate_left(_node);
		if(this.is_red(_node.left) && this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		if(this.is_red(_node.left) && this.is_red(_node.right)) this.swap_color(_node);
		this.node_update_count(_node);
		return _node;
	}
	,node_update_count: function(_node) {
		_node.nodecount = this.node_count(_node.left) + this.node_count(_node.right) + 1;
		return _node;
	}
	,node_find: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) return this.node_find(_node.left,_key); else if(comparison > 0) return this.node_find(_node.right,_key); else return _node.value;
	}
	,node_rank: function(_key,_node) {
		if(_node == null) return 0;
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) return this.node_rank(_key,_node.left); else if(comparison > 0) return 1 + this.node_count(_node.left) + this.node_rank(_key,_node.right); else return this.node_count(_node.left);
	}
	,node_select: function(_node,_rank) {
		if(_node == null) return null;
		var _r = this.node_count(_node.left);
		if(_r > _rank) return this.node_select(_node.left,_rank); else if(_r < _rank) return this.node_select(_node.right,_rank - _r - 1); else return _node;
	}
	,node_smallest: function(_node) {
		if(_node.left == null) return _node;
		return this.node_smallest(_node.left);
	}
	,node_largest: function(_node) {
		if(_node.right == null) return _node; else return this.node_largest(_node.right);
	}
	,node_floor: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison == 0) return _node; else if(comparison < 0) return this.node_floor(_node.left,_key);
		var _n = this.node_floor(_node.right,_key);
		if(_n != null) return _n; else return _node;
	}
	,node_ceil: function(_node,_key) {
		if(_node == null) return null;
		var comparison = this.compare(_key,_node.key);
		if(comparison == 0) return _node; else if(comparison < 0) {
			var _n = this.node_ceil(_node.left,_key);
			if(_n != null) return _n; else return _node;
		}
		return this.node_ceil(_node.right,_key);
	}
	,node_remove_smallest: function(_node) {
		if(_node.left == null) return null;
		if(!this.is_red(_node.left) && !this.is_red(_node.left.left)) _node = this.move_red_left(_node);
		_node.left = this.node_remove_smallest(_node.left);
		this.node_update_count(_node);
		return this.balance(_node);
	}
	,node_remove_largest: function(_node) {
		if(this.is_red(_node.left)) _node = this.rotate_right(_node);
		if(_node.right == null) return null;
		if(!this.is_red(_node.right) && !this.is_red(_node.right.left)) _node = this.move_red_right(_node);
		_node.right = this.node_remove_largest(_node.right);
		this.node_update_count(_node);
		return this.balance(_node);
	}
	,node_remove: function(_node,_key) {
		var comparison = this.compare(_key,_node.key);
		if(comparison < 0) {
			if(!this.is_red(_node.left) && !this.is_red(_node.left.left)) _node = this.move_red_left(_node);
			_node.left = this.node_remove(_node.left,_key);
		} else {
			if(this.is_red(_node.left)) _node = this.rotate_right(_node);
			var comparison1 = this.compare(_key,_node.key);
			if(comparison1 == 0 && _node.right == null) return null;
			if(!this.is_red(_node.right) && !this.is_red(_node.right.left)) _node = this.move_red_right(_node);
			var comparison2 = this.compare(_key,_node.key);
			if(comparison2 == 0) {
				var _n = this.node_smallest(_node.right);
				_node.key = _n.key;
				_node.value = _n.value;
				_node.right = this.node_remove_smallest(_node.right);
			} else _node.right = this.node_remove(_node.right,_key);
		}
		return this.balance(_node);
	}
	,is_red: function(_node) {
		if(_node == null) return false;
		return _node.color == true;
	}
	,rotate_left: function(_node) {
		var _n = _node.right;
		_n.color = _node.color;
		_node.color = true;
		_node.right = _n.left;
		_n.left = _node;
		_n.nodecount = _node.nodecount;
		this.node_update_count(_node);
		return _n;
	}
	,rotate_right: function(_node) {
		var _n = _node.left;
		_n.color = _node.color;
		_node.color = true;
		_node.left = _n.right;
		_n.right = _node;
		_n.nodecount = _node.nodecount;
		this.node_update_count(_node);
		return _n;
	}
	,swap_color: function(_node) {
		_node.color = !_node.color;
		_node.left.color = !_node.left.color;
		_node.right.color = !_node.right.color;
	}
	,move_red_left: function(_node) {
		this.swap_color(_node);
		if(this.is_red(_node.right.left)) {
			_node.right = this.rotate_right(_node.right);
			_node = this.rotate_left(_node);
		}
		return _node;
	}
	,move_red_right: function(_node) {
		this.swap_color(_node);
		if(this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		return _node;
	}
	,balance: function(_node) {
		if(this.is_red(_node.right)) _node = this.rotate_left(_node);
		if(this.is_red(_node.left) && this.is_red(_node.left.left)) _node = this.rotate_right(_node);
		if(this.is_red(_node.left) && this.is_red(_node.right)) this.swap_color(_node);
		this.node_update_count(_node);
		return _node;
	}
	,__class__: luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry
	,__properties__: {get_empty:"get_empty"}
};
luxe.structural.OrderedMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
luxe.structural.OrderedMapIterator.__name__ = ["luxe","structural","OrderedMapIterator"];
luxe.structural.OrderedMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.map._keys.length;
	}
	,next: function() {
		return this.map.get(this.map._keys[this.index++]);
	}
	,__class__: luxe.structural.OrderedMapIterator
};
luxe.structural.OrderedMap = function(_map) {
	this.idx = 0;
	this._keys = [];
	this.map = _map;
};
luxe.structural.OrderedMap.__name__ = ["luxe","structural","OrderedMap"];
luxe.structural.OrderedMap.__interfaces__ = [IMap];
luxe.structural.OrderedMap.prototype = {
	set: function(key,value) {
		if(!this.map.exists(key)) this._keys.push(key);
		this.map.set(key,value);
		value;
	}
	,toString: function() {
		var _ret = "";
		var _cnt = 0;
		var _len = this._keys.length;
		var _g = 0;
		var _g1 = this._keys;
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			_ret += "" + Std.string(k) + " => " + Std.string(this.map.get(k)) + (_cnt++ < _len - 1?", ":"");
		}
		return "{" + _ret + "}";
	}
	,iterator: function() {
		return new luxe.structural.OrderedMapIterator(this);
	}
	,remove: function(key) {
		return this.map.remove(key) && HxOverrides.remove(this._keys,key);
	}
	,exists: function(key) {
		return this.map.exists(key);
	}
	,get: function(key) {
		return this.map.get(key);
	}
	,keys: function() {
		return HxOverrides.iter(this._keys);
	}
	,__class__: luxe.structural.OrderedMap
};
luxe.tilemaps.Isometric = function() { };
luxe.tilemaps.Isometric.__name__ = ["luxe","tilemaps","Isometric"];
luxe.tilemaps.Isometric.worldpos_to_tile_coord = function(world_x,world_y,tile_width,tile_height,scale) {
	if(scale == null) scale = 1.0;
	var tile_pos = new phoenix.Vector();
	var tile_width_half = tile_width / 2;
	var tile_height_half = tile_height / 2;
	tile_pos.set_x((world_x / tile_width_half + world_y / tile_height_half) / 2);
	tile_pos.set_y((world_y / tile_height_half - world_x / tile_width_half) / 2);
	return tile_pos;
};
luxe.tilemaps.Isometric.tile_coord_to_worldpos = function(tile_x,tile_y,tile_width,tile_height,scale,offset_x,offset_y) {
	if(scale == null) scale = 1.0;
	var world_pos = new phoenix.Vector();
	var _scaled_tw = tile_width * scale;
	var _scaled_th = tile_height * scale;
	var tile_width_half = _scaled_tw / 2;
	var tile_height_half = _scaled_th / 2;
	if(offset_x == null) offset_x = luxe.tilemaps.TileOffset.left;
	if(offset_y == null) offset_y = luxe.tilemaps.TileOffset.top;
	var tile_offset_x = 0;
	var tile_offset_y = 0;
	switch(offset_x[1]) {
	case 0:
		tile_offset_x += _scaled_tw / 2;
		tile_offset_x /= tile_width;
		break;
	case 4:
		tile_offset_x += _scaled_tw;
		tile_offset_x /= tile_width;
		break;
	default:
	}
	switch(offset_y[1]) {
	case 0:
		tile_offset_y += _scaled_th / 2;
		tile_offset_y /= tile_height;
		break;
	case 2:
		tile_offset_y += _scaled_th;
		tile_offset_y /= tile_height;
		break;
	default:
	}
	tile_offset_x += tile_x;
	tile_offset_y += tile_y;
	world_pos.set_x((tile_offset_x - tile_offset_y) * tile_width_half);
	world_pos.set_y((tile_offset_x + tile_offset_y) * tile_height_half);
	return world_pos;
};
luxe.tilemaps.TilemapVisual = function(_map,_options) {
	this.geometry = new haxe.ds.StringMap();
	this.map = _map;
	this.options = _options;
	this.default_options();
	this.create();
};
luxe.tilemaps.TilemapVisual.__name__ = ["luxe","tilemaps","TilemapVisual"];
luxe.tilemaps.TilemapVisual.prototype = {
	create: function() {
		if(this.options.no_destroy == null && this.options.no_destroy != true) {
			this.destroy();
			this.geometry = new haxe.ds.StringMap();
		}
	}
	,geometry_for_tile: function(_layer,x,y) {
		if(!this.geometry.exists(_layer)) {
			haxe.Log.trace("  i / tilemap / " + ("visual / geometry_for_layer / " + _layer + " does not exist in tilemap visual"),{ fileName : "Tilemap.hx", lineNumber : 49, className : "luxe.tilemaps.TilemapVisual", methodName : "geometry_for_tile"});
			return null;
		}
		var geomlayer = this.geometry_for_layer(_layer);
		return geomlayer[y][x];
	}
	,geometry_for_layer: function(_layer) {
		if(!this.geometry.exists(_layer)) haxe.Log.trace("  i / tilemap / " + ("visual / geometry_for_layer / " + _layer + " does not exist in tilemap visual"),{ fileName : "Tilemap.hx", lineNumber : 62, className : "luxe.tilemaps.TilemapVisual", methodName : "geometry_for_layer"});
		return this.geometry.get(_layer);
	}
	,default_options: function() {
		if(this.options.batcher == null) this.options.batcher = Luxe.renderer.batcher;
		if(this.options.depth == null) this.options.depth = 0.0;
		if(this.options.group == null) this.options.group = 0;
		if(this.options.scale == null) this.options.scale = 1;
		if(this.options.grid == null) this.options.grid = false;
		if(this.options.filter == null) this.options.filter = phoenix.FilterType.nearest;
	}
	,create_tile_for_layer: function(layer,x,y) {
		return null;
	}
	,update_tile_id: function(_geom,_layer_name,_x,_y,_id) {
	}
	,refresh_tile_id: function(_layer_name,_x,_y,_id) {
		var _tile_layer = this.map.layer(_layer_name);
		var _geom_layer = this.geometry_for_layer(_layer_name);
		if(_geom_layer != null) {
			if(this.map.inside(_x,_y)) {
				var _geom = _geom_layer[_y][_x];
				if(_geom == null) {
					if(_id != 0) {
						_geom = this.create_tile_for_layer(this.map.layer(_layer_name),_x,_y);
						_geom_layer[_y][_x] = _geom;
					}
				} else if(_id == 0) {
					_geom.drop();
					_geom = null;
					_geom_layer[_y][_x] = null;
				} else this.update_tile_id(_geom,_layer_name,_x,_y,_id);
			} else haxe.Log.trace("cannot refresh tile " + _x + "," + _y + " because the coords were out of the map width/height : " + _layer_name + " and " + this.map.width + "," + this.map.height,{ fileName : "Tilemap.hx", lineNumber : 140, className : "luxe.tilemaps.TilemapVisual", methodName : "refresh_tile_id"});
		} else haxe.Log.trace("cannot refresh tile " + _x + "," + _y + " because layer was not found : " + _layer_name,{ fileName : "Tilemap.hx", lineNumber : 144, className : "luxe.tilemaps.TilemapVisual", methodName : "refresh_tile_id"});
	}
	,destroy: function() {
		if(this.geometry != null) {
			var $it0 = this.geometry.keys();
			while( $it0.hasNext() ) {
				var _name = $it0.next();
				var layer = this.geometry.get(_name);
				var _g = 0;
				while(_g < layer.length) {
					var row = layer[_g];
					++_g;
					var _g1 = 0;
					while(_g1 < row.length) {
						var tile = row[_g1];
						++_g1;
						if(tile != null) tile.drop();
						tile = null;
					}
					row = null;
				}
				this.geometry.remove(_name);
			}
		}
		this.geometry = null;
	}
	,__class__: luxe.tilemaps.TilemapVisual
};
luxe.tilemaps.IsometricVisual = function(_map,_options) {
	luxe.tilemaps.TilemapVisual.call(this,_map,_options);
};
luxe.tilemaps.IsometricVisual.__name__ = ["luxe","tilemaps","IsometricVisual"];
luxe.tilemaps.IsometricVisual.__super__ = luxe.tilemaps.TilemapVisual;
luxe.tilemaps.IsometricVisual.prototype = $extend(luxe.tilemaps.TilemapVisual.prototype,{
	create: function() {
		var $it0 = this.map.iterator();
		while( $it0.hasNext() ) {
			var layer = $it0.next();
			var _layer_geom = [];
			var _g1 = 0;
			var _g = this.map.height;
			while(_g1 < _g) {
				var y = _g1++;
				var _geom_row = [];
				var _g3 = 0;
				var _g2 = this.map.width;
				while(_g3 < _g2) {
					var x = _g3++;
					var _tile_geom = this.create_tile_for_layer(layer,x,y);
					_geom_row.push(_tile_geom);
				}
				_layer_geom.push(_geom_row);
			}
			this.geometry.set(layer.name,_layer_geom);
		}
		if(this.options.grid) {
			var color = new phoenix.Color(1,1,1,0.8).rgb(13369344);
			var _g11 = 0;
			var _g4 = this.map.width + 1;
			while(_g11 < _g4) {
				var x1 = _g11++;
				var ip = luxe.tilemaps.Isometric.tile_coord_to_worldpos(x1,0,this.map.tile_width,this.map.tile_height,this.options.scale);
				var ip_bot = luxe.tilemaps.Isometric.tile_coord_to_worldpos(x1,this.map.height,this.map.tile_width,this.map.tile_height,this.options.scale);
				Luxe.draw.line({ p0 : new phoenix.Vector(this.map.pos.x + ip.x,this.map.pos.y + ip.y), p1 : new phoenix.Vector(this.map.pos.x + ip_bot.x,this.map.pos.y + ip_bot.y), color : color, depth : this.options.depth + 0.001, group : this.options.group, batcher : this.options.batcher});
			}
			var _g12 = 0;
			var _g5 = this.map.height + 1;
			while(_g12 < _g5) {
				var y1 = _g12++;
				var ip1 = luxe.tilemaps.Isometric.tile_coord_to_worldpos(0,y1,this.map.tile_width,this.map.tile_height,this.options.scale);
				var ip_bot1 = luxe.tilemaps.Isometric.tile_coord_to_worldpos(this.map.width,y1,this.map.tile_width,this.map.tile_height,this.options.scale);
				Luxe.draw.line({ p0 : new phoenix.Vector(this.map.pos.x + ip1.x,this.map.pos.y + ip1.y), p1 : new phoenix.Vector(this.map.pos.x + ip_bot1.x,this.map.pos.y + ip_bot1.y), color : color, depth : this.options.depth + 0.001, group : this.options.group, batcher : this.options.batcher});
			}
		}
	}
	,update_tile_id: function(_geom,_layer_name,_x,_y,_id) {
		var tileset = this.map.tileset_from_id(_id);
		var image_coord = tileset.pos_in_texture(_id);
		var g = _geom;
		g.uv(new phoenix.Rectangle(tileset.margin + (image_coord.x * tileset.tile_width + image_coord.x * tileset.spacing),tileset.margin + (image_coord.y * tileset.tile_height + image_coord.y * tileset.spacing),tileset.tile_width,tileset.tile_height));
	}
	,create_tile_for_layer: function(layer,x,y) {
		var _g = this;
		var _scaled_tilewidth = this.map.tile_width * this.options.scale;
		var _scaled_tileheight = this.map.tile_height * this.options.scale;
		var tile = layer.tiles[y][x];
		if(tile.id == 0) return null;
		var tileset = this.map.tileset_from_id(tile.id);
		var _scaled_tileset_tilewidth = tileset.tile_width * this.options.scale;
		var _scaled_tileset_tileheight = tileset.tile_height * this.options.scale;
		var _half_world_tile_width = _scaled_tilewidth / 2;
		var _half_world_tile_height = _scaled_tileheight / 2;
		var _tile_geom = Luxe.draw.box({ x : this.map.pos.x + (x - y) * _half_world_tile_width - _half_world_tile_width, y : this.map.pos.y + (x + y) * _half_world_tile_height - _half_world_tile_height, w : _scaled_tileset_tilewidth, h : _scaled_tileset_tileheight, texture : tileset != null?tileset.texture:null, visible : layer.visible, color : new phoenix.Color(1,1,1,layer.opacity), depth : this.options.depth, group : this.options.group, batcher : this.options.batcher});
		if(tileset != null) {
			if(tileset.texture != null) tileset.texture.set_onload(function(t) {
				var image_coord = tileset.pos_in_texture(tile.id);
				_tile_geom.uv(new phoenix.Rectangle(tileset.margin + (image_coord.x * tileset.tile_width + image_coord.x * tileset.spacing),tileset.margin + (image_coord.y * tileset.tile_height + image_coord.y * tileset.spacing),tileset.tile_width,tileset.tile_height));
				tileset.texture.set_filter(_g.options.filter);
			});
		}
		return _tile_geom;
	}
	,__class__: luxe.tilemaps.IsometricVisual
});
luxe.tilemaps.Ortho = function() { };
luxe.tilemaps.Ortho.__name__ = ["luxe","tilemaps","Ortho"];
luxe.tilemaps.Ortho.worldpos_to_tile_coord = function(world_x,world_y,tile_width,tile_height,scale) {
	if(scale == null) scale = 1.0;
	var tile_coord = new phoenix.Vector();
	tile_coord.set_x(Math.floor(world_x / (tile_width * scale)));
	tile_coord.set_y(Math.floor(world_y / (tile_height * scale)));
	return tile_coord;
};
luxe.tilemaps.Ortho.tile_coord_to_worldpos = function(tile_x,tile_y,tile_width,tile_height,scale,offset_x,offset_y) {
	if(scale == null) scale = 1.0;
	var world_pos = new phoenix.Vector();
	var _scaled_tw = tile_width * scale;
	var _scaled_th = tile_height * scale;
	world_pos.set_x(tile_x * _scaled_tw);
	world_pos.set_y(tile_y * _scaled_th);
	if(offset_x == null) offset_x = luxe.tilemaps.TileOffset.left;
	if(offset_y == null) offset_y = luxe.tilemaps.TileOffset.top;
	switch(offset_x[1]) {
	case 0:
		var _g = world_pos;
		_g.set_x(_g.x + _scaled_tw / 2);
		break;
	case 4:
		var _g1 = world_pos;
		_g1.set_x(_g1.x + _scaled_tw);
		break;
	default:
	}
	switch(offset_y[1]) {
	case 0:
		var _g2 = world_pos;
		_g2.set_y(_g2.y + _scaled_th / 2);
		break;
	case 2:
		var _g3 = world_pos;
		_g3.set_y(_g3.y + _scaled_th);
		break;
	default:
	}
	return world_pos;
};
luxe.tilemaps.OrthoVisual = function(_map,_options) {
	luxe.tilemaps.TilemapVisual.call(this,_map,_options);
};
luxe.tilemaps.OrthoVisual.__name__ = ["luxe","tilemaps","OrthoVisual"];
luxe.tilemaps.OrthoVisual.__super__ = luxe.tilemaps.TilemapVisual;
luxe.tilemaps.OrthoVisual.prototype = $extend(luxe.tilemaps.TilemapVisual.prototype,{
	create: function() {
		luxe.tilemaps.TilemapVisual.prototype.create.call(this);
		var _map_scaled_tw = this.map.tile_width * this.options.scale;
		var _map_scaled_th = this.map.tile_height * this.options.scale;
		var $it0 = this.map.iterator();
		while( $it0.hasNext() ) {
			var layer = $it0.next();
			var _layer_geom = [];
			var _g1 = 0;
			var _g = this.map.height;
			while(_g1 < _g) {
				var y = _g1++;
				var _geom_row = [];
				var _g3 = 0;
				var _g2 = this.map.width;
				while(_g3 < _g2) {
					var x = _g3++;
					var _tile_geom = this.create_tile_for_layer(layer,x,y);
					_geom_row.push(_tile_geom);
				}
				_layer_geom.push(_geom_row);
			}
			this.geometry.set(layer.name,_layer_geom);
		}
		if(this.options.grid) {
			var color = new phoenix.Color(1,1,1,0.8).rgb(13369344);
			var _g11 = 0;
			var _g4 = this.map.width + 1;
			while(_g11 < _g4) {
				var x1 = _g11++;
				Luxe.draw.line({ p0 : new phoenix.Vector(this.map.pos.x + x1 * _map_scaled_tw,this.map.pos.y), p1 : new phoenix.Vector(this.map.pos.x + x1 * _map_scaled_tw,this.map.pos.y + this.map.height * _map_scaled_th), color : color, depth : this.options.depth + 0.0001, group : this.options.group, batcher : this.options.batcher});
			}
			var _g12 = 0;
			var _g5 = this.map.height + 1;
			while(_g12 < _g5) {
				var y1 = _g12++;
				Luxe.draw.line({ p0 : new phoenix.Vector(this.map.pos.x,this.map.pos.y + y1 * _map_scaled_th), p1 : new phoenix.Vector(this.map.pos.x + this.map.width * _map_scaled_tw,this.map.pos.y + y1 * _map_scaled_th), color : color, depth : this.options.depth + 0.0001, group : this.options.group, batcher : this.options.batcher});
			}
		}
	}
	,update_tile_id: function(_geom,_layer_name,_x,_y,_id) {
		var tileset = this.map.tileset_from_id(_id);
		var image_coord = tileset.pos_in_texture(_id);
		var g = _geom;
		g.uv(new phoenix.Rectangle(tileset.margin + (image_coord.x * tileset.tile_width + image_coord.x * tileset.spacing),tileset.margin + (image_coord.y * tileset.tile_height + image_coord.y * tileset.spacing),tileset.tile_width,tileset.tile_height));
	}
	,create_tile_for_layer: function(layer,x,y) {
		var _g = this;
		var _map_scaled_tw = this.map.tile_width * this.options.scale;
		var _map_scaled_th = this.map.tile_height * this.options.scale;
		var tile = layer.tiles[y][x];
		if(tile.id == 0) return null;
		var tileset = this.map.tileset_from_id(tile.id);
		var _scaled_tilewidth = tileset.tile_width * this.options.scale;
		var _scaled_tileheight = tileset.tile_height * this.options.scale;
		var _offset_x = 0;
		var _offset_y = _scaled_tileheight - _map_scaled_th;
		var _tile_geom = Luxe.draw.box({ x : this.map.pos.x + tile.x * _map_scaled_tw - _offset_x, y : this.map.pos.y + tile.y * _map_scaled_th - _offset_y, w : _scaled_tilewidth, h : _scaled_tileheight, visible : layer.visible, texture : tileset != null?tileset.texture:null, color : new phoenix.Color(1,1,1,layer.opacity), depth : this.options.depth, group : this.options.group, batcher : this.options.batcher});
		if(tileset != null) {
			if(tileset.texture != null) tileset.texture.set_onload(function(t) {
				var image_coord = tileset.pos_in_texture(tile.id);
				_tile_geom.uv(new phoenix.Rectangle(tileset.margin + (image_coord.x * tileset.tile_width + image_coord.x * tileset.spacing),tileset.margin + (image_coord.y * tileset.tile_height + image_coord.y * tileset.spacing),tileset.tile_width,tileset.tile_height));
				tileset.texture.set_filter(_g.options.filter);
			});
		}
		return _tile_geom;
	}
	,__class__: luxe.tilemaps.OrthoVisual
});
luxe.tilemaps.Tile = function(options) {
	this.id = 0;
	this.uuid = Luxe.utils.uniqueid();
	this.set_id(options.id);
	this.layer = options.layer;
	this.map = options.layer.map;
	this.x = options.x;
	this.y = options.y;
	var _tileset = this.map.tileset_from_id(this.id);
	if(_tileset != null) this.size = new phoenix.Vector(_tileset.tile_width,_tileset.tile_height); else this.size = new phoenix.Vector(this.map.tile_width,this.map.tile_height);
	this.pos = new phoenix.Vector(this.map.pos.x + this.size.x * this.x,this.map.pos.y + this.size.y * this.y);
};
luxe.tilemaps.Tile.__name__ = ["luxe","tilemaps","Tile"];
luxe.tilemaps.Tile.prototype = {
	toString: function() {
		return "Tile: id:" + this.id + " x,y:" + this.x + "," + this.y + " layer(" + this.layer.name + ") coord(" + this.x + "," + this.y + ") pos(" + this.pos.x + "," + this.pos.y + ") size(" + this.size.x + "," + this.size.y + ")";
	}
	,set_id: function(_id) {
		this.id = _id;
		if(this.map != null) {
			if(this.map.visual != null) this.map.visual.refresh_tile_id(this.layer.name,this.x,this.y,_id);
		}
		return this.id;
	}
	,__class__: luxe.tilemaps.Tile
	,__properties__: {set_id:"set_id"}
};
luxe.tilemaps.TileLayer = function(options) {
	this.fixed = true;
	this.visible = true;
	this.opacity = 1.0;
	if(options.map == null) throw "TileLayer requires a Tilemap passed into the options, as map:Tilemap";
	this.id = Luxe.utils.uniqueid();
	this.name = options.name;
	this.map = options.map;
	if(options.layer == null) this.layer = 0; else this.layer = options.layer;
	if(options.opacity == null) this.opacity = 1.0; else this.opacity = options.opacity;
	if(options.visible == null) this.visible = true; else this.visible = options.visible;
	if(options.fixed == null) this.fixed = true; else this.fixed = options.fixed;
	this.tiles = [];
	this.properties = new haxe.ds.StringMap();
};
luxe.tilemaps.TileLayer.__name__ = ["luxe","tilemaps","TileLayer"];
luxe.tilemaps.TileLayer.prototype = {
	__class__: luxe.tilemaps.TileLayer
};
luxe.tilemaps.Tileset = function(options) {
	this.spacing = 0;
	this.margin = 0;
	this.tile_height = 0;
	this.tile_width = 0;
	this.first_id = 1;
	if(options == null) throw "Tileset requires a non-null options on new()";
	if(options.texture == null) throw "Tileset requires a texture that is not null";
	this.name = options.name;
	this.texture = options.texture;
	this.tile_width = options.tile_width;
	this.tile_height = options.tile_height;
	if(options.first_id == null) this.first_id = 1; else this.first_id = options.first_id;
	if(options.margin == null) this.margin = 0; else this.margin = options.margin;
	if(options.spacing == null) this.spacing = 0; else this.spacing = options.spacing;
};
luxe.tilemaps.Tileset.__name__ = ["luxe","tilemaps","Tileset"];
luxe.tilemaps.Tileset.prototype = {
	toString: function() {
		return "Tileset; " + this.name + " tw(" + this.tile_width + ") th(" + this.tile_height + ") first_id(" + this.first_id + ") margin(" + this.margin + ") spacing(" + this.spacing + ")";
	}
	,pos_in_texture: function(_id) {
		var tileid = _id - this.first_id;
		return new phoenix.Vector(this.texture_x(tileid),this.texture_y(tileid));
	}
	,texture_x: function(_id) {
		var _tx = this.texture.width / this.tile_width | 0;
		if(_tx == 0) return 0; else return _id % _tx;
	}
	,texture_y: function(_id) {
		var _ty = this.texture.width / this.tile_width | 0;
		if(_ty == 0) return 0; else return _id / _ty | 0;
	}
	,__class__: luxe.tilemaps.Tileset
};
luxe.tilemaps.TilemapOrientation = { __ename__ : true, __constructs__ : ["ortho","isometric","none"] };
luxe.tilemaps.TilemapOrientation.ortho = ["ortho",0];
luxe.tilemaps.TilemapOrientation.ortho.toString = $estr;
luxe.tilemaps.TilemapOrientation.ortho.__enum__ = luxe.tilemaps.TilemapOrientation;
luxe.tilemaps.TilemapOrientation.isometric = ["isometric",1];
luxe.tilemaps.TilemapOrientation.isometric.toString = $estr;
luxe.tilemaps.TilemapOrientation.isometric.__enum__ = luxe.tilemaps.TilemapOrientation;
luxe.tilemaps.TilemapOrientation.none = ["none",2];
luxe.tilemaps.TilemapOrientation.none.toString = $estr;
luxe.tilemaps.TilemapOrientation.none.__enum__ = luxe.tilemaps.TilemapOrientation;
luxe.tilemaps.TileOffset = { __ename__ : true, __constructs__ : ["center","top","bottom","left","right"] };
luxe.tilemaps.TileOffset.center = ["center",0];
luxe.tilemaps.TileOffset.center.toString = $estr;
luxe.tilemaps.TileOffset.center.__enum__ = luxe.tilemaps.TileOffset;
luxe.tilemaps.TileOffset.top = ["top",1];
luxe.tilemaps.TileOffset.top.toString = $estr;
luxe.tilemaps.TileOffset.top.__enum__ = luxe.tilemaps.TileOffset;
luxe.tilemaps.TileOffset.bottom = ["bottom",2];
luxe.tilemaps.TileOffset.bottom.toString = $estr;
luxe.tilemaps.TileOffset.bottom.__enum__ = luxe.tilemaps.TileOffset;
luxe.tilemaps.TileOffset.left = ["left",3];
luxe.tilemaps.TileOffset.left.toString = $estr;
luxe.tilemaps.TileOffset.left.__enum__ = luxe.tilemaps.TileOffset;
luxe.tilemaps.TileOffset.right = ["right",4];
luxe.tilemaps.TileOffset.right.toString = $estr;
luxe.tilemaps.TileOffset.right.__enum__ = luxe.tilemaps.TileOffset;
luxe.tween = {};
luxe.tween.actuators = {};
luxe.tween.actuators.IGenericActuator = function() { };
luxe.tween.actuators.IGenericActuator.__name__ = ["luxe","tween","actuators","IGenericActuator"];
luxe.tween.actuators.IGenericActuator.prototype = {
	__class__: luxe.tween.actuators.IGenericActuator
};
luxe.tween.actuators.GenericActuator = function(target,duration,properties) {
	this.timescaled = false;
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = luxe.tween.Actuate.defaultEase;
};
luxe.tween.actuators.GenericActuator.__name__ = ["luxe","tween","actuators","GenericActuator"];
luxe.tween.actuators.GenericActuator.__interfaces__ = [luxe.tween.actuators.IGenericActuator];
luxe.tween.actuators.GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		luxe.tween.Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,timescale: function(_value) {
		if(_value == null) _value = true;
		this.timescaled = _value;
		return this;
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,pause: function() {
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: luxe.tween.actuators.GenericActuator
};
luxe.tween.actuators.SimpleActuator = function(target,duration,properties) {
	this.has_timescaled_starttime = false;
	this.active = true;
	this.propertyDetails = new Array();
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = snow.Snow.core.timestamp();
	luxe.tween.actuators.GenericActuator.call(this,target,duration,properties);
	if(!luxe.tween.actuators.SimpleActuator.addedEvent) {
		luxe.tween.actuators.SimpleActuator.addedEvent = true;
		Luxe.on(4,luxe.tween.actuators.SimpleActuator.on_internal_update);
	}
};
luxe.tween.actuators.SimpleActuator.__name__ = ["luxe","tween","actuators","SimpleActuator"];
luxe.tween.actuators.SimpleActuator.on_internal_update = function(dt) {
	luxe.tween.actuators.SimpleActuator.update_timer += dt;
	luxe.tween.actuators.SimpleActuator.current_time = snow.Snow.core.timestamp();
	var currentTime = luxe.tween.actuators.SimpleActuator.current_time;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = luxe.tween.actuators.SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = luxe.tween.actuators.SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(actuator.timescaled) currentTime = luxe.tween.actuators.SimpleActuator.update_timer; else currentTime = luxe.tween.actuators.SimpleActuator.current_time;
			if(actuator.timescaled && !actuator.has_timescaled_starttime) {
				actuator.has_timescaled_starttime = true;
				actuator.startTime = luxe.tween.actuators.SimpleActuator.update_timer;
				actuator.timeOffset = actuator.startTime;
			}
			if(currentTime > actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			luxe.tween.actuators.SimpleActuator.actuators.splice(j,1);
			--luxe.tween.actuators.SimpleActuator.actuatorsLength;
		}
	}
};
luxe.tween.actuators.SimpleActuator.__super__ = luxe.tween.actuators.GenericActuator;
luxe.tween.actuators.SimpleActuator.prototype = $extend(luxe.tween.actuators.GenericActuator.prototype,{
	autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && (!this.target.__properties__ || !this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				details = new luxe.tween.actuators.PropertyDetails(this.target,i,start,this.getField(this.properties,i) - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && Object.prototype.hasOwnProperty.call(this.properties,"visible");
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		luxe.tween.actuators.SimpleActuator.actuators.push(this);
		++luxe.tween.actuators.SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		this.paused = true;
		if(this.timescaled) this.pauseTime = luxe.tween.actuators.SimpleActuator.update_timer; else this.pauseTime = luxe.tween.actuators.SimpleActuator.current_time;
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += ((this.timescaled?luxe.tween.actuators.SimpleActuator.update_timer:luxe.tween.actuators.SimpleActuator.current_time) - this.pauseTime) / 1000;
		}
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setProperty: function(details,value) {
		if(details.isField) Reflect.setProperty(details.target,details.propertyName,value); else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) Reflect.setProperty(details.target,details.propertyName,endValue); else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: luxe.tween.actuators.SimpleActuator
});
luxe.tween.easing = {};
luxe.tween.easing.Quad = function() { };
luxe.tween.easing.Quad.__name__ = ["luxe","tween","easing","Quad"];
luxe.tween.easing.Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
luxe.tween.easing.Quad.get_easeIn = function() {
	return new luxe.tween.easing.QuadEaseIn();
};
luxe.tween.easing.Quad.get_easeInOut = function() {
	return new luxe.tween.easing.QuadEaseInOut();
};
luxe.tween.easing.Quad.get_easeOut = function() {
	return new luxe.tween.easing.QuadEaseOut();
};
luxe.tween.easing.IEasing = function() { };
luxe.tween.easing.IEasing.__name__ = ["luxe","tween","easing","IEasing"];
luxe.tween.easing.IEasing.prototype = {
	__class__: luxe.tween.easing.IEasing
};
luxe.tween.easing.QuadEaseOut = function() {
};
luxe.tween.easing.QuadEaseOut.__name__ = ["luxe","tween","easing","QuadEaseOut"];
luxe.tween.easing.QuadEaseOut.__interfaces__ = [luxe.tween.easing.IEasing];
luxe.tween.easing.QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		return -c * (t /= d) * (t - 2) + b;
	}
	,__class__: luxe.tween.easing.QuadEaseOut
};
luxe.tween.Actuate = function() { };
luxe.tween.Actuate.__name__ = ["luxe","tween","Actuate"];
luxe.tween.Actuate.apply = function(target,properties,customActuator) {
	luxe.tween.Actuate.stop(target,properties);
	if(customActuator == null) customActuator = luxe.tween.Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
luxe.tween.Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!luxe.tween.Actuate.targetLibraries.exists(target) && allowCreation) luxe.tween.Actuate.targetLibraries.set(target,new Array());
	return luxe.tween.Actuate.targetLibraries.get(target);
};
luxe.tween.Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return luxe.tween.Actuate.tween(target,duration,properties,overwrite,luxe.tween.actuators.MotionPathActuator);
};
luxe.tween.Actuate.pause = function(target) {
	if(js.Boot.__instanceof(target,luxe.tween.actuators.GenericActuator)) (js.Boot.__cast(target , luxe.tween.actuators.GenericActuator)).pause(); else {
		var library = luxe.tween.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.pause();
			}
		}
	}
};
luxe.tween.Actuate.pauseAll = function() {
	var $it0 = luxe.tween.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
luxe.tween.Actuate.reset = function() {
	var $it0 = luxe.tween.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	luxe.tween.Actuate.targetLibraries = new haxe.ds.ObjectMap();
};
luxe.tween.Actuate.resume = function(target) {
	if(js.Boot.__instanceof(target,luxe.tween.actuators.GenericActuator)) (js.Boot.__cast(target , luxe.tween.actuators.GenericActuator)).resume(); else {
		var library = luxe.tween.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.resume();
			}
		}
	}
};
luxe.tween.Actuate.resumeAll = function() {
	var $it0 = luxe.tween.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
luxe.tween.Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js.Boot.__instanceof(target,luxe.tween.actuators.GenericActuator)) (js.Boot.__cast(target , luxe.tween.actuators.GenericActuator)).stop(null,complete,sendEvent); else {
			var library = luxe.tween.Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js.Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
luxe.tween.Actuate.timer = function(duration,customActuator) {
	return luxe.tween.Actuate.tween(new luxe.tween._Actuate.TweenTimer(0),duration,new luxe.tween._Actuate.TweenTimer(1),false,customActuator);
};
luxe.tween.Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = luxe.tween.Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = luxe.tween.Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = luxe.tween.Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return luxe.tween.Actuate.apply(target,properties,customActuator);
	}
	return null;
};
luxe.tween.Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(luxe.tween.Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(luxe.tween.Actuate.targetLibraries.h[target.__id__],actuator);
		if(luxe.tween.Actuate.targetLibraries.h[target.__id__].length == 0) luxe.tween.Actuate.targetLibraries.remove(target);
	}
};
luxe.tween.Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return luxe.tween.Actuate.tween(target,duration,properties,overwrite,luxe.tween.actuators.MethodActuator);
};
luxe.tween._Actuate = {};
luxe.tween._Actuate.TweenTimer = function(progress) {
	this.progress = progress;
};
luxe.tween._Actuate.TweenTimer.__name__ = ["luxe","tween","_Actuate","TweenTimer"];
luxe.tween._Actuate.TweenTimer.prototype = {
	__class__: luxe.tween._Actuate.TweenTimer
};
luxe.tween.MotionPath = function() {
	this._x = new luxe.tween.ComponentPath();
	this._y = new luxe.tween.ComponentPath();
	this._rotation = null;
};
luxe.tween.MotionPath.__name__ = ["luxe","tween","MotionPath"];
luxe.tween.MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new luxe.tween.BezierPath(x,controlX,strength));
		this._y.addPath(new luxe.tween.BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new luxe.tween.LinearPath(x,strength));
		this._y.addPath(new luxe.tween.LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new luxe.tween.RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: luxe.tween.MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
luxe.tween.IComponentPath = function() { };
luxe.tween.IComponentPath.__name__ = ["luxe","tween","IComponentPath"];
luxe.tween.IComponentPath.prototype = {
	__class__: luxe.tween.IComponentPath
};
luxe.tween.ComponentPath = function() {
	this.paths = new Array();
	this.start = 0;
	this.totalStrength = 0;
};
luxe.tween.ComponentPath.__name__ = ["luxe","tween","ComponentPath"];
luxe.tween.ComponentPath.__interfaces__ = [luxe.tween.IComponentPath];
luxe.tween.ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: luxe.tween.ComponentPath
	,__properties__: {get_end:"get_end"}
};
luxe.tween.BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
luxe.tween.BezierPath.__name__ = ["luxe","tween","BezierPath"];
luxe.tween.BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: luxe.tween.BezierPath
};
luxe.tween.LinearPath = function(end,strength) {
	luxe.tween.BezierPath.call(this,end,0,strength);
};
luxe.tween.LinearPath.__name__ = ["luxe","tween","LinearPath"];
luxe.tween.LinearPath.__super__ = luxe.tween.BezierPath;
luxe.tween.LinearPath.prototype = $extend(luxe.tween.BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: luxe.tween.LinearPath
});
luxe.tween.RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
luxe.tween.RotationPath.__name__ = ["luxe","tween","RotationPath"];
luxe.tween.RotationPath.__interfaces__ = [luxe.tween.IComponentPath];
luxe.tween.RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: luxe.tween.RotationPath
	,__properties__: {get_end:"get_end"}
};
luxe.tween.actuators.MethodActuator = function(target,duration,properties) {
	this.currentParameters = new Array();
	this.tweenProperties = { };
	luxe.tween.actuators.SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = new Array();
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(null);
	}
};
luxe.tween.actuators.MethodActuator.__name__ = ["luxe","tween","actuators","MethodActuator"];
luxe.tween.actuators.MethodActuator.__super__ = luxe.tween.actuators.SimpleActuator;
luxe.tween.actuators.MethodActuator.prototype = $extend(luxe.tween.actuators.SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		luxe.tween.actuators.SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new luxe.tween.actuators.PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		luxe.tween.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: luxe.tween.actuators.MethodActuator
});
luxe.tween.actuators.MotionPathActuator = function(target,duration,properties) {
	luxe.tween.actuators.SimpleActuator.call(this,target,duration,properties);
};
luxe.tween.actuators.MotionPathActuator.__name__ = ["luxe","tween","actuators","MotionPathActuator"];
luxe.tween.actuators.MotionPathActuator.__super__ = luxe.tween.actuators.SimpleActuator;
luxe.tween.actuators.MotionPathActuator.prototype = $extend(luxe.tween.actuators.SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , luxe.tween.IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , luxe.tween.IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js.Boot.__cast(Reflect.field(this.properties,propertyName) , luxe.tween.IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new luxe.tween.actuators.PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js.Boot.__cast(details1 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js.Boot.__cast(details1 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js.Boot.__cast(details2 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js.Boot.__cast(details2 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , luxe.tween.actuators.PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: luxe.tween.actuators.MotionPathActuator
});
luxe.tween.actuators.PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
luxe.tween.actuators.PropertyDetails.__name__ = ["luxe","tween","actuators","PropertyDetails"];
luxe.tween.actuators.PropertyDetails.prototype = {
	__class__: luxe.tween.actuators.PropertyDetails
};
luxe.tween.actuators.PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	luxe.tween.actuators.PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
luxe.tween.actuators.PropertyPathDetails.__name__ = ["luxe","tween","actuators","PropertyPathDetails"];
luxe.tween.actuators.PropertyPathDetails.__super__ = luxe.tween.actuators.PropertyDetails;
luxe.tween.actuators.PropertyPathDetails.prototype = $extend(luxe.tween.actuators.PropertyDetails.prototype,{
	__class__: luxe.tween.actuators.PropertyPathDetails
});
luxe.tween.easing.QuadEaseIn = function() {
};
luxe.tween.easing.QuadEaseIn.__name__ = ["luxe","tween","easing","QuadEaseIn"];
luxe.tween.easing.QuadEaseIn.__interfaces__ = [luxe.tween.easing.IEasing];
luxe.tween.easing.QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t + b;
	}
	,__class__: luxe.tween.easing.QuadEaseIn
};
luxe.tween.easing.QuadEaseInOut = function() {
};
luxe.tween.easing.QuadEaseInOut.__name__ = ["luxe","tween","easing","QuadEaseInOut"];
luxe.tween.easing.QuadEaseInOut.__interfaces__ = [luxe.tween.easing.IEasing];
luxe.tween.easing.QuadEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k;
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t + b;
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: luxe.tween.easing.QuadEaseInOut
};
luxe.utils = {};
luxe.utils.GeometryUtils = function() {
};
luxe.utils.GeometryUtils.__name__ = ["luxe","utils","GeometryUtils"];
luxe.utils.GeometryUtils.prototype = {
	segments_for_smooth_circle: function(_radius,_smooth) {
		if(_smooth == null) _smooth = 5;
		return Std["int"](_smooth * Math.sqrt(_radius));
	}
	,random_point_in_unit_circle: function() {
		var _r = Math.sqrt(Math.random());
		var _t = (-1 + 2 * Math.random()) * 6.283185307179586;
		return new phoenix.Vector(_r * Math.cos(_t),_r * Math.sin(_t));
	}
	,point_in_polygon: function(_point,_offset,_verts) {
		if(_offset == null) _offset = new phoenix.Vector();
		var c = false;
		var nvert = _verts.length;
		var j = nvert - 1;
		var _g = 0;
		while(_g < nvert) {
			var i = _g++;
			if(_verts[i].y + _offset.y > _point.y != _verts[j].y + _offset.y > _point.y && _point.x < (_verts[j].x + _offset.x - (_verts[i].x + _offset.x)) * (_point.y - (_verts[i].y + _offset.y)) / (_verts[j].y + _offset.y - (_verts[i].y + _offset.y)) + (_verts[i].x + _offset.x)) c = !c;
			j = i;
		}
		return c;
	}
	,point_in_geometry: function(_point,_geometry) {
		var c = false;
		var nvert = _geometry.vertices.length;
		var j = nvert - 1;
		var _g = 0;
		while(_g < nvert) {
			var i = _g++;
			var _vert_i_pos = _geometry.vertices[i].pos.clone().transform(_geometry.transform.get_world().get_matrix());
			var _vert_j_pos = _geometry.vertices[j].pos.clone().transform(_geometry.transform.get_world().get_matrix());
			if(_vert_i_pos.y > _point.y != _vert_j_pos.y > _point.y && _point.x < (_vert_j_pos.x - _vert_i_pos.x) * (_point.y - _vert_i_pos.y) / (_vert_j_pos.y - _vert_i_pos.y) + _vert_i_pos.x) c = !c;
			j = i;
		}
		return c;
	}
	,intersect_ray_plane: function(_ray_start,_ray_dir,_plane_normal,_plane_point) {
		var part1 = _plane_normal.dot(new phoenix.Vector(_plane_point.x - _ray_start.x,_plane_point.y - _ray_start.y,_plane_point.z - _ray_start.z));
		var part2 = _plane_normal.x * _ray_dir.x + _plane_normal.y * _ray_dir.y + _plane_normal.z * _ray_dir.z;
		var T = part1 / part2;
		return phoenix.Vector.Add(_ray_start,phoenix.Vector.Multiply(_ray_dir,T));
	}
	,__class__: luxe.utils.GeometryUtils
};
luxe.utils.Maths = function() {
};
luxe.utils.Maths.__name__ = ["luxe","utils","Maths"];
luxe.utils.Maths.fixed = function(value,precision) {
	var n = Math.pow(10,precision);
	return (value * n | 0) / n;
};
luxe.utils.Maths.lerp = function(value,target,t) {
	if(t < 0) t = 0; else if(t > 1) t = 1; else t = t;
	return value + t * (target - value);
};
luxe.utils.Maths.weighted_avg = function(value,target,slowness) {
	if(slowness == 0) slowness = 0.00000001;
	return (value * (slowness - 1) + target) / slowness;
};
luxe.utils.Maths.clamp = function(value,a,b) {
	if(value < a) return a; else if(value > b) return b; else return value;
};
luxe.utils.Maths.clamp_bottom = function(value,a) {
	if(value < a) return a; else return value;
};
luxe.utils.Maths.within_range = function(value,start_range,end_range) {
	return value >= start_range && value <= end_range;
};
luxe.utils.Maths.wrap_angle = function(degrees,lower,upper) {
	var _radians = degrees * 0.0174532925199432781;
	var _distance = upper - lower;
	var _times = Math.floor((degrees - lower) / _distance);
	return degrees - _times * _distance;
};
luxe.utils.Maths.nearest_power_of_two = function(_value) {
	_value--;
	_value |= _value >> 1;
	_value |= _value >> 2;
	_value |= _value >> 4;
	_value |= _value >> 8;
	_value |= _value >> 16;
	_value++;
	return _value;
};
luxe.utils.Maths.map_linear = function(value,a1,a2,b1,b2) {
	return b1 + (value - a1) * (b2 - b1) / (a2 - a1);
};
luxe.utils.Maths.smoothstep = function(x,min,max) {
	if(x <= min) return 0;
	if(x >= max) return 1;
	x = (x - min) / (max - min);
	return x * x * (3 - 2 * x);
};
luxe.utils.Maths.smootherstep = function(x,min,max) {
	if(x <= min) return 0;
	if(x >= max) return 1;
	x = (x - min) / (max - min);
	return x * x * x * (x * (x * 6 - 15) + 10);
};
luxe.utils.Maths.random16 = function() {
	return (65280 * Math.random() + 255 * Math.random()) / 65535;
};
luxe.utils.Maths.random_int = function(low,high) {
	return low + Math.floor(Math.random() * (high - low + 1));
};
luxe.utils.Maths.random_float = function(low,high) {
	return low + Math.random() * (high - low);
};
luxe.utils.Maths.random_float_spread = function(range) {
	return range * (0.5 - Math.random());
};
luxe.utils.Maths.sign = function(x) {
	if(x < 0) return -1; else if(x > 0) return 1; else return 0;
};
luxe.utils.Maths.radians = function(degrees) {
	return degrees * 0.0174532925199432781;
};
luxe.utils.Maths.degrees = function(radians) {
	return radians * 57.2957795130823797;
};
luxe.utils.Maths.prototype = {
	__class__: luxe.utils.Maths
};
luxe.utils.Random = function(_initial_seed) {
	this.initial = this.seed = _initial_seed;
	this.seed = this.initial;
};
luxe.utils.Random.__name__ = ["luxe","utils","Random"];
luxe.utils.Random.prototype = {
	get: function() {
		return (function($this) {
			var $r;
			var a;
			a = $this.seed = (function($this) {
				var $r;
				var $int = $this.seed * 16807;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}($this)) % (function($this) {
				var $r;
				var int1 = 2147483647;
				$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
				return $r;
			}($this)) | 0;
			$r = (function($this) {
				var $r;
				var int2 = a;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}($this)) / (function($this) {
				var $r;
				var int3 = 2147483647;
				$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
				return $r;
			}($this));
			return $r;
		}(this)) + 0.000000000233;
	}
	,'float': function(min,max) {
		if(max == null) {
			max = min;
			min = 0;
		}
		return this.get() * (max - min) + min;
	}
	,'int': function(min,max) {
		if(max == null) {
			max = min;
			min = 0;
		}
		return Math.floor(this["float"](min,max));
	}
	,bool: function(chance) {
		if(chance == null) chance = 0.5;
		return this.get() < chance;
	}
	,sign: function(chance) {
		if(chance == null) chance = 0.5;
		if(this.get() < chance) return 1; else return -1;
	}
	,bit: function(chance) {
		if(chance == null) chance = 0.5;
		if(this.get() < chance) return 1; else return 0;
	}
	,reset: function() {
		var s = this.seed;
		this.initial = this.seed = s;
		this.initial;
	}
	,set_initial: function(_initial) {
		this.initial = this.seed = _initial;
		return this.initial;
	}
	,__class__: luxe.utils.Random
	,__properties__: {set_initial:"set_initial"}
};
luxe.utils.Utils = function(_luxe) {
	this.core = _luxe;
	this.geometry = new luxe.utils.GeometryUtils();
	this.random = new luxe.utils.Random(Std["int"](Math.random() * 1073741823));
	this._byte_levels = ["bytes","Kb","MB","GB","TB"];
};
luxe.utils.Utils.__name__ = ["luxe","utils","Utils"];
luxe.utils.Utils.prototype = {
	pos_info: function(pos) {
		return "" + pos.fileName + ":" + pos.lineNumber + ":(" + pos.className + ":" + pos.methodName + ")";
	}
	,uniqueid: function(val) {
		if(val == null) val = Std.random(2147483647);
		var to_char = function(value) {
			if(value > 9) {
				var ascii = 65 + (value - 10);
				if(ascii > 90) ascii += 6;
				return String.fromCharCode(ascii);
			} else return (value == null?"null":"" + value).charAt(0);
		};
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		if(q > 0) return this.uniqueid(q) + to_char(r); else return Std.string(to_char(r));
	}
	,uniquehash: function() {
		return this.hash(this.uniqueid());
	}
	,hash: function(string) {
		return this.hashdjb2(string);
	}
	,hashdjb2: function(string) {
		var _hash = 5381;
		var _g1 = 0;
		var _g = string.length;
		while(_g1 < _g) {
			var i = _g1++;
			_hash = (_hash << 5) + _hash + HxOverrides.cca(string,i);
		}
		return _hash;
	}
	,uniqueid2: function() {
		return haxe.crypto.Md5.encode(Std.string(snow.Snow.core.timestamp() * Math.random()));
	}
	,stacktrace: function(_depth) {
		if(_depth == null) _depth = 100;
		var result = "\n";
		var stack = haxe.CallStack.callStack();
		stack.shift();
		stack.reverse();
		var total = Std["int"](Math.min(stack.length,_depth));
		var _g = 0;
		while(_g < total) {
			var i = _g++;
			var stackitem = stack[i];
			{
				var _g1 = stack[i];
				switch(_g1[1]) {
				case 2:
					var line = _g1[4];
					var file = _g1[3];
					var s = _g1[2];
					switch(s[1]) {
					case 3:
						var method = s[3];
						var classname = s[2];
						result += "   at " + file + ":" + line + ": " + classname + "." + method;
						break;
					default:
					}
					break;
				default:
				}
			}
			if(i != total - 1) result += "\n";
		}
		return result;
	}
	,path_is_relative: function(_path) {
		return _path.charAt(0) != "#" && _path.charAt(0) != "/" && _path.indexOf(":\\") == -1 && _path.indexOf(":/") == -1 && (_path.indexOf("//") == -1 || _path.indexOf("//") > _path.indexOf("#") || _path.indexOf("//") > _path.indexOf("?"));
	}
	,find_assets_image_sequence: function(_name,_ext,_start) {
		if(_start == null) _start = "1";
		if(_ext == null) _ext = ".png";
		var _final = [];
		var _sequence_type = "";
		var _pattern_regex = null;
		var _type0 = _name + _start + _ext;
		var _type0_re = new EReg("(" + _name + ")(\\d\\b)","gi");
		var _type1 = _name + "_" + _start + _ext;
		var _type1_re = new EReg("(" + _name + ")(_\\d\\b)","gi");
		var _type2 = _name + "-" + _start + _ext;
		var _type2_re = new EReg("(" + _name + ")(-\\d\\b)","gi");
		if(HxOverrides.indexOf(this.core.app.assets.list,_type0,0) != -1) {
			_sequence_type = _type0;
			_pattern_regex = _type0_re;
		} else if(HxOverrides.indexOf(this.core.app.assets.list,_type1,0) != -1) {
			_sequence_type = _type1;
			_pattern_regex = _type1_re;
		} else if(HxOverrides.indexOf(this.core.app.assets.list,_type2,0) != -1) {
			_sequence_type = _type2;
			_pattern_regex = _type2_re;
		} else haxe.Log.trace("Sequence requested from " + _name + " but no assets found like `" + _type0 + "` or `" + _type1 + "` or `" + _type2 + "`",{ fileName : "Utils.hx", lineNumber : 168, className : "luxe.utils.Utils", methodName : "find_assets_image_sequence"});
		if(_sequence_type != "") {
			var _g = 0;
			var _g1 = this.core.app.assets.list;
			while(_g < _g1.length) {
				var _asset = _g1[_g];
				++_g;
				if(_pattern_regex.match(_asset)) _final.push(_asset);
			}
			_final.sort(function(a,b) {
				if(a == b) return 0;
				if(a < b) return -1;
				return 1;
			});
		}
		return _final;
	}
	,text_wrap_column_knuth_plass: function(_string,_column) {
		if(_column == null) _column = 80;
		var result = [];
		var words = [];
		var lengths = [];
		var badness;
		var _g = new haxe.ds.IntMap();
		_g.set(0,0);
		badness = _g;
		var extra = new haxe.ds.IntMap();
		var s = _string;
		var rgx = new EReg("(\\b[^\\s]+\\b)","gm");
		while(rgx.match(s)) {
			words.push(rgx.matched(1));
			s = rgx.matchedRight();
		}
		if(words.length == 0) words.push(_string);
		words;
		words.map(function(w) {
			lengths.push(w.length);
		});
		var n = words.length;
		var _g2 = 1;
		var _g1 = n + 1;
		while(_g2 < _g1) {
			var i = _g2++;
			var sums = new haxe.ds.IntMap();
			var k = i;
			while((function($this) {
				var $r;
				var total = 0;
				{
					var _g3 = k - 1;
					while(_g3 < i) {
						var i1 = _g3++;
						total += lengths[i1];
					}
				}
				$r = total + (i - k + 1);
				return $r;
			}(this)) <= _column && k > 0) {
				var a;
				a = _column - (function($this) {
					var $r;
					var total1 = 0;
					{
						var _g4 = k - 1;
						while(_g4 < i) {
							var i2 = _g4++;
							total1 += lengths[i2];
						}
					}
					$r = total1 + (i - k + 1);
					return $r;
				}(this));
				var k1 = Std["int"](Math.pow(a,3) + badness.get(k - 1));
				sums.set(k1,k);
				k;
				k -= 1;
			}
			var mn;
			var min = 1073741823;
			var $it0 = sums.keys();
			while( $it0.hasNext() ) {
				var item = $it0.next();
				if(item < min) min = item;
			}
			mn = min;
			badness.set(i,mn);
			mn;
			var v = sums.get(mn);
			extra.set(i,v);
			v;
		}
		var line = 1;
		while(n > 1) {
			result.unshift(words.slice(extra.get(n) - 1,n).join(" "));
			n = extra.get(n) - 1;
			line += 1;
		}
		if(result.length == 0) result.push(_string);
		return result;
	}
	,text_wrap_column: function(_text,_brk,_column) {
		if(_column == null) _column = 80;
		if(_brk == null) _brk = "\n";
		var result = new EReg("(.{1," + _column + "})(?: +|$)\n?|(.{" + _column + "})","gimu").replace(_text,"$1$2" + _brk);
		return StringTools.rtrim(result);
	}
	,bytes_to_string: function(bytes,precision) {
		if(precision == null) precision = 3;
		var index = Math.floor(Math.log(bytes) / Math.log(1024));
		var _byte_value = bytes / Math.pow(1024,index);
		_byte_value = luxe.utils.Maths.fixed(_byte_value,precision);
		return _byte_value + " " + this._byte_levels[index];
	}
	,array_to_bytes: function(array) {
		if(array == null) return null;
		var bytes = haxe.io.Bytes.alloc(array.length);
		var _g1 = 0;
		var _g = bytes.length;
		while(_g1 < _g) {
			var n = _g1++;
			bytes.b[n] = array[n] & 255;
		}
		return bytes;
	}
	,__class__: luxe.utils.Utils
};
luxe.utils.unifill = {};
luxe.utils.unifill._CodePoint = {};
luxe.utils.unifill._CodePoint.CodePoint_Impl_ = function() { };
luxe.utils.unifill._CodePoint.CodePoint_Impl_.__name__ = ["luxe","utils","unifill","_CodePoint","CodePoint_Impl_"];
luxe.utils.unifill._CodePoint.CodePoint_Impl_.cons = function(a,b) {
	return luxe.utils.unifill.Utf16.fromCodePoint(a).toString() + b;
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.snoc = function(a,b) {
	return a + luxe.utils.unifill.Utf16.fromCodePoint(b).toString();
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.addInt = function(a,b) {
	return a + b;
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.sub = function(a,b) {
	return a - b;
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.subInt = function(a,b) {
	return a - b;
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_._new = function(code) {
	var this1;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) throw luxe.utils.unifill.Exception.InvalidCodePoint(code);
	this1 = code;
	return this1;
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.toString = function(this1) {
	return luxe.utils.unifill.Utf16.fromCodePoint(this1).toString();
};
luxe.utils.unifill._CodePoint.CodePoint_Impl_.toInt = function(this1) {
	return this1;
};
luxe.utils.unifill.CodePointIter = function(s) {
	this.s = s;
	this.itr = new luxe.utils.unifill.InternalEncodingIter(s,0,s.length);
};
luxe.utils.unifill.CodePointIter.__name__ = ["luxe","utils","unifill","CodePointIter"];
luxe.utils.unifill.CodePointIter.prototype = {
	hasNext: function() {
		return this.itr.hasNext();
	}
	,next: function() {
		return luxe.utils.unifill.InternalEncoding.codePointAt(this.s,this.itr.next());
	}
	,__class__: luxe.utils.unifill.CodePointIter
};
luxe.utils.unifill.Exception = { __ename__ : true, __constructs__ : ["InvalidCodePoint","InvalidCodeUnitSequence"] };
luxe.utils.unifill.Exception.InvalidCodePoint = function(code) { var $x = ["InvalidCodePoint",0,code]; $x.__enum__ = luxe.utils.unifill.Exception; $x.toString = $estr; return $x; };
luxe.utils.unifill.Exception.InvalidCodeUnitSequence = function(index) { var $x = ["InvalidCodeUnitSequence",1,index]; $x.__enum__ = luxe.utils.unifill.Exception; $x.toString = $estr; return $x; };
luxe.utils.unifill.InternalEncoding = function() { };
luxe.utils.unifill.InternalEncoding.__name__ = ["luxe","utils","unifill","InternalEncoding"];
luxe.utils.unifill.InternalEncoding.__properties__ = {get_internalEncoding:"get_internalEncoding"}
luxe.utils.unifill.InternalEncoding.get_internalEncoding = function() {
	return "UTF-16";
};
luxe.utils.unifill.InternalEncoding.codeUnitAt = function(s,index) {
	var u_str = s;
	return u_str.charCodeAt(index);
};
luxe.utils.unifill.InternalEncoding.codePointAt = function(s,index) {
	var u = new luxe.utils.unifill.Utf16(s);
	return u.codePointAt(index);
};
luxe.utils.unifill.InternalEncoding.charAt = function(s,index) {
	var u = new luxe.utils.unifill.Utf16(s);
	return u.charAt(index).toString();
};
luxe.utils.unifill.InternalEncoding.codePointCount = function(s,beginIndex,endIndex) {
	var u = new luxe.utils.unifill.Utf16(s);
	return u.codePointCount(beginIndex,endIndex);
};
luxe.utils.unifill.InternalEncoding.codePointWidthAt = function(s,index) {
	var u = new luxe.utils.unifill.Utf16(s);
	return u.codePointWidthAt(index);
};
luxe.utils.unifill.InternalEncoding.codePointWidthBefore = function(s,index) {
	var u = new luxe.utils.unifill.Utf16(s);
	return luxe.utils.unifill._Utf16.Utf16Impl.find_prev_code_point($bind(u,u.codeUnitAt),index);
};
luxe.utils.unifill.InternalEncoding.offsetByCodePoints = function(s,index,codePointOffset) {
	var u = new luxe.utils.unifill.Utf16(s);
	if(codePointOffset >= 0) return u.forward_offset_by_code_points(index,codePointOffset); else return u.backward_offset_by_code_points(index,-codePointOffset);
};
luxe.utils.unifill.InternalEncoding.backwardOffsetByCodePoints = function(s,index,codePointOffset) {
	var u = new luxe.utils.unifill.Utf16(s);
	return u.offsetByCodePoints(index,-codePointOffset);
};
luxe.utils.unifill.InternalEncoding.fromCodePoint = function(codePoint) {
	return luxe.utils.unifill.Utf16.fromCodePoint(codePoint).toString();
};
luxe.utils.unifill.InternalEncoding.fromCodePoints = function(codePoints) {
	return luxe.utils.unifill.Utf16.fromCodePoints(codePoints).toString();
};
luxe.utils.unifill.InternalEncoding.validate = function(s) {
	var u = new luxe.utils.unifill.Utf16(s);
	u.validate();
};
luxe.utils.unifill.InternalEncoding.isValidString = function(s) {
	try {
		luxe.utils.unifill.InternalEncoding.validate(s);
		return true;
	} catch( e ) {
		if( js.Boot.__instanceof(e,luxe.utils.unifill.Exception) ) {
			switch(e[1]) {
			case 1:
				var index = e[2];
				return false;
			default:
				throw e;
			}
		} else throw(e);
	}
};
luxe.utils.unifill.InternalEncodingIter = function(s,beginIndex,endIndex) {
	this.string = s;
	this.index = beginIndex;
	this.endIndex = endIndex;
};
luxe.utils.unifill.InternalEncodingIter.__name__ = ["luxe","utils","unifill","InternalEncodingIter"];
luxe.utils.unifill.InternalEncodingIter.prototype = {
	hasNext: function() {
		return this.index < this.endIndex;
	}
	,next: function() {
		var i = this.index;
		this.index += luxe.utils.unifill.InternalEncoding.codePointWidthAt(this.string,this.index);
		return i;
	}
	,__class__: luxe.utils.unifill.InternalEncodingIter
};
luxe.utils.unifill.Unicode = function() { };
luxe.utils.unifill.Unicode.__name__ = ["luxe","utils","unifill","Unicode"];
luxe.utils.unifill.Unicode.decodeSurrogate = function(hi,lo) {
	return hi - 55232 << 10 | lo & 1023;
};
luxe.utils.unifill.Unicode.encodeHighSurrogate = function(c) {
	return (c >> 10) + 55232;
};
luxe.utils.unifill.Unicode.encodeLowSurrogate = function(c) {
	return c & 1023 | 56320;
};
luxe.utils.unifill.Unicode.isScalar = function(code) {
	return 0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343);
};
luxe.utils.unifill.Unicode.isHighSurrogate = function(code) {
	return 55296 <= code && code <= 56319;
};
luxe.utils.unifill.Unicode.isLowSurrogate = function(code) {
	return 56320 <= code && code <= 57343;
};
luxe.utils.unifill.Unifill = function() { };
luxe.utils.unifill.Unifill.__name__ = ["luxe","utils","unifill","Unifill"];
luxe.utils.unifill.Unifill.uLength = function(s) {
	return luxe.utils.unifill.InternalEncoding.codePointCount(s,0,s.length);
};
luxe.utils.unifill.Unifill.uCharAt = function(s,index) {
	var i = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,index);
	return luxe.utils.unifill.InternalEncoding.charAt(s,i);
};
luxe.utils.unifill.Unifill.uCharCodeAt = function(s,index) {
	var i = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,index);
	return luxe.utils.unifill.InternalEncoding.codePointAt(s,i);
};
luxe.utils.unifill.Unifill.uCodePointAt = function(s,index) {
	return luxe.utils.unifill.Unifill.uCharCodeAt(s,index);
};
luxe.utils.unifill.Unifill.uIndexOf = function(s,value,startIndex) {
	if(startIndex == null) startIndex = 0;
	var index = s.indexOf(value,luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,startIndex));
	if(index >= 0) return luxe.utils.unifill.InternalEncoding.codePointCount(s,0,index); else return -1;
};
luxe.utils.unifill.Unifill.uLastIndexOf = function(s,value,startIndex) {
	if(startIndex == null) startIndex = s.length - 1;
	var index = s.lastIndexOf(value,luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,startIndex));
	if(index >= 0) return luxe.utils.unifill.InternalEncoding.codePointCount(s,0,index); else return -1;
};
luxe.utils.unifill.Unifill.uSplit = function(s,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1 = new luxe.utils.unifill.InternalEncodingIter(s,0,s.length);
		while(_g1.index < _g1.endIndex) {
			var i = _g1.next();
			_g.push(luxe.utils.unifill.InternalEncoding.charAt(s,i));
		}
		return _g;
	} else return s.split(delimiter);
};
luxe.utils.unifill.Unifill.uSubstr = function(s,startIndex,length) {
	var si = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,startIndex >= 0?0:s.length,startIndex);
	var ei;
	if(length == null) ei = s.length; else if(length < 0) ei = si; else ei = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,si,length);
	return s.substring(si,ei);
};
luxe.utils.unifill.Unifill.uSubstring = function(s,startIndex,endIndex) {
	var si;
	if(startIndex < 0) si = 0; else si = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,startIndex);
	var ei;
	if(endIndex == null) ei = s.length; else if(endIndex < 0) ei = 0; else ei = luxe.utils.unifill.InternalEncoding.offsetByCodePoints(s,0,endIndex);
	return s.substring(si,ei);
};
luxe.utils.unifill.Unifill.uIterator = function(s) {
	return new luxe.utils.unifill.CodePointIter(s);
};
luxe.utils.unifill.Unifill.uCompare = function(a,b) {
	var aiter = new luxe.utils.unifill.InternalEncodingIter(a,0,a.length);
	var biter = new luxe.utils.unifill.InternalEncodingIter(b,0,b.length);
	while(aiter.index < aiter.endIndex && biter.index < biter.endIndex) {
		var acode = luxe.utils.unifill.InternalEncoding.codePointAt(a,aiter.next());
		var bcode = luxe.utils.unifill.InternalEncoding.codePointAt(b,biter.next());
		if(acode < bcode) return -1;
		if(acode > bcode) return 1;
	}
	if(biter.index < biter.endIndex) return -1;
	if(aiter.index < aiter.endIndex) return 1;
	return 0;
};
luxe.utils.unifill.Unifill.uToString = function(codePoints) {
	return luxe.utils.unifill.Utf16.fromCodePoints(codePoints).toString();
};
luxe.utils.unifill.Utf = function() { };
luxe.utils.unifill.Utf.__name__ = ["luxe","utils","unifill","Utf"];
luxe.utils.unifill.Utf.prototype = {
	__class__: luxe.utils.unifill.Utf
};
luxe.utils.unifill.Utf16 = function(s) {
	this.str = s;
};
luxe.utils.unifill.Utf16.__name__ = ["luxe","utils","unifill","Utf16"];
luxe.utils.unifill.Utf16.__interfaces__ = [luxe.utils.unifill.Utf];
luxe.utils.unifill.Utf16.fromCodePoint = function(codePoint) {
	var buf = new StringBuf();
	luxe.utils.unifill._Utf16.Utf16Impl.encode_code_point(function(x) {
		buf.b += String.fromCharCode(x);
	},codePoint);
	return new luxe.utils.unifill.Utf16(buf.b);
};
luxe.utils.unifill.Utf16.fromCodePoints = function(codePoints) {
	var buf = new StringBuf();
	var $it0 = $iterator(codePoints)();
	while( $it0.hasNext() ) {
		var c = $it0.next();
		luxe.utils.unifill._Utf16.Utf16Impl.encode_code_point(function(x) {
			buf.b += String.fromCharCode(x);
		},c);
	}
	return new luxe.utils.unifill.Utf16(buf.b);
};
luxe.utils.unifill.Utf16.fromString = function(s) {
	return new luxe.utils.unifill.Utf16(s);
};
luxe.utils.unifill.Utf16.fromArray = function(a) {
	return new luxe.utils.unifill.Utf16((function($this) {
		var $r;
		var buf = new StringBuf();
		{
			var _g = 0;
			while(_g < a.length) {
				var x = a[_g];
				++_g;
				buf.b += String.fromCharCode(x);
			}
		}
		$r = buf.b;
		return $r;
	}(this)));
};
luxe.utils.unifill.Utf16.prototype = {
	codeUnitAt: function(index) {
		return this.str.charCodeAt(index);
	}
	,codePointAt: function(index) {
		return luxe.utils.unifill._Utf16.Utf16Impl.decode_code_point(this.str.length,$bind(this,this.codeUnitAt),index);
	}
	,charAt: function(index) {
		return new luxe.utils.unifill.Utf16((function($this) {
			var $r;
			var len = $this.codePointWidthAt(index);
			$r = (function($this) {
				var $r;
				var s = HxOverrides.substr($this.str,index,len);
				$r = s;
				return $r;
			}($this));
			return $r;
		}(this)));
	}
	,codePointCount: function(beginIndex,endIndex) {
		var index = beginIndex;
		var i = 0;
		while(index < endIndex) {
			index += this.codePointWidthAt(index);
			++i;
		}
		return i;
	}
	,codePointWidthAt: function(index) {
		var c = this.str.charCodeAt(index);
		if(!(55296 <= c && c <= 56319)) return 1; else return 2;
	}
	,codePointWidthBefore: function(index) {
		return luxe.utils.unifill._Utf16.Utf16Impl.find_prev_code_point($bind(this,this.codeUnitAt),index);
	}
	,offsetByCodePoints: function(index,codePointOffset) {
		if(codePointOffset >= 0) return this.forward_offset_by_code_points(index,codePointOffset); else return this.backward_offset_by_code_points(index,-codePointOffset);
	}
	,substr: function(index,len) {
		return new luxe.utils.unifill.Utf16((function($this) {
			var $r;
			var s = HxOverrides.substr($this.str,index,len);
			$r = s;
			return $r;
		}(this)));
	}
	,validate: function() {
		var len = this.str.length;
		var accessor = $bind(this,this.codeUnitAt);
		var i = 0;
		while(i < len) {
			luxe.utils.unifill._Utf16.Utf16Impl.decode_code_point(len,accessor,i);
			i += this.codePointWidthAt(i);
		}
	}
	,toString: function() {
		return this.str;
	}
	,toArray: function() {
		var this1 = this.str;
		var i = 0;
		var len = this1.length;
		var _g = [];
		while(i < len) _g.push(StringTools.fastCodeAt(this1,i++));
		return _g;
	}
	,get_length: function() {
		return this.str.length;
	}
	,forward_offset_by_code_points: function(index,codePointOffset) {
		var len = this.str.length;
		var i = 0;
		while(i < codePointOffset && index < len) {
			index += this.codePointWidthAt(index);
			++i;
		}
		return index;
	}
	,backward_offset_by_code_points: function(index,codePointOffset) {
		var count = 0;
		while(count < codePointOffset && 0 < index) {
			index -= luxe.utils.unifill._Utf16.Utf16Impl.find_prev_code_point($bind(this,this.codeUnitAt),index);
			++count;
		}
		return index;
	}
	,__class__: luxe.utils.unifill.Utf16
	,__properties__: {get_length:"get_length"}
};
luxe.utils.unifill._Utf16 = {};
luxe.utils.unifill._Utf16.Utf16Impl = function() { };
luxe.utils.unifill._Utf16.Utf16Impl.__name__ = ["luxe","utils","unifill","_Utf16","Utf16Impl"];
luxe.utils.unifill._Utf16.Utf16Impl.code_point_width = function(c) {
	if(!(55296 <= c && c <= 56319)) return 1; else return 2;
};
luxe.utils.unifill._Utf16.Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!(56320 <= c && c <= 57343)) return 1; else return 2;
};
luxe.utils.unifill._Utf16.Utf16Impl.encode_code_point = function(addUnit,codePoint) {
	if(codePoint <= 65535) addUnit(codePoint); else {
		addUnit((codePoint >> 10) + 55232);
		addUnit(codePoint & 1023 | 56320);
	}
};
luxe.utils.unifill._Utf16.Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) throw luxe.utils.unifill.Exception.InvalidCodeUnitSequence(index);
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) throw luxe.utils.unifill.Exception.InvalidCodeUnitSequence(index);
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) return hi - 55232 << 10 | lo & 1023; else throw luxe.utils.unifill.Exception.InvalidCodeUnitSequence(index);
	} else if(56320 <= hi && hi <= 57343) throw luxe.utils.unifill.Exception.InvalidCodeUnitSequence(index); else return hi;
};
luxe.utils.unifill._Utf16.StringU16Buffer_Impl_ = function() { };
luxe.utils.unifill._Utf16.StringU16Buffer_Impl_.__name__ = ["luxe","utils","unifill","_Utf16","StringU16Buffer_Impl_"];
luxe.utils.unifill._Utf16.StringU16Buffer_Impl_._new = function() {
	return new StringBuf();
};
luxe.utils.unifill._Utf16.StringU16Buffer_Impl_.addUnit = function(this1,unit) {
	this1.b += String.fromCharCode(unit);
};
luxe.utils.unifill._Utf16.StringU16Buffer_Impl_.getStringU16 = function(this1) {
	return this1.b;
};
luxe.utils.unifill._Utf16.StringU16_Impl_ = function() { };
luxe.utils.unifill._Utf16.StringU16_Impl_.__name__ = ["luxe","utils","unifill","_Utf16","StringU16_Impl_"];
luxe.utils.unifill._Utf16.StringU16_Impl_.__properties__ = {get_length:"get_length"}
luxe.utils.unifill._Utf16.StringU16_Impl_.fromString = function(s) {
	return s;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.ofArray = function(a) {
	var buf = new StringBuf();
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf.b += String.fromCharCode(x);
	}
	return buf.b;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.fromArray = function(a) {
	var buf = new StringBuf();
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf.b += String.fromCharCode(x);
	}
	return buf.b;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
luxe.utils.unifill._Utf16.StringU16_Impl_.substr = function(this1,index,len) {
	var s = HxOverrides.substr(this1,index,len);
	return s;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.toString = function(this1) {
	return this1;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(StringTools.fastCodeAt(this1,i++));
	return _g;
};
luxe.utils.unifill._Utf16.StringU16_Impl_._new = function(s) {
	return s;
};
luxe.utils.unifill._Utf16.StringU16_Impl_.get_length = function(this1) {
	return this1.length;
};
nape.Config = function() {
};
nape.Config.__name__ = ["nape","Config"];
nape.Config.prototype = {
	__class__: nape.Config
};
nape.callbacks.Callback = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Callback.internal) throw "Error: Callback cannot be instantiated derp!";
};
nape.callbacks.Callback.__name__ = ["nape","callbacks","Callback"];
nape.callbacks.Callback.prototype = {
	get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape.callbacks.Callback
	,__properties__: {get_listener:"get_listener",get_event:"get_event"}
};
nape.callbacks.BodyCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape.callbacks.BodyCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.BodyCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.BodyCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_body:"get_body"})
});
nape.callbacks.Listener = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Listener.internal) throw "Error: Cannot instantiate Listener derp!";
};
nape.callbacks.Listener.__name__ = ["nape","callbacks","Listener"];
nape.callbacks.Listener.prototype = {
	get_type: function() {
		return zpp_nape.callbacks.ZPP_Listener.types[this.zpp_inner.type];
	}
	,get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,set_event: function(event) {
		if(event == null) throw "Error: Cannot set listener event type to null";
		if(zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event] != event) {
			var xevent;
			if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
				return $r;
			}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_PRE; else xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
			this.zpp_inner.swapEvent(xevent);
		}
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_precedence: function() {
		return this.zpp_inner.precedence;
	}
	,set_precedence: function(precedence) {
		if(this.zpp_inner.precedence != precedence) {
			this.zpp_inner.precedence = precedence;
			this.zpp_inner.invalidate_precedence();
		}
		return this.zpp_inner.precedence;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
			if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:
				itype = "COLLISION";
				break;
			case zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:
				itype = "SENSOR";
				break;
			case zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape.callbacks.Listener
	,__properties__: {set_space:"set_space",get_space:"get_space",set_precedence:"set_precedence",get_precedence:"get_precedence",set_event:"set_event",get_event:"get_event",get_type:"get_type"}
};
nape.callbacks.BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: BodyListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_BodyListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape.callbacks.BodyListener.__super__ = nape.callbacks.Listener;
nape.callbacks.BodyListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: BodyListener::handler cannot be null";
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape.callbacks.BodyListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
nape.callbacks.CbEvent = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "CbEvent" + " derp!";
};
nape.callbacks.CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape.callbacks.CbEvent.__properties__ = {get_PRE:"get_PRE",get_BREAK:"get_BREAK",get_SLEEP:"get_SLEEP",get_WAKE:"get_WAKE",get_END:"get_END",get_ONGOING:"get_ONGOING",get_BEGIN:"get_BEGIN"}
nape.callbacks.CbEvent.get_BEGIN = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
};
nape.callbacks.CbEvent.get_ONGOING = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
};
nape.callbacks.CbEvent.get_END = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_END;
};
nape.callbacks.CbEvent.get_WAKE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
};
nape.callbacks.CbEvent.get_SLEEP = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
};
nape.callbacks.CbEvent.get_BREAK = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
};
nape.callbacks.CbEvent.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_PRE;
};
nape.callbacks.CbEvent.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
			return $r;
		}(this))) return "PRE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this))) return "BEGIN"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
			return $r;
		}(this))) return "ONGOING"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
			return $r;
		}(this))) return "END"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
			return $r;
		}(this))) return "WAKE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
			return $r;
		}(this))) return "SLEEP"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
			return $r;
		}(this))) return "BREAK"; else return "";
	}
	,__class__: nape.callbacks.CbEvent
};
nape.callbacks.CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CbTypeList.internal) throw "Error: Cannot instantiate " + "CbType" + "Iterator derp!";
};
nape.callbacks.CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape.callbacks.CbTypeIterator.get = function(list) {
	var ret;
	if(nape.callbacks.CbTypeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CbTypeList.internal = true;
		var ret1 = new nape.callbacks.CbTypeIterator();
		zpp_nape.util.ZPP_CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.callbacks.CbTypeIterator
};
nape.callbacks.CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CbTypeList();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape.callbacks.CbTypeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.CbTypeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.CbTypeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.CbTypeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "CbType" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.callbacks.CbTypeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.callbacks.CbTypeList
	,__properties__: {get_length:"get_length"}
};
nape.callbacks.ConstraintCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape.callbacks.ConstraintCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.ConstraintCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.ConstraintCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_constraint:"get_constraint"})
});
nape.callbacks.ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_ConstraintListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape.callbacks.ConstraintListener.__super__ = nape.callbacks.Listener;
nape.callbacks.ConstraintListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape.callbacks.ConstraintListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
nape.callbacks.InteractionCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape.callbacks.InteractionCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.InteractionCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.InteractionCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_arbiters:"get_arbiters",get_int2:"get_int2",get_int1:"get_int1"})
});
nape.callbacks.InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: InteractionListener::handler cannot be null";
	if(event == null) throw "Error: CbEvent cannot be null for InteractionListener";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else throw "Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),xevent,zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape.callbacks.InteractionListener.__super__ = nape.callbacks.Listener;
nape.callbacks.InteractionListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handleri;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: InteractionListener::handler cannot be null";
		this.zpp_inner_zn.handleri = handler;
		return this.zpp_inner_zn.handleri;
	}
	,get_allowSleepingCallbacks: function() {
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,set_allowSleepingCallbacks: function(allowSleepingCallbacks) {
		this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,__class__: nape.callbacks.InteractionListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_allowSleepingCallbacks:"set_allowSleepingCallbacks",get_allowSleepingCallbacks:"get_allowSleepingCallbacks",set_handler:"set_handler",get_handler:"get_handler",set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
nape.callbacks.InteractionType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InteractionType" + " derp!";
};
nape.callbacks.InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape.callbacks.InteractionType.__properties__ = {get_ANY:"get_ANY",get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape.callbacks.InteractionType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
};
nape.callbacks.InteractionType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
};
nape.callbacks.InteractionType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
};
nape.callbacks.InteractionType.get_ANY = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
};
nape.callbacks.InteractionType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this))) return "FLUID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
			return $r;
		}(this))) return "ANY"; else return "";
	}
	,__class__: nape.callbacks.InteractionType
};
nape.callbacks.ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ListenerList.internal) throw "Error: Cannot instantiate " + "Listener" + "Iterator derp!";
};
nape.callbacks.ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape.callbacks.ListenerIterator.get = function(list) {
	var ret;
	if(nape.callbacks.ListenerIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ListenerList.internal = true;
		var ret1 = new nape.callbacks.ListenerIterator();
		zpp_nape.util.ZPP_ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.callbacks.ListenerIterator
};
nape.callbacks.ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ListenerList();
	this.zpp_inner.outer = this;
};
nape.callbacks.ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape.callbacks.ListenerList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.ListenerList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.ListenerIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.ListenerList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Listener" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.callbacks.ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.callbacks.ListenerIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.callbacks.ListenerList
	,__properties__: {get_length:"get_length"}
};
nape.callbacks.ListenerType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ListenerType" + " derp!";
};
nape.callbacks.ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape.callbacks.ListenerType.__properties__ = {get_PRE:"get_PRE",get_INTERACTION:"get_INTERACTION",get_CONSTRAINT:"get_CONSTRAINT",get_BODY:"get_BODY"}
nape.callbacks.ListenerType.get_BODY = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_BODY;
};
nape.callbacks.ListenerType.get_CONSTRAINT = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
};
nape.callbacks.ListenerType.get_INTERACTION = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
};
nape.callbacks.ListenerType.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_PRE;
};
nape.callbacks.ListenerType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
			return $r;
		}(this))) return "BODY"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
			return $r;
		}(this))) return "CONSTRAINT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
			return $r;
		}(this))) return "INTERACTION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
			return $r;
		}(this))) return "PRE"; else return "";
	}
	,__class__: nape.callbacks.ListenerType
};
nape.callbacks.OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
nape.callbacks.OptionType.__name__ = ["nape","callbacks","OptionType"];
nape.callbacks.OptionType.prototype = {
	get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
		return this.zpp_inner.wrap_includes;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
		return this.zpp_inner.wrap_excludes;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		var inc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
			$r = $this.zpp_inner.wrap_includes;
			return $r;
		}(this))).toString();
		var exc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
			$r = $this.zpp_inner.wrap_excludes;
			return $r;
		}(this))).toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape.callbacks.OptionType
	,__properties__: {get_excludes:"get_excludes",get_includes:"get_includes"}
};
nape.callbacks.PreCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape.callbacks.PreCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.PreCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_swapped: function() {
		return this.zpp_inner.pre_swapped;
	}
	,toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape.callbacks.PreCallback
	,__properties__: $extend(nape.callbacks.Callback.prototype.__properties__,{get_swapped:"get_swapped",get_int2:"get_int2",get_int1:"get_int1",get_arbiter:"get_arbiter"})
});
nape.callbacks.PreFlag = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "PreFlag" + " derp!";
};
nape.callbacks.PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape.callbacks.PreFlag.__properties__ = {get_IGNORE_ONCE:"get_IGNORE_ONCE",get_ACCEPT_ONCE:"get_ACCEPT_ONCE",get_IGNORE:"get_IGNORE",get_ACCEPT:"get_ACCEPT"}
nape.callbacks.PreFlag.get_ACCEPT = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
};
nape.callbacks.PreFlag.get_IGNORE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
};
nape.callbacks.PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
};
nape.callbacks.PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
};
nape.callbacks.PreFlag.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
			return $r;
		}(this))) return "ACCEPT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
			return $r;
		}(this))) return "IGNORE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
			return $r;
		}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
			return $r;
		}(this))) return "IGNORE_ONCE"; else return "";
	}
	,__class__: nape.callbacks.PreFlag
};
nape.callbacks.PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: PreListener must take a handler!";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,zpp_nape.util.ZPP_Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.PreListener.__name__ = ["nape","callbacks","PreListener"];
nape.callbacks.PreListener.__super__ = nape.callbacks.Listener;
nape.callbacks.PreListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handlerp;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: PreListener must take a non-null handler!";
		this.zpp_inner_zn.handlerp = handler;
		this.zpp_inner_zn.wake();
		return this.zpp_inner_zn.handlerp;
	}
	,get_pure: function() {
		return this.zpp_inner_zn.pure;
	}
	,set_pure: function(pure) {
		if(!pure) this.zpp_inner_zn.wake();
		this.zpp_inner_zn.pure = pure;
		return this.zpp_inner_zn.pure;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,__class__: nape.callbacks.PreListener
	,__properties__: $extend(nape.callbacks.Listener.prototype.__properties__,{set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_pure:"set_pure",get_pure:"get_pure",set_handler:"set_handler",get_handler:"get_handler",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
nape.constraint = {};
nape.constraint.Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT.zpp_inner);
	throw "Error: Constraint cannot be instantiated derp!";
};
nape.constraint.Constraint.__name__ = ["nape","constraint","Constraint"];
nape.constraint.Constraint.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
			if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
			if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null || !this.zpp_inner.active) throw "Error: isSleeping only makes sense if constraint is" + " active and inside a space";
		return this.zpp_inner.component.sleeping;
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,set_active: function(active) {
		if(this.zpp_inner.active != active) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.zpp_inner.active;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.ignore;
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_stiff: function(stiff) {
		if(this.zpp_inner.stiff != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.stiff;
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_frequency: function(frequency) {
		if(frequency != frequency) throw "Error: Constraint::Frequency cannot be NaN";
		if(frequency <= 0) throw "Error: Constraint::Frequency must be >0";
		if(this.zpp_inner.frequency != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.frequency;
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_damping: function(damping) {
		if(damping != damping) throw "Error: Constraint::Damping cannot be Nan";
		if(damping < 0) throw "Error: Constraint::Damping must be >=0";
		if(this.zpp_inner.damping != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.damping;
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_maxForce: function(maxForce) {
		if(maxForce != maxForce) throw "Error: Constraint::maxForce cannot be NaN";
		if(maxForce < 0) throw "Error: Constraint::maxForce must be >=0";
		if(this.zpp_inner.maxForce != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxForce;
	}
	,get_maxError: function() {
		return this.zpp_inner.maxError;
	}
	,set_maxError: function(maxError) {
		if(maxError != maxError) throw "Error: Constraint::maxError cannot be NaN";
		if(maxError < 0) throw "Error: Constraint::maxError must be >=0";
		if(this.zpp_inner.maxError != maxError) {
			this.zpp_inner.maxError = maxError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxError;
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.zpp_inner.breakUnderForce != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderForce;
	}
	,get_breakUnderError: function() {
		return this.zpp_inner.breakUnderError;
	}
	,set_breakUnderError: function(breakUnderError) {
		if(this.zpp_inner.breakUnderError != breakUnderError) {
			this.zpp_inner.breakUnderError = breakUnderError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderError;
	}
	,get_removeOnBreak: function() {
		return this.zpp_inner.removeOnBreak;
	}
	,set_removeOnBreak: function(removeOnBreak) {
		this.zpp_inner.removeOnBreak = removeOnBreak;
		return this.zpp_inner.removeOnBreak;
	}
	,impulse: function() {
		return null;
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,visitBodies: function(lambda) {
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
		return this.zpp_inner.wrap_cbTypes;
	}
	,toString: function() {
		return "{Constraint}";
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,__class__: nape.constraint.Constraint
	,__properties__: {get_cbTypes:"get_cbTypes",set_removeOnBreak:"set_removeOnBreak",get_removeOnBreak:"get_removeOnBreak",set_breakUnderError:"set_breakUnderError",get_breakUnderError:"get_breakUnderError",set_breakUnderForce:"set_breakUnderForce",get_breakUnderForce:"get_breakUnderForce",set_maxError:"set_maxError",get_maxError:"get_maxError",set_maxForce:"set_maxForce",get_maxForce:"get_maxForce",set_damping:"set_damping",get_damping:"get_damping",set_frequency:"set_frequency",get_frequency:"get_frequency",set_stiff:"set_stiff",get_stiff:"get_stiff",set_ignore:"set_ignore",get_ignore:"get_ignore",set_active:"set_active",get_active:"get_active",get_isSleeping:"get_isSleeping",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_userData:"get_userData"}
};
nape.constraint.AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape.constraint.AngleJoint.__super__ = nape.constraint.Constraint;
nape.constraint.AngleJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for AngleJoint if either body is null.";
		return this.zpp_inner_zn.is_slack();
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw "Error: Cannot apply null lambda to bodies";
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.AngleJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConstraintList.internal) throw "Error: Cannot instantiate " + "Constraint" + "Iterator derp!";
};
nape.constraint.ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape.constraint.ConstraintIterator.get = function(list) {
	var ret;
	if(nape.constraint.ConstraintIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConstraintList.internal = true;
		var ret1 = new nape.constraint.ConstraintIterator();
		zpp_nape.util.ZPP_ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.constraint.ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.constraint.ConstraintIterator
};
nape.constraint.ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConstraintList();
	this.zpp_inner.outer = this;
};
nape.constraint.ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape.constraint.ConstraintList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.constraint.ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.constraint.ConstraintList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.constraint.ConstraintIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.constraint.ConstraintList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Constraint" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.constraint.ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.constraint.ConstraintIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.constraint.ConstraintList
	,__properties__: {get_length:"get_length"}
};
nape.constraint.DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape.constraint.DistanceJoint.__super__ = nape.constraint.Constraint;
nape.constraint.DistanceJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
		if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
		if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for DistanceJoint if either body is null.";
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.DistanceJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape.constraint.LineJoint.__super__ = nape.constraint.Constraint;
nape.constraint.LineJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this))).set(direction);
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.LineJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_direction:"set_direction",get_direction:"get_direction",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape.constraint.MotorJoint.__super__ = nape.constraint.Constraint;
nape.constraint.MotorJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
		if(this.zpp_inner_zn.rate != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.rate;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.MotorJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_rate:"set_rate",get_rate:"get_rate",set_ratio:"set_ratio",get_ratio:"get_ratio",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape.constraint.PivotJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PivotJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.PivotJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape.constraint.PulleyJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PulleyJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_body3: function() {
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3;
		if(body3 == null) inbody3 = null; else inbody3 = body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
			}
			this.zpp_inner_zn.b3 = inbody3;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) inbody3.wake();
			}
		}
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,get_body4: function() {
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4;
		if(body4 == null) inbody4 = null; else inbody4 = body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
			}
			this.zpp_inner_zn.b4 = inbody4;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) inbody4.wake();
			}
		}
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor3: function(anchor3) {
		if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this))).set(anchor3);
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor4: function(anchor4) {
		if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this))).set(anchor4);
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
		if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
		if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null || (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) == null || (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) == null) throw "Error: Cannot compute slack for PulleyJoint if either body is null.";
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && body != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) && body != (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
		if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
		if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
	,__class__: nape.constraint.PulleyJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor4:"set_anchor4",get_anchor4:"get_anchor4",set_anchor3:"set_anchor3",get_anchor3:"get_anchor3",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body4:"set_body4",get_body4:"get_body4",set_body3:"set_body3",get_body3:"get_body3",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.constraint.UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	if(dimensions < 1) throw "Error: Constraint dimension must be at least 1";
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
};
nape.constraint.UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape.constraint.UserConstraint.__super__ = nape.constraint.Constraint;
nape.constraint.UserConstraint.prototype = $extend(nape.constraint.Constraint.prototype,{
	__bindVec2: function() {
		var ret = new nape.geom.Vec2();
		ret.zpp_inner._inuse = true;
		ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
		return ret;
	}
	,__copy: function() {
		throw "Error: UserConstraint::__copy must be overriden";
		return null;
	}
	,__broken: function() {
	}
	,__validate: function() {
	}
	,__draw: function(debug) {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
		throw "Error: UserConstraint::__position must be overriden";
	}
	,__velocity: function(err) {
		throw "Error: Userconstraint::__velocity must be overriden";
	}
	,__eff_mass: function(eff) {
		throw "Error: UserConstraint::__eff_mass must be overriden";
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
		throw "Error: UserConstraint::__impulse must be overriden";
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner_zn.dim,1);
		var _g1 = 0;
		var _g = this.zpp_inner_zn.dim;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < 0 || i >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
			ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
		}
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		var found = false;
		var _g = 0;
		var _g1 = this.zpp_inner_zn.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body == body.zpp_inner) {
				found = true;
				break;
			}
		}
		if(!found) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		var i = 0;
		var nbodies = this.zpp_inner_zn.bodies.length;
		while(i < nbodies) {
			var b = this.zpp_inner_zn.bodies[i];
			if(b.body != null) {
				var found = false;
				var _g = i + 1;
				while(_g < nbodies) {
					var j = _g++;
					var c = this.zpp_inner_zn.bodies[j];
					if(c.body == b.body) {
						found = true;
						break;
					}
				}
				if(!found) lambda(b.body.outer);
			}
			i++;
		}
	}
	,__invalidate: function() {
		this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
	}
	,__registerBody: function(oldBody,newBody) {
		this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
		if(oldBody != newBody) {
			if(oldBody != null) {
				if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) throw "Error: oldBody is not registered to the cosntraint";
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
			}
			if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
			this.zpp_inner.wake();
			if(newBody != null) newBody.zpp_inner.wake();
		}
		return newBody;
	}
	,__class__: nape.constraint.UserConstraint
});
nape.constraint.WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
nape.constraint.WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape.constraint.WeldJoint.__super__ = nape.constraint.Constraint;
nape.constraint.WeldJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
		if(this.zpp_inner_zn.phase != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.phase;
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(3,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape.constraint.WeldJoint
	,__properties__: $extend(nape.constraint.Constraint.prototype.__properties__,{set_phase:"set_phase",get_phase:"get_phase",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
nape.dynamics.Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate Arbiter derp!";
};
nape.dynamics.Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape.dynamics.Arbiter.prototype = {
	get_isSleeping: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.sleeping;
	}
	,get_type: function() {
		return zpp_nape.dynamics.ZPP_Arbiter.types[this.zpp_inner.type];
	}
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	}
	,isSensorArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	}
	,get_collisionArbiter: function() {
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) return this.zpp_inner.colarb.outer_zn; else return null;
	}
	,get_fluidArbiter: function() {
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) return this.zpp_inner.fluidarb.outer_zn; else return null;
	}
	,get_shape1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws2.outer; else return this.zpp_inner.ws1.outer;
	}
	,get_shape2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws1.outer; else return this.zpp_inner.ws2.outer;
	}
	,get_body1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b2.outer; else return this.zpp_inner.b1.outer;
	}
	,get_body2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b1.outer; else return this.zpp_inner.b2.outer;
	}
	,get_state: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var _g = this.zpp_inner.immState;
		var x = _g;
		if(x == (zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
		} else {
			var x1 = _g;
			switch(_g) {
			case zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:
				if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
			default:
				if(x1 == (zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
					if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
				} else {
					if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
				}
			}
		}
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		return nape.geom.Vec3.get(0,0,0);
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) ret = "CollisionArbiter"; else if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) ret = "FluidArbiter"; else ret = "SensorArbiter";
		if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).toString() + "|" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).toString() + ")" + (this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
	}
	,__class__: nape.dynamics.Arbiter
	,__properties__: {get_state:"get_state",get_body2:"get_body2",get_body1:"get_body1",get_shape2:"get_shape2",get_shape1:"get_shape1",get_fluidArbiter:"get_fluidArbiter",get_collisionArbiter:"get_collisionArbiter",get_type:"get_type",get_isSleeping:"get_isSleeping"}
};
nape.dynamics.ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ArbiterList.internal) throw "Error: Cannot instantiate " + "Arbiter" + "Iterator derp!";
};
nape.dynamics.ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape.dynamics.ArbiterIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ArbiterIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ArbiterList.internal = true;
		var ret1 = new nape.dynamics.ArbiterIterator();
		zpp_nape.util.ZPP_ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.ArbiterIterator
};
nape.dynamics.ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ArbiterList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape.dynamics.ArbiterList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ArbiterList.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.dynamics.ArbiterIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ArbiterList();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Arbiter" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.ArbiterList
	,__properties__: {get_length:"get_length"}
};
nape.dynamics.ArbiterType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ArbiterType" + " derp!";
};
nape.dynamics.ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape.dynamics.ArbiterType.__properties__ = {get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape.dynamics.ArbiterType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
};
nape.dynamics.ArbiterType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
};
nape.dynamics.ArbiterType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
};
nape.dynamics.ArbiterType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
			return $r;
		}(this))) return "FLUID"; else return "";
	}
	,__class__: nape.dynamics.ArbiterType
};
nape.dynamics.CollisionArbiter = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate CollisionArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape.dynamics.CollisionArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.CollisionArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	get_contacts: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
		return this.zpp_inner.colarb.wrap_contacts;
	}
	,get_normal: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
		return this.zpp_inner.colarb.wrap_normal;
	}
	,get_radius: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.colarb.radius;
	}
	,get_referenceEdge1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).isPolygon() || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,get_referenceEdge2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).isPolygon() || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,firstVertex: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == -1; else return false;
	}
	,secondVertex: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == 1; else return false;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().normalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().totalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
	}
	,get_elasticity: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.restitution;
	}
	,set_elasticity: function(elasticity) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "elasticity" + " is only mutable during a pre-handler";
		if(elasticity != elasticity) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be NaN";
		if(elasticity < 0) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.restitution = elasticity;
		colarb.userdef_restitution = true;
		return this.get_elasticity();
	}
	,get_dynamicFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.dyn_fric;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "dynamicFriction" + " is only mutable during a pre-handler";
		if(dynamicFriction != dynamicFriction) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.dyn_fric = dynamicFriction;
		colarb.userdef_dyn_fric = true;
		return this.get_dynamicFriction();
	}
	,get_staticFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.stat_fric;
	}
	,set_staticFriction: function(staticFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "staticFriction" + " is only mutable during a pre-handler";
		if(staticFriction != staticFriction) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.stat_fric = staticFriction;
		colarb.userdef_stat_fric = true;
		return this.get_staticFriction();
	}
	,get_rollingFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.rfric;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "rollingFriction" + " is only mutable during a pre-handler";
		if(rollingFriction != rollingFriction) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.rfric = rollingFriction;
		colarb.userdef_rfric = true;
		return this.get_rollingFriction();
	}
	,__class__: nape.dynamics.CollisionArbiter
	,__properties__: $extend(nape.dynamics.Arbiter.prototype.__properties__,{set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_referenceEdge2:"get_referenceEdge2",get_referenceEdge1:"get_referenceEdge1",get_radius:"get_radius",get_normal:"get_normal",get_contacts:"get_contacts"})
});
nape.dynamics.Contact = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Contact.internal) throw "Error: Cannot instantiate Contact derp!";
};
nape.dynamics.Contact.__name__ = ["nape","dynamics","Contact"];
nape.dynamics.Contact.prototype = {
	get_arbiter: function() {
		if(this.zpp_inner.arbiter == null) return null; else return this.zpp_inner.arbiter.outer.get_collisionArbiter();
	}
	,get_penetration: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return -this.zpp_inner.dist;
	}
	,get_position: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
		return this.zpp_inner.wrap_position;
	}
	,get_fresh: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return this.zpp_inner.fresh;
	}
	,normalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
		}
	}
	,tangentImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jtAcc = cin.jtAcc;
		if(body == null) return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
		}
	}
	,rollingImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
		if(body == null) return jrAcc; else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
		}
	}
	,totalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape.geom.Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
	,get_friction: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return this.zpp_inner.inner.friction;
	}
	,toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
	}
	,__class__: nape.dynamics.Contact
	,__properties__: {get_friction:"get_friction",get_fresh:"get_fresh",get_position:"get_position",get_penetration:"get_penetration",get_arbiter:"get_arbiter"}
};
nape.dynamics.ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ContactList.internal) throw "Error: Cannot instantiate " + "Contact" + "Iterator derp!";
};
nape.dynamics.ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape.dynamics.ContactIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ContactIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ContactList.internal = true;
		var ret1 = new nape.dynamics.ContactIterator();
		zpp_nape.util.ZPP_ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.ContactIterator
};
nape.dynamics.ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ContactList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ContactList.__name__ = ["nape","dynamics","ContactList"];
nape.dynamics.ContactList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ContactList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.ContactIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ContactList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Contact" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.dynamics.ContactIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.ContactList
	,__properties__: {get_length:"get_length"}
};
nape.dynamics.FluidArbiter = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate FluidArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape.dynamics.FluidArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.FluidArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	get_position: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,set_position: function(position) {
		if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
		if(position == null) throw "Error: FluidArbiter::position cannot be null";
		((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this))).set(position);
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,get_overlap: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.fluidarb.overlap;
	}
	,set_overlap: function(overlap) {
		if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
		if(overlap != overlap) throw "Error: FluidArbiter::overlap cannot be NaN";
		if(overlap <= 0 || overlap == Math.POSITIVE_INFINITY) throw "Error: FluidArbiter::overlap must be strictly positive and non infinite";
		this.zpp_inner.fluidarb.overlap = overlap;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.fluidarb.overlap;
	}
	,buoyancyImpulse: function(body) {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var farb = this.zpp_inner.fluidarb;
		if(body == null) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape.geom.Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
	,dragImpulse: function(body) {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var farb = this.zpp_inner.fluidarb;
		var scale;
		if(body == null || body.zpp_inner == this.zpp_inner.b2) scale = 1; else scale = -1;
		return nape.geom.Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.x;
			return $r;
		}(this)));
		var _g1 = ret;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.y;
			return $r;
		}(this)));
		var _g2 = ret;
		_g2.set_z((function($this) {
			var $r;
			if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.z;
			return $r;
		}(this)));
		tmp.dispose();
		return ret;
	}
	,__class__: nape.dynamics.FluidArbiter
	,__properties__: $extend(nape.dynamics.Arbiter.prototype.__properties__,{set_overlap:"set_overlap",get_overlap:"get_overlap",set_position:"set_position",get_position:"get_position"})
});
nape.dynamics.InteractionGroup = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
nape.dynamics.InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape.dynamics.InteractionGroup.prototype = {
	get_group: function() {
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,set_group: function(group) {
		if(group == this) throw "Error: Cannot assign InteractionGroup to itself";
		this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.zpp_inner.ignore;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_groups: function() {
		if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_nape.util.ZPP_InteractionGroupList.get(this.zpp_inner.groups,true);
		return this.zpp_inner.wrap_groups;
	}
	,toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) ret += ":ignore";
		return ret;
	}
	,__class__: nape.dynamics.InteractionGroup
	,__properties__: {get_groups:"get_groups",get_interactors:"get_interactors",set_ignore:"set_ignore",get_ignore:"get_ignore",set_group:"set_group",get_group:"get_group"}
};
nape.dynamics.InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractionGroupList.internal) throw "Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!";
};
nape.dynamics.InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape.dynamics.InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape.dynamics.InteractionGroupIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractionGroupList.internal = true;
		var ret1 = new nape.dynamics.InteractionGroupIterator();
		zpp_nape.util.ZPP_InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.dynamics.InteractionGroupIterator
};
nape.dynamics.InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractionGroupList();
	this.zpp_inner.outer = this;
};
nape.dynamics.InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape.dynamics.InteractionGroupList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.InteractionGroupList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.InteractionGroupIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.InteractionGroupList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "InteractionGroup" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.dynamics.InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.dynamics.InteractionGroupIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.dynamics.InteractionGroupList
	,__properties__: {get_length:"get_length"}
};
nape.geom.AABB = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: AABB position cannot be NaN";
	if(width != width || height != height) throw "Error: AABB dimensions cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
nape.geom.AABB.__name__ = ["nape","geom","AABB"];
nape.geom.AABB.prototype = {
	copy: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.copy().wrapper();
	}
	,get_min: function() {
		return this.zpp_inner.getmin();
	}
	,set_min: function(min) {
		if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if(min == null) throw "Error: Cannot assign null to AABB::" + "min";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw "Error: AABB::" + "min" + " components cannot be NaN";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_y()) throw "Error: Assignment would cause negative height";
		this.zpp_inner.getmin().set(min);
		return this.zpp_inner.getmin();
	}
	,get_max: function() {
		return this.zpp_inner.getmax();
	}
	,set_max: function(max) {
		if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if(max == null) throw "Error: Cannot assign null to AABB::" + "max";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw "Error: AABB::" + "max" + " components cannot be NaN";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_y()) throw "Error: Assignment would cause negative height";
		this.zpp_inner.getmax().set(max);
		return this.zpp_inner.getmax();
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,set_x: function(x) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != x) {
			if(x != x) throw "Error: AABB::" + "x" + " cannot be NaN";
			this.zpp_inner.maxx += x - this.zpp_inner.minx;
			this.zpp_inner.minx = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,set_y: function(y) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != y) {
			if(y != y) throw "Error: AABB::" + "y" + " cannot be NaN";
			this.zpp_inner.maxy += y - this.zpp_inner.miny;
			this.zpp_inner.miny = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,get_width: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,set_width: function(width) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)) != width) {
			if(width != width) throw "Error: AABB::" + "width" + " cannot be NaN";
			if(width < 0) throw "Error: AABB::" + "width" + " (" + width + ") must be >= 0";
			this.zpp_inner.maxx = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.minx;
				return $r;
			}(this)) + width;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,get_height: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,set_height: function(height) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)) != height) {
			if(height != height) throw "Error: AABB::" + "height" + " cannot be NaN";
			if(height < 0) throw "Error: AABB::" + "height" + " (" + height + ") must be >= 0";
			this.zpp_inner.maxy = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.miny;
				return $r;
			}(this)) + height;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape.geom.AABB
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"}
};
nape.geom.ConvexResult = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: ConvexResult cannot be instantiated derp!";
};
nape.geom.ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape.geom.ConvexResult.prototype = {
	get_normal: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.normal;
	}
	,get_position: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.position;
	}
	,get_toi: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.toiDistance;
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		this.zpp_inner.free();
	}
	,toString: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " toi: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape.geom.ConvexResult
	,__properties__: {get_shape:"get_shape",get_toi:"get_toi",get_position:"get_position",get_normal:"get_normal"}
};
nape.geom.ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConvexResultList.internal) throw "Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!";
};
nape.geom.ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape.geom.ConvexResultIterator.get = function(list) {
	var ret;
	if(nape.geom.ConvexResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConvexResultList.internal = true;
		var ret1 = new nape.geom.ConvexResultIterator();
		zpp_nape.util.ZPP_ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.ConvexResultIterator
};
nape.geom.ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConvexResultList();
	this.zpp_inner.outer = this;
};
nape.geom.ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape.geom.ConvexResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.ConvexResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.ConvexResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.ConvexResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "ConvexResult" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.ConvexResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.ConvexResultList
	,__properties__: {get_length:"get_length"}
};
nape.geom.Geom = function() { };
nape.geom.Geom.__name__ = ["nape","geom","Geom"];
nape.geom.Geom.distanceBody = function(body1,body2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies cannot be empty in calculating distances";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	return zpp_nape.geom.ZPP_SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
nape.geom.Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate distances";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) tmp = new zpp_nape.geom.ZPP_Vec2(); else {
		tmp = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_nape.geom.ZPP_SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
nape.geom.Geom.intersectsBody = function(body1,body2) {
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies must have shapes to test for intersection.";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				var s2 = cx_ite3.elt;
				if(zpp_nape.geom.ZPP_Collide.testCollide_safe(s1,s2)) return true;
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
nape.geom.Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate intersection";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate containment";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw "Error: Vec2List contains null objects";
				if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
nape.geom.GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape.geom.GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolGeomPoly == null) ret = new nape.geom.GeomPoly(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolGeomPoly;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextGeomPoly) zpp_nape.util.ZPP_PubPool.nextGeomPoly = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw "Error: Vec2List contains null objects";
				if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape.geom.GeomPoly.prototype = {
	empty: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null;
	}
	,size: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var ret = 0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var i = nite;
				ret++;
				nite = nite.next;
			} while(nite != L);
		}
		return ret;
	}
	,iterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,forwardIterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,backwardsIterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
	}
	,current: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: GeomPoly is empty";
		return this.zpp_inner.vertices.wrapper();
	}
	,push: function(vertex) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vertex == null) throw "Error: Cannot push null vertex";
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.prev = this.zpp_inner.vertices;
			obj.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = obj;
			this.zpp_inner.vertices.next = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,pop: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null) throw "Error: Cannot pop from empty polygon";
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,unshift: function(vertex) {
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vertex == null) throw "Error: Cannot unshift null vertex";
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.next = this.zpp_inner.vertices;
			obj.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = obj;
			this.zpp_inner.vertices.prev = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,shift: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null) throw "Error: Cannot shift from empty polygon";
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,skipForward: function(times) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(!(this.zpp_inner.vertices == null)) {
			if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
		return this;
	}
	,skipBackwards: function(times) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.skipForward(-times);
	}
	,erase: function(count) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		while(count != 0 && !(this.zpp_inner.vertices == null)) {
			var retv = this.zpp_inner.vertices;
			if(count > 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = this.zpp_inner.vertices = null;
				} else {
					var retnodes = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes;
				}
				count--;
			} else if(count < 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
				} else {
					var retnodes1 = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes1;
				}
				count++;
			}
			var o = retv;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,clear: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		while(!(this.zpp_inner.vertices == null)) {
			var tmp = this.zpp_inner.vertices;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes;
			}
			var o = tmp;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,copy: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var ret = nape.geom.GeomPoly.get();
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(v.x,v.y);
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,dispose: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		this.clear();
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextGeomPoly != null) zpp_nape.util.ZPP_PubPool.nextGeomPoly.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolGeomPoly = o;
		zpp_nape.util.ZPP_PubPool.nextGeomPoly = o;
		o.zpp_disp = true;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v != this.zpp_inner.vertices) ret += ",";
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
			} while(nite != L);
		}
		return ret + "]";
	}
	,area: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return 0.0; else {
			var ret;
			var area = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			ret = area * 0.5;
			if(ret < 0) return -ret; else return ret;
		}
	}
	,winding: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		} else {
			var area;
			var area1 = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area1 += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			area = area1 * 0.5;
			if(area > 0) {
				if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			} else if(area == 0) {
				if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			} else {
				if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			}
		}
	}
	,contains: function(point) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: GeomPoly::contains point cannot be null";
		var ret;
		var x;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		x = point.zpp_inner.x;
		var y;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		y = point.zpp_inner.y;
		var ret1 = false;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var q = p.prev;
				if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
					if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
				}
				nite = nite.next;
			} while(nite != L);
		}
		ret = ret1;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,isClockwise: function() {
		return this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this));
	}
	,isConvex: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else {
			var neg = false;
			var pos = false;
			var ret = true;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					var u = v.prev;
					var w = v.next;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
					if(pos && neg) {
						ret = false;
						break;
					}
					nite = nite.next;
				} while(nite != L);
			}
			return ret;
		}
	}
	,isSimple: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Simple.isSimple(this.zpp_inner.vertices);
	}
	,isMonotone: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
	}
	,isDegenerate: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return this.area() < nape.Config.epsilon;
	}
	,simplify: function(epsilon) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(epsilon <= 0.0) throw "Error: Epsilon should be > 0 for simplifying a GeomPoly";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
			var x = zpp_nape.geom.ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
			var ret = nape.geom.GeomPoly.get();
			ret.zpp_inner.vertices = x;
			return ret;
		}
	}
	,simpleDecomposition: function(output) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var MPs = zpp_nape.geom.ZPP_Simple.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,monotoneDecomposition: function(output) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,convexDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			zpp_nape.geom.ZPP_Convex.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,triangularDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,inflate: function(inflation) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var ret = nape.geom.GeomPoly.get();
		if(this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) inflation = -inflation;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var prev = p.prev;
				var next = p.next;
				var ax = 0.0;
				var ay = 0.0;
				var bx = 0.0;
				var by = 0.0;
				ax = p.x - prev.x;
				ay = p.y - prev.y;
				bx = next.x - p.x;
				by = next.y - p.y;
				var apx = 0.0;
				var apy = 0.0;
				var bpx = 0.0;
				var bpy = 0.0;
				apx = ax;
				apy = ay;
				var d = apx * apx + apy * apy;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				apx *= t;
				apy *= t;
				var t1 = apx;
				apx = -apy;
				apy = t1;
				var t2 = inflation;
				apx *= t2;
				apy *= t2;
				bpx = bx;
				bpy = by;
				var d1 = bpx * bpx + bpy * bpy;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t3 = imag1;
				bpx *= t3;
				bpy *= t3;
				var t4 = bpx;
				bpx = -bpy;
				bpy = t4;
				var t5 = inflation;
				bpx *= t5;
				bpy *= t5;
				var bapx = 0.0;
				var bapy = 0.0;
				bapx = bpx - apx;
				bapy = bpy - apy;
				var num = by * bapx - bx * bapy;
				var t6;
				if(num == 0) t6 = 0; else t6 = num / (by * ax - bx * ay);
				var px = 0.0;
				var py = 0.0;
				px = p.x + apx;
				py = p.y + apy;
				var t7 = t6;
				px += ax * t7;
				py += ay * t7;
				ret.push(nape.geom.Vec2.get(px,py,null));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,cut: function(start,end,boundedStart,boundedEnd,output) {
		if(boundedEnd == null) boundedEnd = false;
		if(boundedStart == null) boundedStart = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(!(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null || $this.zpp_inner.vertices.next == null || $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple($this.zpp_inner.vertices);
			return $r;
		}(this))) throw "Error: Cut requires a truly simple polygon";
		if(start == null || end == null) throw "Error: Cannot cut with null start/end's";
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		var ret = zpp_nape.geom.ZPP_Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(matrix) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(matrix == null) throw "Error: Cannot transform by null matrix";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
				v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
				v.x = t;
				nite = nite.next;
			} while(nite != L);
		}
		return this;
	}
	,bounds: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable bounds";
		var minx = 1e100;
		var miny = 1e100;
		var maxx = -1e+100;
		var maxy = -1e+100;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < minx) minx = v.x;
				if(v.y < miny) miny = v.y;
				if(v.x > maxx) maxx = v.x;
				if(v.y > maxy) maxy = v.y;
				nite = nite.next;
			} while(nite != L);
		}
		return new nape.geom.AABB(minx,miny,maxx - minx,maxy - miny);
	}
	,top: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable topmost vertex";
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < min.y) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,bottom: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable bottommost vertex";
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y > max.y) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,left: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable leftmost vertex";
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < min.x) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,right: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable rightmmost vertex";
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x > max.x) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,__class__: nape.geom.GeomPoly
};
nape.geom.GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_GeomPolyList.internal) throw "Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!";
};
nape.geom.GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape.geom.GeomPolyIterator.get = function(list) {
	var ret;
	if(nape.geom.GeomPolyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_GeomPolyList.internal = true;
		var ret1 = new nape.geom.GeomPolyIterator();
		zpp_nape.util.ZPP_GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.GeomPolyIterator
};
nape.geom.GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
};
nape.geom.GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape.geom.GeomPolyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.GeomPolyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.GeomPolyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.GeomPolyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "GeomPoly" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.GeomPolyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.GeomPolyList
	,__properties__: {get_length:"get_length"}
};
nape.geom.GeomVertexIterator = function() {
	if(!zpp_nape.geom.ZPP_GeomVertexIterator.internal) throw "Error: Cannot instantiate GeomVertexIterator";
};
nape.geom.GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape.geom.GeomVertexIterator.prototype = {
	hasNext: function() {
		if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
		var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
		this.zpp_inner.first = false;
		if(!ret) {
			var o = this.zpp_inner;
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
			o.next = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
			zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = o;
		}
		return ret;
	}
	,next: function() {
		if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
		var ret = this.zpp_inner.ptr.wrapper();
		if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
		return ret;
	}
	,__class__: nape.geom.GeomVertexIterator
};
nape.geom.MarchingSquares = function() { };
nape.geom.MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape.geom.MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(iso == null) throw "Error: MarchingSquares requires an iso function to operate";
	if(bounds == null) throw "Error: MarchingSquares requires an AABB to define bounds of surface extraction";
	if(cellsize == null) throw "Error: MarchingSquares requires a Vec2 to define cell size for surface extraction";
	if((function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.y;
		return $r;
	}(this)) <= 0) throw "Error: MarchingSquares cannot operate with non-positive cell dimensions";
	if(quality < 0) throw "Error: MarchingSquares cannot use a negative quality value for interpolation";
	if(subgrid != null && ((function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.y;
		return $r;
	}(this)) <= 0)) throw "Error: MarchingSquares cannot with non-positive sub-grid dimensions";
	var ret;
	if(output != null) ret = output; else ret = new nape.geom.GeomPolyList();
	if(subgrid == null) zpp_nape.geom.ZPP_MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp;
		xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp;
		yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0;
			x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1;
			if(x == xn - 1) x1 = bounds.zpp_inner.getmax().get_x(); else x1 = x0 + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0;
				y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1;
				if(y == yn - 1) y1 = bounds.zpp_inner.getmax().get_y(); else y1 = y0 + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_nape.geom.ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
};
nape.geom.Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
nape.geom.Mat23.__name__ = ["nape","geom","Mat23"];
nape.geom.Mat23.rotation = function(angle) {
	if(angle != angle) throw "Error: Cannot create rotation matrix with NaN angle";
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape.geom.Mat23(cos,-sin,sin,cos,0,0);
};
nape.geom.Mat23.translation = function(tx,ty) {
	return new nape.geom.Mat23(1,0,0,1,tx,ty);
};
nape.geom.Mat23.scale = function(sx,sy) {
	return new nape.geom.Mat23(sx,0,0,sy,0,0);
};
nape.geom.Mat23.prototype = {
	get_a: function() {
		return this.zpp_inner.a;
	}
	,set_a: function(a) {
		if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.zpp_inner.a;
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_b: function(b) {
		if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.zpp_inner.b;
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_c: function(c) {
		if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.zpp_inner.c;
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_d: function(d) {
		if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.zpp_inner.d;
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_tx: function(tx) {
		if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.zpp_inner.tx;
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_ty: function(ty) {
		if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.zpp_inner.ty;
	}
	,copy: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
	}
	,set: function(matrix) {
		if(matrix == null) throw "Error: Cannot set form null matrix";
		this.zpp_inner.set(matrix.zpp_inner);
		this.zpp_inner.invalidate();
		return this;
	}
	,setAs: function(a,b,c,d,tx,ty) {
		if(ty == null) ty = 0.0;
		if(tx == null) tx = 0.0;
		if(d == null) d = 1.0;
		if(c == null) c = 0.0;
		if(b == null) b = 0.0;
		if(a == null) a = 1.0;
		this.zpp_inner.setas(a,b,c,d,tx,ty);
		this.zpp_inner.invalidate();
		return this;
	}
	,reset: function() {
		return this.setAs();
	}
	,get_determinant: function() {
		return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	}
	,singular: function() {
		var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
		var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
		if(limit < 0) limit = -limit;
		return norm > nape.Config.illConditionedThreshold * limit;
	}
	,inverse: function() {
		if(this.singular()) throw "Error: Matrix is singular and cannot be inverted";
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		return new nape.geom.Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
	}
	,transpose: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
	}
	,concat: function(matrix) {
		var m = matrix;
		if(m == null) throw "Error: Cannot concatenate with null Mat23";
		return new nape.geom.Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
	}
	,transform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d,weak); else ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,inverseTransform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		if(this.singular()) throw "Error: Matrix is singular and inverse transformation cannot be performed";
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get(((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.d - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b) * idet,((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.a - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c) * idet,weak); else {
			var dx;
			dx = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.tx;
			var dy;
			dy = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.ty;
			ret = nape.geom.Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
		}
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,equiorthogonal: function() {
		if(this.singular()) return false; else {
			var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			if(x * x < nape.Config.epsilon) {
				var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
				return y * y < nape.Config.epsilon;
			} else return false;
		}
	}
	,orthogonal: function() {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape.Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
			var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
			return y * y < nape.Config.epsilon && z * z < nape.Config.epsilon;
		} else return false;
	}
	,equiorthogonalise: function() {
		if(!this.equiorthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised";
			var k = (k1 + k2) / 2;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g1 = this;
			_g1.set_c(_g1.zpp_inner.c * k1);
			var _g2 = this;
			_g2.set_b(_g2.zpp_inner.b * k2);
			var _g3 = this;
			_g3.set_d(_g3.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,orthogonalise: function() {
		if(!this.orthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "orthogonal" + "ised";
			var k = 1;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g1 = this;
			_g1.set_c(_g1.zpp_inner.c * k1);
			var _g2 = this;
			_g2.set_b(_g2.zpp_inner.b * k2);
			var _g3 = this;
			_g3.set_d(_g3.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,__class__: nape.geom.Mat23
	,__properties__: {get_determinant:"get_determinant",set_ty:"set_ty",get_ty:"get_ty",set_tx:"set_tx",get_tx:"get_tx",set_d:"set_d",get_d:"get_d",set_c:"set_c",get_c:"get_c",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
};
nape.geom.MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) throw "Error: MatMN::dimensions cannot be < 1";
	this.zpp_inner = new zpp_nape.geom.ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
nape.geom.MatMN.__name__ = ["nape","geom","MatMN"];
nape.geom.MatMN.prototype = {
	get_rows: function() {
		return this.zpp_inner.m;
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,x: function(row,col) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
		return this.zpp_inner.x[row * this.zpp_inner.n + col];
	}
	,setx: function(row,col,x) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
		return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) ret += "; ";
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret += (function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this)) + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,transpose: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner.n,this.zpp_inner.m);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret.setx(j,i,(function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this)));
			}
		}
		return ret;
	}
	,mul: function(matrix) {
		var y = matrix;
		if(this.zpp_inner.n != y.zpp_inner.m) throw "Error: Matrix dimensions aren't compatible";
		var ret = new nape.geom.MatMN(this.zpp_inner.m,y.zpp_inner.n);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = y.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				var v = 0.0;
				var _g5 = 0;
				var _g4 = this.zpp_inner.n;
				while(_g5 < _g4) {
					var k = _g5++;
					v += (function($this) {
						var $r;
						if(i < 0 || k < 0 || i >= $this.zpp_inner.m || k >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
						$r = $this.zpp_inner.x[i * $this.zpp_inner.n + k];
						return $r;
					}(this)) * (function($this) {
						var $r;
						if(k < 0 || j < 0 || k >= y.zpp_inner.m || j >= y.zpp_inner.n) throw "Error: MatMN indices out of range";
						$r = y.zpp_inner.x[k * y.zpp_inner.n + j];
						return $r;
					}(this));
				}
				if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
		return ret;
	}
	,__class__: nape.geom.MatMN
	,__properties__: {get_cols:"get_cols",get_rows:"get_rows"}
};
nape.geom.Ray = function(origin,direction) {
	this.zpp_inner = null;
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.geom.ZPP_Ray();
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Math.POSITIVE_INFINITY;
};
nape.geom.Ray.__name__ = ["nape","geom","Ray"];
nape.geom.Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(start == null) throw "Error: Ray::fromSegment::start is null";
	if(end == null) throw "Error: Ray::fromSegment::end is null";
	var dir = end.sub(start,true);
	var ret = new nape.geom.Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Ray.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_origin: function() {
		return this.zpp_inner.origin;
	}
	,set_origin: function(origin) {
		if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(origin == null) throw "Error: Ray::origin cannot be null";
		this.zpp_inner.origin.set(origin);
		return this.zpp_inner.origin;
	}
	,get_direction: function() {
		return this.zpp_inner.direction;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(direction == null) throw "Error: Ray::direction cannot be null";
		this.zpp_inner.direction.set(direction);
		this.zpp_inner.zip_dir = true;
		return this.zpp_inner.direction;
	}
	,get_maxDistance: function() {
		return this.zpp_inner.maxdist;
	}
	,set_maxDistance: function(maxDistance) {
		if(maxDistance != maxDistance) throw "Error: maxDistance cannot be NaN";
		this.zpp_inner.maxdist = maxDistance;
		return this.zpp_inner.maxdist;
	}
	,aabb: function() {
		return this.zpp_inner.rayAABB().wrapper();
	}
	,at: function(distance,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_dir();
		return nape.geom.Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
	}
	,copy: function() {
		var ret = new nape.geom.Ray(this.zpp_inner.origin,this.zpp_inner.direction);
		ret.set_maxDistance(this.zpp_inner.maxdist);
		return ret;
	}
	,__class__: nape.geom.Ray
	,__properties__: {set_maxDistance:"set_maxDistance",get_maxDistance:"get_maxDistance",set_direction:"set_direction",get_direction:"get_direction",set_origin:"set_origin",get_origin:"get_origin",get_userData:"get_userData"}
};
nape.geom.RayResult = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: RayResult cannot be instantiated derp!";
};
nape.geom.RayResult.__name__ = ["nape","geom","RayResult"];
nape.geom.RayResult.prototype = {
	get_normal: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.normal;
	}
	,get_distance: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.toiDistance;
	}
	,get_inner: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.inner;
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		this.zpp_inner.free();
	}
	,toString: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " distance: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " ?inner: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.inner;
			return $r;
		}(this))) + " }";
	}
	,__class__: nape.geom.RayResult
	,__properties__: {get_shape:"get_shape",get_inner:"get_inner",get_distance:"get_distance",get_normal:"get_normal"}
};
nape.geom.RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_RayResultList.internal) throw "Error: Cannot instantiate " + "RayResult" + "Iterator derp!";
};
nape.geom.RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape.geom.RayResultIterator.get = function(list) {
	var ret;
	if(nape.geom.RayResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_RayResultList.internal = true;
		var ret1 = new nape.geom.RayResultIterator();
		zpp_nape.util.ZPP_RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.RayResultIterator
};
nape.geom.RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_RayResultList();
	this.zpp_inner.outer = this;
};
nape.geom.RayResultList.__name__ = ["nape","geom","RayResultList"];
nape.geom.RayResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.RayResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.RayResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.RayResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "RayResult" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.geom.RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.geom.RayResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.RayResultList
	,__properties__: {get_length:"get_length"}
};
nape.geom.Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_Vec2List.internal) throw "Error: Cannot instantiate " + "Vec2" + "Iterator derp!";
};
nape.geom.Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape.geom.Vec2Iterator.get = function(list) {
	var ret;
	if(nape.geom.Vec2Iterator.zpp_pool == null) {
		zpp_nape.util.ZPP_Vec2List.internal = true;
		var ret1 = new nape.geom.Vec2Iterator();
		zpp_nape.util.ZPP_Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.geom.Vec2Iterator
};
nape.geom.Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_Vec2List();
	this.zpp_inner.outer = this;
};
nape.geom.Vec2List.__name__ = ["nape","geom","Vec2List"];
nape.geom.Vec2List.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.Vec2List.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.geom.Vec2Iterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.Vec2List();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					i.zpp_inner.validate();
					$r = i.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					i.zpp_inner.validate();
					$r = i.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.geom.Vec2List
	,__properties__: {get_length:"get_length"}
};
nape.geom.Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
nape.geom.Vec3.__name__ = ["nape","geom","Vec3"];
nape.geom.Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec3 == null) ret = new nape.geom.Vec3(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec3;
		zpp_nape.util.ZPP_PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec3) zpp_nape.util.ZPP_PubPool.nextVec3 = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape.geom.Vec3.prototype = {
	get_x: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.x = x;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.y = y;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_z: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_z: function(z) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.z = z;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,dispose: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: This Vec3 is not disposable";
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextVec3 != null) zpp_nape.util.ZPP_PubPool.nextVec3.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec3 = o;
		zpp_nape.util.ZPP_PubPool.nextVec3 = o;
		o.zpp_disp = true;
	}
	,get_length: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(length != length) throw "Error: Vec3::length cannot be NaN";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) == 0) throw "Error: Cannot set length of a zero vector";
		var t;
		t = length / (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)));
			return $r;
		}(this));
		var t1 = t;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t1);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t1);
		var _g2 = this;
		_g2.set_z((function($this) {
			var $r;
			if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) * t);
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,lsq: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,set: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot assign null Vec3";
		return this.setxyz((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.z;
			return $r;
		}(this)));
	}
	,setxyz: function(x,y,z) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.x = x;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.x;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.y = y;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.y;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.z = z;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.z;
		return this;
	}
	,xy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return "{ x: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + " y: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + " z: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape.geom.Vec3
	,__properties__: {set_length:"set_length",get_length:"get_length",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
nape.geom.Winding = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Winding" + " derp!";
};
nape.geom.Winding.__name__ = ["nape","geom","Winding"];
nape.geom.Winding.__properties__ = {get_ANTICLOCKWISE:"get_ANTICLOCKWISE",get_CLOCKWISE:"get_CLOCKWISE",get_UNDEFINED:"get_UNDEFINED"}
nape.geom.Winding.get_UNDEFINED = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
};
nape.geom.Winding.get_CLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
};
nape.geom.Winding.get_ANTICLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
};
nape.geom.Winding.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			return $r;
		}(this))) return "UNDEFINED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) return "CLOCKWISE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			return $r;
		}(this))) return "ANTICLOCKWISE"; else return "";
	}
	,__class__: nape.geom.Winding
};
nape.phys = {};
nape.phys.Interactor = function() {
	this.zpp_inner_i = null;
	throw "Error: Cannot instantiate an Interactor, only Shape/Body/Compound";
};
nape.phys.Interactor.__name__ = ["nape","phys","Interactor"];
nape.phys.Interactor.prototype = {
	get_id: function() {
		return this.zpp_inner_i.id;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
		return this.zpp_inner_i.userData;
	}
	,isShape: function() {
		return this.zpp_inner_i.ishape != null;
	}
	,isBody: function() {
		return this.zpp_inner_i.ibody != null;
	}
	,isCompound: function() {
		return this.zpp_inner_i.icompound != null;
	}
	,get_castShape: function() {
		if(this.zpp_inner_i.ishape != null) return this.zpp_inner_i.ishape.outer; else return null;
	}
	,get_castBody: function() {
		if(this.zpp_inner_i.ibody != null) return this.zpp_inner_i.ibody.outer; else return null;
	}
	,get_castCompound: function() {
		if(this.zpp_inner_i.icompound != null) return this.zpp_inner_i.icompound.outer; else return null;
	}
	,get_group: function() {
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner_i.immutable_midstep("Interactor::group");
		this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape.phys.Interactor
	,__properties__: {get_cbTypes:"get_cbTypes",set_group:"set_group",get_group:"get_group",get_castCompound:"get_castCompound",get_castBody:"get_castBody",get_castShape:"get_castShape",get_userData:"get_userData",get_id:"get_id"}
};
nape.phys.Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_BODY.zpp_inner);
};
nape.phys.Body.__name__ = ["nape","phys","Body"];
nape.phys.Body.__super__ = nape.phys.Interactor;
nape.phys.Body.prototype = $extend(nape.phys.Interactor.prototype,{
	get_type: function() {
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type] != type) {
			if(type == null) throw "Error: Cannot use null BodyType";
			var ntype;
			if(type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
				return $r;
			}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC; else if(type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
				return $r;
			}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC; else ntype = zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
			if(ntype == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
		}
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,get_isBullet: function() {
		return this.zpp_inner.bulletEnabled;
	}
	,set_isBullet: function(isBullet) {
		this.zpp_inner.bulletEnabled = isBullet;
		return this.zpp_inner.bulletEnabled;
	}
	,get_disableCCD: function() {
		return this.zpp_inner.disableCCD;
	}
	,set_disableCCD: function(disableCCD) {
		this.zpp_inner.disableCCD = disableCCD;
		return this.zpp_inner.disableCCD;
	}
	,integrate: function(deltaTime) {
		if(deltaTime != deltaTime) throw "Cannot integrate by NaN time";
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(deltaTime == 0) return this;
		var cur = this.zpp_inner;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel;
		cur.sweepIntegrate(deltaTime);
		cur.invalidate_pos();
		cur.invalidate_rot();
		cur.sweepTime = 0;
		return this;
	}
	,isStatic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
			if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
			if(space != null) space.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
		return this.zpp_inner.wrap_arbiters;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
		return this.zpp_inner.component.sleeping;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,copy: function() {
		if(this.zpp_inner.world) throw "Error: Space::world cannot be copied";
		return this.zpp_inner.copy();
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,set_position: function(position) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Body::" + "position" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,set_velocity: function(velocity) {
		if(velocity != null && velocity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(velocity == null) throw "Error: Body::" + "velocity" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(velocity);
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,setVelocityFromTarget: function(targetPosition,targetRotation,deltaTime) {
		if(targetPosition != null && targetPosition.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(targetPosition == null) throw "Cannot set velocity for null target position";
		if(deltaTime == 0) throw "deltaTime cannot be 0 for setVelocityFromTarget";
		var idt = 1 / deltaTime;
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(targetPosition.sub((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this)),true).muleq(idt));
		this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
		if(targetPosition.zpp_inner.weak) {
			targetPosition.dispose();
			true;
		} else false;
		return this;
	}
	,get_kinematicVel: function() {
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,set_kinematicVel: function(kinematicVel) {
		if(kinematicVel != null && kinematicVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(kinematicVel == null) throw "Error: Body::" + "kinematicVel" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this))).set(kinematicVel);
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,get_surfaceVel: function() {
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,set_surfaceVel: function(surfaceVel) {
		if(surfaceVel != null && surfaceVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(surfaceVel == null) throw "Error: Body::" + "surfaceVel" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this))).set(surfaceVel);
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,get_force: function() {
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,set_force: function(force) {
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(force == null) throw "Error: Body::" + "force" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this))).set(force);
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,get_constraintVelocity: function() {
		if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
		return this.zpp_inner.wrapcvel;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) throw "Error: Static objects cannot be rotated once inside a Space";
		if(this.zpp_inner.rot != rotation) {
			if(rotation != rotation) throw "Error: Body::rotation cannot be NaN";
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.zpp_inner.rot;
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) throw "Error: Body::angularVel cannot be NaN";
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: A static object cannot be given a velocity";
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.angvel;
	}
	,get_kinAngVel: function() {
		return this.zpp_inner.kinangvel;
	}
	,set_kinAngVel: function(kinAngVel) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.kinangvel != kinAngVel) {
			if(kinAngVel != kinAngVel) throw "Error: Body::kinAngVel cannot be NaN";
			this.zpp_inner.kinangvel = kinAngVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.kinangvel;
	}
	,get_torque: function() {
		return this.zpp_inner.torque;
	}
	,set_torque: function(torque) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(!(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have torque applied.";
		if(torque != torque) throw "Error: Body::torque cannot be NaN";
		if(this.zpp_inner.torque != torque) {
			this.zpp_inner.torque = torque;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.torque;
	}
	,get_bounds: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no bounds";
		return this.zpp_inner.aabb.wrapper();
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
		if(!this.zpp_inner.nomove != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return !this.zpp_inner.nomove;
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
		if(!this.zpp_inner.norotate != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return !this.zpp_inner.norotate;
	}
	,get_massMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_massMode: function(massMode) {
		this.zpp_inner.immutable_midstep("Body::massMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(massMode == null) throw "Error: cannot use null massMode";
		if(massMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT; else this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.invalidate_mass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_constraintMass: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
		return this.zpp_inner.smass;
	}
	,get_mass: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no mass";
		this.zpp_inner.validate_mass();
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		return this.zpp_inner.cmass;
	}
	,set_mass: function(mass) {
		this.zpp_inner.immutable_midstep("Body::mass");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(mass != mass) throw "Error: Mass cannot be NaN";
		if(mass <= 0) throw "Error: Mass must be strictly positive";
		if(mass >= Math.POSITIVE_INFINITY) throw "Error: Mass cannot be infinite, use allowMovement = false instead";
		this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.cmass = mass;
		this.zpp_inner.invalidate_mass();
		if(this.zpp_inner.world) throw "Error: Space::world has no mass";
		this.zpp_inner.validate_mass();
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		return this.zpp_inner.cmass;
	}
	,get_gravMassMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_gravMassMode: function(gravMassMode) {
		this.zpp_inner.immutable_midstep("Body::gravMassMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMassMode == null) throw "Error: Cannot use null gravMassMode";
		if(gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED; else if(gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT; else this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.invalidate_gravMass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_gravMass: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no gravMass";
		this.zpp_inner.validate_gravMass();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMass;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMass != gravMass) throw "Error: gravMass cannot be NaN";
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		if(this.zpp_inner.world) throw "Error: Space::world has no gravMass";
		this.zpp_inner.validate_gravMass();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMass;
	}
	,get_gravMassScale: function() {
		this.zpp_inner.validate_gravMassScale();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMassScale;
	}
	,set_gravMassScale: function(gravMassScale) {
		this.zpp_inner.immutable_midstep("Body::gravMassScale");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMassScale != gravMassScale) throw "Error: gravMassScale cannot be NaN";
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED;
		this.zpp_inner.gravMassScale = gravMassScale;
		this.zpp_inner.invalidate_gravMassScale();
		this.zpp_inner.validate_gravMassScale();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMassScale;
	}
	,get_inertiaMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,set_inertiaMode: function(inertiaMode) {
		this.zpp_inner.immutable_midstep("Body::inertiaMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(inertiaMode == null) throw "Error: Cannot use null InertiaMode";
		if(inertiaMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))) this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED; else this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.zpp_inner.invalidate_inertia();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,get_constraintInertia: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
		return this.zpp_inner.sinertia;
	}
	,get_inertia: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no inertia";
		this.zpp_inner.validate_inertia();
		if(this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
		return this.zpp_inner.cinertia;
	}
	,set_inertia: function(inertia) {
		this.zpp_inner.immutable_midstep("Body::inertia");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(inertia != inertia) throw "Error: Inertia cannot be NaN";
		if(inertia <= 0) throw "Error: Inertia must be strictly positive";
		if(inertia >= Math.POSITIVE_INFINITY) throw "Error: Inertia cannot be infinite, use allowRotation = false instead";
		this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED;
		this.zpp_inner.cinertia = inertia;
		this.zpp_inner.invalidate_inertia();
		if(this.zpp_inner.world) throw "Error: Space::world has no inertia";
		this.zpp_inner.validate_inertia();
		if(this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
		return this.zpp_inner.cinertia;
	}
	,connectedBodies: function(depth,output) {
		if(depth == null) depth = -1;
		return this.zpp_inner.connectedBodies(depth,output);
	}
	,interactingBodies: function(type,depth,output) {
		if(depth == null) depth = -1;
		var arbiter_type;
		if(type == null) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL | zpp_nape.dynamics.ZPP_Arbiter.SENSOR | zpp_nape.dynamics.ZPP_Arbiter.FLUID; else if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL; else if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR; else arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
		return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
	}
	,crushFactor: function() {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) == null) throw "Error: Makes no sense to see how much an object not taking part in a simulation is being crushed";
		var msum = 0.0;
		var jsum = nape.geom.Vec2.get(null,null,null);
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var arb;
			_g.zpp_critical = false;
			arb = _g.zpp_inner.at(_g.zpp_i++);
			var imp3 = arb.totalImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			msum += Math.sqrt((function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)));
			imp.dispose();
			imp3.dispose();
		}
		var _g1 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
			$r = $this.zpp_inner.wrap_constraints;
			return $r;
		}(this))).iterator();
		while(_g1.hasNext()) {
			var con;
			_g1.zpp_critical = false;
			con = _g1.zpp_inner.at(_g1.zpp_i++);
			var imp31 = con.bodyImpulse(this);
			var imp1 = imp31.xy();
			jsum.addeq(imp1);
			if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			msum += Math.sqrt((function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)));
			imp1.dispose();
			imp31.dispose();
		}
		var ret;
		ret = (msum - (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this))) / ((function($this) {
			var $r;
			if($this.zpp_inner.world) throw "Error: Space::world has no mass";
			$this.zpp_inner.validate_mass();
			if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
		jsum.dispose();
		return ret;
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		pointy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,worldVectorToLocal: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisy + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) sleepable = false;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(impulse == null) throw "Error: Cannot apply null impulse to Body";
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
				true;
			} else false;
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
					true;
				} else false;
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.vely += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.posx;
			ry = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += ((function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.y;
				return $r;
			}(this)) * rx - (function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.x;
				return $r;
			}(this)) * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		return this;
	}
	,applyAngularImpulse: function(impulse,sleepable) {
		if(sleepable == null) sleepable = false;
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) return this;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(translation == null) throw "Error: Cannot displace by null Vec2";
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotateShapes: function(angle) {
		this.zpp_inner.immutable_midstep("Body::rotateShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.rotate(angle);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,scaleShapes: function(scaleX,scaleY) {
		this.zpp_inner.immutable_midstep("Body::scaleShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.scale(scaleX,scaleY);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,transformShapes: function(matrix) {
		this.zpp_inner.immutable_midstep("Body::transformShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.transform(matrix);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.shapes.head == null) throw "Error: Cannot align empty Body";
		this.zpp_inner.validate_localCOM();
		var dx = nape.geom.Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).subeq(dx2);
		if(this.zpp_inner.pre_posx < Math.POSITIVE_INFINITY) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.x;
				return $r;
			}(this)) * t;
			this.zpp_inner.pre_posy -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.y;
				return $r;
			}(this)) * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(centre == null) throw "Error: Cannot rotate about a null Vec2";
		if(angle != angle) throw "Error: Cannot rotate by NaN radians";
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		var del = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).sub(centre);
		del.rotate(angle);
		this.set_position(centre.add(del,true));
		del.dispose();
		var _g = this;
		_g.set_rotation(_g.zpp_inner.rot + angle);
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_filter(filter);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFluidProperties: function(fluidProperties) {
		this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_fluidProperties(fluidProperties);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no " + "localCOM";
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape.geom.Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalContactsImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var ret = 0.0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
		}
		return ret;
	}
	,buoyancyImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,dragImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalFluidImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,constraintsImpulse: function() {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				var imp1 = con.outer.bodyImpulse(this);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot check containment of null point";
		var wasWeak = point.zpp_inner.weak;
		point.zpp_inner.weak = false;
		var retvar;
		retvar = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.outer.contains(point)) {
				retvar = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		point.zpp_inner.weak = wasWeak;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return retvar;
	}
	,toString: function() {
		return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape.phys.Body
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{get_worldCOM:"get_worldCOM",get_localCOM:"get_localCOM",set_inertia:"set_inertia",get_inertia:"get_inertia",get_constraintInertia:"get_constraintInertia",set_inertiaMode:"set_inertiaMode",get_inertiaMode:"get_inertiaMode",set_gravMassScale:"set_gravMassScale",get_gravMassScale:"get_gravMassScale",set_gravMass:"set_gravMass",get_gravMass:"get_gravMass",set_gravMassMode:"set_gravMassMode",get_gravMassMode:"get_gravMassMode",set_mass:"set_mass",get_mass:"get_mass",get_constraintMass:"get_constraintMass",set_massMode:"set_massMode",get_massMode:"get_massMode",set_allowRotation:"set_allowRotation",get_allowRotation:"get_allowRotation",set_allowMovement:"set_allowMovement",get_allowMovement:"get_allowMovement",get_bounds:"get_bounds",set_torque:"set_torque",get_torque:"get_torque",set_kinAngVel:"set_kinAngVel",get_kinAngVel:"get_kinAngVel",set_angularVel:"set_angularVel",get_angularVel:"get_angularVel",set_rotation:"set_rotation",get_rotation:"get_rotation",get_constraintVelocity:"get_constraintVelocity",set_force:"set_force",get_force:"get_force",set_surfaceVel:"set_surfaceVel",get_surfaceVel:"get_surfaceVel",set_kinematicVel:"set_kinematicVel",get_kinematicVel:"get_kinematicVel",set_velocity:"set_velocity",get_velocity:"get_velocity",set_position:"set_position",get_position:"get_position",get_constraints:"get_constraints",get_isSleeping:"get_isSleeping",get_arbiters:"get_arbiters",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_shapes:"get_shapes",set_disableCCD:"set_disableCCD",get_disableCCD:"get_disableCCD",set_isBullet:"set_isBullet",get_isBullet:"get_isBullet",set_type:"set_type",get_type:"get_type"})
});
nape.phys.BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_BodyList.internal) throw "Error: Cannot instantiate " + "Body" + "Iterator derp!";
};
nape.phys.BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape.phys.BodyIterator.get = function(list) {
	var ret;
	if(nape.phys.BodyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_BodyList.internal = true;
		var ret1 = new nape.phys.BodyIterator();
		zpp_nape.util.ZPP_BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.BodyIterator
};
nape.phys.BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_BodyList();
	this.zpp_inner.outer = this;
};
nape.phys.BodyList.__name__ = ["nape","phys","BodyList"];
nape.phys.BodyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.BodyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.BodyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.BodyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Body" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.BodyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.BodyList
	,__properties__: {get_length:"get_length"}
};
nape.phys.BodyType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "BodyType" + " derp!";
};
nape.phys.BodyType.__name__ = ["nape","phys","BodyType"];
nape.phys.BodyType.__properties__ = {get_KINEMATIC:"get_KINEMATIC",get_DYNAMIC:"get_DYNAMIC",get_STATIC:"get_STATIC"}
nape.phys.BodyType.get_STATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_STATIC;
};
nape.phys.BodyType.get_DYNAMIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
};
nape.phys.BodyType.get_KINEMATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
};
nape.phys.BodyType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this))) return "STATIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) return "DYNAMIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) return "KINEMATIC"; else return "";
	}
	,__class__: nape.phys.BodyType
};
nape.phys.Compound = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND.zpp_inner);
};
nape.phys.Compound.__name__ = ["nape","phys","Compound"];
nape.phys.Compound.__super__ = nape.phys.Interactor;
nape.phys.Compound.prototype = $extend(nape.phys.Interactor.prototype,{
	get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		this.zpp_inner.immutable_midstep("Compound::compound");
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
			if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
		this.zpp_inner.immutable_midstep("Compound::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
			if(space != null) space.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,breakApart: function() {
		this.zpp_inner.breakApart();
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitBodies";
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,COM: function(weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get(0,0,weak);
		var total = 0.0;
		this.visitBodies(function(b) {
			if(!b.zpp_inner.wrap_shapes.empty()) {
				ret.addeq(((function($this) {
					var $r;
					if(b.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
					if(b.zpp_inner.wrap_worldCOM == null) {
						b.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
						b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = b.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).mul((function($this) {
					var $r;
					if(b.zpp_inner.world) throw "Error: Space::world has no mass";
					b.zpp_inner.validate_mass();
					if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
					$r = b.zpp_inner.cmass;
					return $r;
				}(this)),true));
				if(b.zpp_inner.world) throw "Error: Space::world has no mass";
				b.zpp_inner.validate_mass();
				if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
				total += b.zpp_inner.cmass;
			}
		});
		if(total == 0.0) throw "Error: COM of an empty Compound is undefined silly";
		ret.muleq(1 / total);
		return ret;
	}
	,translate: function(translation) {
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(translation == null) throw "Error: Cannot translate by null Vec2";
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			((function($this) {
				var $r;
				if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
				$r = b.zpp_inner.wrap_pos;
				return $r;
			}(this))).addeq(translation);
		});
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(centre == null) throw "Error: Cannot rotate about a null Vec2";
		if(angle != angle) throw "Error: Cannot rotate by NaN radians";
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			b.rotate(centre,angle);
		});
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,__class__: nape.phys.Compound
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_compounds:"get_compounds",get_constraints:"get_constraints",get_bodies:"get_bodies"})
});
nape.phys.CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CompoundList.internal) throw "Error: Cannot instantiate " + "Compound" + "Iterator derp!";
};
nape.phys.CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape.phys.CompoundIterator.get = function(list) {
	var ret;
	if(nape.phys.CompoundIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CompoundList.internal = true;
		var ret1 = new nape.phys.CompoundIterator();
		zpp_nape.util.ZPP_CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.CompoundIterator
};
nape.phys.CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CompoundList();
	this.zpp_inner.outer = this;
};
nape.phys.CompoundList.__name__ = ["nape","phys","CompoundList"];
nape.phys.CompoundList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.CompoundList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.CompoundIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.CompoundList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Compound" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.CompoundIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.CompoundList
	,__properties__: {get_length:"get_length"}
};
nape.phys.FluidProperties = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_FluidProperties(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
nape.phys.FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape.phys.FluidProperties.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape.phys.FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		ret.set_gravity(this.zpp_inner.wrap_gravity);
		return ret;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.density * 1000;
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.zpp_inner.viscosity) {
			if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
			if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.viscosity;
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity == null) {
			if(this.zpp_inner.wrap_gravity != null) {
				this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
				this.zpp_inner.wrap_gravity.dispose();
				this.zpp_inner.wrap_gravity = null;
			}
		} else {
			if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
			this.zpp_inner.wrap_gravity.set(gravity);
		}
		return this.zpp_inner.wrap_gravity;
	}
	,toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape.phys.FluidProperties
	,__properties__: {set_gravity:"set_gravity",get_gravity:"get_gravity",set_viscosity:"set_viscosity",get_viscosity:"get_viscosity",set_density:"set_density",get_density:"get_density",get_shapes:"get_shapes",get_userData:"get_userData"}
};
nape.phys.GravMassMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "GravMassMode" + " derp!";
};
nape.phys.GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape.phys.GravMassMode.__properties__ = {get_SCALED:"get_SCALED",get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.GravMassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
};
nape.phys.GravMassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
};
nape.phys.GravMassMode.get_SCALED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
};
nape.phys.GravMassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))) return "SCALED"; else return "";
	}
	,__class__: nape.phys.GravMassMode
};
nape.phys.InertiaMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InertiaMode" + " derp!";
};
nape.phys.InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape.phys.InertiaMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.InertiaMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
};
nape.phys.InertiaMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
};
nape.phys.InertiaMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.InertiaMode
};
nape.phys.InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractorList.internal) throw "Error: Cannot instantiate " + "Interactor" + "Iterator derp!";
};
nape.phys.InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape.phys.InteractorIterator.get = function(list) {
	var ret;
	if(nape.phys.InteractorIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractorList.internal = true;
		var ret1 = new nape.phys.InteractorIterator();
		zpp_nape.util.ZPP_InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.phys.InteractorIterator
};
nape.phys.InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractorList();
	this.zpp_inner.outer = this;
};
nape.phys.InteractorList.__name__ = ["nape","phys","InteractorList"];
nape.phys.InteractorList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.InteractorList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner_i);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			} else this.zpp_inner.inner.add(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer_i;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer_i;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner_i) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.InteractorIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.InteractorList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Interactor" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.phys.InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.phys.InteractorIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.phys.InteractorList
	,__properties__: {get_length:"get_length"}
};
nape.phys.MassMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "MassMode" + " derp!";
};
nape.phys.MassMode.__name__ = ["nape","phys","MassMode"];
nape.phys.MassMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape.phys.MassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
};
nape.phys.MassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_FIXED;
};
nape.phys.MassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.MassMode
};
nape.phys.Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_Material(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if(density < 0) throw "Error: Material::density must be positive";
		if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
nape.phys.Material.__name__ = ["nape","phys","Material"];
nape.phys.Material.wood = function() {
	return new nape.phys.Material(0.4,0.2,0.38,0.7,0.005);
};
nape.phys.Material.steel = function() {
	return new nape.phys.Material(0.2,0.57,0.74,7.8,0.001);
};
nape.phys.Material.ice = function() {
	return new nape.phys.Material(0.3,0.03,0.1,0.9,0.0001);
};
nape.phys.Material.rubber = function() {
	return new nape.phys.Material(0.8,1.0,1.4,1.5,0.01);
};
nape.phys.Material.glass = function() {
	return new nape.phys.Material(0.4,0.4,0.94,2.6,0.002);
};
nape.phys.Material.sand = function() {
	return new nape.phys.Material(-1.0,0.45,0.6,1.6,16.0);
};
nape.phys.Material.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape.phys.Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		return ret;
	}
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.zpp_inner.elasticity) {
			if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.elasticity;
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.zpp_inner.dynamicFriction) {
			if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
			if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.dynamicFriction;
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.zpp_inner.staticFriction) {
			if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
			if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.staticFriction;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
			if(density < 0) throw "Error: Material::density must be positive";
			if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
		}
		return this.zpp_inner.density * 1000;
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.zpp_inner.rollingFriction) {
			if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
			if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.rollingFriction;
	}
	,toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape.phys.Material
	,__properties__: {set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_density:"set_density",get_density:"get_density",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_shapes:"get_shapes",get_userData:"get_userData"}
};
nape.shape = {};
nape.shape.Shape = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	throw "Error: Shape cannot be instantiated derp!";
};
nape.shape.Shape.__name__ = ["nape","shape","Shape"];
nape.shape.Shape.__super__ = nape.phys.Interactor;
nape.shape.Shape.prototype = $extend(nape.phys.Interactor.prototype,{
	get_type: function() {
		return zpp_nape.shape.ZPP_Shape.types[this.zpp_inner.type];
	}
	,isCircle: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,get_body: function() {
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,set_body: function(body) {
		this.zpp_inner.immutable_midstep("Shape::body");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
			if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
			if(body != null) body.zpp_inner.wrap_shapes.add(this);
		}
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,get_castCircle: function() {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return this.zpp_inner.circle.outer_zn; else return null;
	}
	,get_castPolygon: function() {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) return this.zpp_inner.polygon.outer_zn; else return null;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,set_localCOM: function(localCOM) {
		this.zpp_inner.immutable_midstep("Body::localCOM");
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(localCOM == null) throw "Error: Shape::localCOM cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this))).set(localCOM);
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_area: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.area;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.inertia;
	}
	,get_angDrag: function() {
		this.zpp_inner.validate_angDrag();
		return this.zpp_inner.angDrag;
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.zpp_inner.material.wrapper();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.zpp_inner.filter.wrapper();
	}
	,get_fluidProperties: function() {
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,set_fluidProperties: function(fluidProperties) {
		if(fluidProperties == null) throw "Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false";
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,get_fluidEnabled: function() {
		return this.zpp_inner.fluidEnabled;
	}
	,set_fluidEnabled: function(fluidEnabled) {
		this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
		this.zpp_inner.fluidEnabled = fluidEnabled;
		if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape.phys.FluidProperties());
		this.zpp_inner.wake();
		return this.zpp_inner.fluidEnabled;
	}
	,get_sensorEnabled: function() {
		return this.zpp_inner.sensorEnabled;
	}
	,set_sensorEnabled: function(sensorEnabled) {
		this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		this.zpp_inner.sensorEnabled = sensorEnabled;
		this.zpp_inner.wake();
		return this.zpp_inner.sensorEnabled;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(translation == null) throw "Error: Cannot displace Shape by null Vec2";
		if(translation.lsq() > 0) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this))); else this.zpp_inner.polygon.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,scale: function(scalex,scaley) {
		this.zpp_inner.immutable_midstep("Shape::scale()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(scalex != scalex || scaley != scaley) throw "Error: Cannot scale Shape by NaN";
		if(scalex == 0 || scaley == 0) throw "Error: Cannot Scale shape by a factor of 0";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < nape.Config.epsilon * nape.Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else throw "Error: Cannot perform a non equal scaling on a Circle";
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
		return this;
	}
	,rotate: function(angle) {
		this.zpp_inner.immutable_midstep("Shape::rotate()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(angle != angle) throw "Error: Cannot rotate Shape by NaN";
		var dr = angle % (2 * Math.PI);
		if(dr != 0.0) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
		}
		return this;
	}
	,transform: function(matrix) {
		this.zpp_inner.immutable_midstep("Shape::transform()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(matrix == null) throw "Error: Cannot transform Shape by null matrix";
		if(matrix.singular()) throw "Error: Cannot transform Shape by a singular matrix";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else throw "Error: Cannot transform Circle by a non equiorthogonal matrix";
		} else this.zpp_inner.polygon.__transform(matrix);
		return this;
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Cannot check null point for containment";
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) throw "Error: Shape is not well defined without a Body";
		zpp_nape.geom.ZPP_Geom.validateShape(this.zpp_inner);
		point.zpp_inner.validate();
		var ret = zpp_nape.geom.ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = "Circle"; else ret = "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape.shape.Shape
	,__properties__: $extend(nape.phys.Interactor.prototype.__properties__,{get_bounds:"get_bounds",set_sensorEnabled:"set_sensorEnabled",get_sensorEnabled:"get_sensorEnabled",set_fluidEnabled:"set_fluidEnabled",get_fluidEnabled:"get_fluidEnabled",set_fluidProperties:"set_fluidProperties",get_fluidProperties:"get_fluidProperties",set_filter:"set_filter",get_filter:"get_filter",set_material:"set_material",get_material:"get_material",get_angDrag:"get_angDrag",get_inertia:"get_inertia",get_area:"get_area",set_localCOM:"set_localCOM",get_localCOM:"get_localCOM",get_worldCOM:"get_worldCOM",get_castPolygon:"get_castPolygon",get_castCircle:"get_castCircle",set_body:"set_body",get_body:"get_body",get_type:"get_type"})
});
nape.shape.Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Circle.__name__ = ["nape","shape","Circle"];
nape.shape.Circle.__super__ = nape.shape.Shape;
nape.shape.Circle.prototype = $extend(nape.shape.Shape.prototype,{
	get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
		if(radius != this.zpp_inner_zn.radius) {
			if(radius != radius) throw "Error: Circle::radius cannot be NaN";
			if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
			if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.zpp_inner_zn.radius;
	}
	,__class__: nape.shape.Circle
	,__properties__: $extend(nape.shape.Shape.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
nape.shape.Edge = function() {
	this.zpp_inner = null;
	if(!zpp_nape.shape.ZPP_Edge.internal) throw "Error: Cannot instantiate an Edge derp!";
};
nape.shape.Edge.__name__ = ["nape","shape","Edge"];
nape.shape.Edge.prototype = {
	get_polygon: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		return this.zpp_inner.polygon.outer_zn;
	}
	,get_localNormal: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
		return this.zpp_inner.wrap_lnorm;
	}
	,get_worldNormal: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
		return this.zpp_inner.wrap_gnorm;
	}
	,get_length: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.length;
	}
	,get_localProjection: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lprojection;
	}
	,get_worldProjection: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.polygon.body == null) throw "Error: Edge world projection only makes sense for Polygons contained within a rigid body";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gprojection;
	}
	,get_localVertex1: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp0.wrapper();
	}
	,get_localVertex2: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp1.wrapper();
	}
	,get_worldVertex1: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp0.wrapper();
	}
	,get_worldVertex2: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp1.wrapper();
	}
	,toString: function() {
		if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape.shape.Edge
	,__properties__: {get_worldVertex2:"get_worldVertex2",get_worldVertex1:"get_worldVertex1",get_localVertex2:"get_localVertex2",get_localVertex1:"get_localVertex1",get_worldProjection:"get_worldProjection",get_localProjection:"get_localProjection",get_length:"get_length",get_worldNormal:"get_worldNormal",get_localNormal:"get_localNormal",get_polygon:"get_polygon"}
};
nape.shape.EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_EdgeList.internal) throw "Error: Cannot instantiate " + "Edge" + "Iterator derp!";
};
nape.shape.EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape.shape.EdgeIterator.get = function(list) {
	var ret;
	if(nape.shape.EdgeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_EdgeList.internal = true;
		var ret1 = new nape.shape.EdgeIterator();
		zpp_nape.util.ZPP_EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.shape.EdgeIterator
};
nape.shape.EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_EdgeList();
	this.zpp_inner.outer = this;
};
nape.shape.EdgeList.__name__ = ["nape","shape","EdgeList"];
nape.shape.EdgeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.EdgeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) if(index == this.get_length() - 1) index = index; else index = this.get_length() - 2 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.EdgeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.EdgeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Edge" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.shape.EdgeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.shape.EdgeList
	,__properties__: {get_length:"get_length"}
};
nape.shape.Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	if(localVerts == null) throw "Error: localVerts cannot be null";
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) throw "Error: Array<Vec2> contains null objects";
			if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
			var x = vite;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(_g1.hasNext()) {
			var x1;
			_g1.zpp_critical = false;
			x1 = _g1.zpp_inner.at(_g1.zpp_i++);
			if(x1 == null) throw "Error: Vec2List contains null objects";
			if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.GeomPoly)) {
		var lv2 = localVerts;
		if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			do {
				var x2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
				vite1 = vite1.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push((function($this) {
					var $r;
					if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					$r = nape.geom.Vec2.get((function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.y;
						return $r;
					}($this)),false);
					return $r;
				}(this)));
				x2.dispose();
			} while(vite1 != verts);
		}
	} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv3.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x3 = cur1.elt;
			if(x3.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x3.outer.zpp_inner.weak) {
					x3.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Polygon.__name__ = ["nape","shape","Polygon"];
nape.shape.Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	if(x != x || y != y || width != width || height != height) throw "Error: Polygon.rect cannot accept NaN arguments";
	return [nape.geom.Vec2.get(x,y,weak),nape.geom.Vec2.get(x + width,y,weak),nape.geom.Vec2.get(x + width,y + height,weak),nape.geom.Vec2.get(x,y + height,weak)];
};
nape.shape.Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	if(width != width || height != height) throw "Error: Polygon.box cannot accept NaN arguments";
	return nape.shape.Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
nape.shape.Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	if(xRadius != xRadius || yRadius != yRadius || angleOffset != angleOffset) throw "Error: Polygon.regular cannot accept NaN arguments";
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape.geom.Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
};
nape.shape.Polygon.__super__ = nape.shape.Shape;
nape.shape.Polygon.prototype = $extend(nape.shape.Shape.prototype,{
	get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
		return this.zpp_inner_zn.wrap_lverts;
	}
	,get_worldVerts: function() {
		if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
		return this.zpp_inner_zn.wrap_gverts;
	}
	,get_edges: function() {
		if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
		return this.zpp_inner_zn.wrap_edges;
	}
	,validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,__class__: nape.shape.Polygon
	,__properties__: $extend(nape.shape.Shape.prototype.__properties__,{get_edges:"get_edges",get_worldVerts:"get_worldVerts",get_localVerts:"get_localVerts"})
});
nape.shape.ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ShapeList.internal) throw "Error: Cannot instantiate " + "Shape" + "Iterator derp!";
};
nape.shape.ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape.shape.ShapeIterator.get = function(list) {
	var ret;
	if(nape.shape.ShapeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ShapeList.internal = true;
		var ret1 = new nape.shape.ShapeIterator();
		zpp_nape.util.ZPP_ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape.shape.ShapeIterator
};
nape.shape.ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ShapeList();
	this.zpp_inner.outer = this;
};
nape.shape.ShapeList.__name__ = ["nape","shape","ShapeList"];
nape.shape.ShapeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.ShapeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.ShapeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.ShapeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Shape" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var _g;
		xs.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it;
		this.zpp_inner.valmod();
		it = nape.shape.ShapeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,__class__: nape.shape.ShapeList
	,__properties__: {get_length:"get_length"}
};
nape.shape.ShapeType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ShapeType" + " derp!";
};
nape.shape.ShapeType.__name__ = ["nape","shape","ShapeType"];
nape.shape.ShapeType.__properties__ = {get_POLYGON:"get_POLYGON",get_CIRCLE:"get_CIRCLE"}
nape.shape.ShapeType.get_CIRCLE = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
};
nape.shape.ShapeType.get_POLYGON = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
};
nape.shape.ShapeType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
			return $r;
		}(this))) return "CIRCLE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
			return $r;
		}(this))) return "POLYGON"; else return "";
	}
	,__class__: nape.shape.ShapeType
};
nape.shape.ValidationResult = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ValidationResult" + " derp!";
};
nape.shape.ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape.shape.ValidationResult.__properties__ = {get_SELF_INTERSECTING:"get_SELF_INTERSECTING",get_CONCAVE:"get_CONCAVE",get_DEGENERATE:"get_DEGENERATE",get_VALID:"get_VALID"}
nape.shape.ValidationResult.get_VALID = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
};
nape.shape.ValidationResult.get_DEGENERATE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
};
nape.shape.ValidationResult.get_CONCAVE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
};
nape.shape.ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
};
nape.shape.ValidationResult.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) return "VALID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))) return "DEGENERATE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))) return "CONCAVE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))) return "SELF_INTERSECTING"; else return "";
	}
	,__class__: nape.shape.ValidationResult
};
nape.space = {};
nape.space.Broadphase = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Broadphase" + " derp!";
};
nape.space.Broadphase.__name__ = ["nape","space","Broadphase"];
nape.space.Broadphase.__properties__ = {get_SWEEP_AND_PRUNE:"get_SWEEP_AND_PRUNE",get_DYNAMIC_AABB_TREE:"get_DYNAMIC_AABB_TREE"}
nape.space.Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape.space.Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape.space.Broadphase.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this))) return "SWEEP_AND_PRUNE"; else return "";
	}
	,__class__: nape.space.Broadphase
};
nape.space.Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.space.ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
nape.space.Space.__name__ = ["nape","space","Space"];
nape.space.Space.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_gravity: function() {
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(gravity == null) throw "Error: Space::gravity cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this))).set(gravity);
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,get_broadphase: function() {
		if(this.zpp_inner.bphase.is_sweep) {
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		} else {
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		}
	}
	,get_sortContacts: function() {
		return this.zpp_inner.sortcontacts;
	}
	,set_sortContacts: function(sortContacts) {
		this.zpp_inner.sortcontacts = sortContacts;
		return this.zpp_inner.sortcontacts;
	}
	,get_worldAngularDrag: function() {
		return this.zpp_inner.global_ang_drag;
	}
	,set_worldAngularDrag: function(worldAngularDrag) {
		var d = worldAngularDrag;
		if(d != d) throw "Error: Space::worldAngularDrag cannot be NaN";
		this.zpp_inner.global_ang_drag = d;
		return this.zpp_inner.global_ang_drag;
	}
	,get_worldLinearDrag: function() {
		return this.zpp_inner.global_lin_drag;
	}
	,set_worldLinearDrag: function(worldLinearDrag) {
		var d = worldLinearDrag;
		if(d != d) throw "Error: Space::worldLinearDrag cannot be NaN";
		this.zpp_inner.global_lin_drag = d;
		return this.zpp_inner.global_lin_drag;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_liveBodies: function() {
		return this.zpp_inner.wrap_live;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_liveConstraints: function() {
		return this.zpp_inner.wrap_livecon;
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitBodies";
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitConstraints";
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitCompounds";
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_nape.dynamics.ZPP_SpaceArbiterList();
			ret.space = this.zpp_inner;
			this.zpp_inner.wrap_arbiters = ret;
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,clear: function() {
		if(this.zpp_inner.midstep) throw "Error: Space::clear() cannot be called during space step()";
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 10;
		if(velocityIterations == null) velocityIterations = 10;
		if(deltaTime != deltaTime) throw "Error: deltaTime cannot be NaN";
		if(deltaTime <= 0) throw "Error: deltaTime must be strictly positive";
		if(velocityIterations <= 0) throw "Error: must use atleast one velocity iteration";
		if(positionIterations <= 0) throw "Error: must use atleast one position iteration";
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,get_timeStamp: function() {
		return this.zpp_inner.stamp;
	}
	,get_elapsedTime: function() {
		return this.zpp_inner.time;
	}
	,interactionType: function(shape1,shape2) {
		if(shape1 == null || shape2 == null) throw "Error: Cannot evaluate interaction type for null shapes";
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Cannot evaluate interaction type for shapes not part of a Body";
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return null;
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
		var s1 = shape1.zpp_inner;
		var s2 = shape2.zpp_inner;
		var _g = this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
		switch(_g) {
		case 0:
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		case 1:
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		case 2:
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		default:
			return null;
		}
	}
	,shapesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot evaluate shapes under a null point :)";
		var ret = this.zpp_inner.shapesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot evaluate objects under a null point :)";
		var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw "Error: Cannot evaluate shapes in a null AABB :)";
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw "Error: Cannot evaluate shapes in degenerate AABB :/";
		return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw "Error: Cannot evaluate objects in a null AABB :)";
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw "Error: Cannot evaluate objects in degenerate AABB :/";
		return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Cannot evaluate shapes at null circle :)";
		if(radius != radius) throw "Error: Circle radius cannot be NaN";
		if(radius <= 0) throw "Error: Circle radius must be strictly positive";
		var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Cannot evaluate objects at null circle :)";
		if(radius != radius) throw "Error: Circle radius cannot be NaN";
		if(radius <= 0) throw "Error: Circle radius must be strictly positive";
		var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw "Error: Cannot evaluate shapes in a null shapes :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
		if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
		}
		return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw "Error: Cannot evaluate bodies in a null shapes :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
		if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
		}
		return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInBody: function(body,filter,output) {
		if(body == null) throw "Error: Cannot evaluate shapes in null body";
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.shapesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,bodiesInBody: function(body,filter,output) {
		if(body == null) throw "Error: Cannot evaluate shapes in null body";
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.bodiesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,convexCast: function(shape,deltaTime,liveSweep,filter) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw "Error: Cannot cast null shape :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
		if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
		return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
	}
	,convexMultiCast: function(shape,deltaTime,liveSweep,filter,output) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw "Error: Cannot cast null shape :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
		if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
		return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
	}
	,rayCast: function(ray,inner,filter) {
		if(inner == null) inner = false;
		if(ray == null) throw "Error: Cannot cast null ray :)";
		return this.zpp_inner.rayCast(ray,inner,filter);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(inner == null) inner = false;
		if(ray == null) throw "Error: Cannot cast null ray :)";
		return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
	}
	,__class__: nape.space.Space
	,__properties__: {get_elapsedTime:"get_elapsedTime",get_timeStamp:"get_timeStamp",get_listeners:"get_listeners",get_arbiters:"get_arbiters",get_world:"get_world",get_liveConstraints:"get_liveConstraints",get_constraints:"get_constraints",get_liveBodies:"get_liveBodies",get_bodies:"get_bodies",get_compounds:"get_compounds",set_worldLinearDrag:"set_worldLinearDrag",get_worldLinearDrag:"get_worldLinearDrag",set_worldAngularDrag:"set_worldAngularDrag",get_worldAngularDrag:"get_worldAngularDrag",set_sortContacts:"set_sortContacts",get_sortContacts:"get_sortContacts",get_broadphase:"get_broadphase",set_gravity:"set_gravity",get_gravity:"get_gravity",get_userData:"get_userData"}
};
nape.util = {};
nape.util.Debug = function() { };
nape.util.Debug.__name__ = ["nape","util","Debug"];
nape.util.Debug.version = function() {
	return "Nape 2.0.16";
};
nape.util.Debug.clearObjectPools = function() {
	while(nape.constraint.ConstraintIterator.zpp_pool != null) {
		var nxt = nape.constraint.ConstraintIterator.zpp_pool.zpp_next;
		nape.constraint.ConstraintIterator.zpp_pool.zpp_next = null;
		nape.constraint.ConstraintIterator.zpp_pool = nxt;
	}
	while(nape.phys.InteractorIterator.zpp_pool != null) {
		var nxt1 = nape.phys.InteractorIterator.zpp_pool.zpp_next;
		nape.phys.InteractorIterator.zpp_pool.zpp_next = null;
		nape.phys.InteractorIterator.zpp_pool = nxt1;
	}
	while(nape.phys.BodyIterator.zpp_pool != null) {
		var nxt2 = nape.phys.BodyIterator.zpp_pool.zpp_next;
		nape.phys.BodyIterator.zpp_pool.zpp_next = null;
		nape.phys.BodyIterator.zpp_pool = nxt2;
	}
	while(nape.phys.CompoundIterator.zpp_pool != null) {
		var nxt3 = nape.phys.CompoundIterator.zpp_pool.zpp_next;
		nape.phys.CompoundIterator.zpp_pool.zpp_next = null;
		nape.phys.CompoundIterator.zpp_pool = nxt3;
	}
	while(nape.callbacks.ListenerIterator.zpp_pool != null) {
		var nxt4 = nape.callbacks.ListenerIterator.zpp_pool.zpp_next;
		nape.callbacks.ListenerIterator.zpp_pool.zpp_next = null;
		nape.callbacks.ListenerIterator.zpp_pool = nxt4;
	}
	while(nape.callbacks.CbTypeIterator.zpp_pool != null) {
		var nxt5 = nape.callbacks.CbTypeIterator.zpp_pool.zpp_next;
		nape.callbacks.CbTypeIterator.zpp_pool.zpp_next = null;
		nape.callbacks.CbTypeIterator.zpp_pool = nxt5;
	}
	while(nape.geom.ConvexResultIterator.zpp_pool != null) {
		var nxt6 = nape.geom.ConvexResultIterator.zpp_pool.zpp_next;
		nape.geom.ConvexResultIterator.zpp_pool.zpp_next = null;
		nape.geom.ConvexResultIterator.zpp_pool = nxt6;
	}
	while(nape.geom.GeomPolyIterator.zpp_pool != null) {
		var nxt7 = nape.geom.GeomPolyIterator.zpp_pool.zpp_next;
		nape.geom.GeomPolyIterator.zpp_pool.zpp_next = null;
		nape.geom.GeomPolyIterator.zpp_pool = nxt7;
	}
	while(nape.geom.Vec2Iterator.zpp_pool != null) {
		var nxt8 = nape.geom.Vec2Iterator.zpp_pool.zpp_next;
		nape.geom.Vec2Iterator.zpp_pool.zpp_next = null;
		nape.geom.Vec2Iterator.zpp_pool = nxt8;
	}
	while(nape.geom.RayResultIterator.zpp_pool != null) {
		var nxt9 = nape.geom.RayResultIterator.zpp_pool.zpp_next;
		nape.geom.RayResultIterator.zpp_pool.zpp_next = null;
		nape.geom.RayResultIterator.zpp_pool = nxt9;
	}
	while(nape.shape.ShapeIterator.zpp_pool != null) {
		var nxt10 = nape.shape.ShapeIterator.zpp_pool.zpp_next;
		nape.shape.ShapeIterator.zpp_pool.zpp_next = null;
		nape.shape.ShapeIterator.zpp_pool = nxt10;
	}
	while(nape.shape.EdgeIterator.zpp_pool != null) {
		var nxt11 = nape.shape.EdgeIterator.zpp_pool.zpp_next;
		nape.shape.EdgeIterator.zpp_pool.zpp_next = null;
		nape.shape.EdgeIterator.zpp_pool = nxt11;
	}
	while(nape.dynamics.ContactIterator.zpp_pool != null) {
		var nxt12 = nape.dynamics.ContactIterator.zpp_pool.zpp_next;
		nape.dynamics.ContactIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ContactIterator.zpp_pool = nxt12;
	}
	while(nape.dynamics.ArbiterIterator.zpp_pool != null) {
		var nxt13 = nape.dynamics.ArbiterIterator.zpp_pool.zpp_next;
		nape.dynamics.ArbiterIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ArbiterIterator.zpp_pool = nxt13;
	}
	while(nape.dynamics.InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next;
		nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape.dynamics.InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool != null) {
		var nxt15 = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = nxt15;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool != null) {
		var nxt16 = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = nxt16;
	}
	while(zpp_nape.phys.ZPP_Material.zpp_pool != null) {
		var nxt17 = zpp_nape.phys.ZPP_Material.zpp_pool.next;
		zpp_nape.phys.ZPP_Material.zpp_pool.next = null;
		zpp_nape.phys.ZPP_Material.zpp_pool = nxt17;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt18 = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = nxt18;
	}
	while(zpp_nape.phys.ZPP_FluidProperties.zpp_pool != null) {
		var nxt19 = zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next = null;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = nxt19;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt20 = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = nxt20;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt21 = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = nxt21;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool != null) {
		var nxt22 = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = nxt22;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt23 = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = nxt23;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool != null) {
		var nxt24 = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = nxt24;
	}
	while(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool != null) {
		var nxt25 = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = nxt25;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool != null) {
		var nxt26 = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = nxt26;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool != null) {
		var nxt27 = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = nxt27;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool != null) {
		var nxt28 = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = nxt28;
	}
	while(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool != null) {
		var nxt29 = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = nxt29;
	}
	while(zpp_nape.callbacks.ZPP_Callback.zpp_pool != null) {
		var nxt30 = zpp_nape.callbacks.ZPP_Callback.zpp_pool.next;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = nxt30;
	}
	while(zpp_nape.callbacks.ZPP_CbSet.zpp_pool != null) {
		var nxt31 = zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = nxt31;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool != null) {
		var nxt32 = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = nxt32;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool != null) {
		var nxt33 = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = nxt33;
	}
	while(zpp_nape.geom.ZPP_GeomVert.zpp_pool != null) {
		var nxt34 = zpp_nape.geom.ZPP_GeomVert.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = nxt34;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool != null) {
		var nxt35 = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = nxt35;
	}
	while(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt36 = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = nxt36;
	}
	while(zpp_nape.geom.ZPP_Mat23.zpp_pool != null) {
		var nxt37 = zpp_nape.geom.ZPP_Mat23.zpp_pool.next;
		zpp_nape.geom.ZPP_Mat23.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = nxt37;
	}
	while(zpp_nape.geom.ZPP_CutVert.zpp_pool != null) {
		var nxt38 = zpp_nape.geom.ZPP_CutVert.zpp_pool.next;
		zpp_nape.geom.ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = nxt38;
	}
	while(zpp_nape.geom.ZPP_CutInt.zpp_pool != null) {
		var nxt39 = zpp_nape.geom.ZPP_CutInt.zpp_pool.next;
		zpp_nape.geom.ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = nxt39;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool != null) {
		var nxt40 = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = nxt40;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool != null) {
		var nxt41 = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = nxt41;
	}
	while(zpp_nape.geom.ZPP_Vec2.zpp_pool != null) {
		var nxt42 = zpp_nape.geom.ZPP_Vec2.zpp_pool.next;
		zpp_nape.geom.ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = nxt42;
	}
	while(zpp_nape.geom.ZPP_PartitionPair.zpp_pool != null) {
		var nxt43 = zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = nxt43;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool != null) {
		var nxt44 = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = nxt44;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt45 = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt45;
	}
	while(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool != null) {
		var nxt46 = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = nxt46;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt47 = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt47;
	}
	while(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt48 = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = nxt48;
	}
	while(zpp_nape.geom.ZPP_SimplifyV.zpp_pool != null) {
		var nxt49 = zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = nxt49;
	}
	while(zpp_nape.geom.ZPP_SimplifyP.zpp_pool != null) {
		var nxt50 = zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = nxt50;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt51 = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = nxt51;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt52 = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = nxt52;
	}
	while(zpp_nape.geom.ZPP_AABB.zpp_pool != null) {
		var nxt53 = zpp_nape.geom.ZPP_AABB.zpp_pool.next;
		zpp_nape.geom.ZPP_AABB.zpp_pool.next = null;
		zpp_nape.geom.ZPP_AABB.zpp_pool = nxt53;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt54 = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = nxt54;
	}
	while(zpp_nape.geom.ZPP_ToiEvent.zpp_pool != null) {
		var nxt55 = zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = nxt55;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt56 = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt56;
	}
	while(zpp_nape.geom.ZPP_SimpleVert.zpp_pool != null) {
		var nxt57 = zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = nxt57;
	}
	while(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool != null) {
		var nxt58 = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = nxt58;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt59 = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt59;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt60 = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt60;
	}
	while(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool != null) {
		var nxt61 = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = nxt61;
	}
	while(zpp_nape.util.Hashable2_Boolfalse.zpp_pool != null) {
		var nxt62 = zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next = null;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = nxt62;
	}
	while(zpp_nape.geom.ZPP_MarchSpan.zpp_pool != null) {
		var nxt63 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = nxt63;
	}
	while(zpp_nape.geom.ZPP_MarchPair.zpp_pool != null) {
		var nxt64 = zpp_nape.geom.ZPP_MarchPair.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool = nxt64;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt65 = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = nxt65;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt66 = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt66;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool != null) {
		var nxt67 = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = nxt67;
	}
	while(zpp_nape.shape.ZPP_Edge.zpp_pool != null) {
		var nxt68 = zpp_nape.shape.ZPP_Edge.zpp_pool.next;
		zpp_nape.shape.ZPP_Edge.zpp_pool.next = null;
		zpp_nape.shape.ZPP_Edge.zpp_pool = nxt68;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt69 = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = nxt69;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt70 = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = nxt70;
	}
	while(zpp_nape.space.ZPP_SweepData.zpp_pool != null) {
		var nxt71 = zpp_nape.space.ZPP_SweepData.zpp_pool.next;
		zpp_nape.space.ZPP_SweepData.zpp_pool.next = null;
		zpp_nape.space.ZPP_SweepData.zpp_pool = nxt71;
	}
	while(zpp_nape.space.ZPP_AABBNode.zpp_pool != null) {
		var nxt72 = zpp_nape.space.ZPP_AABBNode.zpp_pool.next;
		zpp_nape.space.ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = nxt72;
	}
	while(zpp_nape.space.ZPP_AABBPair.zpp_pool != null) {
		var nxt73 = zpp_nape.space.ZPP_AABBPair.zpp_pool.next;
		zpp_nape.space.ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = nxt73;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt74 = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = nxt74;
	}
	while(zpp_nape.dynamics.ZPP_Contact.zpp_pool != null) {
		var nxt75 = zpp_nape.dynamics.ZPP_Contact.zpp_pool.next;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = nxt75;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt76 = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = nxt76;
	}
	while(zpp_nape.space.ZPP_Island.zpp_pool != null) {
		var nxt77 = zpp_nape.space.ZPP_Island.zpp_pool.next;
		zpp_nape.space.ZPP_Island.zpp_pool.next = null;
		zpp_nape.space.ZPP_Island.zpp_pool = nxt77;
	}
	while(zpp_nape.space.ZPP_Component.zpp_pool != null) {
		var nxt78 = zpp_nape.space.ZPP_Component.zpp_pool.next;
		zpp_nape.space.ZPP_Component.zpp_pool.next = null;
		zpp_nape.space.ZPP_Component.zpp_pool = nxt78;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool != null) {
		var nxt79 = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = nxt79;
	}
	while(zpp_nape.space.ZPP_CallbackSet.zpp_pool != null) {
		var nxt80 = zpp_nape.space.ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = nxt80;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool != null) {
		var nxt81 = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = nxt81;
	}
	while(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool != null) {
		var nxt82 = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = nxt82;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt83 = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = nxt83;
	}
	while(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt84 = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt84;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt85 = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt85;
	}
	while(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool != null) {
		var nxt86 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = nxt86;
	}
	while(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool != null) {
		var nxt87 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = nxt87;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt88 = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = nxt88;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool != null) {
		var nxt89 = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = nxt89;
	}
	while(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool != null) {
		var nxt90 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = nxt90;
	}
	while(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool != null) {
		var nxt91 = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = nxt91;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt92 = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = nxt92;
	}
	while(zpp_nape.util.ZNPNode_RayResult.zpp_pool != null) {
		var nxt93 = zpp_nape.util.ZNPNode_RayResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = nxt93;
	}
	while(zpp_nape.util.ZPP_PubPool.poolGeomPoly != null) {
		var nxt94 = zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = nxt94;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec2 != null) {
		var nxt95 = zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec2 = nxt95;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec3 != null) {
		var nxt96 = zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec3 = nxt96;
	}
};
phoenix.BatchState = function(_r) {
	this.log = false;
	this.last_group = -1;
	this.batcher = _r;
	this.geom_state = new phoenix.geometry.GeometryState();
	this.last_geom_state = new phoenix.geometry.GeometryState();
};
phoenix.BatchState.__name__ = ["phoenix","BatchState"];
phoenix.BatchState.prototype = {
	active_shader: function() {
		if(this.geom_state.shader != null) return this.geom_state.shader; else if(this.geom_state.texture != null) return this.batcher.renderer.shaders.textured.shader; else return this.batcher.renderer.shaders.plain.shader;
	}
	,activate: function(batcher) {
		if(this.geom_state.dirty) {
			if(this.geom_state.texture != null) {
				if(this.last_texture_id == null) {
				}
				if(this.last_texture_id != this.geom_state.texture.id) {
					this.last_texture_id = this.geom_state.texture.id;
					if(this.geom_state.texture.loaded) {
						this.geom_state.texture.bind();
						this.geom_state.texture.activate(batcher.tex0_attribute);
					}
				}
			} else {
				Luxe.renderer.state.bindTexture2D(null);
				this.last_texture_id = null;
			}
			if(this.geom_state.shader != null) {
				if(this.last_shader_id != this.geom_state.shader.program) {
					batcher.shader_activate(this.geom_state.shader);
					this.last_shader_id = this.geom_state.shader.program;
				}
			} else if(this.geom_state.texture != null) {
				batcher.shader_activate(batcher.renderer.shaders.textured.shader);
				this.last_shader_id = batcher.renderer.shaders.textured.shader.program;
			} else {
				batcher.shader_activate(batcher.renderer.shaders.plain.shader);
				this.last_shader_id = batcher.renderer.shaders.plain.shader.program;
			}
			if(this.geom_state.group != this.last_group) {
				var previous = batcher.groups.get(this.last_group);
				if(previous != null) {
					var _g = 0;
					while(_g < previous.length) {
						var _batch_group = previous[_g];
						++_g;
						if(_batch_group.post_render != null) _batch_group.post_render(batcher);
					}
				}
				var current = batcher.groups.get(this.geom_state.group);
				if(current != null) {
					var _g1 = 0;
					while(_g1 < current.length) {
						var _batch_group1 = current[_g1];
						++_g1;
						if(_batch_group1.pre_render != null) _batch_group1.pre_render(batcher);
					}
				}
				this.last_group = this.geom_state.group;
			}
		}
		if(this.geom_state.clip) {
			if(!this.is_clipping) {
				snow.modules.opengl.web.GL.enable(3089);
				this.is_clipping = true;
			}
			if(this.clip_rect != null) {
				if(!this.clip_rect.equal(this.last_clip_rect)) {
					var _y = batcher.view.get_viewport().h - (this.clip_rect.y + this.clip_rect.h);
					snow.modules.opengl.web.GL.scissor(this.clip_rect.x | 0,_y | 0,this.clip_rect.w | 0,this.clip_rect.h | 0);
				}
			}
		} else if(this.is_clipping) {
			snow.modules.opengl.web.GL.disable(3089);
			this.is_clipping = false;
		}
		this.geom_state.clean();
	}
	,deactivate: function(batcher) {
		if(this.last_texture_id != null) Luxe.renderer.state.bindTexture2D(null);
		Luxe.renderer.state.useProgram(null);
		var previous = batcher.groups.get(this.last_group);
		if(previous != null) {
			var _g = 0;
			while(_g < previous.length) {
				var _batch_group = previous[_g];
				++_g;
				if(_batch_group.post_render != null) _batch_group.post_render(batcher);
			}
		}
		if(this.is_clipping) snow.modules.opengl.web.GL.disable(3089);
	}
	,update: function(geom) {
		this.geom_state.clone_onto(this.last_geom_state);
		this.geom_state.update(geom.state);
		if(this.geom_state.clip) {
			this.last_clip_rect = this.clip_rect;
			this.clip_rect = geom.get_clip_rect();
		}
		return this.geom_state.dirty || this.last_clip_rect != this.clip_rect;
	}
	,str: function() {
		if(!this.log) return;
		haxe.Log.trace("\t+ BATCHSTATE LAST ",{ fileName : "BatchState.hx", lineNumber : 200, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tdepth - " + this.last_geom_state.depth,{ fileName : "BatchState.hx", lineNumber : 201, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tgroup - " + this.last_geom_state.group,{ fileName : "BatchState.hx", lineNumber : 202, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\ttexture - " + (this.last_geom_state.texture == null?"null":this.last_geom_state.texture.id),{ fileName : "BatchState.hx", lineNumber : 203, className : "phoenix.BatchState", methodName : "str"});
		if(this.last_geom_state.texture != null) haxe.Log.trace("\t\t\t " + Std.string(this.last_geom_state.texture.texture),{ fileName : "BatchState.hx", lineNumber : 205, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tshader - " + (this.last_geom_state.shader == null?"null":this.last_geom_state.shader.id),{ fileName : "BatchState.hx", lineNumber : 207, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tprimitive_type - " + Std.string(this.last_geom_state.primitive_type),{ fileName : "BatchState.hx", lineNumber : 208, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tclip - " + Std.string(this.last_geom_state.clip),{ fileName : "BatchState.hx", lineNumber : 209, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t- BATCHSTATE LAST",{ fileName : "BatchState.hx", lineNumber : 210, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t+ BATCHSTATE STATE",{ fileName : "BatchState.hx", lineNumber : 212, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tdepth - " + this.geom_state.depth,{ fileName : "BatchState.hx", lineNumber : 213, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tgroup - " + this.geom_state.group,{ fileName : "BatchState.hx", lineNumber : 214, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\ttexture - " + (this.geom_state.texture == null?"null":this.geom_state.texture.id),{ fileName : "BatchState.hx", lineNumber : 215, className : "phoenix.BatchState", methodName : "str"});
		if(this.geom_state.texture != null) haxe.Log.trace("\t\t\t " + Std.string(this.geom_state.texture.texture),{ fileName : "BatchState.hx", lineNumber : 217, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tshader - " + (this.geom_state.shader == null?"null":this.geom_state.shader.id),{ fileName : "BatchState.hx", lineNumber : 219, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tprimitive_type - " + Std.string(this.geom_state.primitive_type),{ fileName : "BatchState.hx", lineNumber : 220, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t\tclip - " + Std.string(this.geom_state.clip),{ fileName : "BatchState.hx", lineNumber : 221, className : "phoenix.BatchState", methodName : "str"});
		haxe.Log.trace("\t- BATCHSTATE STATE",{ fileName : "BatchState.hx", lineNumber : 222, className : "phoenix.BatchState", methodName : "str"});
	}
	,__class__: phoenix.BatchState
};
phoenix._Batcher = {};
phoenix._Batcher.PrimitiveType_Impl_ = function() { };
phoenix._Batcher.PrimitiveType_Impl_.__name__ = ["phoenix","_Batcher","PrimitiveType_Impl_"];
phoenix._Batcher.BlendMode_Impl_ = function() { };
phoenix._Batcher.BlendMode_Impl_.__name__ = ["phoenix","_Batcher","BlendMode_Impl_"];
phoenix._Batcher.BlendEquation_Impl_ = function() { };
phoenix._Batcher.BlendEquation_Impl_.__name__ = ["phoenix","_Batcher","BlendEquation_Impl_"];
phoenix.BatchGroup = function(_pre,_post) {
	this.pre_render = _pre;
	this.post_render = _post;
};
phoenix.BatchGroup.__name__ = ["phoenix","BatchGroup"];
phoenix.BatchGroup.prototype = {
	__class__: phoenix.BatchGroup
};
phoenix.Batcher = function(_r,_name) {
	if(_name == null) _name = "";
	this.sequence = -1;
	this.name = "";
	this.log = false;
	this.visible_count = 0;
	this.static_batched_count = 0;
	this.dynamic_batched_count = 0;
	this.draw_calls = 0;
	this.color_attribute = 2;
	this.tcoord_attribute = 1;
	this.vert_attribute = 0;
	this.vert_count = 0;
	this.max_floats = 0;
	this.max_verts = 0;
	this.buffer_index = 0;
	this.buffer_count = 2;
	this.static_normal_floats = 0;
	this.static_color_floats = 0;
	this.static_tcoord_floats = 0;
	this.static_vert_floats = 0;
	this.normal_floats = 0;
	this.color_floats = 0;
	this.tcoord_floats = 0;
	this.vert_floats = 0;
	this.tree_changed = false;
	this.enabled = true;
	this.layer = 0;
	this.id = Luxe.utils.uniqueid();
	this.renderer = _r;
	this.sequence = ++phoenix.Batcher._sequence_key;
	this.geometry = new luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry($bind(this,this.geometry_compare));
	this.groups = new haxe.ds.IntMap();
	this.max_verts = Std["int"](Math.pow(2,15));
	this.max_floats = this.max_verts * 4;
	var elements = this.max_floats;
	var len = null;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this.vertlist = this1;
	var elements1 = this.max_floats;
	var len1 = null;
	var this2;
	if(elements1 != null) this2 = new Float32Array(elements1); else this2 = null;
	this.tcoordlist = this2;
	var elements2 = this.max_floats;
	var len2 = null;
	var this3;
	if(elements2 != null) this3 = new Float32Array(elements2); else this3 = null;
	this.colorlist = this3;
	var elements3 = this.max_floats;
	var len3 = null;
	var this4;
	if(elements3 != null) this4 = new Float32Array(elements3); else this4 = null;
	this.static_vertlist = this4;
	var elements4 = this.max_floats;
	var len4 = null;
	var this5;
	if(elements4 != null) this5 = new Float32Array(elements4); else this5 = null;
	this.static_tcoordlist = this5;
	var elements5 = this.max_floats;
	var len5 = null;
	var this6;
	if(elements5 != null) this6 = new Float32Array(elements5); else this6 = null;
	this.static_colorlist = this6;
	this.view = this.renderer.camera;
	this.vertexBuffers = [];
	this.tcoordBuffers = [];
	this.vcolorBuffers = [];
	var _g1 = 0;
	var _g = this.buffer_count;
	while(_g1 < _g) {
		var i = _g1++;
		var _vb = snow.modules.opengl.web.GL.createBuffer();
		var _tb = snow.modules.opengl.web.GL.createBuffer();
		var _cb = snow.modules.opengl.web.GL.createBuffer();
		var _nb = snow.modules.opengl.web.GL.createBuffer();
		snow.modules.opengl.web.GL.bindBuffer(34962,_vb);
		snow.modules.opengl.web.GL.bufferData(34962,this.vertlist,35044);
		snow.modules.opengl.web.GL.bindBuffer(34962,_tb);
		snow.modules.opengl.web.GL.bufferData(34962,this.tcoordlist,35044);
		snow.modules.opengl.web.GL.bindBuffer(34962,_cb);
		snow.modules.opengl.web.GL.bufferData(34962,this.colorlist,35044);
		this.vertexBuffers.push(_vb);
		this.tcoordBuffers.push(_tb);
		this.vcolorBuffers.push(_cb);
	}
	snow.modules.opengl.web.GL.enableVertexAttribArray(this.vert_attribute);
	snow.modules.opengl.web.GL.enableVertexAttribArray(this.tcoord_attribute);
	snow.modules.opengl.web.GL.enableVertexAttribArray(this.color_attribute);
	if(_name.length == 0) this.name = Luxe.utils.uniqueid(); else this.name = _name;
};
phoenix.Batcher.__name__ = ["phoenix","Batcher"];
phoenix.Batcher.prototype = {
	set_layer: function(_layer) {
		this.layer = _layer;
		this.renderer.batchers.sort(($_=this.renderer,$bind($_,$_.sort_batchers)));
		return this.layer;
	}
	,toString: function() {
		return "Batcher(" + this.name + ")";
	}
	,compare: function(other) {
		if(this.layer == other.layer) return 0;
		if(this.layer < other.layer) return -1;
		return 1;
	}
	,add_group: function(_group,_pre_render,_post_render) {
		if(!this.groups.exists(_group)) {
			var value = new Array();
			this.groups.set(_group,value);
		}
		this.groups.get(_group).push(new phoenix.BatchGroup(_pre_render,_post_render));
	}
	,compare_rule_to_string: function(r) {
		switch(r) {
		case 0:
			return "same";
		case 1:
			return "depth <";
		case 2:
			return "depth >";
		case 3:
			return "shader <";
		case 4:
			return "shader >";
		case 5:
			return "shader s._ >";
		case 6:
			return "shader _.s <";
		case 7:
			return "texture <";
		case 8:
			return "texture >";
		case 9:
			return "texture t._ >";
		case 10:
			return "texture _.t <";
		case 11:
			return "primitive <";
		case 12:
			return "primitive >";
		case 13:
			return "unclipped";
		case 14:
			return "clipped";
		case 15:
			return "timestamp <";
		case 16:
			return "timestamp >";
		case 17:
			return "timestamp ==";
		case 18:
			return "sequence <";
		case 19:
			return "sequence >";
		case 20:
			return "fallback";
		}
		return "unknown";
	}
	,compare_rule: function(a,b) {
		if(a.uuid == b.uuid) return 0;
		if(a.depth < b.depth) return 1;
		if(a.depth > b.depth) return 2;
		if(a.shader != null && b.shader != null) {
			if(a.shader.id < b.shader.id) return 3;
			if(a.shader.id > b.shader.id) return 4;
		} else if(a.shader != null && b.shader == null) return 5; else if(a.shader == null && b.shader != null) return 6;
		if(a.texture != null && b.texture != null) {
			if(a.texture.id < b.texture.id) return 7;
			if(a.texture.id > b.texture.id) return 8;
		} else if(a.texture != null && b.texture == null) return 9; else if(a.texture == null && b.texture != null) return 10;
		var a_primitive_index = a.primitive_type;
		var b_primitive_index = b.primitive_type;
		if(a_primitive_index < b_primitive_index) return 11;
		if(a_primitive_index > b_primitive_index) return 12;
		if(a.clip != b.clip) {
			if(a.clip == false && b.clip == true) return 13; else if(a.clip == true && b.clip == false) return 14;
		}
		if(a.timestamp < b.timestamp) return 15;
		if(a.timestamp > b.timestamp) return 16;
		if(a.timestamp == b.timestamp) return 17;
		if(a.sequence < b.sequence) return 18;
		if(a.sequence > b.sequence) return 19;
		return 20;
	}
	,geometry_compare: function(a,b) {
		if(a.uuid == b.uuid) return 0;
		if(a.depth < b.depth) return -1;
		if(a.depth > b.depth) return 1;
		if(a.shader != null && b.shader != null) {
			if(a.shader.id < b.shader.id) return -1;
			if(a.shader.id > b.shader.id) return 1;
		} else if(a.shader != null && b.shader == null) return 1; else if(a.shader == null && b.shader != null) return -1;
		if(a.texture != null && b.texture != null) {
			if(a.texture.id < b.texture.id) return -1;
			if(a.texture.id > b.texture.id) return 1;
		} else if(a.texture != null && b.texture == null) return 1; else if(a.texture == null && b.texture != null) return -1;
		var a_primitive_index = a.primitive_type;
		var b_primitive_index = b.primitive_type;
		if(a_primitive_index < b_primitive_index) return -1;
		if(a_primitive_index > b_primitive_index) return 1;
		if(a.clip != b.clip) {
			if(a.clip == false && b.clip == true) return 1; else if(a.clip == true && b.clip == false) return -1;
		}
		if(a.timestamp < b.timestamp) return -1;
		if(a.timestamp >= b.timestamp) return 1;
		if(a.sequence < b.sequence) return -1;
		if(a.sequence > b.sequence) return 1;
		return 1;
	}
	,list_geometry: function() {
		var $it0 = this.geometry.iterator();
		while( $it0.hasNext() ) {
			var geom = $it0.next();
			null;
		}
	}
	,add: function(_geom,_force_add) {
		if(_force_add == null) _force_add = false;
		if(this.geometry.find(_geom.key) == null || _force_add) {
			if(!Lambda.has(_geom.batchers,this)) _geom.batchers.push(this);
			this.geometry.insert(_geom.key,_geom);
			_geom.added = true;
			this.tree_changed = true;
		} else {
		}
	}
	,empty: function(_drop) {
		if(_drop == null) _drop = true;
		if(_drop) {
			var $it0 = this.geometry.iterator();
			while( $it0.hasNext() ) {
				var geom = $it0.next();
				geom.drop(true);
				geom = null;
			}
		} else {
			var $it1 = this.geometry.iterator();
			while( $it1.hasNext() ) {
				var geom1 = $it1.next();
				this.geometry.remove(geom1.key);
			}
		}
	}
	,remove: function(_geom,_remove_batcher_from_geometry) {
		if(_remove_batcher_from_geometry == null) _remove_batcher_from_geometry = true;
		if(_remove_batcher_from_geometry) {
			HxOverrides.remove(_geom.batchers,this);
			if(_geom.batchers.length == 0) _geom.added = false;
		}
		var countbefore = this.geometry.size();
		this.geometry.remove(_geom.key);
		var countafter = this.geometry.size();
		if(countbefore == countafter) {
		}
		this.tree_changed = true;
	}
	,shader_activate: function(_shader) {
		_shader.activate();
		this.projectionmatrix_attribute = _shader.projectionmatrix_attribute;
		this.modelviewmatrix_attribute = _shader.modelviewmatrix_attribute;
		this.tex0_attribute = _shader.tex0_attribute;
		this.tex1_attribute = _shader.tex1_attribute;
		this.tex2_attribute = _shader.tex2_attribute;
		this.tex3_attribute = _shader.tex3_attribute;
		this.tex4_attribute = _shader.tex4_attribute;
		this.tex5_attribute = _shader.tex5_attribute;
		this.tex6_attribute = _shader.tex6_attribute;
		this.tex7_attribute = _shader.tex7_attribute;
		_shader.apply_uniforms();
		Luxe.renderer.state.activeTexture(33984);
	}
	,batch: function(persist_immediate) {
		if(persist_immediate == null) persist_immediate = false;
		this.dynamic_batched_count = 0;
		this.static_batched_count = 0;
		this.visible_count = 0;
		this.vert_floats = 0;
		this.tcoord_floats = 0;
		this.color_floats = 0;
		this.normal_floats = 0;
		this.state = new phoenix.BatchState(this);
		var geom = null;
		var $it0 = this.geometry.iterator();
		while( $it0.hasNext() ) {
			var _geom = $it0.next();
			geom = _geom;
			if(geom != null && !geom.dropped) {
				if(this.state.update(geom)) {
					if(this.vert_floats > 0) this.submit_current_vertex_list(this.state.last_geom_state.primitive_type);
				}
				this.state.activate(this);
				if(geom.visible) {
					this.visible_count++;
					if(geom.get_locked()) {
						this.submit_static_geometry(geom);
						this.vert_count += geom.vertices.length;
					} else if(geom.get_primitive_type() == 3 || geom.get_primitive_type() == 2 || geom.get_primitive_type() == 5 || geom.get_primitive_type() == 6) {
						this.geometry_batch(geom);
						this.submit_current_vertex_list(geom.get_primitive_type());
						this.vert_count += geom.vertices.length;
					} else {
						this.geometry_batch(geom);
						this.dynamic_batched_count++;
						this.vert_count += geom.vertices.length;
					}
					if(!persist_immediate && geom.immediate) geom.drop();
				}
			} else {
			}
		}
		if(this.vert_floats > 0 && geom != null) {
			this.state.update(geom);
			this.state.activate(this);
			this.submit_current_vertex_list(this.state.last_geom_state.primitive_type);
		}
		this.state.deactivate(this);
		this.state = null;
	}
	,draw: function(persist_immediate) {
		if(persist_immediate == null) persist_immediate = false;
		this.draw_calls = 0;
		this.vert_count = 0;
		this.view.process();
		this.renderer.state.viewport(this.view.get_viewport().x,this.view.get_viewport().y,this.view.get_viewport().w,this.view.get_viewport().h);
		this.batch(persist_immediate);
	}
	,submit_static_geometry: function(geom) {
		if(geom.vertices.length == 0) return;
		this.static_vert_floats = 0;
		this.static_tcoord_floats = 0;
		this.static_color_floats = 0;
		if(!geom.submitted || geom.get_dirty()) this.geometry_batch_static(geom); else {
			this.static_vert_floats = geom.vertices.length * 4;
			this.static_tcoord_floats = geom.vertices.length * 4;
			this.static_color_floats = geom.vertices.length * 4;
		}
		if(geom.static_vertex_buffer == null) {
			geom.static_vertex_buffer = snow.modules.opengl.web.GL.createBuffer();
			geom.static_tcoord_buffer = snow.modules.opengl.web.GL.createBuffer();
			geom.static_vcolor_buffer = snow.modules.opengl.web.GL.createBuffer();
		}
		this._enable_attributes();
		snow.modules.opengl.web.GL.bindBuffer(34962,geom.static_vertex_buffer);
		snow.modules.opengl.web.GL.vertexAttribPointer(this.vert_attribute,4,5126,false,0,0);
		if(!geom.submitted || geom.get_dirty()) snow.modules.opengl.web.GL.bufferData(34962,this.static_vertlist,35044);
		snow.modules.opengl.web.GL.bindBuffer(34962,geom.static_tcoord_buffer);
		snow.modules.opengl.web.GL.vertexAttribPointer(this.tcoord_attribute,4,5126,false,0,0);
		if(!geom.submitted || geom.get_dirty()) snow.modules.opengl.web.GL.bufferData(34962,this.static_tcoordlist,35044);
		snow.modules.opengl.web.GL.bindBuffer(34962,geom.static_vcolor_buffer);
		snow.modules.opengl.web.GL.vertexAttribPointer(this.color_attribute,4,5126,false,0,0);
		if(!geom.submitted || geom.get_dirty()) snow.modules.opengl.web.GL.bufferData(34962,this.static_colorlist,35044);
		snow.modules.opengl.web.GL.drawArrays(geom.get_primitive_type(),0,phoenix.utils.Rendering.get_elements_for_type(geom.get_primitive_type(),this.static_vert_floats));
		this._disable_attributes();
		this.draw_calls++;
		this.static_batched_count++;
		this.static_vert_floats = 0;
		this.static_tcoord_floats = 0;
		this.static_color_floats = 0;
		geom.set_dirty(false);
		geom.submitted = true;
	}
	,submit_current_vertex_list: function(type) {
		if(this.vert_floats == 0) return;
		if(this.vert_floats > this.max_floats) throw "uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$vert_floats).";
		this._enable_attributes();
		snow.modules.opengl.web.GL.bindBuffer(34962,this.vertexBuffers[this.buffer_index]);
		snow.modules.opengl.web.GL.vertexAttribPointer(0,4,5126,false,0,0);
		snow.modules.opengl.web.GL.bufferSubData(34962,0,(function($this) {
			var $r;
			var buffer = $this.vertlist.buffer;
			var len = $this.vert_floats;
			var this1;
			if(buffer != null) {
				if(len == null) {
					len = undefined;
				} else len = len;
				this1 = new Float32Array(buffer,0,len);
			} else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		snow.modules.opengl.web.GL.bindBuffer(34962,this.tcoordBuffers[this.buffer_index]);
		snow.modules.opengl.web.GL.vertexAttribPointer(1,4,5126,false,0,0);
		snow.modules.opengl.web.GL.bufferSubData(34962,0,(function($this) {
			var $r;
			var buffer1 = $this.tcoordlist.buffer;
			var len1 = $this.tcoord_floats;
			var this2;
			if(buffer1 != null) {
				if(len1 == null) {
					len1 = undefined;
				} else len1 = len1;
				this2 = new Float32Array(buffer1,0,len1);
			} else this2 = null;
			$r = this2;
			return $r;
		}(this)));
		snow.modules.opengl.web.GL.bindBuffer(34962,this.vcolorBuffers[this.buffer_index]);
		snow.modules.opengl.web.GL.vertexAttribPointer(2,4,5126,false,0,0);
		snow.modules.opengl.web.GL.bufferSubData(34962,0,(function($this) {
			var $r;
			var buffer2 = $this.colorlist.buffer;
			var len2 = $this.color_floats;
			var this3;
			if(buffer2 != null) {
				if(len2 == null) {
					len2 = undefined;
				} else len2 = len2;
				this3 = new Float32Array(buffer2,0,len2);
			} else this3 = null;
			$r = this3;
			return $r;
		}(this)));
		snow.modules.opengl.web.GL.drawArrays(type,0,phoenix.utils.Rendering.get_elements_for_type(type,this.vert_floats));
		this._disable_attributes();
		this.buffer_index++;
		if(this.buffer_index >= this.buffer_count) this.buffer_index = 0;
		this.vert_floats = 0;
		this.tcoord_floats = 0;
		this.color_floats = 0;
		this.normal_floats = 0;
		this.draw_calls++;
	}
	,geometry_batch: function(geom) {
		var _count_after = geom.vertices.length + this.vert_floats / 4;
		if(_count_after > this.max_verts) this.submit_current_vertex_list(geom.get_primitive_type());
		geom.batch(this.vert_floats,this.tcoord_floats,this.color_floats,this.normal_floats,this.vertlist,this.tcoordlist,this.colorlist,this.normallist);
		this.vert_floats += geom.vertices.length * 4;
		this.tcoord_floats += geom.vertices.length * 4;
		this.color_floats += geom.vertices.length * 4;
	}
	,geometry_batch_static: function(geom) {
		geom.batch(this.static_vert_floats,this.static_tcoord_floats,this.static_color_floats,this.static_normal_floats,this.static_vertlist,this.static_tcoordlist,this.static_colorlist,this.static_normallist);
		this.static_vert_floats += geom.vertices.length * 4;
		this.static_tcoord_floats += geom.vertices.length * 4;
		this.static_color_floats += geom.vertices.length * 4;
	}
	,_enable_attributes: function() {
		snow.modules.opengl.web.GL.uniformMatrix4fv(this.projectionmatrix_attribute,false,this.view.projection_float32array);
		snow.modules.opengl.web.GL.uniformMatrix4fv(this.modelviewmatrix_attribute,false,this.view.view_inverse_float32array);
	}
	,_disable_attributes: function() {
	}
	,__class__: phoenix.Batcher
	,__properties__: {set_layer:"set_layer"}
};
phoenix._BitmapFont = {};
phoenix._BitmapFont.TextAlign_Impl_ = function() { };
phoenix._BitmapFont.TextAlign_Impl_.__name__ = ["phoenix","_BitmapFont","TextAlign_Impl_"];
phoenix.BitmapFont = function(_options) {
	this.items_total = 0;
	this.items_loaded = 0;
	this.loaded = false;
	if(_options == null) this.options = { id : "font." + Luxe.utils.uniqueid()}; else this.options = _options;
	this.id = this.options.id;
	this.default_options();
	luxe.resource.Resource.call(this,this.options.resources,7);
	this.pages = new haxe.ds.IntMap();
};
phoenix.BitmapFont.__name__ = ["phoenix","BitmapFont"];
phoenix.BitmapFont.load = function(_options) {
	if(_options == null || _options.id == null) throw "BitmapFont: `load` cannot work without a file id to load from.";
	if(_options.silent == null) _options.silent = false;
	var font = new phoenix.BitmapFont(_options);
	Luxe.loadText(font.id,function(font_data) {
		font.from_string(font_data.text,font.options.onload,null,font.options.silent);
		font.options.resources.cache(font);
	});
	return font;
};
phoenix.BitmapFont.__super__ = luxe.resource.Resource;
phoenix.BitmapFont.prototype = $extend(luxe.resource.Resource.prototype,{
	from_string: function(_bitmapfont_data,_onload,_custom_pages,_silent) {
		if(_silent == null) _silent = false;
		if(_onload != null) this.onload = _onload;
		this.info = phoenix._BitmapFont.Parser.parse(_bitmapfont_data);
		if(this.info.char_count == 0 || this.info.pages.length == 0 && _custom_pages.length == 0) {
			haxe.Log.trace("i / bitmapfont / " + ("error / " + this.id + " / invalid font data specified for this font, cannot load. This font will not be valid."),{ fileName : "BitmapFont.hx", lineNumber : 116, className : "phoenix.BitmapFont", methodName : "from_string"});
			this.do_onload(false);
			return;
		}
		this.space_char = this.info.chars.get(32);
		this.load_pages(_custom_pages);
		if(HxOverrides.indexOf(phoenix.BitmapFont.generic_names,this.id,0) != -1) {
			var _warning = "warning / font loaded with a generic or no name as \"" + this.id + "\". ";
			_warning += "This could lead to bugs or confusion, or not being able to retrieve the font ";
			_warning += "later from the resources.";
			haxe.Log.trace("i / bitmapfont / " + _warning,{ fileName : "BitmapFont.hx", lineNumber : 130, className : "phoenix.BitmapFont", methodName : "from_string"});
		}
	}
	,kerning: function(_first,_second) {
		var _map = this.info.kernings.get(_first);
		if(_map != null && _map.exists(_second)) return _map.get(_second);
		return 0;
	}
	,wrap_string_to_bounds: function(_string,_bounds,_point_size,_letter_spc) {
		if(_letter_spc == null) _letter_spc = 0.0;
		if(_point_size == null) _point_size = 1.0;
		var _g = this;
		if(_bounds == null) return _string;
		var _cur_x = 0.0;
		var _idx = 0;
		var _final_str = "";
		var _spacew = _g.width_of(" ",_point_size,_letter_spc,null);
		var _strings = _string.split(" ");
		var _count = _strings.length;
		var _g1 = 0;
		while(_g1 < _strings.length) {
			var _str = _strings[_g1];
			++_g1;
			if(luxe.utils.unifill.Unifill.uIndexOf(_str,"\n",null) == -1) {
				if(_str == "") _str = " ";
				var _w = _g.width_of(_str,_point_size,_letter_spc,null);
				if(_cur_x + _w > _bounds.w) {
					_cur_x = 0;
					_final_str += "\n";
				}
				_cur_x += _w;
				_final_str += _str;
			} else {
				var _widx = 0;
				var _words = _str.split("\n");
				var _g11 = 0;
				while(_g11 < _words.length) {
					var _word = _words[_g11];
					++_g11;
					if(_word != "") {
						var _w1 = _g.width_of(_word,_point_size,_letter_spc,null);
						if(_cur_x + _w1 > _bounds.w) {
							_cur_x = 0;
							_final_str += "\n";
						}
						_cur_x += _w1;
						_final_str += _word;
					} else _cur_x = 0;
					if(_widx < _words.length - 1) {
						_final_str += "\n";
						_cur_x = 0;
					}
					_widx++;
				}
			}
			if(_idx < _count - 1) {
				_final_str += " ";
				_cur_x += _spacew + _letter_spc;
			}
			_idx++;
		}
		return _final_str;
	}
	,width_of_line: function(_string,_point_size,_letter_spc) {
		if(_letter_spc == null) _letter_spc = 0.0;
		if(_point_size == null) _point_size = 1.0;
		var _cur_x = 0.0;
		var _cur_w = 0.0;
		var _ratio = _point_size / this.info.point_size;
		var i = 0;
		var _len = luxe.utils.unifill.InternalEncoding.codePointCount(_string,0,_string.length);
		var $it0 = new luxe.utils.unifill.CodePointIter(_string);
		while( $it0.hasNext() ) {
			var _uglyph = $it0.next();
			var _index = _uglyph;
			var _char = this.info.chars.get(_index);
			if(_char == null) _char = this.space_char;
			var _cw = (_char.xoffset + Math.max(_char.width,_char.xadvance)) * _ratio;
			var _cx = _cur_x + _char.xoffset * _ratio;
			var _spacing = _char.xadvance;
			if(i < _len - 1) {
				var _next_index = luxe.utils.unifill.Unifill.uCharCodeAt(_string,i + 1);
				_spacing += this.kerning(_index,_next_index);
				if(_next_index >= 32) _spacing += _letter_spc;
			}
			_cur_x += _spacing * _ratio;
			_cur_w = Math.max(_cur_w,_cx + _cw);
			++i;
		}
		return _cur_w;
	}
	,width_of: function(_string,_point_size,_letter_spc,_line_widths) {
		if(_letter_spc == null) _letter_spc = 0.0;
		if(_point_size == null) _point_size = 1.0;
		var _max_w = 0.0;
		var _push_widths = _line_widths != null;
		var _lines = luxe.utils.unifill.Unifill.uSplit(_string,"\n");
		var _g = 0;
		while(_g < _lines.length) {
			var _line = _lines[_g];
			++_g;
			var _cur_w = this.width_of_line(_line,_point_size,_letter_spc);
			_max_w = Math.max(_max_w,_cur_w);
			if(_push_widths) _line_widths.push(_cur_w);
		}
		return _max_w;
	}
	,height_of: function(_string,_point_size,_line_spc) {
		if(_line_spc == null) _line_spc = 0.0;
		return this.height_of_lines(_string.split("\n"),_point_size,_line_spc);
	}
	,dimensions_of: function(_string,_point_size,_into,_letter_spc,_line_spc) {
		if(_line_spc == null) _line_spc = 0.0;
		if(_letter_spc == null) _letter_spc = 0.0;
		var _width = this.width_of(_string,_point_size,_letter_spc,null);
		var _height = this.height_of_lines(_string.split("\n"),_point_size,_line_spc);
		return _into.set_xy(_width,_height);
	}
	,height_of_lines: function(_lines,_point_size,_line_spc) {
		if(_line_spc == null) _line_spc = 0.0;
		var _ratio = _point_size / this.info.point_size;
		return _lines.length * ((this.info.line_height + _line_spc) * _ratio);
	}
	,default_options: function() {
		if(this.options.id == null) this.options.id = this.id;
		if(this.options.resources == null) this.options.resources = Luxe.resources;
		if(this.options.mipmaps == null) this.options.mipmaps = false;
		if(this.options.filter == null) this.options.filter = phoenix.FilterType.linear;
		if(this.options.filter_min == null) this.options.filter_min = phoenix.FilterType.linear;
		if(this.options.filter_mag == null) this.options.filter_mag = phoenix.FilterType.linear;
	}
	,do_onload: function(success) {
		if(success == null) success = true;
		this.loaded = success;
		if(this.onload != null) this.onload(this);
	}
	,page_loaded: function(t) {
		this.items_loaded++;
		if(this.items_loaded == this.items_total) this.do_onload();
	}
	,load_pages: function(_custom_pages) {
		var _g2 = this;
		var _path;
		if(this.options.texture_path == null) _path = haxe.io.Path.directory(this.id); else _path = this.options.texture_path;
		if(_custom_pages == null) {
			this.items_total = Lambda.count(this.info.pages);
			var _g = 0;
			var _g1 = this.info.pages;
			while(_g < _g1.length) {
				var _page = [_g1[_g]];
				++_g;
				var _page_path = haxe.io.Path.join([_path,_page[0].file]);
				var _t = [Luxe.loadTexture(_page_path,null,this.options.silent)];
				if(_t[0] != null) _t[0].set_onload((function(_t,_page) {
					return function(_) {
						_g2.pages.set(_page[0].id,_t[0]);
						_t[0].slot = _page[0].id;
						_t[0].set_filter(_g2.options.filter);
						_t[0].set_filter_min(_g2.options.filter_min);
						_t[0].set_filter_mag(_g2.options.filter_mag);
						if(_g2.options.mipmaps) _t[0].generate_mipmaps();
						_g2.page_loaded(_t[0]);
					};
				})(_t,_page)); else throw "BitmapFont: \"" + this.id + " (" + this.info.face + ")\" specified a page \"" + _page[0].file + "\" with a missing texture at " + _page_path;
			}
		} else {
			this.items_total = _custom_pages.length;
			var _id = 0;
			var _g3 = 0;
			while(_g3 < _custom_pages.length) {
				var _page1 = _custom_pages[_g3];
				++_g3;
				_page1.slot = _id;
				this.pages.set(_id,_page1);
				++_id;
			}
			this.do_onload();
		}
	}
	,draw_text: function(opt) {
		if(opt.batcher == null) opt.batcher = Luxe.renderer.batcher;
		opt.font = this;
		return new phoenix.geometry.TextGeometry(opt);
	}
	,toString: function() {
		return "BitmapFont(" + this.id + ")";
	}
	,__class__: phoenix.BitmapFont
});
phoenix._BitmapFont.Parser = function() { };
phoenix._BitmapFont.Parser.__name__ = ["phoenix","_BitmapFont","Parser"];
phoenix._BitmapFont.Parser.parse = function(_font_data) {
	if(_font_data.length == 0) throw "BitmapFont:Parser: _font_data is 0 length";
	var _info = { face : null, chars : new haxe.ds.IntMap(), point_size : 0, base_size : 0, char_count : 0, line_height : 0, pages : [], kernings : new haxe.ds.IntMap()};
	var _lines = _font_data.split("\n");
	if(_lines.length == 0) throw "BitmapFont; invalid font data specified for parser.";
	var _first = _lines[0];
	if((function($this) {
		var $r;
		var _this = StringTools.ltrim(_first);
		$r = HxOverrides.substr(_this,0,4);
		return $r;
	}(this)) != "info") throw "BitmapFont; invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.";
	var _g = 0;
	while(_g < _lines.length) {
		var _line = _lines[_g];
		++_g;
		var _tokens = _line.split(" ");
		var _g1 = 0;
		while(_g1 < _tokens.length) {
			var _current = _tokens[_g1];
			++_g1;
			phoenix._BitmapFont.Parser.parse_token(_current,_tokens,_info);
		}
	}
	return _info;
};
phoenix._BitmapFont.Parser.parse_token = function(_token,_tokens,_info) {
	_tokens.shift();
	var _items = phoenix._BitmapFont.Parser.tokenize_line(_tokens);
	switch(_token) {
	case "info":
		_info.face = phoenix._BitmapFont.Parser.unquote(_items.get("face"));
		_info.point_size = Std.parseFloat(_items.get("size"));
		break;
	case "common":
		_info.line_height = Std.parseFloat(_items.get("lineHeight"));
		_info.base_size = Std.parseFloat(_items.get("base"));
		break;
	case "page":
		_info.pages.push({ id : Std.parseInt(_items.get("id")), file : phoenix._BitmapFont.Parser.trim(phoenix._BitmapFont.Parser.unquote(_items.get("file")))});
		break;
	case "chars":
		_info.char_count = Std.parseInt(_items.get("count"));
		break;
	case "char":
		var _char = { id : Std.parseInt(_items.get("id")), x : Std.parseFloat(_items.get("x")), y : Std.parseFloat(_items.get("y")), width : Std.parseFloat(_items.get("width")), height : Std.parseFloat(_items.get("height")), xoffset : Std.parseFloat(_items.get("xoffset")), yoffset : Std.parseFloat(_items.get("yoffset")), xadvance : Std.parseFloat(_items.get("xadvance")), page : Std.parseInt(_items.get("page"))};
		_info.chars.set(_char.id,_char);
		break;
	case "kerning":
		var _first = Std.parseInt(_items.get("first"));
		var _second = Std.parseInt(_items.get("second"));
		var _amount = Std.parseFloat(_items.get("amount"));
		var _map = _info.kernings.get(_first);
		if(_map == null) {
			_map = new haxe.ds.IntMap();
			_info.kernings.set(_first,_map);
		}
		_map.set(_second,_amount);
		break;
	default:
	}
};
phoenix._BitmapFont.Parser.tokenize_line = function(_tokens) {
	var _item_map = new haxe.ds.StringMap();
	var _g = 0;
	while(_g < _tokens.length) {
		var _token = _tokens[_g];
		++_g;
		var _items = _token.split("=");
		_item_map.set(_items[0],_items[1]);
	}
	return _item_map;
};
phoenix._BitmapFont.Parser.trim = function(_s) {
	return StringTools.trim(_s);
};
phoenix._BitmapFont.Parser.unquote = function(_s) {
	if(_s.indexOf("\"") != -1) _s = StringTools.replace(_s,"\"","");
	return _s;
};
phoenix.ProjectionType = { __ename__ : true, __constructs__ : ["ortho","perspective","custom"] };
phoenix.ProjectionType.ortho = ["ortho",0];
phoenix.ProjectionType.ortho.toString = $estr;
phoenix.ProjectionType.ortho.__enum__ = phoenix.ProjectionType;
phoenix.ProjectionType.perspective = ["perspective",1];
phoenix.ProjectionType.perspective.toString = $estr;
phoenix.ProjectionType.perspective.__enum__ = phoenix.ProjectionType;
phoenix.ProjectionType.custom = ["custom",2];
phoenix.ProjectionType.custom.toString = $estr;
phoenix.ProjectionType.custom.__enum__ = phoenix.ProjectionType;
phoenix.Camera = function(_options) {
	this._refresh_pos = false;
	this._setup = true;
	this.look_at_dirty = true;
	this.projection_dirty = true;
	this.transform_dirty = true;
	this.minimum_zoom = 0.01;
	this.aspect = 1.5;
	this.fov_type = phoenix.FOVType.horizontal;
	this.fov = 60;
	this.far = -1000;
	this.near = 1000;
	this.zoom = 1.0;
	this.name = "camera";
	this.transform = new phoenix.Transform();
	this.options = _options;
	if(this.options == null) this.options = this.default_camera_options();
	if(this.options.camera_name != null) this.name = this.options.camera_name;
	if(this.options.projection != null) this.projection = this.options.projection; else this.projection = phoenix.ProjectionType.ortho;
	this.set_center(new phoenix.Vector(Luxe.core.screen.w / 2,Luxe.core.screen.h / 2));
	this.set_pos(new phoenix.Vector());
	if(this.options.viewport != null) this.set_viewport(this.options.viewport); else this.set_viewport(new phoenix.Rectangle(0,0,Luxe.core.screen.w,Luxe.core.screen.h));
	this.up = new phoenix.Vector(0,1,0);
	this.projection_matrix = new phoenix.Matrix();
	this.view_matrix = new phoenix.Matrix();
	this.view_matrix_inverse = new phoenix.Matrix();
	this.look_at_matrix = new phoenix.Matrix();
	this.transform.listen($bind(this,this.on_transform_cleaned));
	this.apply_default_camera_options();
	var _g = this.projection;
	switch(_g[1]) {
	case 0:
		this.set_ortho(this.options);
		break;
	case 1:
		this.set_perspective(this.options);
		break;
	case 2:
		break;
	}
	this._setup = false;
};
phoenix.Camera.__name__ = ["phoenix","Camera"];
phoenix.Camera.prototype = {
	set_ortho: function(_options) {
		this.projection = phoenix.ProjectionType.ortho;
		this._merge_options(_options);
	}
	,set_perspective: function(_options) {
		this.projection = phoenix.ProjectionType.perspective;
		this._merge_options(_options);
		this.transform.origin.set_xyz(0,0,0);
	}
	,project: function(_vector) {
		this.update_view_matrix();
		var _transform = new phoenix.Matrix().multiplyMatrices(this.projection_matrix,this.view_matrix_inverse);
		return new phoenix.Vector(_vector.x,_vector.y,_vector.z,_vector.w).applyProjection(_transform);
	}
	,unproject: function(_vector) {
		this.update_view_matrix();
		var _inverted = new phoenix.Matrix().multiplyMatrices(this.projection_matrix,this.view_matrix_inverse);
		return new phoenix.Vector(_vector.x,_vector.y,_vector.z,_vector.w).applyProjection(_inverted.getInverse(_inverted));
	}
	,screen_point_to_ray: function(_vector) {
		return new phoenix.Ray(_vector,this);
	}
	,screen_point_to_world: function(_vector) {
		if(this.projection == phoenix.ProjectionType.ortho) return this.ortho_screen_to_world(_vector); else if(this.projection == phoenix.ProjectionType.perspective) return this.screen_point_to_ray(_vector).end;
		return this.ortho_screen_to_world(_vector);
	}
	,world_point_to_screen: function(_vector,_viewport) {
		if(this.projection == phoenix.ProjectionType.ortho) return this.ortho_world_to_screen(_vector); else if(this.projection == phoenix.ProjectionType.perspective) return this.persepective_world_to_screen(_vector,_viewport);
		return this.ortho_world_to_screen(_vector);
	}
	,process: function() {
		if(this.target != null) this.update_look_at();
		this.update_projection_matrix();
		this.update_view_matrix();
		this.apply_state(2884,this.options.cull_backfaces);
		this.apply_state(2929,this.options.depth_test);
	}
	,on_transform_cleaned: function(t) {
		this.transform_dirty = true;
	}
	,update_look_at: function() {
		if(this.look_at_dirty && this.target != null) {
			this.look_at_matrix.lookAt(this.target,this.get_pos(),this.up);
			this.get_rotation().setFromRotationMatrix(this.look_at_matrix);
		}
	}
	,update_view_matrix: function() {
		this.view_matrix = this.transform.get_world().get_matrix();
		if(!this.transform_dirty) return;
		this.view_matrix_inverse = this.view_matrix.inverse();
		this.view_inverse_float32array = this.view_matrix_inverse.float32array();
		this.transform_dirty = false;
	}
	,update_projection_matrix: function() {
		if(!this.projection_dirty) return;
		var _g = this.projection;
		switch(_g[1]) {
		case 1:
			this.projection_matrix.makePerspective(this.fov_y,this.aspect,this.near,this.far);
			break;
		case 0:
			this.projection_matrix.makeOrthographic(0,this.get_viewport().w,0,this.get_viewport().h,this.near,this.far);
			break;
		case 2:
			break;
		}
		this.projection_float32array = this.projection_matrix.float32array();
		this.projection_dirty = false;
	}
	,apply_state: function(state,value) {
		if(value) Luxe.renderer.state.enable(state); else Luxe.renderer.state.disable(state);
	}
	,apply_default_camera_options: function() {
		var _g = this.projection;
		switch(_g[1]) {
		case 0:
			this.options.cull_backfaces = false;
			this.options.depth_test = false;
			break;
		case 1:
			this.options.cull_backfaces = true;
			this.options.depth_test = true;
			break;
		case 2:
			break;
		}
	}
	,default_camera_options: function() {
		return { projection : phoenix.ProjectionType.ortho, depth_test : false, cull_backfaces : false, near : 1000, far : -1000};
	}
	,ortho_screen_to_world: function(_vector) {
		this.update_view_matrix();
		return new phoenix.Vector(_vector.x,_vector.y,_vector.z,_vector.w).transform(this.view_matrix);
	}
	,ortho_world_to_screen: function(_vector) {
		this.update_view_matrix();
		return new phoenix.Vector(_vector.x,_vector.y,_vector.z,_vector.w).transform(this.view_matrix_inverse);
	}
	,persepective_world_to_screen: function(_vector,_viewport) {
		if(_viewport == null) _viewport = this.get_viewport();
		var _projected = this.project(_vector);
		var width_half = _viewport.w / 2;
		var height_half = _viewport.h / 2;
		return new phoenix.Vector(_projected.x * width_half + width_half,-(_projected.y * height_half) + height_half);
	}
	,set_target: function(_target) {
		if(_target != null) this.look_at_dirty = true;
		return this.target = _target;
	}
	,set_fov: function(_fov) {
		this.projection_dirty = true;
		this.options.fov = _fov;
		if(this.fov_type == phoenix.FOVType.horizontal) this.fov_y = 180 / Math.PI * (2 * Math.atan(Math.tan(_fov * (Math.PI / 180) / 2) * (1 / this.aspect))); else this.fov_y = _fov;
		return this.fov = _fov;
	}
	,set_fov_type: function(_fov_type) {
		this.options.fov_type = _fov_type;
		this.fov_type = _fov_type;
		this.set_fov(this.fov);
		return this.fov_type;
	}
	,set_aspect: function(_aspect) {
		this.projection_dirty = true;
		this.options.aspect = _aspect;
		return this.aspect = _aspect;
	}
	,set_near: function(_near) {
		this.projection_dirty = true;
		this.options.near = _near;
		return this.near = _near;
	}
	,set_far: function(_far) {
		this.projection_dirty = true;
		this.options.far = _far;
		return this.far = _far;
	}
	,set_zoom: function(_z) {
		var _new_zoom = _z;
		if(_new_zoom < this.minimum_zoom) _new_zoom = this.minimum_zoom;
		var _g = this.projection;
		switch(_g[1]) {
		case 0:
			this.transform.local.scale.set_x(1 / _new_zoom);
			this.transform.local.scale.set_y(1 / _new_zoom);
			this.transform.local.scale.set_z(1 / _new_zoom);
			break;
		case 1:
			break;
		case 2:
			break;
		}
		return this.zoom = _new_zoom;
	}
	,set_center: function(_p) {
		this.center = _p;
		var _g = this.projection;
		switch(_g[1]) {
		case 0:
			if(!this._refresh_pos && !this._setup) {
				this.get_pos().ignore_listeners = true;
				this.get_pos().set_x(_p.x - this.get_viewport().w / 2);
				this.get_pos().set_y(_p.y - this.get_viewport().h / 2);
				this.get_pos().ignore_listeners = false;
			}
			break;
		case 1:
			break;
		case 2:
			break;
		}
		phoenix.Vector.Listen(this.get_center(),$bind(this,this._center_changed));
		return this.get_center();
	}
	,get_center: function() {
		return this.center;
	}
	,get_pos: function() {
		return this.pos;
	}
	,get_rotation: function() {
		return this.transform.local.rotation;
	}
	,get_scale: function() {
		return this.transform.local.scale;
	}
	,get_viewport: function() {
		return this.viewport;
	}
	,set_viewport: function(_r) {
		this.projection_dirty = true;
		this.viewport = _r;
		var _g = this.projection;
		switch(_g[1]) {
		case 0:
			this.transform.set_origin(new phoenix.Vector(_r.w / 2,_r.h / 2));
			this.set_pos(this.get_pos());
			break;
		case 1:
			break;
		case 2:
			break;
		}
		return this.get_viewport();
	}
	,set_rotation: function(_q) {
		return this.transform.local.set_rotation(_q);
	}
	,set_scale: function(_s) {
		return this.transform.local.set_scale(_s);
	}
	,set_pos: function(_p) {
		this.pos = _p;
		var _g = this.projection;
		switch(_g[1]) {
		case 0:
			var _cx = this.get_center().x;
			var _cy = this.get_center().y;
			if(this.get_viewport() != null) {
				_cx = _p.x + this.get_viewport().w / 2;
				_cy = _p.y + this.get_viewport().h / 2;
			}
			this._refresh_pos = true;
			this.get_center().ignore_listeners = true;
			this.get_center().set_x(_cx);
			this.get_center().set_y(_cy);
			this.get_center().ignore_listeners = false;
			this._refresh_pos = false;
			this.transform.local.pos.set_x(_cx);
			this.transform.local.pos.set_y(_cy);
			break;
		case 1:
			this.transform.set_pos(this.get_pos());
			break;
		case 2:
			break;
		}
		phoenix.Vector.Listen(this.get_pos(),$bind(this,this._pos_changed));
		return this.get_pos();
	}
	,_merge_options: function(_options) {
		if(_options.aspect != null) {
			this.options.aspect = _options.aspect;
			this.set_aspect(this.options.aspect);
		}
		if(_options.far != null) {
			this.options.far = _options.far;
			this.set_far(this.options.far);
		}
		if(_options.fov != null) {
			this.options.fov = _options.fov;
			this.set_fov(this.options.fov);
		}
		if(_options.fov_type != null) {
			this.options.fov_type = _options.fov_type;
			this.set_fov_type(_options.fov_type);
		} else {
			this.options.fov_type = phoenix.FOVType.horizontal;
			this.set_fov_type(phoenix.FOVType.horizontal);
		}
		if(_options.near != null) {
			this.options.near = _options.near;
			this.set_near(this.options.near);
		}
		if(_options.viewport != null) {
			this.options.viewport = _options.viewport;
			this.set_viewport(this.options.viewport);
		}
		this.apply_default_camera_options();
		if(_options.cull_backfaces != null) this.options.cull_backfaces = _options.cull_backfaces;
		if(_options.depth_test != null) this.options.depth_test = _options.depth_test;
	}
	,_pos_changed: function(v) {
		this.set_pos(this.get_pos());
	}
	,_center_changed: function(v) {
		this.set_center(this.get_center());
	}
	,__class__: phoenix.Camera
	,__properties__: {set_rotation:"set_rotation",get_rotation:"get_rotation",set_scale:"set_scale",get_scale:"get_scale",set_pos:"set_pos",get_pos:"get_pos",set_target:"set_target",set_aspect:"set_aspect",set_fov_type:"set_fov_type",set_fov:"set_fov",set_far:"set_far",set_near:"set_near",set_zoom:"set_zoom",set_center:"set_center",get_center:"get_center",set_viewport:"set_viewport",get_viewport:"get_viewport"}
};
phoenix.FOVType = { __ename__ : true, __constructs__ : ["vertical","horizontal"] };
phoenix.FOVType.vertical = ["vertical",0];
phoenix.FOVType.vertical.toString = $estr;
phoenix.FOVType.vertical.__enum__ = phoenix.FOVType;
phoenix.FOVType.horizontal = ["horizontal",1];
phoenix.FOVType.horizontal.toString = $estr;
phoenix.FOVType.horizontal.__enum__ = phoenix.FOVType;
phoenix.Circle = function(_x,_y,_r) {
	if(_r == null) _r = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	this.x = _x;
	this.y = _y;
	this.r = _r;
};
phoenix.Circle.__name__ = ["phoenix","Circle"];
phoenix.Circle.prototype = {
	toString: function() {
		return "{ x:" + this.x + ", y:" + this.y + ", r:" + this.r + " }";
	}
	,point_inside: function(_p) {
		var diff = new phoenix.Vector(_p.x - this.x,_p.y - this.y);
		return Math.sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z) <= this.r;
	}
	,clone: function() {
		return new phoenix.Circle(this.x,this.y,this.r);
	}
	,set: function(_x,_y,_r) {
		var _setx = this.x;
		var _sety = this.y;
		var _setr = this.r;
		if(_x != null) _setx = _x;
		if(_y != null) _sety = _y;
		if(_r != null) _setr = _r;
		this.x = _setx;
		this.y = _sety;
		this.r = _setr;
		return this;
	}
	,__class__: phoenix.Circle
};
phoenix.Color = function(_r,_g,_b,_a) {
	if(_a == null) _a = 1.0;
	if(_b == null) _b = 1.0;
	if(_g == null) _g = 1.0;
	if(_r == null) _r = 1.0;
	this.refreshing = false;
	this.is_hsv = false;
	this.is_hsl = false;
	this.a = 1.0;
	this.b = 1.0;
	this.g = 1.0;
	this.r = 1.0;
	this.set_r(_r);
	this.set_g(_g);
	this.set_b(_b);
	this.a = _a;
};
phoenix.Color.__name__ = ["phoenix","Color"];
phoenix.Color.random = function(_include_alpha) {
	if(_include_alpha == null) _include_alpha = false;
	return new phoenix.Color(Math.random(),Math.random(),Math.random(),_include_alpha?Math.random():1.0);
};
phoenix.Color.prototype = {
	set_r: function(_r) {
		this.r = _r;
		if(!this.refreshing) {
			if(this.is_hsl) {
				var colorhsl = this;
				colorhsl.fromColor(this);
			} else if(this.is_hsv) {
				var colorhsv = this;
				colorhsv.fromColor(this);
			}
		}
		return this.r;
	}
	,set_g: function(_g) {
		this.g = _g;
		if(!this.refreshing) {
			if(this.is_hsl) {
				var colorhsl = this;
				colorhsl.fromColor(this);
			} else if(this.is_hsv) {
				var colorhsv = this;
				colorhsv.fromColor(this);
			}
		}
		return this.g;
	}
	,set_b: function(_b) {
		this.b = _b;
		if(!this.refreshing) {
			if(this.is_hsl) {
				var colorhsl = this;
				colorhsl.fromColor(this);
			} else if(this.is_hsv) {
				var colorhsv = this;
				colorhsv.fromColor(this);
			}
		}
		return this.b;
	}
	,set: function(_r,_g,_b,_a) {
		var _setr = this.r;
		var _setg = this.g;
		var _setb = this.b;
		var _seta = this.a;
		if(_r != null) _setr = _r;
		if(_g != null) _setg = _g;
		if(_b != null) _setb = _b;
		if(_a != null) _seta = _a;
		this.set_r(_setr);
		this.set_g(_setg);
		this.set_b(_setb);
		this.a = _seta;
		return this;
	}
	,maxRGB: function() {
		return Math.max(this.r,Math.max(this.g,this.b));
	}
	,minRGB: function() {
		return Math.min(this.r,Math.min(this.g,this.b));
	}
	,tween: function(_time_in_seconds,_properties_to_tween,_override) {
		if(_override == null) _override = true;
		if(_time_in_seconds == null) _time_in_seconds = 0.5;
		if(_properties_to_tween != null) {
			var _dest_r = this.r;
			var _dest_g = this.g;
			var _dest_b = this.b;
			var _dest_a = this.a;
			var _change_r = false;
			var _change_g = false;
			var _change_b = false;
			var _change_a = false;
			if(js.Boot.__instanceof(_properties_to_tween,phoenix.Color)) {
				_dest_r = _properties_to_tween.r;
				_dest_g = _properties_to_tween.g;
				_dest_b = _properties_to_tween.b;
				_dest_a = _properties_to_tween.a;
				_change_r = true;
				_change_g = true;
				_change_b = true;
				_change_a = true;
			} else {
				if(_properties_to_tween.r != null) {
					_dest_r = _properties_to_tween.r;
					_change_r = true;
				}
				if(_properties_to_tween.g != null) {
					_dest_g = _properties_to_tween.g;
					_change_g = true;
				}
				if(_properties_to_tween.b != null) {
					_dest_b = _properties_to_tween.b;
					_change_b = true;
				}
				if(_properties_to_tween.a != null) {
					_dest_a = _properties_to_tween.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_r) _properties.r = _dest_r;
			if(_change_g) _properties.g = _dest_g;
			if(_change_b) _properties.b = _dest_b;
			if(_change_a) _properties.a = _dest_a;
			return luxe.tween.Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else throw " Warning: Color.tween passed a null destination ";
	}
	,clone: function() {
		return new phoenix.Color(this.r,this.g,this.b,this.a);
	}
	,rgb: function(_rgb) {
		if(_rgb == null) _rgb = 16777215;
		this.from_int(_rgb);
		return this;
	}
	,toColorHSL: function() {
		return new phoenix.ColorHSL().fromColor(this);
	}
	,toColorHSV: function() {
		return new phoenix.ColorHSV().fromColor(this);
	}
	,fromColorHSV: function(_color_hsv) {
		var d = _color_hsv.h % 360 / 60;
		if(d < 0) d += 6;
		var hf = Math.floor(d);
		var hi = hf % 6;
		var f = d - hf;
		var v = _color_hsv.v;
		var p = _color_hsv.v * (1 - _color_hsv.s);
		var q = _color_hsv.v * (1 - f * _color_hsv.s);
		var t = _color_hsv.v * (1 - (1 - f) * _color_hsv.s);
		switch(hi) {
		case 0:
			this.set_r(v);
			this.set_g(t);
			this.set_b(p);
			break;
		case 1:
			this.set_r(q);
			this.set_g(v);
			this.set_b(p);
			break;
		case 2:
			this.set_r(p);
			this.set_g(v);
			this.set_b(t);
			break;
		case 3:
			this.set_r(p);
			this.set_g(q);
			this.set_b(v);
			break;
		case 4:
			this.set_r(t);
			this.set_g(p);
			this.set_b(v);
			break;
		case 5:
			this.set_r(v);
			this.set_g(p);
			this.set_b(q);
			break;
		}
		this.a = _color_hsv.a;
	}
	,fromColorHSL: function(_color_hsl) {
		var q = 1;
		if(_color_hsl.l < 0.5) q = _color_hsl.l * (1 + _color_hsl.s); else q = _color_hsl.l + _color_hsl.s - _color_hsl.l * _color_hsl.s;
		var p = 2 * _color_hsl.l - q;
		var hk = _color_hsl.h % 360 / 360;
		var tr = hk + 0.333333333333333315;
		var tg = hk;
		var tb = hk - 0.333333333333333315;
		var tc = [tr,tg,tb];
		var _g1 = 0;
		var _g = tc.length;
		while(_g1 < _g) {
			var n = _g1++;
			var t = tc[n];
			if(t < 0) t += 1;
			if(t > 1) t -= 1;
			if(t < 0.166666666666666657) tc[n] = p + (q - p) * 6 * t; else if(t < 0.5) tc[n] = q; else if(t < 0.66666666666666663) tc[n] = p + (q - p) * 6 * (0.66666666666666663 - t); else tc[n] = p;
		}
		this.set_r(tc[0]);
		this.set_g(tc[1]);
		this.set_b(tc[2]);
		this.a = _color_hsl.a;
		return this;
	}
	,toString: function() {
		return "{ r:" + this.r + " , g:" + this.g + " , b:" + this.b + " , a:" + this.a + " }";
	}
	,from_int: function(_i) {
		var _r = _i >> 16;
		var _g = _i >> 8 & 255;
		var _b = _i & 255;
		this.set_r(_r / 255);
		this.set_g(_g / 255);
		this.set_b(_b / 255);
	}
	,__class__: phoenix.Color
	,__properties__: {set_b:"set_b",set_g:"set_g",set_r:"set_r"}
};
phoenix.ColorHSL = function(_h,_s,_l,_a) {
	if(_a == null) _a = 1.0;
	if(_l == null) _l = 1.0;
	if(_s == null) _s = 1.0;
	if(_h == null) _h = 0.0;
	this.l = 1.0;
	this.s = 1.0;
	this.h = 0.0;
	phoenix.Color.call(this);
	this.is_hsl = true;
	this.set_h(_h);
	this.set_s(_s);
	this.set_l(_l);
	this.a = _a;
	this._refresh();
};
phoenix.ColorHSL.__name__ = ["phoenix","ColorHSL"];
phoenix.ColorHSL.__super__ = phoenix.Color;
phoenix.ColorHSL.prototype = $extend(phoenix.Color.prototype,{
	set_h: function(_h) {
		this.h = _h;
		this._refresh();
		return _h;
	}
	,set_s: function(_s) {
		this.s = _s;
		this._refresh();
		return _s;
	}
	,set_l: function(_l) {
		this.l = _l;
		this._refresh();
		return _l;
	}
	,set: function(_h,_s,_l,_a) {
		var _seth = this.h;
		var _sets = this.s;
		var _setl = this.l;
		var _seta = this.a;
		if(_h != null) _seth = _h;
		if(_s != null) _sets = _s;
		if(_l != null) _setl = _l;
		if(_a != null) _seta = _a;
		this.set_h(_seth);
		this.set_s(_sets);
		this.set_l(_setl);
		this.a = _seta;
		this._refresh();
		return this;
	}
	,tween: function(_time_in_seconds,_dest,_override) {
		if(_override == null) _override = true;
		if(_time_in_seconds == null) _time_in_seconds = 0.5;
		phoenix.Color.prototype.tween.call(this,_time_in_seconds,_dest,_override);
		if(_dest != null) {
			var _dest_h = this.h;
			var _dest_s = this.s;
			var _dest_l = this.l;
			var _dest_a = this.a;
			var _change_h = false;
			var _change_s = false;
			var _change_l = false;
			var _change_a = false;
			if(js.Boot.__instanceof(_dest,phoenix.ColorHSL)) {
				_dest_h = _dest.h;
				_dest_s = _dest.s;
				_dest_l = _dest.l;
				_dest_a = _dest.a;
				_change_h = true;
				_change_s = true;
				_change_l = true;
				_change_a = true;
			} else {
				if(_dest.h != null) {
					_dest_h = _dest.h;
					_change_h = true;
				}
				if(_dest.s != null) {
					_dest_s = _dest.s;
					_change_s = true;
				}
				if(_dest.l != null) {
					_dest_l = _dest.l;
					_change_l = true;
				}
				if(_dest.a != null) {
					_dest_a = _dest.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_h) _properties.h = _dest_h;
			if(_change_s) _properties.s = _dest_s;
			if(_change_l) _properties.l = _dest_l;
			if(_change_a) _properties.a = _dest_a;
			return luxe.tween.Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else throw " Warning: Color.tween passed a null destination ";
	}
	,_refresh: function() {
		this.refreshing = true;
		phoenix.Color.prototype.fromColorHSL.call(this,this);
		this.refreshing = false;
		return this;
	}
	,clone: function() {
		return new phoenix.ColorHSL(this.h,this.s,this.l,this.a);
	}
	,toColor: function() {
		return this._refresh();
	}
	,fromColor: function(_color) {
		var max = _color.maxRGB();
		var min = _color.minRGB();
		var add = max + min;
		var sub = max - min;
		var _h = 0;
		if(max == min) _h = 0; else if(max == _color.r) _h = (60 * (_color.g - _color.b) / sub + 360) % 360; else if(max == _color.g) _h = 60 * (_color.b - _color.r) / sub + 120; else if(max == _color.b) _h = 60 * (_color.r - _color.g) / sub + 240;
		var _l = add / 2;
		var _s;
		if(max == min) _s = 0; else if(this.l <= 0.5) _s = sub / add; else _s = sub / (2 - add);
		this.set_h(_h);
		this.set_s(_s);
		this.set_l(_l);
		this.a = _color.a;
		return this;
	}
	,toString: function() {
		return "{ h:" + this.h + " , s:" + this.s + " , l:" + this.l + " , a:" + this.a + " }";
	}
	,__class__: phoenix.ColorHSL
	,__properties__: $extend(phoenix.Color.prototype.__properties__,{set_l:"set_l",set_s:"set_s",set_h:"set_h"})
});
phoenix.ColorHSV = function(_h,_s,_v,_a) {
	if(_a == null) _a = 1.0;
	if(_v == null) _v = 1.0;
	if(_s == null) _s = 0.0;
	if(_h == null) _h = 0.0;
	this.v = 1.0;
	this.s = 0.0;
	this.h = 0.0;
	phoenix.Color.call(this);
	this.is_hsv = true;
	this.set_h(_h);
	this.set_s(_s);
	this.set_v(_v);
	this.a = _a;
	this._refresh();
};
phoenix.ColorHSV.__name__ = ["phoenix","ColorHSV"];
phoenix.ColorHSV.__super__ = phoenix.Color;
phoenix.ColorHSV.prototype = $extend(phoenix.Color.prototype,{
	set_h: function(_h) {
		this.h = _h;
		this._refresh();
		return _h;
	}
	,set_s: function(_s) {
		this.s = _s;
		this._refresh();
		return this.s;
	}
	,set_v: function(_v) {
		this.v = _v;
		this._refresh();
		return this.v;
	}
	,set: function(_h,_s,_v,_a) {
		var _seth = this.h;
		var _sets = this.s;
		var _setv = this.v;
		var _seta = this.a;
		if(_h != null) _seth = _h;
		if(_s != null) _sets = _s;
		if(_v != null) _setv = _v;
		if(_a != null) _seta = _a;
		this.set_h(_seth);
		this.set_s(_sets);
		this.set_v(_setv);
		this.a = _seta;
		this._refresh();
		return this;
	}
	,tween: function(_time_in_seconds,_dest,_override) {
		if(_override == null) _override = true;
		if(_time_in_seconds == null) _time_in_seconds = 0.5;
		phoenix.Color.prototype.tween.call(this,_time_in_seconds,_dest,_override);
		if(_dest != null) {
			var _dest_h = this.h;
			var _dest_s = this.s;
			var _dest_v = this.v;
			var _dest_a = this.a;
			var _change_h = false;
			var _change_s = false;
			var _change_v = false;
			var _change_a = false;
			if(js.Boot.__instanceof(_dest,phoenix.ColorHSV)) {
				_dest_h = _dest.h;
				_dest_s = _dest.s;
				_dest_v = _dest.v;
				_dest_a = _dest.a;
				_change_h = true;
				_change_s = true;
				_change_v = true;
				_change_a = true;
			} else {
				if(_dest.h != null) {
					_dest_h = _dest.h;
					_change_h = true;
				}
				if(_dest.s != null) {
					_dest_s = _dest.s;
					_change_s = true;
				}
				if(_dest.v != null) {
					_dest_v = _dest.v;
					_change_v = true;
				}
				if(_dest.a != null) {
					_dest_a = _dest.a;
					_change_a = true;
				}
			}
			var _properties = { };
			if(_change_h) _properties.h = _dest_h;
			if(_change_s) _properties.s = _dest_s;
			if(_change_v) _properties.v = _dest_v;
			if(_change_a) _properties.a = _dest_a;
			return luxe.tween.Actuate.tween(this,_time_in_seconds,_properties,_override);
		} else throw " Warning: Color.tween passed a null destination ";
	}
	,_refresh: function() {
		this.refreshing = true;
		phoenix.Color.prototype.fromColorHSV.call(this,this);
		this.refreshing = false;
		return this;
	}
	,clone: function() {
		return new phoenix.ColorHSV(this.h,this.s,this.v,this.a);
	}
	,toColor: function() {
		return this._refresh();
	}
	,toColorHSL: function() {
		this._refresh();
		return phoenix.Color.prototype.toColorHSL.call(this);
	}
	,fromColorHSL: function(_color_hsl) {
		_color_hsl._refresh();
		return this.fromColor(_color_hsl);
	}
	,fromColor: function(_color) {
		var max = _color.maxRGB();
		var min = _color.minRGB();
		var add = max + min;
		var sub = max - min;
		var _h = 0;
		if(max == min) _h = 0; else if(max == _color.r) _h = (60 * (_color.g - _color.b) / sub + 360) % 360; else if(max == _color.g) _h = 60 * (_color.b - _color.r) / sub + 120; else if(max == _color.b) _h = 60 * (_color.r - _color.g) / sub + 240;
		var _s;
		if(max == 0) _s = 0; else _s = 1 - min / max;
		this.set_h(_h);
		this.set_s(_s);
		this.set_v(max);
		this.a = _color.a;
		return this;
	}
	,toString: function() {
		return "{ h:" + this.h + " , s:" + this.s + " , v:" + this.v + " , a:" + this.a + " }";
	}
	,__class__: phoenix.ColorHSV
	,__properties__: $extend(phoenix.Color.prototype.__properties__,{set_v:"set_v",set_s:"set_s",set_h:"set_h"})
});
phoenix.MatrixTransform = function(p,r,s) {
	this.pos = p;
	this.rotation = r;
	this.scale = s;
};
phoenix.MatrixTransform.__name__ = ["phoenix","MatrixTransform"];
phoenix.MatrixTransform.prototype = {
	destroy: function() {
		this.pos = null;
		this.rotation = null;
		this.scale = null;
	}
	,__class__: phoenix.MatrixTransform
};
phoenix.Matrix = function(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44) {
	if(n44 == null) n44 = 1;
	if(n43 == null) n43 = 0;
	if(n42 == null) n42 = 0;
	if(n41 == null) n41 = 0;
	if(n34 == null) n34 = 0;
	if(n33 == null) n33 = 1;
	if(n32 == null) n32 = 0;
	if(n31 == null) n31 = 0;
	if(n24 == null) n24 = 0;
	if(n23 == null) n23 = 0;
	if(n22 == null) n22 = 1;
	if(n21 == null) n21 = 0;
	if(n14 == null) n14 = 0;
	if(n13 == null) n13 = 0;
	if(n12 == null) n12 = 0;
	if(n11 == null) n11 = 1;
	this.M44 = 1;
	this.M34 = 0;
	this.M24 = 0;
	this.M14 = 0;
	this.M43 = 0;
	this.M33 = 1;
	this.M23 = 0;
	this.M13 = 0;
	this.M42 = 0;
	this.M32 = 0;
	this.M22 = 1;
	this.M12 = 0;
	this.M41 = 0;
	this.M31 = 0;
	this.M21 = 0;
	this.M11 = 1;
	this.elements = new Array();
	var i = 0;
	while(i++ < 16) this.elements.push(0.0);
	this.set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44);
	var array = this.elements;
	var len = null;
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this._float32array = this1;
};
phoenix.Matrix.__name__ = ["phoenix","Matrix"];
phoenix.Matrix.prototype = {
	set: function(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44) {
		var e = this.elements;
		e[0] = n11;
		e[4] = n12;
		e[8] = n13;
		e[12] = n14;
		e[1] = n21;
		e[5] = n22;
		e[9] = n23;
		e[13] = n24;
		e[2] = n31;
		e[6] = n32;
		e[10] = n33;
		e[14] = n34;
		e[3] = n41;
		e[7] = n42;
		e[11] = n43;
		e[15] = n44;
		return this;
	}
	,toString: function() {
		var e = this.elements;
		var str = "{ 11:" + luxe.utils.Maths.fixed(e[0],3) + ", 12:" + luxe.utils.Maths.fixed(e[4],3) + ", 13:" + luxe.utils.Maths.fixed(e[8],3) + ", 14:" + luxe.utils.Maths.fixed(e[12],3) + " }, " + "{ 21:" + luxe.utils.Maths.fixed(e[1],3) + ", 22:" + luxe.utils.Maths.fixed(e[5],3) + ", 23:" + luxe.utils.Maths.fixed(e[9],3) + ", 24:" + luxe.utils.Maths.fixed(e[13],3) + " }, " + "{ 31:" + luxe.utils.Maths.fixed(e[2],3) + ", 32:" + luxe.utils.Maths.fixed(e[6],3) + ", 33:" + luxe.utils.Maths.fixed(e[10],3) + ", 34:" + luxe.utils.Maths.fixed(e[14],3) + " }, " + "{ 41:" + luxe.utils.Maths.fixed(e[3],3) + ", 42:" + luxe.utils.Maths.fixed(e[7],3) + ", 43:" + luxe.utils.Maths.fixed(e[11],3) + ", 44:" + luxe.utils.Maths.fixed(e[15],3) + " }";
		return str;
	}
	,get_M11: function() {
		return this.elements[0];
	}
	,get_M12: function() {
		return this.elements[1];
	}
	,get_M13: function() {
		return this.elements[2];
	}
	,get_M14: function() {
		return this.elements[3];
	}
	,get_M21: function() {
		return this.elements[4];
	}
	,get_M22: function() {
		return this.elements[5];
	}
	,get_M23: function() {
		return this.elements[6];
	}
	,get_M24: function() {
		return this.elements[7];
	}
	,get_M31: function() {
		return this.elements[8];
	}
	,get_M32: function() {
		return this.elements[9];
	}
	,get_M33: function() {
		return this.elements[10];
	}
	,get_M34: function() {
		return this.elements[11];
	}
	,get_M41: function() {
		return this.elements[12];
	}
	,get_M42: function() {
		return this.elements[13];
	}
	,get_M43: function() {
		return this.elements[14];
	}
	,get_M44: function() {
		return this.elements[15];
	}
	,set_M11: function(_value) {
		this.elements[0] = _value;
		return _value;
	}
	,set_M12: function(_value) {
		this.elements[1] = _value;
		return _value;
	}
	,set_M13: function(_value) {
		this.elements[2] = _value;
		return _value;
	}
	,set_M14: function(_value) {
		this.elements[3] = _value;
		return _value;
	}
	,set_M21: function(_value) {
		this.elements[4] = _value;
		return _value;
	}
	,set_M22: function(_value) {
		this.elements[5] = _value;
		return _value;
	}
	,set_M23: function(_value) {
		this.elements[6] = _value;
		return _value;
	}
	,set_M24: function(_value) {
		this.elements[7] = _value;
		return _value;
	}
	,set_M31: function(_value) {
		this.elements[8] = _value;
		return _value;
	}
	,set_M32: function(_value) {
		this.elements[9] = _value;
		return _value;
	}
	,set_M33: function(_value) {
		this.elements[10] = _value;
		return _value;
	}
	,set_M34: function(_value) {
		this.elements[11] = _value;
		return _value;
	}
	,set_M41: function(_value) {
		this.elements[12] = _value;
		return _value;
	}
	,set_M42: function(_value) {
		this.elements[13] = _value;
		return _value;
	}
	,set_M43: function(_value) {
		this.elements[14] = _value;
		return _value;
	}
	,set_M44: function(_value) {
		this.elements[15] = _value;
		return _value;
	}
	,float32array: function() {
		var array = this.elements;
		var len = null;
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		return this1;
	}
	,identity: function() {
		this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		return this;
	}
	,copy: function(m) {
		var me = m.elements;
		this.set(me[0],me[4],me[8],me[12],me[1],me[5],me[9],me[13],me[2],me[6],me[10],me[14],me[3],me[7],me[11],me[15]);
		return this;
	}
	,make2D: function(_x,_y,_scale,_rotation) {
		if(_rotation == null) _rotation = 0;
		if(_scale == null) _scale = 1;
		var theta = _rotation * 0.0174532925199432781;
		var c = Math.cos(theta);
		var s = Math.sin(theta);
		this.set(c * _scale,s * _scale,0,_x,-s * _scale,c * _scale,0,_y,0,0,1,0,0,0,0,1);
		return this;
	}
	,copyPosition: function(m) {
		this.elements[12] = m.elements[12];
		this.elements[13] = m.elements[13];
		this.elements[14] = m.elements[14];
		return this;
	}
	,getPosition: function() {
		return new phoenix.Vector(this.elements[12],this.elements[13],this.elements[14],1);
	}
	,extractRotation: function(m) {
		var _temp = new phoenix.Vector();
		var me = m.elements;
		var _scale_x = 1 / _temp.set_xyz(me[0],me[1],me[2]).get_length();
		var _scale_y = 1 / _temp.set_xyz(me[4],me[5],me[6]).get_length();
		var _scale_z = 1 / _temp.set_xyz(me[8],me[9],me[10]).get_length();
		this.elements[0] = me[0] * _scale_x;
		this.elements[1] = me[1] * _scale_x;
		this.elements[2] = me[2] * _scale_x;
		this.elements[4] = me[4] * _scale_y;
		this.elements[5] = me[5] * _scale_y;
		this.elements[6] = me[6] * _scale_y;
		this.elements[8] = me[8] * _scale_z;
		this.elements[9] = me[9] * _scale_z;
		this.elements[10] = me[10] * _scale_z;
		return this;
	}
	,makeRotationFromEuler: function(_v,_order) {
		if(_order == null) _order = 0;
		var te = this.elements;
		var x = _v.x;
		var y = _v.y;
		var z = _v.z;
		var a = Math.cos(x);
		var b = Math.sin(x);
		var c = Math.cos(y);
		var d = Math.sin(y);
		var e = Math.cos(z);
		var f = Math.sin(z);
		if(_order == 0) {
			var ae = a * e;
			var af = a * f;
			var be = b * e;
			var bf = b * f;
			te[0] = c * e;
			te[4] = -c * f;
			te[8] = d;
			te[1] = af + be * d;
			te[5] = ae - bf * d;
			te[9] = -b * c;
			te[2] = bf - ae * d;
			te[6] = be + af * d;
			te[10] = a * c;
		} else if(_order == 1) {
			var ce = c * e;
			var cf = c * f;
			var de = d * e;
			var df = d * f;
			te[0] = ce + df * b;
			te[4] = de * b - cf;
			te[8] = a * d;
			te[1] = a * f;
			te[5] = a * e;
			te[9] = -b;
			te[2] = cf * b - de;
			te[6] = df + ce * b;
			te[10] = a * c;
		} else if(_order == 2) {
			var ce1 = c * e;
			var cf1 = c * f;
			var de1 = d * e;
			var df1 = d * f;
			te[0] = ce1 - df1 * b;
			te[4] = -a * f;
			te[8] = de1 + cf1 * b;
			te[1] = cf1 + de1 * b;
			te[5] = a * e;
			te[9] = df1 - ce1 * b;
			te[2] = -a * d;
			te[6] = b;
			te[10] = a * c;
		} else if(_order == 3) {
			var ae1 = a * e;
			var af1 = a * f;
			var be1 = b * e;
			var bf1 = b * f;
			te[0] = c * e;
			te[4] = be1 * d - af1;
			te[8] = ae1 * d + bf1;
			te[1] = c * f;
			te[5] = bf1 * d + ae1;
			te[9] = af1 * d - be1;
			te[2] = -d;
			te[6] = b * c;
			te[10] = a * c;
		} else if(_order == 4) {
			var ac = a * c;
			var ad = a * d;
			var bc = b * c;
			var bd = b * d;
			te[0] = c * e;
			te[4] = bd - ac * f;
			te[8] = bc * f + ad;
			te[1] = f;
			te[5] = a * e;
			te[9] = -b * e;
			te[2] = -d * e;
			te[6] = ad * f + bc;
			te[10] = ac - bd * f;
		} else if(_order == 5) {
			var ac1 = a * c;
			var ad1 = a * d;
			var bc1 = b * c;
			var bd1 = b * d;
			te[0] = c * e;
			te[4] = -f;
			te[8] = d * e;
			te[1] = ac1 * f + bd1;
			te[5] = a * e;
			te[9] = ad1 * f - bc1;
			te[2] = bc1 * f - ad1;
			te[6] = b * e;
			te[10] = bd1 * f + ac1;
		}
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;
		return this;
	}
	,makeRotationFromQuaternion: function(q) {
		var te = this.elements;
		var x2 = q.x + q.x;
		var y2 = q.y + q.y;
		var z2 = q.z + q.z;
		var xx = q.x * x2;
		var xy = q.x * y2;
		var xz = q.x * z2;
		var yy = q.y * y2;
		var yz = q.y * z2;
		var zz = q.z * z2;
		var wx = q.w * x2;
		var wy = q.w * y2;
		var wz = q.w * z2;
		te[0] = 1 - (yy + zz);
		te[4] = xy - wz;
		te[8] = xz + wy;
		te[1] = xy + wz;
		te[5] = 1 - (xx + zz);
		te[9] = yz - wx;
		te[2] = xz - wy;
		te[6] = yz + wx;
		te[10] = 1 - (xx + yy);
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;
		return this;
	}
	,lookAt: function(_eye,_target,_up) {
		var _x = new phoenix.Vector();
		var _y = new phoenix.Vector();
		var _z = new phoenix.Vector();
		var te = this.elements;
		_z = new phoenix.Vector(_target.x - _eye.x,_target.y - _eye.y,_target.z - _eye.z).get_normalized();
		if(Math.sqrt(_z.x * _z.x + _z.y * _z.y + _z.z * _z.z) == 0) {
			_z.z = 1;
			if(_z._construct) _z.z; else {
				if(_z.listen_z != null && !_z.ignore_listeners) _z.listen_z(1);
				_z.z;
			}
		}
		_x = new phoenix.Vector(_up.y * _z.z - _up.z * _z.y,_up.z * _z.x - _up.x * _z.z,_up.x * _z.y - _up.y * _z.x).get_normalized();
		if(Math.sqrt(_x.x * _x.x + _x.y * _x.y + _x.z * _x.z) == 0) {
			var _g = _z;
			_g.set_x(_g.x + 0.0001);
			_x = new phoenix.Vector(_up.y * _z.z - _up.z * _z.y,_up.z * _z.x - _up.x * _z.z,_up.x * _z.y - _up.y * _z.x).get_normalized();
		}
		_y = new phoenix.Vector(_z.y * _x.z - _z.z * _x.y,_z.z * _x.x - _z.x * _x.z,_z.x * _x.y - _z.y * _x.x);
		te[0] = _x.x;
		te[4] = _y.x;
		te[8] = _z.x;
		te[1] = _x.y;
		te[5] = _y.y;
		te[9] = _z.y;
		te[2] = _x.z;
		te[6] = _y.z;
		te[10] = _z.z;
		return this;
	}
	,multiply: function(_m) {
		return this.multiplyMatrices(this,_m);
	}
	,multiplyMatrices: function(_a,_b) {
		var ae = _a.elements;
		var be = _b.elements;
		var te = this.elements;
		var a11 = ae[0];
		var a12 = ae[4];
		var a13 = ae[8];
		var a14 = ae[12];
		var a21 = ae[1];
		var a22 = ae[5];
		var a23 = ae[9];
		var a24 = ae[13];
		var a31 = ae[2];
		var a32 = ae[6];
		var a33 = ae[10];
		var a34 = ae[14];
		var a41 = ae[3];
		var a42 = ae[7];
		var a43 = ae[11];
		var a44 = ae[15];
		var b11 = be[0];
		var b12 = be[4];
		var b13 = be[8];
		var b14 = be[12];
		var b21 = be[1];
		var b22 = be[5];
		var b23 = be[9];
		var b24 = be[13];
		var b31 = be[2];
		var b32 = be[6];
		var b33 = be[10];
		var b34 = be[14];
		var b41 = be[3];
		var b42 = be[7];
		var b43 = be[11];
		var b44 = be[15];
		te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
		return this;
	}
	,multiplyToArray: function(_a,_b,_r) {
		var te = this.elements;
		this.multiplyMatrices(_a,_b);
		_r[0] = te[0];
		_r[1] = te[1];
		_r[2] = te[2];
		_r[3] = te[3];
		_r[4] = te[4];
		_r[5] = te[5];
		_r[6] = te[6];
		_r[7] = te[7];
		_r[8] = te[8];
		_r[9] = te[9];
		_r[10] = te[10];
		_r[11] = te[11];
		_r[12] = te[12];
		_r[13] = te[13];
		_r[14] = te[14];
		_r[15] = te[15];
		return this;
	}
	,multiplyScalar: function(_s) {
		var te = this.elements;
		te[0] *= _s;
		te[4] *= _s;
		te[8] *= _s;
		te[12] *= _s;
		te[1] *= _s;
		te[5] *= _s;
		te[9] *= _s;
		te[13] *= _s;
		te[2] *= _s;
		te[6] *= _s;
		te[10] *= _s;
		te[14] *= _s;
		te[3] *= _s;
		te[7] *= _s;
		te[11] *= _s;
		te[15] *= _s;
		return this;
	}
	,multiplyVector3Array: function(_a) {
		var v1 = new phoenix.Vector();
		var i = 0;
		var il = _a.length;
		while(i < il) {
			v1.set_x(_a[i]);
			v1.set_y(_a[i + 1]);
			v1.set_z(_a[i + 2]);
			v1.applyProjection(this);
			_a[i] = v1.x;
			_a[i + 1] = v1.y;
			_a[i + 2] = v1.z;
			i += 3;
		}
		return _a;
	}
	,determinant: function() {
		var te = this.elements;
		var n11 = te[0];
		var n12 = te[4];
		var n13 = te[8];
		var n14 = te[12];
		var n21 = te[1];
		var n22 = te[5];
		var n23 = te[9];
		var n24 = te[13];
		var n31 = te[2];
		var n32 = te[6];
		var n33 = te[10];
		var n34 = te[14];
		var n41 = te[3];
		var n42 = te[7];
		var n43 = te[11];
		var n44 = te[15];
		return n41 * (n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
	}
	,transpose: function() {
		var te = this.elements;
		var tmp;
		tmp = te[1];
		te[1] = te[4];
		te[4] = tmp;
		tmp = te[2];
		te[2] = te[8];
		te[8] = tmp;
		tmp = te[6];
		te[6] = te[9];
		te[9] = tmp;
		tmp = te[3];
		te[3] = te[12];
		te[12] = tmp;
		tmp = te[7];
		te[7] = te[13];
		te[13] = tmp;
		tmp = te[11];
		te[11] = te[14];
		te[14] = tmp;
		return this;
	}
	,flattenToArray: function(_flat) {
		if(_flat == null) {
			_flat = new Array();
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				_flat.push(0.0);
			}
		}
		var te = this.elements;
		_flat[0] = te[0];
		_flat[1] = te[1];
		_flat[2] = te[2];
		_flat[3] = te[3];
		_flat[4] = te[4];
		_flat[5] = te[5];
		_flat[6] = te[6];
		_flat[7] = te[7];
		_flat[8] = te[8];
		_flat[9] = te[9];
		_flat[10] = te[10];
		_flat[11] = te[11];
		_flat[12] = te[12];
		_flat[13] = te[13];
		_flat[14] = te[14];
		_flat[15] = te[15];
		return _flat;
	}
	,flattenToArrayOffset: function(_flat,_offset) {
		var te = this.elements;
		_flat[_offset] = te[0];
		_flat[_offset + 1] = te[1];
		_flat[_offset + 2] = te[2];
		_flat[_offset + 3] = te[3];
		_flat[_offset + 4] = te[4];
		_flat[_offset + 5] = te[5];
		_flat[_offset + 6] = te[6];
		_flat[_offset + 7] = te[7];
		_flat[_offset + 8] = te[8];
		_flat[_offset + 9] = te[9];
		_flat[_offset + 10] = te[10];
		_flat[_offset + 11] = te[11];
		_flat[_offset + 12] = te[12];
		_flat[_offset + 13] = te[13];
		_flat[_offset + 14] = te[14];
		_flat[_offset + 15] = te[15];
		return _flat;
	}
	,setPosition: function(_v) {
		var te = this.elements;
		te[12] = _v.x;
		te[13] = _v.y;
		te[14] = _v.z;
		return this;
	}
	,inverse: function() {
		return this.clone().getInverse(this);
	}
	,getInverse: function(_m) {
		var te = this.elements;
		var me = _m.elements;
		var n11 = me[0];
		var n12 = me[4];
		var n13 = me[8];
		var n14 = me[12];
		var n21 = me[1];
		var n22 = me[5];
		var n23 = me[9];
		var n24 = me[13];
		var n31 = me[2];
		var n32 = me[6];
		var n33 = me[10];
		var n34 = me[14];
		var n41 = me[3];
		var n42 = me[7];
		var n43 = me[11];
		var n44 = me[15];
		te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
		te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
		te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
		te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
		te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
		te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
		te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
		te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
		te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
		te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
		te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
		te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
		te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
		te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
		te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
		te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
		var det = me[0] * te[0] + me[1] * te[4] + me[2] * te[8] + me[3] * te[12];
		if(det == 0) {
			haxe.Log.trace("Matrix.getInverse: cant invert matrix, determinant is 0",{ fileName : "Matrix.hx", lineNumber : 689, className : "phoenix.Matrix", methodName : "getInverse"});
			this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
			this;
			return this;
		}
		this.multiplyScalar(1 / det);
		return this;
	}
	,scale: function(_v) {
		var te = this.elements;
		var _x = _v.x;
		var _y = _v.y;
		var _z = _v.z;
		te[0] *= _x;
		te[4] *= _y;
		te[8] *= _z;
		te[1] *= _x;
		te[5] *= _y;
		te[9] *= _z;
		te[2] *= _x;
		te[6] *= _y;
		te[10] *= _z;
		te[3] *= _x;
		te[7] *= _y;
		te[11] *= _z;
		return this;
	}
	,getMaxScaleOnAxis: function() {
		var te = this.elements;
		var _scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
		var _scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
		var _scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
		return Math.sqrt(Math.max(_scaleXSq,Math.max(_scaleYSq,_scaleZSq)));
	}
	,makeTranslation: function(_x,_y,_z) {
		this.set(1,0,0,_x,0,1,0,_y,0,0,1,_z,0,0,0,1);
		return this;
	}
	,makeRotationX: function(_theta) {
		var _c = Math.cos(_theta);
		var _s = Math.sin(_theta);
		this.set(1,0,0,0,0,_c,-_s,0,0,_s,_c,0,0,0,0,1);
		return this;
	}
	,makeRotationY: function(_theta) {
		var _c = Math.cos(_theta);
		var _s = Math.sin(_theta);
		this.set(_c,0,_s,0,0,1,0,0,-_s,0,_c,0,0,0,0,1);
		return this;
	}
	,makeRotationZ: function(_theta) {
		var _c = Math.cos(_theta);
		var _s = Math.sin(_theta);
		this.set(_c,-_s,0,0,_s,_c,0,0,0,0,1,0,0,0,0,1);
		return this;
	}
	,makeRotationAxis: function(_axis,_angle) {
		var _c = Math.cos(_angle);
		var _s = Math.sin(_angle);
		var _t = 1 - _c;
		var _ax = _axis.x;
		var _ay = _axis.y;
		var _az = _axis.z;
		var _tx = _t * _ax;
		var _ty = _t * _ay;
		this.set(_tx * _ax + _c,_tx * _ay - _s * _az,_tx * _az + _s * _ay,0,_tx * _ay + _s * _az,_ty * _ay + _c,_ty * _az - _s * _ax,0,_tx * _az - _s * _ay,_ty * _az + _s * _ax,_t * _az * _az + _c,0,0,0,0,1);
		return this;
	}
	,makeScale: function(_x,_y,_z) {
		this.set(_x,0,0,0,0,_y,0,0,0,0,_z,0,0,0,0,1);
		return this;
	}
	,compose_with_origin: function(_position,_origin,_quaternion,_scale) {
		this.set(1,0,0,_origin.x,0,1,0,_origin.y,0,0,1,_origin.z,0,0,0,1);
		this;
		this.scale(_scale);
		this.multiply(new phoenix.Matrix().makeRotationFromQuaternion(_quaternion));
		this.multiply(new phoenix.Matrix().makeTranslation(-_origin.x,-_origin.y,-_origin.z));
		this.multiply(new phoenix.Matrix().makeTranslation(_position.x,_position.y,_position.z));
		return this;
	}
	,compose: function(_position,_quaternion,_scale) {
		this.makeRotationFromQuaternion(_quaternion);
		this.scale(_scale);
		this.setPosition(_position);
		return this;
	}
	,decompose: function(_position,_quaternion,_scale) {
		var te = this.elements;
		var matrix = new phoenix.Matrix();
		var _ax_x = te[0];
		var _ax_y = te[1];
		var _ax_z = te[2];
		var _ay_x = te[4];
		var _ay_y = te[5];
		var _ay_z = te[6];
		var _az_x = te[8];
		var _az_y = te[9];
		var _az_z = te[10];
		var _ax_length = Math.sqrt(_ax_x * _ax_x + _ax_y * _ax_y + _ax_z * _ax_z);
		var _ay_length = Math.sqrt(_ay_x * _ay_x + _ay_y * _ay_y + _ay_z * _ay_z);
		var _az_length = Math.sqrt(_az_x * _az_x + _az_y * _az_y + _az_z * _az_z);
		if(_quaternion == null) _quaternion = new phoenix.Quaternion();
		if(_position == null) _position = new phoenix.Vector(te[12],te[13],te[14]); else {
			_position.set_x(te[12]);
			_position.set_y(te[13]);
			_position.set_z(te[14]);
		}
		if(_scale == null) _scale = new phoenix.Vector(_ax_length,_ay_length,_az_length); else {
			_scale.x = _ax_length;
			if(_scale._construct) _scale.x; else {
				if(_scale.listen_x != null && !_scale.ignore_listeners) _scale.listen_x(_ax_length);
				_scale.x;
			}
			_scale.y = _ay_length;
			if(_scale._construct) _scale.y; else {
				if(_scale.listen_y != null && !_scale.ignore_listeners) _scale.listen_y(_ay_length);
				_scale.y;
			}
			_scale.z = _az_length;
			if(_scale._construct) _scale.z; else {
				if(_scale.listen_z != null && !_scale.ignore_listeners) _scale.listen_z(_az_length);
				_scale.z;
			}
		}
		matrix.elements = this.elements.concat([]);
		var me = matrix.elements;
		me[0] /= _ax_length;
		me[1] /= _ax_length;
		me[2] /= _ax_length;
		me[4] /= _ay_length;
		me[5] /= _ay_length;
		me[6] /= _ay_length;
		me[8] /= _az_length;
		me[9] /= _az_length;
		me[10] /= _az_length;
		_quaternion.setFromRotationMatrix(matrix);
		if(this._transform == null) this._transform = new phoenix.MatrixTransform(_position,_quaternion,_scale); else {
			this._transform.pos = _position;
			this._transform.rotation = _quaternion;
			this._transform.scale = _scale;
		}
		return this._transform;
	}
	,makeFrustum: function(_left,_right,_bottom,_top,_near,_far) {
		var te = this.elements;
		var tx = 2 * _near / (_right - _left);
		var ty = 2 * _near / (_top - _bottom);
		var a = (_right + _left) / (_right - _left);
		var b = (_top + _bottom) / (_top - _bottom);
		var c = -(_far + _near) / (_far - _near);
		var d = -2 * _far * _near / (_far - _near);
		te[0] = tx;
		te[4] = 0;
		te[8] = a;
		te[12] = 0;
		te[1] = 0;
		te[5] = ty;
		te[9] = b;
		te[13] = 0;
		te[2] = 0;
		te[6] = 0;
		te[10] = c;
		te[14] = d;
		te[3] = 0;
		te[7] = 0;
		te[11] = -1;
		te[15] = 0;
		return this;
	}
	,makePerspective: function(_fov,_aspect,_near,_far) {
		var ymax = _near * Math.tan(_fov * 0.5 * 0.0174532925199432781);
		var ymin = -ymax;
		var xmin = ymin * _aspect;
		var xmax = ymax * _aspect;
		return this.makeFrustum(xmin,xmax,ymin,ymax,_near,_far);
	}
	,makeOrthographic: function(_left,_right,_top,_bottom,_near,_far) {
		var te = this.elements;
		var w = _right - _left;
		var h = _top - _bottom;
		var p = _far - _near;
		var tx = (_right + _left) / w;
		var ty = (_top + _bottom) / h;
		var tz = (_far + _near) / p;
		te[0] = 2 / w;
		te[4] = 0;
		te[8] = 0;
		te[12] = -tx;
		te[1] = 0;
		te[5] = 2 / h;
		te[9] = 0;
		te[13] = -ty;
		te[2] = 0;
		te[6] = 0;
		te[10] = -2 / p;
		te[14] = -tz;
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;
		te[15] = 1;
		return this;
	}
	,fromArray: function(_from) {
		this.elements = _from.concat([]);
	}
	,toArray: function() {
		var te = this.elements;
		return [te[0],te[1],te[2],te[3],te[4],te[5],te[6],te[7],te[8],te[9],te[10],te[11],te[12],te[13],te[14],te[15]];
	}
	,clone: function() {
		var te = this.elements;
		return new phoenix.Matrix(te[0],te[4],te[8],te[12],te[1],te[5],te[9],te[13],te[2],te[6],te[10],te[14],te[3],te[7],te[11],te[15]);
	}
	,up: function() {
		return new phoenix.Vector(this.elements[4],this.elements[5],this.elements[10]);
	}
	,down: function() {
		return new phoenix.Vector(this.elements[4],this.elements[5],this.elements[10]).get_inverted();
	}
	,left: function() {
		return new phoenix.Vector(this.elements[0],this.elements[1],this.elements[2]).get_inverted();
	}
	,right: function() {
		return new phoenix.Vector(this.elements[0],this.elements[1],this.elements[2]);
	}
	,backward: function() {
		return new phoenix.Vector(this.elements[8],this.elements[9],this.elements[10]);
	}
	,forward: function() {
		return new phoenix.Vector(this.elements[8],this.elements[9],this.elements[10]).get_inverted();
	}
	,__class__: phoenix.Matrix
	,__properties__: {set_M44:"set_M44",get_M44:"get_M44",set_M34:"set_M34",get_M34:"get_M34",set_M24:"set_M24",get_M24:"get_M24",set_M14:"set_M14",get_M14:"get_M14",set_M43:"set_M43",get_M43:"get_M43",set_M33:"set_M33",get_M33:"get_M33",set_M23:"set_M23",get_M23:"get_M23",set_M13:"set_M13",get_M13:"get_M13",set_M42:"set_M42",get_M42:"get_M42",set_M32:"set_M32",get_M32:"get_M32",set_M22:"set_M22",get_M22:"get_M22",set_M12:"set_M12",get_M12:"get_M12",set_M41:"set_M41",get_M41:"get_M41",set_M31:"set_M31",get_M31:"get_M31",set_M21:"set_M21",get_M21:"get_M21",set_M11:"set_M11",get_M11:"get_M11"}
};
phoenix.Quaternion = function(_x,_y,_z,_w) {
	if(_w == null) _w = 1;
	if(_z == null) _z = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	this.ignore_euler = false;
	this._construct = false;
	this.ignore_listeners = false;
	this.w = 0.0;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this._construct = true;
	this.x = _x;
	if(this._construct) this.x; else {
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		this.x;
	}
	this.y = _y;
	if(this._construct) this.y; else {
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		this.y;
	}
	this.z = _z;
	if(this._construct) this.z; else {
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		this.z;
	}
	this.w = _w;
	if(this._construct) this.w; else {
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		this.w;
	}
	this.euler = new phoenix.Vector();
	this._construct = false;
};
phoenix.Quaternion.__name__ = ["phoenix","Quaternion"];
phoenix.Quaternion.Add = function(_a,_b) {
	return _a.clone().add(_b);
};
phoenix.Quaternion.Multiply = function(_a,_b) {
	return _a.clone().multiply(_b);
};
phoenix.Quaternion.MultiplyScalar = function(_quaternion,_scalar) {
	return _quaternion.clone().multiplyScalar(_scalar);
};
phoenix.Quaternion.Slerp = function(_qa,_qb,_qm,_t) {
	return _qm.copy(_qa).slerp(_qb,_t);
};
phoenix.Quaternion.Dot = function(_a,_b) {
	return new phoenix.Quaternion(_a.x,_a.y,_a.z,_a.w).dot(_b);
};
phoenix.Quaternion.Listen = function(_q,listener) {
	_q.listen_x = listener;
	_q.listen_y = listener;
	_q.listen_z = listener;
	_q.listen_w = listener;
};
phoenix.Quaternion.prototype = {
	toString: function() {
		return "{ x:" + this.x + ", y:" + this.y + ", z:" + this.z + ", w:" + this.w + " }";
	}
	,set: function(_x,_y,_z,_w) {
		this.ignore_euler = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,copy: function(_quaternion) {
		this.ignore_euler = true;
		this.x = _quaternion.x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _quaternion.y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _quaternion.z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _quaternion.w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,dot: function(_other) {
		return this.x * _other.x + this.y * _other.y + this.z * _other.z + this.w * _other.w;
	}
	,setFromEuler: function(_euler,_order) {
		if(_order == null) _order = 0;
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var c1 = Math.cos(_euler.x / 2);
		var c2 = Math.cos(_euler.y / 2);
		var c3 = Math.cos(_euler.z / 2);
		var s1 = Math.sin(_euler.x / 2);
		var s2 = Math.sin(_euler.y / 2);
		var s3 = Math.sin(_euler.z / 2);
		if(_order == 0) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 1) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		} else if(_order == 2) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 3) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		} else if(_order == 4) {
			_x = s1 * c2 * c3 + c1 * s2 * s3;
			_y = c1 * s2 * c3 + s1 * c2 * s3;
			_z = c1 * c2 * s3 - s1 * s2 * c3;
			_w = c1 * c2 * c3 - s1 * s2 * s3;
		} else if(_order == 5) {
			_x = s1 * c2 * c3 - c1 * s2 * s3;
			_y = c1 * s2 * c3 - s1 * c2 * s3;
			_z = c1 * c2 * s3 + s1 * s2 * c3;
			_w = c1 * c2 * c3 + s1 * s2 * s3;
		}
		this.ignore_euler = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,setFromAxisAngle: function(_axis,_angle) {
		var _halfAngle = _angle / 2;
		var _s = Math.sin(_halfAngle);
		this.set_xyzw(_axis.x * _s,_axis.y * _s,_axis.z * _s,Math.cos(_halfAngle));
		return this;
	}
	,setFromRotationMatrix: function(_m) {
		var te = _m.elements;
		var m11 = te[0];
		var m12 = te[4];
		var m13 = te[8];
		var m21 = te[1];
		var m22 = te[5];
		var m23 = te[9];
		var m31 = te[2];
		var m32 = te[6];
		var m33 = te[10];
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var tr = m11 + m22 + m33;
		var s;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			_w = 0.25 / s;
			_x = (m32 - m23) * s;
			_y = (m13 - m31) * s;
			_z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			_w = (m32 - m23) / s;
			_x = 0.25 * s;
			_y = (m12 + m21) / s;
			_z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			_w = (m13 - m31) / s;
			_x = (m12 + m21) / s;
			_y = 0.25 * s;
			_z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			_w = (m21 - m12) / s;
			_x = (m13 + m31) / s;
			_y = (m23 + m32) / s;
			_z = 0.25 * s;
		}
		this.ignore_euler = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,inverse: function() {
		return this.conjugate().normalize();
	}
	,conjugate: function() {
		this.ignore_euler = true;
		this.x = this.x * -1;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = this.y * -1;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = this.z * -1;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		return this;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,normalize: function() {
		var l = this.length();
		if(l == 0) {
			this.ignore_euler = true;
			this.x = 0;
			if(this._construct) this.x; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
				this.x;
			}
			this.y = 0;
			if(this._construct) this.y; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
				this.y;
			}
			this.z = 0;
			if(this._construct) this.z; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
				this.z;
			}
			this.w = 1;
			if(this._construct) this.w; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
				this.w;
			}
			this.ignore_euler = false;
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		} else {
			l = 1 / l;
			this.ignore_euler = true;
			this.x = this.x * l;
			if(this._construct) this.x; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
				this.x;
			}
			this.y = this.y * l;
			if(this._construct) this.y; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
				this.y;
			}
			this.z = this.z * l;
			if(this._construct) this.z; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
				this.z;
			}
			this.w = this.w * l;
			if(this._construct) this.w; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
				this.w;
			}
			this.ignore_euler = false;
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		}
		return this;
	}
	,multiply: function(_quaternion) {
		return this.multiplyQuaternions(this,_quaternion);
	}
	,add: function(_quaternion) {
		return this.addQuaternions(this,_quaternion);
	}
	,addQuaternions: function(_a,_b) {
		this.x = _a.x + _b.x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _a.y + _b.y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _a.z + _b.z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _a.w + _b.w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		return this;
	}
	,multiplyScalar: function(_scalar) {
		var _g = this;
		_g.x = _g.x * _scalar;
		if(_g._construct) _g.x; else {
			if(_g.euler == null || _g.ignore_euler || _g._construct) null; else _g.euler.setEulerFromQuaternion(_g,null);
			if(_g.listen_x != null && !_g.ignore_listeners) _g.listen_x(_g.x);
			_g.x;
		}
		var _g1 = this;
		_g1.y = _g1.y * _scalar;
		if(_g1._construct) _g1.y; else {
			if(_g1.euler == null || _g1.ignore_euler || _g1._construct) null; else _g1.euler.setEulerFromQuaternion(_g1,null);
			if(_g1.listen_y != null && !_g1.ignore_listeners) _g1.listen_y(_g1.y);
			_g1.y;
		}
		var _g2 = this;
		_g2.z = _g2.z * _scalar;
		if(_g2._construct) _g2.z; else {
			if(_g2.euler == null || _g2.ignore_euler || _g2._construct) null; else _g2.euler.setEulerFromQuaternion(_g2,null);
			if(_g2.listen_z != null && !_g2.ignore_listeners) _g2.listen_z(_g2.z);
			_g2.z;
		}
		var _g3 = this;
		_g3.w = _g3.w * _scalar;
		if(_g3._construct) _g3.w; else {
			if(_g3.euler == null || _g3.ignore_euler || _g3._construct) null; else _g3.euler.setEulerFromQuaternion(_g3,null);
			if(_g3.listen_w != null && !_g3.ignore_listeners) _g3.listen_w(_g3.w);
			_g3.w;
		}
		return this;
	}
	,multiplyQuaternions: function(_a,_b) {
		var qax = _a.x;
		var qay = _a.y;
		var qaz = _a.z;
		var qaw = _a.w;
		var qbx = _b.x;
		var qby = _b.y;
		var qbz = _b.z;
		var qbw = _b.w;
		this.ignore_euler = true;
		this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,slerp: function(_qb,_t) {
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var cosHalfTheta = _w * _qb.w + _x * _qb.x + _y * _qb.y + _z * _qb.z;
		if(cosHalfTheta < 0) {
			this.w = -_qb.w;
			if(this._construct) this.w; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
				this.w;
			}
			this.x = -_qb.x;
			if(this._construct) this.x; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
				this.x;
			}
			this.y = -_qb.y;
			if(this._construct) this.y; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
				this.y;
			}
			this.z = -_qb.z;
			if(this._construct) this.z; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
				this.z;
			}
			cosHalfTheta = -cosHalfTheta;
		} else this.copy(_qb);
		if(cosHalfTheta >= 1.0) {
			this.ignore_euler = true;
			this.x = _x;
			if(this._construct) this.x; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
				this.x;
			}
			this.y = _y;
			if(this._construct) this.y; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
				this.y;
			}
			this.z = _z;
			if(this._construct) this.z; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
				this.z;
			}
			this.w = _w;
			if(this._construct) this.w; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
				this.w;
			}
			this.ignore_euler = false;
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			return this;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
		if(Math.abs(sinHalfTheta) < 0.001) {
			this.ignore_euler = true;
			this.x = 0.5 * (_w + this.w);
			if(this._construct) this.x; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
				this.x;
			}
			this.y = 0.5 * (_x + this.x);
			if(this._construct) this.y; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
				this.y;
			}
			this.z = 0.5 * (_y + this.y);
			if(this._construct) this.z; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
				this.z;
			}
			this.w = 0.5 * (_z + this.z);
			if(this._construct) this.w; else {
				if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
				if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
				this.w;
			}
			this.ignore_euler = false;
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			return this;
		}
		var ratioA = Math.sin((1 - _t) * halfTheta) / sinHalfTheta;
		var ratioB = Math.sin(_t * halfTheta) / sinHalfTheta;
		this.ignore_euler = true;
		this.x = _w * ratioA + this.w * ratioB;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _x * ratioA + this.x * ratioB;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _y * ratioA + this.y * ratioB;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _z * ratioA + this.z * ratioB;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,equals: function(_q) {
		return _q.x == this.x && _q.y == this.y && _q.z == this.z && _q.w == this.w;
	}
	,fromArray: function(_a) {
		this.ignore_euler = true;
		this.x = _a[0];
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _a[1];
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _a[2];
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _a[3];
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this;
	}
	,toArray: function() {
		return [this.x,this.y,this.z,this.w];
	}
	,clone: function() {
		return new phoenix.Quaternion(this.x,this.y,this.z,this.w);
	}
	,toeuler: function() {
		return new phoenix.Vector().setEulerFromQuaternion(this,null).degrees();
	}
	,update_euler: function() {
		if(this.euler == null || this.ignore_euler || this._construct) return;
		this.euler.setEulerFromQuaternion(this,null);
	}
	,set_xyzw: function(_x,_y,_z,_w) {
		this.ignore_euler = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.w = _w;
		if(this._construct) this.w; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
			this.w;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
	}
	,set_xyz: function(_x,_y,_z) {
		this.ignore_euler = true;
		this.x = _x;
		if(this._construct) this.x; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
			this.x;
		}
		this.y = _y;
		if(this._construct) this.y; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
			this.y;
		}
		this.z = _z;
		if(this._construct) this.z; else {
			if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
			if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
			this.z;
		}
		this.ignore_euler = false;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
	}
	,set_x: function(_v) {
		this.x = _v;
		if(this._construct) return this.x;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(this.x);
		return this.x;
	}
	,set_y: function(_v) {
		this.y = _v;
		if(this._construct) return this.y;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(this.y);
		return this.y;
	}
	,set_z: function(_v) {
		this.z = _v;
		if(this._construct) return this.z;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_z != null && !this.ignore_listeners) this.listen_z(this.z);
		return this.z;
	}
	,set_w: function(_v) {
		this.w = _v;
		if(this._construct) return this.w;
		if(this.euler == null || this.ignore_euler || this._construct) null; else this.euler.setEulerFromQuaternion(this,null);
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(this.w);
		return this.w;
	}
	,__class__: phoenix.Quaternion
	,__properties__: {set_w:"set_w",set_z:"set_z",set_y:"set_y",set_x:"set_x"}
};
phoenix.Ray = function(_screen_pos,_camera,_viewport) {
	if(_viewport == null) _viewport = new phoenix.Rectangle(0,0,Luxe.core.screen.w,Luxe.core.screen.h);
	if(_camera == null) throw "Camera required for a ray!";
	this.camera = _camera;
	this.viewport = _viewport;
	this.refresh(_screen_pos);
};
phoenix.Ray.__name__ = ["phoenix","Ray"];
phoenix.Ray.prototype = {
	refresh: function(_screen_pos) {
		var ndc_x = (_screen_pos.x / this.viewport.w - 0.5) * 2.0;
		var ndc_y = ((this.viewport.h - _screen_pos.y) / this.viewport.h - 0.5) * 2.0;
		var start_ndc = new phoenix.Vector(ndc_x,ndc_y,0.0,1.0);
		var end_ndc = new phoenix.Vector(ndc_x,ndc_y,1.0,1.0);
		this.origin = this.camera.unproject(start_ndc);
		this.end = this.camera.unproject(end_ndc);
		this.dir = phoenix.Vector.Subtract(this.end,this.origin);
	}
	,__class__: phoenix.Ray
};
phoenix.Rectangle = function(_x,_y,_w,_h) {
	if(_h == null) _h = 0;
	if(_w == null) _w = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	this.ignore_listeners = false;
	this.h = 0;
	this.w = 0;
	this.y = 0;
	this.x = 0;
	this.set_x(_x);
	this.set_y(_y);
	this.set_w(_w);
	this.set_h(_h);
};
phoenix.Rectangle.__name__ = ["phoenix","Rectangle"];
phoenix.Rectangle.listen = function(_r,listener) {
	_r.listen_x = listener;
	_r.listen_y = listener;
	_r.listen_w = listener;
	_r.listen_h = listener;
};
phoenix.Rectangle.prototype = {
	toString: function() {
		return "{ x:" + this.x + ", y:" + this.y + ", w:" + this.w + ", h:" + this.h + " }";
	}
	,point_inside: function(_p) {
		if(_p.x < this.x) return false;
		if(_p.y < this.y) return false;
		if(_p.x > this.x + this.w) return false;
		if(_p.y > this.y + this.h) return false;
		return true;
	}
	,overlaps: function(_other) {
		if(_other == null) return false;
		if(this.x < _other.x + _other.w && this.y < _other.y + _other.h && this.x + this.w > _other.x && this.y + this.h > _other.y) return true;
		return false;
	}
	,clone: function() {
		return new phoenix.Rectangle(this.x,this.y,this.w,this.h);
	}
	,equal: function(_other) {
		if(_other == null) return false;
		return this.x == _other.x && this.y == _other.y && this.w == _other.w && this.h == _other.h;
	}
	,copy_from: function(_rect) {
		this.set_x(_rect.x);
		this.set_y(_rect.y);
		this.set_w(_rect.w);
		this.set_h(_rect.h);
	}
	,set: function(_x,_y,_w,_h) {
		var _setx = this.x;
		var _sety = this.y;
		var _setw = this.w;
		var _seth = this.h;
		if(_x != null) _setx = _x;
		if(_y != null) _sety = _y;
		if(_w != null) _setw = _w;
		if(_h != null) _seth = _h;
		this.set_x(_setx);
		this.set_y(_sety);
		this.set_w(_setw);
		this.set_h(_seth);
		return this;
	}
	,set_x: function(_x) {
		this.x = _x;
		if(this.listen_x != null && !this.ignore_listeners) this.listen_x(_x);
		return this.x;
	}
	,set_y: function(_y) {
		this.y = _y;
		if(this.listen_y != null && !this.ignore_listeners) this.listen_y(_y);
		return this.y;
	}
	,set_w: function(_w) {
		this.w = _w;
		if(this.listen_w != null && !this.ignore_listeners) this.listen_w(_w);
		return this.w;
	}
	,set_h: function(_h) {
		this.h = _h;
		if(this.listen_h != null && !this.ignore_listeners) this.listen_h(_h);
		return this.h;
	}
	,__class__: phoenix.Rectangle
	,__properties__: {set_h:"set_h",set_w:"set_w",set_y:"set_y",set_x:"set_x"}
};
phoenix.RenderPath = function(_renderer) {
	this.renderer = _renderer;
};
phoenix.RenderPath.__name__ = ["phoenix","RenderPath"];
phoenix.RenderPath.prototype = {
	render: function(_batchers,_stats) {
		var _g = 0;
		while(_g < _batchers.length) {
			var batch = _batchers[_g];
			++_g;
			if(batch.enabled) {
				Luxe.debug.start("batch." + batch.name);
				batch.draw();
				_stats.geometry_count += batch.geometry.size();
				_stats.dynamic_batched_count += batch.dynamic_batched_count;
				_stats.static_batched_count += batch.static_batched_count;
				_stats.visible_count += batch.visible_count;
				_stats.draw_calls += batch.draw_calls;
				_stats.vert_count += batch.vert_count;
				Luxe.debug.end("batch." + batch.name);
			}
		}
	}
	,__class__: phoenix.RenderPath
};
phoenix.RenderState = function(_renderer) {
	this._last_depth_mask = true;
	this._last_line_width = 1;
	this._bound_texture_2D = null;
	this._active_texture = -1;
	this._used_program = null;
	this._current_rbo = null;
	this._current_fbo = null;
	this.depth_func = -1;
	this.depth_mask = true;
	this.depth_test = false;
	this.cull_face = false;
	this.renderer = _renderer;
	this._viewport = new phoenix.Rectangle(0,0,0,0);
};
phoenix.RenderState.__name__ = ["phoenix","RenderState"];
phoenix.RenderState.prototype = {
	enable: function(what) {
		switch(what) {
		case 2884:
			if(!this.cull_face) {
				this.cull_face = true;
				snow.modules.opengl.web.GL.enable(2884);
			}
			break;
		case 2929:
			if(Luxe.core.app.config.render.depth) {
				if(!this.depth_test) {
					this.depth_test = true;
					snow.modules.opengl.web.GL.enable(2929);
				}
			}
			break;
		}
	}
	,disable: function(what) {
		switch(what) {
		case 2884:
			if(this.cull_face) {
				this.cull_face = false;
				snow.modules.opengl.web.GL.disable(2884);
			}
			break;
		case 2929:
			if(Luxe.core.app.config.render.depth) {
				if(this.depth_test) {
					this.depth_test = false;
					snow.modules.opengl.web.GL.disable(2929);
				}
			}
			break;
		}
	}
	,depth_function: function(what) {
		if(this.depth_func != this.depth_func) {
			snow.modules.opengl.web.GL.depthFunc(what);
			this.depth_func = what;
		}
	}
	,viewport: function(x,y,w,h) {
		if(this._viewport.x != x || this._viewport.y != y || this._viewport.w != w || this._viewport.h != h) {
			this._viewport.set_x(x);
			this._viewport.set_y(y);
			this._viewport.set_w(w);
			this._viewport.set_h(h);
			var _y = this.renderer.target_size.y - (y + h);
			snow.modules.opengl.web.GL.viewport(x | 0,_y | 0,w | 0,h | 0);
		}
	}
	,bindFramebuffer: function(buffer) {
		if(this._current_fbo != buffer) {
			if(buffer == null) buffer = this.renderer.default_fbo;
			snow.modules.opengl.web.GL.bindFramebuffer(36160,buffer);
			this._current_fbo = buffer;
		}
	}
	,bindRenderbuffer: function(buffer) {
		if(this._current_rbo != buffer) {
			if(buffer == null) buffer = this.renderer.default_rbo;
			snow.modules.opengl.web.GL.bindRenderbuffer(36161,buffer);
			this._current_rbo = buffer;
		}
	}
	,useProgram: function(program) {
		if(this._used_program != program) {
			this._used_program = program;
			snow.modules.opengl.web.GL.useProgram(program);
		}
	}
	,activeTexture: function(val) {
		if(this._active_texture != val) {
			snow.modules.opengl.web.GL.activeTexture(val);
			this._active_texture = val;
		}
	}
	,bindTexture2D: function(tex) {
		if(this._bound_texture_2D != tex) {
			this._bound_texture_2D = tex;
			snow.modules.opengl.web.GL.bindTexture(3553,tex);
		}
	}
	,lineWidth: function(_width) {
		if(this._last_line_width != _width) {
			this._last_line_width = _width;
			snow.modules.opengl.web.GL.lineWidth(_width);
		}
	}
	,depthMask: function(_enable) {
		if(this._last_depth_mask != _enable) {
			this._last_depth_mask = _enable;
			snow.modules.opengl.web.GL.depthMask(_enable);
		}
	}
	,__class__: phoenix.RenderState
};
phoenix.Texture = function(_manager,_type) {
	this.slot = 0;
	this.loaded = false;
	this.height = -1;
	this.width = -1;
	this.height_actual = -1;
	this.width_actual = -1;
	if(_type == null) _type = 4;
	luxe.resource.Resource.call(this,_manager,_type);
	this._onload_handlers = new Array();
	this.id = Luxe.utils.uniqueid();
	this.set_filter(phoenix.FilterType.linear);
	this.set_clamp(phoenix.ClampType.edge);
};
phoenix.Texture.__name__ = ["phoenix","Texture"];
phoenix.Texture.load = function(_id,_onloaded,_silent) {
	if(_silent == null) _silent = false;
	var resources = Luxe.resources;
	var _exists = resources.find_texture(_id);
	if(_exists != null) {
		if(_onloaded != null) _onloaded(_exists);
		return _exists;
	}
	var texture = new phoenix.Texture(resources);
	if(_onloaded != null) texture.set_onload(_onloaded);
	snow.system.assets.AssetImage.load(Luxe.core.app.assets,_id).then(function(_asset) {
		if(_asset != null && _asset.image != null) {
			texture.from_asset(_asset);
			texture.reset();
			texture.do_onload();
			if(!_silent) haxe.Log.trace("  i / texture / " + ("loaded " + texture.id + " (" + texture.width + "x" + texture.height + ") real size (" + texture.width_actual + "x" + texture.height_actual + ")"),{ fileName : "Texture.hx", lineNumber : 150, className : "phoenix.Texture", methodName : "load"});
		} else if(!_silent) haxe.Log.trace("  i / texture / " + ("failed to load! " + _id),{ fileName : "Texture.hx", lineNumber : 155, className : "phoenix.Texture", methodName : "load"});
	});
	texture.id = _id;
	resources.cache(texture);
	return texture;
};
phoenix.Texture.load_from_resource = function(_name,_cache) {
	if(_cache == null) _cache = true;
	var texture_bytes = haxe.Resource.getBytes(_name);
	if(texture_bytes != null) {
		var texture = phoenix.Texture.load_from_bytes(_name,snow.api.buffers._Uint8Array.Uint8Array_Impl_.fromBytes(texture_bytes),_cache);
		texture_bytes = null;
		return texture;
	}
	return null;
};
phoenix.Texture.load_from_bytes = function(_id,_bytes,_cache) {
	if(_cache == null) _cache = true;
	if(_bytes != null) {
		var resources = Luxe.resources;
		var texture = new phoenix.Texture(resources);
		var _load = snow.system.assets.AssetImage.load_from_bytes(Luxe.core.app.assets,_id,_bytes);
		_load.then(function(_asset) {
			texture.from_asset(_asset);
			texture.reset();
			texture.do_onload();
			if(_cache) resources.cache(texture);
		});
		return texture;
	}
	return null;
};
phoenix.Texture.load_from_pixels = function(_id,_width,_height,_pixels,_cache) {
	if(_cache == null) _cache = true;
	if(_pixels == null) return null;
	var resources = Luxe.resources;
	var texture = new phoenix.Texture(resources);
	var _asset = snow.system.assets.AssetImage.load_from_pixels(Luxe.core.app.assets,_id,_width,_height,_pixels);
	texture.from_asset(_asset);
	texture.reset();
	texture.do_onload();
	if(_cache) resources.cache(texture);
	return texture;
};
phoenix.Texture.__super__ = luxe.resource.Resource;
phoenix.Texture.prototype = $extend(luxe.resource.Resource.prototype,{
	set_onload: function(f) {
		if(this.loaded) {
			f(this);
			return f;
		} else this._onload_handlers.push(f);
		return f;
	}
	,do_onload: function() {
		this.loaded = true;
		var _g = 0;
		var _g1 = this._onload_handlers;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f != null) f(this);
		}
		this._onload_handlers.splice(0,this._onload_handlers.length);
	}
	,toString: function() {
		return "Texture (" + Std.string(this.texture) + ") (" + this.width + "x" + this.height + ") real size(" + this.width_actual + "x" + this.height_actual + ") " + Std.string(this.filter) + " filtering. " + Std.string(this.clamp) + " clamp. id: " + this.id;
	}
	,estimated_memory: function() {
		var _bytes = this.width_actual * this.height_actual * 4;
		return Luxe.utils.bytes_to_string(_bytes);
	}
	,check_size: function() {
		var max_size = snow.modules.opengl.web.GL.getParameter(3379);
		if(this.asset.image.width_actual > max_size) throw "texture bigger than MAX_TEXTURE_SIZE (" + max_size + ") " + this.asset.id;
		if(this.asset.image.height_actual > max_size) throw "texture bigger than MAX_TEXTURE_SIZE (" + max_size + ") " + this.asset.id;
	}
	,reset: function() {
		this.texture = snow.modules.opengl.web.GL.createTexture();
		this.bind();
		snow.modules.opengl.web.GL.texImage2D(3553,0,6408,this.width_actual,this.height_actual,0,6408,5121,this.asset.image.pixels);
		this._set_filter(this.filter);
		this._set_clamp(this.clamp);
	}
	,from_asset: function(_asset) {
		if(_asset == null) throw "null asset passed to Texture.from_asset";
		this.asset = _asset;
		this.check_size();
		this.id = this.asset.id;
		this.width = this.asset.image.width;
		this.height = this.asset.image.height;
		this.width_actual = this.asset.image.width_actual;
		this.height_actual = this.asset.image.height_actual;
	}
	,generate_mipmaps: function() {
		var _g = this;
		this.set_onload(function(t) {
			_g.bind();
			snow.modules.opengl.web.GL.generateMipmap(3553);
		});
	}
	,bind: function() {
		Luxe.renderer.state.activeTexture(33984 + this.slot);
		Luxe.renderer.state.bindTexture2D(this.texture);
	}
	,get_pixel: function(_pos) {
		if(this.asset.image.pixels == null) return null;
		var x = _pos.x | 0;
		var y = _pos.y | 0;
		return { r : (function($this) {
			var $r;
			var $int = $this.asset.image.pixels[(y * $this.width + x) * 4];
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / 255.0, g : (function($this) {
			var $r;
			var int1 = $this.asset.image.pixels[(y * $this.width + x) * 4 + 1];
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) / 255.0, b : (function($this) {
			var $r;
			var int2 = $this.asset.image.pixels[(y * $this.width + x) * 4 + 2];
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / 255.0, a : (function($this) {
			var $r;
			var int3 = $this.asset.image.pixels[(y * $this.width + x) * 4 + 3];
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) / 255.0};
	}
	,set_pixel: function(_pos,_color) {
		if(this.asset.image.pixels == null) return;
		var x = _pos.x | 0;
		var y = _pos.y | 0;
		this.asset.image.pixels[(y * this.width + x) * 4] = _color.r * 255 | 0;
		this.asset.image.pixels[(y * this.width + x) * 4 + 1] = _color.g * 255 | 0;
		this.asset.image.pixels[(y * this.width + x) * 4 + 2] = _color.b * 255 | 0;
		this.asset.image.pixels[(y * this.width + x) * 4 + 3] = _color.a * 255 | 0;
	}
	,lock: function() {
		return true;
	}
	,unlock: function() {
		if(this.asset.image.pixels != null) {
			Luxe.renderer.state.bindTexture2D(this.texture);
			snow.modules.opengl.web.GL.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,this.asset.image.pixels);
			this.asset.image.pixels = null;
		}
	}
	,drop: function() {
		luxe.resource.Resource.prototype.drop.call(this);
		this.destroy();
	}
	,activate: function(att) {
	}
	,destroy: function() {
		snow.modules.opengl.web.GL.deleteTexture(this.texture);
	}
	,_set_clamp: function(_clamp) {
		switch(_clamp[1]) {
		case 0:
			snow.modules.opengl.web.GL.texParameteri(3553,10242,33071);
			snow.modules.opengl.web.GL.texParameteri(3553,10243,33071);
			break;
		case 1:
			snow.modules.opengl.web.GL.texParameteri(3553,10242,10497);
			snow.modules.opengl.web.GL.texParameteri(3553,10243,10497);
			break;
		case 2:
			snow.modules.opengl.web.GL.texParameteri(3553,10242,33648);
			snow.modules.opengl.web.GL.texParameteri(3553,10243,33648);
			break;
		}
	}
	,set_clamp: function(_clamp) {
		var _g = this;
		if(this.clamp == null) return this.clamp = _clamp;
		if(this.loaded == false) this.set_onload(function(t) {
			_g.bind();
			_g._set_clamp(_clamp);
		}); else {
			this.bind();
			this._set_clamp(_clamp);
		}
		return _clamp;
	}
	,_set_filter: function(_filter) {
		switch(_filter[1]) {
		case 1:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9729);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9729);
			break;
		case 0:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9728);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9728);
			break;
		case 2:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9984);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9984);
			break;
		case 3:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9985);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9985);
			break;
		case 4:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9986);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9986);
			break;
		case 5:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9987);
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9987);
			break;
		}
	}
	,_set_filter_min: function(_filter) {
		switch(_filter[1]) {
		case 1:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9729);
			break;
		case 0:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9728);
			break;
		case 2:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9984);
			break;
		case 3:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9985);
			break;
		case 4:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9986);
			break;
		case 5:
			snow.modules.opengl.web.GL.texParameteri(3553,10241,9987);
			break;
		}
	}
	,_set_filter_mag: function(_filter) {
		switch(_filter[1]) {
		case 1:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9729);
			break;
		case 0:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9728);
			break;
		case 2:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9984);
			break;
		case 3:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9985);
			break;
		case 4:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9986);
			break;
		case 5:
			snow.modules.opengl.web.GL.texParameteri(3553,10240,9987);
			break;
		}
	}
	,set_filter: function(_filter) {
		var _g = this;
		if(this.filter == null) return this.filter = _filter;
		if(this.loaded == false) this.set_onload(function(t) {
			_g.bind();
			_g._set_filter(_filter);
		}); else {
			this.bind();
			this._set_filter(_filter);
		}
		return this.filter = _filter;
	}
	,set_filter_min: function(_filter) {
		var _g = this;
		if(this.loaded == false) this.set_onload(function(t) {
			_g.bind();
			_g._set_filter_min(_filter);
		}); else {
			this.bind();
			this._set_filter_min(_filter);
		}
		return this.filter_min = _filter;
	}
	,set_filter_mag: function(_filter) {
		var _g = this;
		if(this.loaded == false) this.set_onload(function(t) {
			_g.bind();
			_g._set_filter_mag(_filter);
		}); else {
			this.bind();
			this._set_filter_mag(_filter);
		}
		return this.filter_mag = _filter;
	}
	,__class__: phoenix.Texture
	,__properties__: {set_clamp:"set_clamp",set_filter_mag:"set_filter_mag",set_filter_min:"set_filter_min",set_filter:"set_filter",set_onload:"set_onload"}
});
phoenix.RenderTexture = function(_manager,_size) {
	phoenix.Texture.call(this,_manager,6);
	if(_size == null) new phoenix.Vector(Luxe.core.screen.w,Luxe.core.screen.h); else _size;
	this.width = this.width_actual = _size.x | 0;
	this.height = this.height_actual = _size.y | 0;
	this.texture = snow.modules.opengl.web.GL.createTexture();
	this.bind();
	snow.modules.opengl.web.GL.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,null);
	this._set_filter(phoenix.FilterType.linear);
	this._set_clamp(phoenix.ClampType.edge);
	this.fbo = snow.modules.opengl.web.GL.createFramebuffer();
	this.bindBuffer();
	this.renderbuffer = snow.modules.opengl.web.GL.createRenderbuffer();
	this.bindRenderBuffer();
	snow.modules.opengl.web.GL.renderbufferStorage(36161,33189,this.width,this.height);
	snow.modules.opengl.web.GL.framebufferTexture2D(36160,36064,3553,this.texture,0);
	snow.modules.opengl.web.GL.framebufferRenderbuffer(36160,36096,36161,this.renderbuffer);
	var status = snow.modules.opengl.web.GL.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
		break;
	case 36055:
		throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
		break;
	case 36057:
		throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
		break;
	case 36061:
		throw "Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED";
		break;
	default:
		throw "Incomplete framebuffer: " + status;
	}
	this.unbindBuffer();
	this.unbindRenderBuffer();
	this.loaded = true;
};
phoenix.RenderTexture.__name__ = ["phoenix","RenderTexture"];
phoenix.RenderTexture.__super__ = phoenix.Texture;
phoenix.RenderTexture.prototype = $extend(phoenix.Texture.prototype,{
	destroy: function() {
		snow.modules.opengl.web.GL.deleteFramebuffer(this.fbo);
		snow.modules.opengl.web.GL.deleteRenderbuffer(this.renderbuffer);
		phoenix.Texture.prototype.destroy.call(this);
	}
	,bindBuffer: function() {
		Luxe.renderer.state.bindFramebuffer(this.fbo);
	}
	,unbindBuffer: function(_other) {
		Luxe.renderer.state.bindFramebuffer(_other);
	}
	,bindRenderBuffer: function() {
		Luxe.renderer.state.bindRenderbuffer(this.renderbuffer);
	}
	,unbindRenderBuffer: function(_other) {
		Luxe.renderer.state.bindRenderbuffer(_other);
	}
	,__class__: phoenix.RenderTexture
});
phoenix.Renderer = function(_core,_asset) {
	this.stop_count = 0;
	this.stop = false;
	this.should_clear = true;
	this.core = _core;
	this.font_asset = _asset;
	this.default_fbo = snow.modules.opengl.web.GL.getParameter(36006);
	this.default_rbo = snow.modules.opengl.web.GL.getParameter(36007);
	null;
};
phoenix.Renderer.__name__ = ["phoenix","Renderer"];
phoenix.Renderer.prototype = {
	init: function() {
		this.state = new phoenix.RenderState(this);
		this.clear_color = new phoenix.Color().rgb(1710618);
		this.stats = new phoenix.RendererStats();
		this.batchers = [];
		this.target_size = new phoenix.Vector(Luxe.core.screen.w,Luxe.core.screen.h);
		this.camera = new phoenix.Camera();
		this.default_render_path = new phoenix.RenderPath(this);
		this.render_path = this.default_render_path;
		this.create_default_shaders();
		this.batcher = new phoenix.Batcher(this,"default batcher");
		this.batcher.set_layer(1);
		this.add_batch(this.batcher);
		this.create_default_font();
		if(Luxe.core.app.config.render.depth) {
			this.state.enable(2929);
			this.state.depth_function(515);
			snow.modules.opengl.web.GL.clearDepth(1.0);
		}
		snow.modules.opengl.web.GL.enable(3042);
		snow.modules.opengl.web.GL.blendFunc(770,771);
		snow.modules.opengl.web.GL.pixelStorei(37441,0);
	}
	,destroy: function() {
		this.clear(new phoenix.Color().rgb(16729099));
	}
	,sort_batchers: function(a,b) {
		if(a.layer < b.layer) return -1;
		if(a.layer > b.layer) return 1;
		if(a.sequence < b.sequence) return -1;
		if(a.sequence > b.sequence) return 1;
		return 1;
	}
	,add_batch: function(batch) {
		this.batchers.push(batch);
		this.batchers.sort($bind(this,this.sort_batchers));
	}
	,remove_batch: function(batch) {
		HxOverrides.remove(this.batchers,batch);
	}
	,create_batcher: function(options) {
		var _new_batcher_layer = 2;
		if(options != null) {
			if(options.name == null) options.name = "batcher";
			if(options.layer == null) options.layer = _new_batcher_layer;
			if(options.camera == null) options.camera = new phoenix.Camera();
		} else options = { name : "batcher", camera : new phoenix.Camera(), layer : _new_batcher_layer};
		var _batcher = new phoenix.Batcher(this,options.name);
		_batcher.view = options.camera;
		_batcher.set_layer(options.layer);
		if(options.no_add == null || options.no_add == false) this.add_batch(_batcher);
		return _batcher;
	}
	,clear: function(_color) {
		if(_color == null) _color = this.clear_color;
		snow.modules.opengl.web.GL.clearColor(_color.r,_color.g,_color.b,_color.a);
		if(Luxe.core.app.config.render.depth) {
			snow.modules.opengl.web.GL.clear(16640);
			snow.modules.opengl.web.GL.clearDepth(1.0);
		} else snow.modules.opengl.web.GL.clear(16384);
	}
	,blend_mode: function(_src_mode,_dst_mode) {
		if(_dst_mode == null) _dst_mode = 771;
		if(_src_mode == null) _src_mode = 770;
		snow.modules.opengl.web.GL.blendFunc(_src_mode,_dst_mode);
	}
	,blend_equation: function(_equation) {
		if(_equation == null) _equation = 32774;
		snow.modules.opengl.web.GL.blendEquation(_equation);
	}
	,internal_resized: function(_w,_h) {
		if(this.get_target() == null) this.target_size.set_xy(_w,_h);
	}
	,process: function() {
		if(this.stop) return;
		if(this.should_clear) this.clear(this.clear_color);
		this.stats.batchers = this.batchers.length;
		this.stats.reset();
		this.render_path.render(this.batchers,this.stats);
	}
	,onresize: function(e) {
	}
	,set_vsync: function(_vsync) {
		Luxe.core.app.windowing.enable_vsync(_vsync);
		return this.vsync = _vsync;
	}
	,get_vsync: function() {
		return this.vsync;
	}
	,get_target: function() {
		return this.target;
	}
	,set_target: function(_target) {
		if(_target != null) {
			this.target_size.set_x(_target.width);
			this.target_size.set_y(_target.height);
			this.state.bindFramebuffer(_target.fbo);
		} else {
			this.target_size.set_x(Luxe.core.screen.w);
			this.target_size.set_y(Luxe.core.screen.h);
			this.state.bindFramebuffer();
		}
		return this.target = _target;
	}
	,create_default_shaders: function() {
		var vert = haxe.Resource.getString("default.vert.glsl");
		var frag = haxe.Resource.getString("default.frag.glsl");
		var frag_textured = haxe.Resource.getString("default.frag.textured.glsl");
		var frag_bitmapfont = haxe.Resource.getString("default.frag.bitmapfont.glsl");
		var ext = snow.modules.opengl.web.GL.current_context.getExtension("OES_standard_derivatives");
		frag = "precision mediump float;\n" + frag;
		frag_textured = "precision mediump float;\n" + frag_textured;
		frag_bitmapfont = "#extension GL_OES_standard_derivatives : enable\n#extension OES_standard_derivatives : enable\nprecision mediump float;\n" + frag_bitmapfont;
		var _plain = new phoenix.Shader(this.core.resources);
		var _textured = new phoenix.Shader(this.core.resources);
		var _font = new phoenix.Shader(this.core.resources);
		var _dvs = "default vertex shader";
		_plain.id = "default_shader";
		_textured.id = "default_shader_textured";
		_font.id = "default_shader_bitmapfont";
		_plain.from_string(vert,frag,_dvs,"default fragment shader",false);
		_textured.from_string(vert,frag_textured,_dvs,"default textured shader",false);
		_font.from_string(vert,frag_bitmapfont,_dvs,"default bitmapfont shader",false);
		this.shaders = { plain : { shader : _plain, source : { vert : vert, frag : frag}}, textured : { shader : _textured, source : { vert : vert, frag : frag_textured}}, bitmapfont : { shader : _font, source : { vert : vert, frag : frag_bitmapfont}}};
		null;
	}
	,create_default_font: function() {
		if(this.font_asset == null) throw snow.types.Error.error("failed to create the default font... font_asset was null.");
		this.font = new phoenix.BitmapFont({ id : "default", resources : this.core.resources});
		var _font_texture = phoenix.Texture.load_from_pixels(this.font_asset.id,this.font_asset.image.width_actual,this.font_asset.image.height_actual,this.font_asset.image.pixels,true);
		if(_font_texture == null) throw snow.types.Error.error("failed to create the default font... _font_texture was null.");
		_font_texture.set_filter_min(phoenix.FilterType.linear);
		this.font.from_string(haxe.Resource.getString("default.fnt"),null,[_font_texture]);
		null;
	}
	,__class__: phoenix.Renderer
	,__properties__: {set_target:"set_target",get_target:"get_target",set_vsync:"set_vsync",get_vsync:"get_vsync"}
};
phoenix.RendererStats = function() {
	this.vert_count = 0;
	this.group_count = 0;
	this.draw_calls = 0;
	this.visible_count = 0;
	this.static_batched_count = 0;
	this.dynamic_batched_count = 0;
	this.geometry_count = 0;
	this.batchers = 0;
};
phoenix.RendererStats.__name__ = ["phoenix","RendererStats"];
phoenix.RendererStats.prototype = {
	reset: function() {
		this.geometry_count = 0;
		this.dynamic_batched_count = 0;
		this.static_batched_count = 0;
		this.visible_count = 0;
		this.group_count = 0;
		this.draw_calls = 0;
		this.vert_count = 0;
	}
	,toString: function() {
		return "Renderer Statistics\n" + "\tbatcher count : " + this.batchers + "\n" + "\ttotal geometry : " + this.geometry_count + "\n" + "\tvisible geometry : " + this.visible_count + "\n" + "\tdynamic batched geometry : " + this.dynamic_batched_count + "\n" + "\tstatic batched geometry : " + this.static_batched_count + "\n" + "\ttotal draw calls : " + this.draw_calls + "\n" + "\ttotal vertices : " + this.vert_count;
	}
	,__class__: phoenix.RendererStats
};
phoenix.Shader = function(_manager) {
	this.normal_attribute = 3;
	this.color_attribute = 2;
	this.tcoord_attribute = 1;
	this.vert_attribute = 0;
	this.frag_source_name = "";
	this.vertex_source_name = "";
	this.frag_source = "";
	this.vertex_source = "";
	this.log = "";
	this.errors = "";
	luxe.resource.Resource.call(this,_manager,8);
	this.uniforms = new haxe.ds.StringMap();
	this.uniform_textures = new haxe.ds.StringMap();
};
phoenix.Shader.__name__ = ["phoenix","Shader"];
phoenix.Shader.load = function(_psid,_vsid,_onload,_silent) {
	if(_silent == null) _silent = false;
	var _shader = new phoenix.Shader(Luxe.resources);
	var _frag_shader = "";
	var _vert_shader = "";
	if(_vsid == "default" || _vsid == "") {
		_vert_shader = Luxe.renderer.shaders.plain.source.vert;
		null;
	}
	if(_psid == "default" || _psid == "") {
		_frag_shader = Luxe.renderer.shaders.plain.source.frag;
		null;
	} else if(_psid == "textured") {
		_frag_shader = Luxe.renderer.shaders.textured.source.frag;
		null;
	}
	if(_vert_shader.length == 0) Luxe.loadText(_vsid,function(_vert_asset) {
		_vert_shader = _vert_asset.text;
		if(_vert_shader.length == 0) null; else if(_frag_shader.length == 0) null; else {
			_shader.from_string(_vert_shader,_frag_shader,_vsid,_psid,false);
			Luxe.resources.cache(_shader);
			if(_onload != null) _onload(_shader);
			if(!_silent) null;
		}
	});
	if(_frag_shader.length == 0) Luxe.loadText(_psid,function(_frag_asset) {
		var prefixes = "precision mediump float;\n";
		_frag_shader = prefixes + _frag_asset.text;
		if(_vert_shader.length == 0) null; else if(_frag_shader.length == 0) null; else {
			_shader.from_string(_vert_shader,_frag_shader,_vsid,_psid,false);
			Luxe.resources.cache(_shader);
			if(_onload != null) _onload(_shader);
			if(!_silent) null;
		}
	});
	_shader.id = _psid + "|" + _vsid;
	return _shader;
};
phoenix.Shader.__super__ = luxe.resource.Resource;
phoenix.Shader.prototype = $extend(luxe.resource.Resource.prototype,{
	activate: function() {
		if(this.program != null) Luxe.renderer.state.useProgram(this.program);
	}
	,deactivate: function() {
		Luxe.renderer.state.useProgram(null);
	}
	,clone: function() {
		var _clone = new phoenix.Shader(this.manager);
		_clone.id = this.id + ".clone." + Luxe.utils.uniqueid();
		_clone.from_string(this.vertex_source,this.frag_source,this.vertex_source_name,this.frag_source_name,false);
		return _clone;
	}
	,set_int: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 1, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_float: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 2, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_vector2: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 3, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_vector3: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 4, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_vector4: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 5, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_color: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
		} else {
			var _uniform1 = { name : _name, value : _value, type : 6, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
		}
	}
	,set_texture: function(_name,_value) {
		if(this.uniforms.exists(_name)) {
			var _uniform = this.uniforms.get(_name);
			_uniform.value = _value;
			this.uniform_textures.set(_name,_value);
		} else {
			var _uniform1 = { name : _name, value : _value, type : 7, location : snow.modules.opengl.web.GL.getUniformLocation(this.program,_name)};
			this.uniforms.set(_name,_uniform1);
			this.uniform_textures.set(_name,_value);
		}
	}
	,compile: function(_type,_source,_verbose) {
		if(_verbose == null) _verbose = false;
		var _shader = snow.modules.opengl.web.GL.createShader(_type);
		snow.modules.opengl.web.GL.shaderSource(_shader,_source);
		snow.modules.opengl.web.GL.compileShader(_shader);
		var shader_log = "";
		if(_verbose) {
			shader_log = snow.modules.opengl.web.GL.getShaderInfoLog(_shader);
			if(shader_log.length > 0) {
				this.log += "\n\t :: start -- (" + (_type == 35632?"fragment":"vertex") + ") Shader compile log -- " + this.id + "\n";
				this.log += "\t\t" + shader_log + "\n";
				this.log += "\t :: end -- (" + (_type == 35632?"fragment":"vertex") + ") Shader compile log -- " + this.id;
			}
		}
		if(snow.modules.opengl.web.GL.getShaderParameter(_shader,35713) == 0) {
			var _info;
			if(_type == 35632) _info = "fragment"; else _info = "vertex";
			if(_type == 35632) _info += "(" + this.frag_source_name + ")"; else _info += "(" + this.vertex_source_name + ")";
			this.errors += "\tFailed to compile shader (" + _info + ") : \n";
			if(!_verbose) shader_log = snow.modules.opengl.web.GL.getShaderInfoLog(_shader);
			this.errors += "\t\t" + shader_log;
			snow.modules.opengl.web.GL.deleteShader(_shader);
			_shader = null;
			return null;
		}
		return _shader;
	}
	,link: function() {
		this.program = snow.modules.opengl.web.GL.createProgram();
		snow.modules.opengl.web.GL.attachShader(this.program,this.vert_shader);
		snow.modules.opengl.web.GL.attachShader(this.program,this.frag_shader);
		snow.modules.opengl.web.GL.bindAttribLocation(this.program,this.vert_attribute,"vertexPosition");
		snow.modules.opengl.web.GL.bindAttribLocation(this.program,this.tcoord_attribute,"vertexTCoord");
		snow.modules.opengl.web.GL.bindAttribLocation(this.program,this.color_attribute,"vertexColor");
		snow.modules.opengl.web.GL.bindAttribLocation(this.program,this.normal_attribute,"vertexNormal");
		snow.modules.opengl.web.GL.linkProgram(this.program);
		if(snow.modules.opengl.web.GL.getProgramParameter(this.program,35714) == 0) {
			this.errors += "\tFailed to link shader program:";
			this.add_error("\t\t" + snow.modules.opengl.web.GL.getProgramInfoLog(this.program));
			snow.modules.opengl.web.GL.deleteProgram(this.program);
			this.program = null;
			return;
		}
		this.activate();
		this.projectionmatrix_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"projectionMatrix");
		this.modelviewmatrix_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"modelViewMatrix");
		this.tex0_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex0");
		this.tex1_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex1");
		this.tex2_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex2");
		this.tex3_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex3");
		this.tex4_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex4");
		this.tex5_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex5");
		this.tex6_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex6");
		this.tex7_attribute = snow.modules.opengl.web.GL.getUniformLocation(this.program,"tex7");
	}
	,drop: function() {
		luxe.resource.Resource.prototype.drop.call(this);
		this.destroy();
	}
	,destroy: function() {
		if(this.vert_shader != null) snow.modules.opengl.web.GL.deleteShader(this.vert_shader);
		if(this.frag_shader != null) snow.modules.opengl.web.GL.deleteShader(this.frag_shader);
		if(this.program != null) snow.modules.opengl.web.GL.deleteProgram(this.program);
	}
	,from_string: function(_vertex_source,_fragment_source,_vertex_name,_frag_name,_verbose) {
		if(_verbose == null) _verbose = false;
		if(_frag_name == null) _frag_name = "";
		if(_vertex_name == null) _vertex_name = "";
		var _g = this;
		this.destroy();
		this.frag_source = _fragment_source;
		this.vertex_source = _vertex_source;
		this.frag_source_name = _frag_name;
		this.vertex_source_name = _vertex_name;
		this.vert_shader = this.compile(35633,this.vertex_source,_verbose);
		this.frag_shader = this.compile(35632,this.frag_source,_verbose);
		if(this.vert_shader == null || this.frag_shader == null) {
			haxe.Log.trace("   i / shader / " + ("failed to create shader : " + _g.id + "\n\n" + _g.log + "\n" + _g.errors),{ fileName : "Shader.hx", lineNumber : 419, className : "phoenix.Shader", methodName : "from_string"});
			throw ":( shader errors ";
		}
		this.link();
		if(this.program == null) {
			haxe.Log.trace("   i / shader / " + ("failed to create shader : " + _g.id + "\n\n" + _g.log + "\n" + _g.errors),{ fileName : "Shader.hx", lineNumber : 419, className : "phoenix.Shader", methodName : "from_string"});
			throw ":( shader errors ";
		} else if(_verbose && this.log.length > 0) haxe.Log.trace("   i / shader / " + this.log,{ fileName : "Shader.hx", lineNumber : 436, className : "phoenix.Shader", methodName : "from_string"});
		if(this.program == null) return false;
		return true;
	}
	,toString: function() {
		return "Shader(" + this.id + ") vert:" + this.vertex_source_name + " / frag: " + this.frag_source_name;
	}
	,apply_uniforms: function() {
		snow.modules.opengl.web.GL.uniform1i(this.tex0_attribute,0);
		snow.modules.opengl.web.GL.uniform1i(this.tex1_attribute,1);
		snow.modules.opengl.web.GL.uniform1i(this.tex2_attribute,2);
		snow.modules.opengl.web.GL.uniform1i(this.tex3_attribute,3);
		snow.modules.opengl.web.GL.uniform1i(this.tex4_attribute,4);
		snow.modules.opengl.web.GL.uniform1i(this.tex5_attribute,5);
		snow.modules.opengl.web.GL.uniform1i(this.tex6_attribute,6);
		snow.modules.opengl.web.GL.uniform1i(this.tex7_attribute,7);
		var $it0 = this.uniforms.iterator();
		while( $it0.hasNext() ) {
			var uniform = $it0.next();
			var _g = uniform.type;
			switch(_g) {
			case 1:
				this.apply_int(uniform.location,uniform.value);
				break;
			case 2:
				this.apply_float(uniform.location,uniform.value);
				break;
			case 3:
				this.apply_vec2(uniform.location,uniform.value);
				break;
			case 4:
				this.apply_vec3(uniform.location,uniform.value);
				break;
			case 5:
				this.apply_vec4(uniform.location,uniform.value);
				break;
			case 6:
				this.apply_color(uniform.location,uniform.value);
				break;
			case 7:
				this.apply_texture(uniform.location,uniform.value);
				break;
			case 0:
				break;
			}
		}
	}
	,location: function(_name) {
		return snow.modules.opengl.web.GL.getUniformLocation(this.program,_name);
	}
	,apply_int: function(_location,_int) {
		snow.modules.opengl.web.GL.uniform1i(_location,_int);
	}
	,apply_float: function(_location,_float) {
		snow.modules.opengl.web.GL.uniform1f(_location,_float);
	}
	,apply_vec2: function(_location,_vec) {
		snow.modules.opengl.web.GL.uniform2f(_location,_vec.x,_vec.y);
	}
	,apply_vec3: function(_location,_vec) {
		snow.modules.opengl.web.GL.uniform3f(_location,_vec.x,_vec.y,_vec.z);
	}
	,apply_vec4: function(_location,_vec) {
		snow.modules.opengl.web.GL.uniform4f(_location,_vec.x,_vec.y,_vec.z,_vec.w);
	}
	,apply_color: function(_location,_color) {
		snow.modules.opengl.web.GL.uniform4f(_location,_color.r,_color.g,_color.b,_color.a);
	}
	,apply_texture: function(_location,_tex) {
		snow.modules.opengl.web.GL.uniform1i(_location,_tex.slot);
		_tex.bind();
	}
	,add_log: function(_log) {
		this.log += _log;
	}
	,add_error: function(_error) {
		this.errors += _error;
	}
	,__class__: phoenix.Shader
});
phoenix._Shader = {};
phoenix._Shader.UniformType_Impl_ = function() { };
phoenix._Shader.UniformType_Impl_.__name__ = ["phoenix","_Shader","UniformType_Impl_"];
phoenix.FilterType = { __ename__ : true, __constructs__ : ["nearest","linear","mip_nearest_nearest","mip_linear_nearest","mip_nearest_linear","mip_linear_linear"] };
phoenix.FilterType.nearest = ["nearest",0];
phoenix.FilterType.nearest.toString = $estr;
phoenix.FilterType.nearest.__enum__ = phoenix.FilterType;
phoenix.FilterType.linear = ["linear",1];
phoenix.FilterType.linear.toString = $estr;
phoenix.FilterType.linear.__enum__ = phoenix.FilterType;
phoenix.FilterType.mip_nearest_nearest = ["mip_nearest_nearest",2];
phoenix.FilterType.mip_nearest_nearest.toString = $estr;
phoenix.FilterType.mip_nearest_nearest.__enum__ = phoenix.FilterType;
phoenix.FilterType.mip_linear_nearest = ["mip_linear_nearest",3];
phoenix.FilterType.mip_linear_nearest.toString = $estr;
phoenix.FilterType.mip_linear_nearest.__enum__ = phoenix.FilterType;
phoenix.FilterType.mip_nearest_linear = ["mip_nearest_linear",4];
phoenix.FilterType.mip_nearest_linear.toString = $estr;
phoenix.FilterType.mip_nearest_linear.__enum__ = phoenix.FilterType;
phoenix.FilterType.mip_linear_linear = ["mip_linear_linear",5];
phoenix.FilterType.mip_linear_linear.toString = $estr;
phoenix.FilterType.mip_linear_linear.__enum__ = phoenix.FilterType;
phoenix.ClampType = { __ename__ : true, __constructs__ : ["edge","repeat","mirror"] };
phoenix.ClampType.edge = ["edge",0];
phoenix.ClampType.edge.toString = $estr;
phoenix.ClampType.edge.__enum__ = phoenix.ClampType;
phoenix.ClampType.repeat = ["repeat",1];
phoenix.ClampType.repeat.toString = $estr;
phoenix.ClampType.repeat.__enum__ = phoenix.ClampType;
phoenix.ClampType.mirror = ["mirror",2];
phoenix.ClampType.mirror.toString = $estr;
phoenix.ClampType.mirror.__enum__ = phoenix.ClampType;
phoenix.Transform = function() {
	this._destroying = false;
	this._cleaning = false;
	this._setup = true;
	this.dirty = true;
	luxe.ID.call(this,"transform");
	this.set_local(new phoenix.Spatial());
	this.set_world(new phoenix.Spatial());
	this._origin_undo_matrix = new phoenix.Matrix();
	this._pos_matrix = new phoenix.Matrix();
	this._rotation_matrix = new phoenix.Matrix();
	this.set_origin(new phoenix.Vector());
	this.local.pos_changed = $bind(this,this.on_local_pos_change);
	this.local.rotation_changed = $bind(this,this.on_local_rotation_change);
	this.local.scale_changed = $bind(this,this.on_local_scale_change);
	this._setup = false;
};
phoenix.Transform.__name__ = ["phoenix","Transform"];
phoenix.Transform.__super__ = luxe.ID;
phoenix.Transform.prototype = $extend(luxe.ID.prototype,{
	destroy: function() {
		this._destroying = true;
		if(this.parent != null) this.parent.unlisten($bind(this,this.on_parent_cleaned));
		this._clean_handlers = null;
		this._dirty_handlers = null;
		this._pos_handlers = null;
		this._rotation_handlers = null;
		this._scale_handlers = null;
		this._origin_handlers = null;
		this._parent_handlers = null;
		this.local.destroy();
		((function($this) {
			var $r;
			if(!$this._destroying) {
				if($this.parent != null) {
					if($this.parent.dirty) $this.parent.clean();
				}
				if($this.dirty && !$this._cleaning) {
					if(!$this.dirty) null; else {
						$this._cleaning = true;
						$this._pos_matrix.makeTranslation($this.local.pos.x,$this.local.pos.y,$this.local.pos.z);
						$this._rotation_matrix.makeRotationFromQuaternion($this.local.rotation);
						$this._origin_undo_matrix.makeTranslation(-$this.origin.x,-$this.origin.y,-$this.origin.z);
						$this.local.matrix.makeTranslation($this.origin.x,$this.origin.y,$this.origin.z);
						$this.local.matrix.scale($this.local.scale);
						$this.local.matrix.multiply($this._rotation_matrix);
						$this.local.matrix.setPosition($this.local.pos);
						$this.local.matrix.multiply($this._origin_undo_matrix);
						if($this.parent != null) $this.get_world().set_matrix($this.get_world().get_matrix().multiplyMatrices($this.parent.get_world().get_matrix(),$this.local.matrix)); else $this.get_world().set_matrix($this.local.matrix.clone());
						$this.get_world().decompose(false);
						$this.dirty = false;
						if($this.dirty && !$this._setup && $this._dirty_handlers != null && $this._dirty_handlers.length > 0) $this.propagate_dirty();
						$this.dirty;
						$this._cleaning = false;
						if($this._clean_handlers != null && $this._clean_handlers.length > 0) $this.propagate_clean();
					}
				}
			}
			$r = $this.world;
			return $r;
		}(this))).destroy();
		this.local = null;
		this.world = null;
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		this.origin = null;
		if(this._origin_handlers != null && this._origin_handlers.length > 0) this.propagate_origin(this.origin);
		this.origin;
		this._origin_undo_matrix = null;
		this._pos_matrix = null;
		this._rotation_matrix = null;
	}
	,set_dirty: function(_dirty) {
		this.dirty = _dirty;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		return this.dirty;
	}
	,on_local_pos_change: function(v) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		if(this._pos_handlers != null && this._pos_handlers.length > 0) this.propagate_pos(v);
	}
	,on_local_rotation_change: function(r) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		if(this._rotation_handlers != null && this._rotation_handlers.length > 0) this.propagate_rotation(r);
	}
	,on_local_scale_change: function(s) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		if(this._scale_handlers != null && this._scale_handlers.length > 0) this.propagate_scale(s);
	}
	,on_parent_cleaned: function(p) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
	}
	,get_local: function() {
		return this.local;
	}
	,set_local: function(l) {
		if(l != null) {
			this.dirty = true;
			if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
			this.dirty;
			l.pos_changed = $bind(this,this.on_local_pos_change);
			l.rotation_changed = $bind(this,this.on_local_rotation_change);
			l.scale_changed = $bind(this,this.on_local_scale_change);
		}
		return this.local = l;
	}
	,get_world: function() {
		if(!this._destroying) {
			if(this.parent != null) {
				if(this.parent.dirty) this.parent.clean();
			}
			if(this.dirty && !this._cleaning) {
				if(!this.dirty) null; else {
					this._cleaning = true;
					this._pos_matrix.makeTranslation(this.local.pos.x,this.local.pos.y,this.local.pos.z);
					this._rotation_matrix.makeRotationFromQuaternion(this.local.rotation);
					this._origin_undo_matrix.makeTranslation(-this.origin.x,-this.origin.y,-this.origin.z);
					this.local.matrix.makeTranslation(this.origin.x,this.origin.y,this.origin.z);
					this.local.matrix.scale(this.local.scale);
					this.local.matrix.multiply(this._rotation_matrix);
					this.local.matrix.setPosition(this.local.pos);
					this.local.matrix.multiply(this._origin_undo_matrix);
					if(this.parent != null) this.get_world().set_matrix(this.get_world().get_matrix().multiplyMatrices(this.parent.get_world().get_matrix(),this.local.matrix)); else this.get_world().set_matrix(this.local.matrix.clone());
					this.get_world().decompose(false);
					this.dirty = false;
					if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
					this.dirty;
					this._cleaning = false;
					if(this._clean_handlers != null && this._clean_handlers.length > 0) this.propagate_clean();
				}
			}
		}
		return this.world;
	}
	,clean_check: function() {
		if(this.parent != null) {
			if(this.parent.dirty) this.parent.clean();
		}
		if(this.dirty && !this._cleaning) {
			if(!this.dirty) null; else {
				this._cleaning = true;
				this._pos_matrix.makeTranslation(this.local.pos.x,this.local.pos.y,this.local.pos.z);
				this._rotation_matrix.makeRotationFromQuaternion(this.local.rotation);
				this._origin_undo_matrix.makeTranslation(-this.origin.x,-this.origin.y,-this.origin.z);
				this.local.matrix.makeTranslation(this.origin.x,this.origin.y,this.origin.z);
				this.local.matrix.scale(this.local.scale);
				this.local.matrix.multiply(this._rotation_matrix);
				this.local.matrix.setPosition(this.local.pos);
				this.local.matrix.multiply(this._origin_undo_matrix);
				if(this.parent != null) this.get_world().set_matrix(this.get_world().get_matrix().multiplyMatrices(this.parent.get_world().get_matrix(),this.local.matrix)); else this.get_world().set_matrix(this.local.matrix.clone());
				this.get_world().decompose(false);
				this.dirty = false;
				if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
				this.dirty;
				this._cleaning = false;
				if(this._clean_handlers != null && this._clean_handlers.length > 0) this.propagate_clean();
			}
		}
	}
	,clean: function() {
		if(!this.dirty) return;
		this._cleaning = true;
		this._pos_matrix.makeTranslation(this.local.pos.x,this.local.pos.y,this.local.pos.z);
		this._rotation_matrix.makeRotationFromQuaternion(this.local.rotation);
		this._origin_undo_matrix.makeTranslation(-this.origin.x,-this.origin.y,-this.origin.z);
		this.local.matrix.makeTranslation(this.origin.x,this.origin.y,this.origin.z);
		this.local.matrix.scale(this.local.scale);
		this.local.matrix.multiply(this._rotation_matrix);
		this.local.matrix.setPosition(this.local.pos);
		this.local.matrix.multiply(this._origin_undo_matrix);
		if(this.parent != null) this.get_world().set_matrix(this.get_world().get_matrix().multiplyMatrices(this.parent.get_world().get_matrix(),this.local.matrix)); else this.get_world().set_matrix(this.local.matrix.clone());
		this.get_world().decompose(false);
		this.dirty = false;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		this._cleaning = false;
		if(this._clean_handlers != null && this._clean_handlers.length > 0) this.propagate_clean();
	}
	,toString: function() {
		return "Transform (" + this.id + ")";
	}
	,get_origin: function() {
		return this.origin;
	}
	,set_origin: function(o) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		this.origin = o;
		if(this._origin_handlers != null && this._origin_handlers.length > 0) this.propagate_origin(this.origin);
		return this.origin;
	}
	,set_world: function(w) {
		if(w == null) return this.world = w;
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		return this.world = w;
	}
	,get_parent: function() {
		return this.parent;
	}
	,set_parent: function(_p) {
		this.dirty = true;
		if(this.dirty && !this._setup && this._dirty_handlers != null && this._dirty_handlers.length > 0) this.propagate_dirty();
		this.dirty;
		if(this.parent != null) this.parent.unlisten($bind(this,this.on_parent_cleaned));
		this.parent = _p;
		if(this._parent_handlers != null && this._parent_handlers.length > 0) this.propagate_parent(this.parent);
		if(this.parent != null) this.parent.listen($bind(this,this.on_parent_cleaned));
		return this.parent;
	}
	,get_pos: function() {
		return this.local.pos;
	}
	,get_rotation: function() {
		return this.local.rotation;
	}
	,get_scale: function() {
		return this.local.scale;
	}
	,set_pos: function(value) {
		return this.local.set_pos(value);
	}
	,set_rotation: function(value) {
		return this.local.set_rotation(value);
	}
	,set_scale: function(value) {
		return this.local.set_scale(value);
	}
	,propagate_clean: function() {
		var _g = 0;
		var _g1 = this._clean_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(this);
		}
	}
	,propagate_dirty: function() {
		var _g = 0;
		var _g1 = this._dirty_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(this);
		}
	}
	,propagate_pos: function(_pos) {
		var _g = 0;
		var _g1 = this._pos_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(_pos);
		}
	}
	,propagate_rotation: function(_rotation) {
		var _g = 0;
		var _g1 = this._rotation_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(_rotation);
		}
	}
	,propagate_scale: function(_scale) {
		var _g = 0;
		var _g1 = this._scale_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(_scale);
		}
	}
	,propagate_origin: function(_origin) {
		var _g = 0;
		var _g1 = this._origin_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(_origin);
		}
	}
	,propagate_parent: function(_parent) {
		var _g = 0;
		var _g1 = this._parent_handlers;
		while(_g < _g1.length) {
			var _handler = _g1[_g];
			++_g;
			if(_handler != null) _handler(_parent);
		}
	}
	,listen: function(_handler) {
		if(this._clean_handlers == null) this._clean_handlers = [];
		this._clean_handlers.push(_handler);
	}
	,unlisten: function(_handler) {
		if(this._clean_handlers == null) return false;
		return HxOverrides.remove(this._clean_handlers,_handler);
	}
	,listen_dirty: function(_handler) {
		if(this._dirty_handlers == null) this._dirty_handlers = [];
		this._dirty_handlers.push(_handler);
	}
	,unlisten_dirty: function(_handler) {
		if(this._dirty_handlers == null) return false;
		return HxOverrides.remove(this._dirty_handlers,_handler);
	}
	,listen_pos: function(_handler) {
		if(this._pos_handlers == null) this._pos_handlers = [];
		this._pos_handlers.push(_handler);
	}
	,unlisten_pos: function(_handler) {
		if(this._pos_handlers == null) return false;
		return HxOverrides.remove(this._pos_handlers,_handler);
	}
	,listen_scale: function(_handler) {
		if(this._scale_handlers == null) this._scale_handlers = [];
		this._scale_handlers.push(_handler);
	}
	,unlisten_scale: function(_handler) {
		if(this._scale_handlers == null) return false;
		return HxOverrides.remove(this._scale_handlers,_handler);
	}
	,listen_rotation: function(_handler) {
		if(this._rotation_handlers == null) this._rotation_handlers = [];
		this._rotation_handlers.push(_handler);
	}
	,unlisten_rotation: function(_handler) {
		if(this._rotation_handlers == null) return false;
		return HxOverrides.remove(this._rotation_handlers,_handler);
	}
	,listen_origin: function(_handler) {
		if(this._origin_handlers == null) this._origin_handlers = [];
		this._origin_handlers.push(_handler);
	}
	,unlisten_origin: function(_handler) {
		if(this._origin_handlers == null) return false;
		return HxOverrides.remove(this._origin_handlers,_handler);
	}
	,listen_parent: function(_handler) {
		if(this._parent_handlers == null) this._parent_handlers = [];
		this._parent_handlers.push(_handler);
	}
	,unlisten_parent: function(_handler) {
		if(this._parent_handlers == null) return false;
		return HxOverrides.remove(this._parent_handlers,_handler);
	}
	,__class__: phoenix.Transform
	,__properties__: {set_scale:"set_scale",get_scale:"get_scale",set_rotation:"set_rotation",get_rotation:"get_rotation",set_pos:"set_pos",get_pos:"get_pos",set_dirty:"set_dirty",set_origin:"set_origin",get_origin:"get_origin",set_world:"set_world",get_world:"get_world",set_local:"set_local",get_local:"get_local",set_parent:"set_parent",get_parent:"get_parent"}
});
phoenix.Spatial = function() {
	this._setup = true;
	this.auto_decompose = false;
	this.ignore_listeners = false;
	this.set_matrix(new phoenix.Matrix());
	this.floats = this.matrix.float32array();
	this.set_pos(new phoenix.Vector());
	this.set_rotation(new phoenix.Quaternion());
	this.set_scale(new phoenix.Vector(1,1,1));
	this._setup = false;
};
phoenix.Spatial.__name__ = ["phoenix","Spatial"];
phoenix.Spatial.prototype = {
	destroy: function() {
		this.matrix = null;
		this.matrix;
		this.floats = null;
		this.pos = null;
		this.pos;
		this.rotation = null;
		this.rotation;
		this.scale = null;
		this.scale;
	}
	,decompose: function(_force) {
		if(_force == null) _force = true;
		if(this.auto_decompose || _force) {
			var _transform = this.matrix.decompose(null,null,null);
			this.set_pos(_transform.pos);
			this.set_rotation(_transform.rotation);
			this.set_scale(_transform.scale);
		}
		return this;
	}
	,get_matrix: function() {
		return this.matrix;
	}
	,set_matrix: function(_m) {
		this.matrix = _m;
		if(_m != null) this.floats = this.matrix.float32array();
		return this.matrix;
	}
	,propagate_pos: function(_p) {
		if(this.pos_changed != null && !this.ignore_listeners) this.pos_changed(_p);
	}
	,propagate_rotation: function(_r) {
		if(this.rotation_changed != null && !this.ignore_listeners) this.rotation_changed(_r);
	}
	,propagate_scale: function(_s) {
		if(this.scale_changed != null && !this.ignore_listeners) this.scale_changed(_s);
	}
	,set_pos: function(_p) {
		this.pos = _p;
		if(_p != null) {
			phoenix.Vector.Listen(this.pos,$bind(this,this._pos_change));
			if(this.pos_changed != null && !this.ignore_listeners) this.pos_changed(this.pos);
		}
		return this.pos;
	}
	,set_rotation: function(_r) {
		this.rotation = _r;
		if(_r != null) {
			phoenix.Quaternion.Listen(this.rotation,$bind(this,this._rotation_change));
			if(this.rotation_changed != null && !this.ignore_listeners) this.rotation_changed(this.rotation);
		}
		return this.rotation;
	}
	,set_scale: function(_s) {
		this.scale = _s;
		if(_s != null) {
			phoenix.Vector.Listen(this.scale,$bind(this,this._scale_change));
			if(this.scale_changed != null && !this.ignore_listeners) this.scale_changed(this.scale);
		}
		return this.scale;
	}
	,_pos_change: function(_v) {
		this.set_pos(this.pos);
	}
	,_scale_change: function(_v) {
		this.set_scale(this.scale);
	}
	,_rotation_change: function(_v) {
		this.set_rotation(this.rotation);
	}
	,__class__: phoenix.Spatial
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix",set_scale:"set_scale",set_rotation:"set_rotation",set_pos:"set_pos"}
};
phoenix._Vector = {};
phoenix._Vector.ComponentOrder_Impl_ = function() { };
phoenix._Vector.ComponentOrder_Impl_.__name__ = ["phoenix","_Vector","ComponentOrder_Impl_"];
phoenix._Vector.Vec_Impl_ = function() { };
phoenix._Vector.Vec_Impl_.__name__ = ["phoenix","_Vector","Vec_Impl_"];
phoenix._Vector.Vec_Impl_._new = function(_x,_y,_z,_w) {
	return new phoenix.Vector(_x,_y,_z,_w);
};
phoenix._Vector.Vec_Impl_._multiply = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x * rhs.x,lhs.y * rhs.y,lhs.z * rhs.z);
};
phoenix._Vector.Vec_Impl_._multiply_scalar = function(lhs,rhs) {
	return phoenix.Vector.Multiply(lhs,rhs);
};
phoenix._Vector.Vec_Impl_._multiply_scalar_int = function(lhs,rhs) {
	return phoenix.Vector.Multiply(lhs,rhs);
};
phoenix._Vector.Vec_Impl_._divide = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x / rhs.x,lhs.y / rhs.y,lhs.z / rhs.z);
};
phoenix._Vector.Vec_Impl_._divide_scalar = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x / rhs,lhs.y / rhs,lhs.z / rhs);
};
phoenix._Vector.Vec_Impl_._divide_scalar_int = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x / rhs,lhs.y / rhs,lhs.z / rhs);
};
phoenix._Vector.Vec_Impl_._add = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x + rhs.x,lhs.y + rhs.y,lhs.z + rhs.z);
};
phoenix._Vector.Vec_Impl_._add_scalar = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x + rhs,lhs.y + rhs,lhs.z + rhs);
};
phoenix._Vector.Vec_Impl_._add_scalar_int = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x + rhs,lhs.y + rhs,lhs.z + rhs);
};
phoenix._Vector.Vec_Impl_._subtract = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x - rhs.x,lhs.y - rhs.y,lhs.z - rhs.z);
};
phoenix._Vector.Vec_Impl_._subtract_scalar = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x - rhs,lhs.y - rhs,lhs.z - rhs);
};
phoenix._Vector.Vec_Impl_._subtract_scalar_int = function(lhs,rhs) {
	return new phoenix.Vector(lhs.x - rhs,lhs.y - rhs,lhs.z - rhs);
};
phoenix.geometry = {};
phoenix.geometry.Geometry = function(options) {
	this.dirty = false;
	this.locked = false;
	this.immediate = false;
	this.visible = true;
	this.dirty_clip = false;
	this.dirty_depth = false;
	this.dirty_group = false;
	this.dirty_shader = false;
	this.dirty_texture = false;
	this.dirty_primitive_type = false;
	this.shadow_clip = false;
	this.shadow_depth = 0.0;
	this.shadow_group = 0;
	this.id = "";
	this.uuid = "";
	this.dropped = false;
	this.added = false;
	this.submitted = false;
	this.uuid = Luxe.utils.uniqueid();
	this.id = this.uuid;
	this.vertices = new Array();
	this.state = new phoenix.geometry.GeometryState();
	this.batchers = new Array();
	this.transform = new phoenix.Transform();
	this._final_vert_position = new phoenix.Vector();
	this.set_clip_rect(null);
	this.set_clip(false);
	var _do_add = true;
	if(options != null) {
		this.state.set_depth(options.depth == null?this.state.depth:options.depth);
		this.state.set_group(options.group == null?this.state.group:options.group);
		this.state.set_texture(options.texture == null?this.state.texture:options.texture);
		this.state.set_clip_rect(options.clip_rect == null?this.state.clip_rect:options.clip_rect);
		this.state.set_primitive_type(options.primitive_type == null?this.state.primitive_type:options.primitive_type);
		this.state.set_shader(options.shader == null?this.state.shader:options.shader);
		if(options.id == null) this.id = this.uuid; else this.id = options.id;
		this.transform.local.set_pos(options.pos == null?this.transform.local.pos:options.pos);
		this.transform.local.set_rotation(options.rotation == null?this.transform.local.rotation:options.rotation);
		this.transform.local.set_scale(options.scale == null?this.transform.local.scale:options.scale);
		this.transform.set_origin(options.origin == null?this.transform.origin:options.origin);
		if(options.immediate == null) this.immediate = false; else this.immediate = options.immediate;
		this.set_visible(options.visible == null?true:options.visible);
		this.set_color(options.color == null?new phoenix.Color():options.color);
		if(options.no_batcher_add == null) _do_add = true; else _do_add = options.no_batcher_add;
	} else this.set_color(new phoenix.Color());
	phoenix.geometry.Geometry._sequence_key++;
	this.key = new phoenix.geometry.GeometryKey();
	this.key.uuid = this.uuid;
	this.key.timestamp = snow.Snow.core.timestamp();
	this.key.sequence = phoenix.geometry.Geometry._sequence_key;
	this.key.primitive_type = this.state.primitive_type;
	this.key.texture = this.state.texture;
	this.key.shader = this.state.shader;
	this.key.group = this.state.group;
	this.key.depth = this.state.depth;
	this.key.clip = this.state.clip;
	this.transform.id = this.uuid;
	this.transform.name = this.id;
	if(options != null && options.batcher != null && _do_add) options.batcher.add(this);
};
phoenix.geometry.Geometry.__name__ = ["phoenix","geometry","Geometry"];
phoenix.geometry.Geometry.prototype = {
	key_string: function() {
		return "ts: " + this.key.timestamp + "\n" + "sequence: " + this.key.sequence + "\n" + "primitive_type: " + Std.string(this.key.primitive_type) + "\n" + "texture: " + (this.key.texture == null?"null":this.key.texture.id) + "\n" + "shader: " + (this.key.shader == null?"null":this.key.shader.id) + "\n" + "group: " + this.key.group + "\n" + "depth: " + this.key.depth + "\n" + "clip: " + Std.string(this.key.clip);
	}
	,refresh_key: function() {
		this.key.uuid = this.uuid;
		this.key.timestamp = snow.Snow.core.timestamp();
		this.key.sequence = phoenix.geometry.Geometry._sequence_key;
		this.key.primitive_type = this.state.primitive_type;
		this.key.texture = this.state.texture;
		this.key.shader = this.state.shader;
		this.key.group = this.state.group;
		this.key.depth = this.state.depth;
		this.key.clip = this.state.clip;
	}
	,str: function() {
		if(!this.state.log) return;
		haxe.Log.trace("\t\tgeometry ; " + this.id,{ fileName : "Geometry.hx", lineNumber : 210, className : "phoenix.geometry.Geometry", methodName : "str"});
		this.state.log = true;
		this.state.str();
		this.state.log = false;
	}
	,drop: function(remove) {
		if(remove == null) remove = true;
		if(remove && this.added) {
			var _g = 0;
			var _g1 = this.batchers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.remove(this,true);
			}
		}
		if(this.transform != null) {
			this.transform.destroy();
			this.transform = null;
		}
		this.dropped = true;
	}
	,add: function(v) {
		this.vertices.push(v);
		if(this.vertices.length > Luxe.renderer.batcher.max_verts) throw "" + this.id + " / Currently a single geometry cannot exceed the maximum vert count of " + Luxe.renderer.batcher.max_verts;
	}
	,remove: function(v) {
		HxOverrides.remove(this.vertices,v);
	}
	,batch: function(vert_index,tcoord_index,color_index,normal_index,vertlist,tcoordlist,colorlist,normallist) {
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this._final_vert_position.set(v.pos.x,v.pos.y,v.pos.z,v.pos.w);
			this._final_vert_position.transform(this.transform.get_world().get_matrix());
			vertlist[vert_index] = this._final_vert_position.x;
			vertlist[vert_index + 1] = this._final_vert_position.y;
			vertlist[vert_index + 2] = this._final_vert_position.z;
			vertlist[vert_index + 3] = this._final_vert_position.w;
			vert_index += 4;
			tcoordlist[tcoord_index] = v.uv.uv0.u;
			tcoordlist[tcoord_index + 1] = v.uv.uv0.v;
			tcoordlist[tcoord_index + 2] = v.uv.uv0.w;
			tcoordlist[tcoord_index + 3] = v.uv.uv0.t;
			tcoord_index += 4;
			colorlist[color_index] = v.color.r;
			colorlist[color_index + 1] = v.color.g;
			colorlist[color_index + 2] = v.color.b;
			colorlist[color_index + 3] = v.color.a;
			color_index += 4;
		}
	}
	,batch_into_arrays: function(vertlist,tcoordlist,colorlist,normallist) {
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this._final_vert_position.set(v.pos.x,v.pos.y,v.pos.z,v.pos.w);
			this._final_vert_position.transform(this.transform.get_world().get_matrix());
			vertlist.push(this._final_vert_position.x);
			vertlist.push(this._final_vert_position.y);
			vertlist.push(this._final_vert_position.z);
			vertlist.push(this._final_vert_position.w);
			tcoordlist.push(v.uv.uv0.u);
			tcoordlist.push(v.uv.uv0.v);
			tcoordlist.push(v.uv.uv0.w);
			tcoordlist.push(v.uv.uv0.t);
			colorlist.push(v.color.r);
			colorlist.push(v.color.g);
			colorlist.push(v.color.b);
			colorlist.push(v.color.a);
			normallist.push(v.normal.x);
			normallist.push(v.normal.y);
			normallist.push(v.normal.z);
			normallist.push(v.normal.w);
		}
	}
	,translate: function(_offset) {
		this.transform.local.pos.set_xyz(this.transform.local.pos.x + _offset.x,this.transform.local.pos.y + _offset.y,this.transform.local.pos.x + _offset.z);
	}
	,set_locked: function(_locked) {
		return this.locked = _locked;
	}
	,get_locked: function() {
		return this.locked;
	}
	,set_dirty: function(_dirty) {
		return this.dirty = _dirty;
	}
	,get_dirty: function() {
		return this.dirty;
	}
	,refresh: function() {
		var _g = 0;
		var _g1 = this.batchers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.remove(this,false);
		}
		if(this.dirty_primitive_type) {
			this.dirty_primitive_type = false;
			this.state.set_primitive_type(this.shadow_primitive_type);
		}
		if(this.dirty_texture) {
			this.dirty_texture = false;
			this.state.set_texture(this.shadow_texture);
		}
		if(this.dirty_shader) {
			this.dirty_shader = false;
			this.state.set_shader(this.shadow_shader);
		}
		if(this.dirty_group) {
			this.dirty_group = false;
			this.state.set_group(this.shadow_group);
		}
		if(this.dirty_depth) {
			this.dirty_depth = false;
			this.state.set_depth(this.shadow_depth);
		}
		if(this.dirty_clip) {
			this.dirty_clip = false;
			this.state.set_clip(this.shadow_clip);
		}
		this.refresh_key();
		var _g2 = 0;
		var _g11 = this.batchers;
		while(_g2 < _g11.length) {
			var b1 = _g11[_g2];
			++_g2;
			b1.add(this,false);
		}
	}
	,get_primitive_type: function() {
		return this.state.primitive_type;
	}
	,set_primitive_type: function(val) {
		if(this.state.primitive_type != val) {
			this.shadow_primitive_type = val;
			this.dirty_primitive_type = true;
			this.refresh();
		}
		return this.primitive_type = val;
	}
	,get_texture: function() {
		return this.state.texture;
	}
	,set_texture: function(val) {
		if(this.state.texture != val) {
			this.shadow_texture = val;
			this.dirty_texture = true;
			this.refresh();
		}
		return this.texture = val;
	}
	,set_visible: function(val) {
		return this.visible = val;
	}
	,set_color: function(val) {
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			v.color = val;
		}
		return this.color = val;
	}
	,get_shader: function() {
		return this.state.shader;
	}
	,set_shader: function(val) {
		if(this.state.shader != val) {
			this.shadow_shader = val;
			this.dirty_shader = true;
			this.refresh();
		}
		return this.shader = val;
	}
	,get_depth: function() {
		return this.state.depth;
	}
	,set_depth: function(val) {
		if(this.state.depth != val) {
			this.shadow_depth = val;
			this.dirty_depth = true;
			this.refresh();
		}
		return this.depth = val;
	}
	,get_group: function() {
		return this.state.group;
	}
	,set_group: function(val) {
		if(this.state.group != val) {
			this.shadow_group = val;
			this.dirty_group = true;
			this.refresh();
		}
		return this.group = val;
	}
	,get_clip: function() {
		return this.state.clip;
	}
	,set_clip: function(val) {
		if(this.state.clip != val) {
			this.shadow_clip = val;
			this.dirty_clip = true;
			this.refresh();
		}
		return this.clip = val;
	}
	,get_clip_rect: function() {
		return this.state.clip_rect;
	}
	,set_clip_rect: function(val) {
		if(val == null) this.set_clip(false); else this.set_clip(true);
		return this.state.set_clip_rect(val);
	}
	,__class__: phoenix.geometry.Geometry
	,__properties__: {set_clip:"set_clip",get_clip:"get_clip",set_color:"set_color",set_dirty:"set_dirty",get_dirty:"get_dirty",set_locked:"set_locked",get_locked:"get_locked",set_visible:"set_visible",set_clip_rect:"set_clip_rect",get_clip_rect:"get_clip_rect",set_group:"set_group",get_group:"get_group",set_depth:"set_depth",get_depth:"get_depth",set_shader:"set_shader",get_shader:"get_shader",set_texture:"set_texture",get_texture:"get_texture",set_primitive_type:"set_primitive_type",get_primitive_type:"get_primitive_type"}
};
phoenix.geometry.CircleGeometry = function(options) {
	phoenix.geometry.Geometry.call(this,options);
	if(options == null) return;
	var _radius_x = 32;
	var _radius_y = 32;
	if(options.end_angle == null) options.end_angle = 360;
	if(options.start_angle == null) options.start_angle = 0;
	if(options.r != null) {
		_radius_x = options.r;
		_radius_y = options.r;
	}
	if(options.rx != null) _radius_x = options.rx;
	if(options.ry != null) _radius_y = options.ry;
	if(options.steps == null) {
		if(options.smooth == null) {
			var _max = Math.max(_radius_x,_radius_y);
			options.steps = Luxe.utils.geometry.segments_for_smooth_circle(_max);
		} else {
			var _smooth = options.smooth;
			var _max1 = Math.max(_radius_x,_radius_y);
			options.steps = Luxe.utils.geometry.segments_for_smooth_circle(_max1,_smooth);
		}
	}
	this.set(options.x,options.y,_radius_x,_radius_y,options.steps,options.start_angle,options.end_angle);
	if(options.visible != null) this.set_visible(options.visible);
};
phoenix.geometry.CircleGeometry.__name__ = ["phoenix","geometry","CircleGeometry"];
phoenix.geometry.CircleGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.CircleGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	set: function(_x,_y,_rx,_ry,_steps,_start_angle,_end_angle) {
		if(_end_angle == null) _end_angle = 360;
		if(_start_angle == null) _start_angle = 0;
		this.set_primitive_type(4);
		var half_pi = Math.PI / 2;
		var _start_angle_rad = _start_angle * 0.0174532925199432781 - half_pi;
		var _end_angle_rad = _end_angle * 0.0174532925199432781 - half_pi;
		var _range = _end_angle_rad - _start_angle_rad;
		_steps = Math.ceil(Math.abs(_range) / (Math.PI * 2) * _steps);
		var theta = _range / _steps;
		var tangential_factor = Math.tan(theta);
		var radial_factor = Math.cos(theta);
		var x = _rx * Math.cos(_start_angle_rad);
		var y = _rx * Math.sin(_start_angle_rad);
		var radial_ratio = _rx / _ry;
		if(radial_ratio == 0) radial_ratio = 0.000000001;
		var _index = 0;
		var _segment_pos = [];
		var _g1 = 0;
		var _g = _steps + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var __x = x;
			var __y = y / radial_ratio;
			var _seg = new phoenix.Vector(__x,__y);
			_segment_pos.push(_seg);
			if(_index > 0) this.add(new phoenix.geometry.Vertex(_seg,this.color));
			this.add(new phoenix.geometry.Vertex(new phoenix.Vector(0,0),this.color));
			this.add(new phoenix.geometry.Vertex(_seg,this.color));
			var tx = -y;
			var ty = x;
			x += tx * tangential_factor;
			y += ty * tangential_factor;
			x *= radial_factor;
			y *= radial_factor;
			_index++;
		}
		this.add(new phoenix.geometry.Vertex(_segment_pos[_steps],this.color));
		this.transform.set_pos(new phoenix.Vector(_x,_y));
	}
	,__class__: phoenix.geometry.CircleGeometry
});
phoenix.geometry.RingGeometry = function(options) {
	phoenix.geometry.CircleGeometry.call(this,options);
	this.set_primitive_type(1);
};
phoenix.geometry.RingGeometry.__name__ = ["phoenix","geometry","RingGeometry"];
phoenix.geometry.RingGeometry.__super__ = phoenix.geometry.CircleGeometry;
phoenix.geometry.RingGeometry.prototype = $extend(phoenix.geometry.CircleGeometry.prototype,{
	set: function(_x,_y,_rx,_ry,_steps,_start_angle_degrees,_end_angle_degrees) {
		if(_end_angle_degrees == null) _end_angle_degrees = 360;
		if(_start_angle_degrees == null) _start_angle_degrees = 0;
		this.set_primitive_type(4);
		var _start_angle_rad = _start_angle_degrees * 0.0174532925199432781;
		var _end_angle_rad = _end_angle_degrees * 0.0174532925199432781;
		var _range = _end_angle_rad - _start_angle_rad;
		var theta = _range / _steps;
		var tangential_factor = Math.tan(theta);
		var radial_factor = Math.cos(theta);
		var x = _rx * Math.cos(_start_angle_rad);
		var y = _rx * Math.sin(_start_angle_rad);
		var radial_ratio = _rx / _ry;
		if(radial_ratio == 0) radial_ratio = 0.000000001;
		var _index = 0;
		var _segment_pos = [];
		var _g = 0;
		while(_g < _steps) {
			var i = _g++;
			var __x = x;
			var __y = y / radial_ratio;
			var _seg = new phoenix.Vector(__x,__y);
			_segment_pos.push(_seg);
			this.add(new phoenix.geometry.Vertex(_seg,this.color));
			if(_index > 0) {
				var prevvert = _segment_pos[_index];
				this.add(new phoenix.geometry.Vertex(new phoenix.Vector(prevvert.x,prevvert.y,prevvert.z,prevvert.w),this.color));
			}
			var tx = -y;
			var ty = x;
			x += tx * tangential_factor;
			y += ty * tangential_factor;
			x *= radial_factor;
			y *= radial_factor;
			_index++;
		}
		this.add(new phoenix.geometry.Vertex(_segment_pos[0],this.color));
		this.transform.set_pos(new phoenix.Vector(_x,_y));
	}
	,__class__: phoenix.geometry.RingGeometry
});
phoenix.geometry.ArcGeometry = function(options) {
	phoenix.geometry.RingGeometry.call(this,options);
	this.vertices.pop();
	this.vertices.pop();
	this.set_primitive_type(1);
};
phoenix.geometry.ArcGeometry.__name__ = ["phoenix","geometry","ArcGeometry"];
phoenix.geometry.ArcGeometry.__super__ = phoenix.geometry.RingGeometry;
phoenix.geometry.ArcGeometry.prototype = $extend(phoenix.geometry.RingGeometry.prototype,{
	__class__: phoenix.geometry.ArcGeometry
});
phoenix.geometry.CompositeGeometry = function(_options) {
	phoenix.geometry.Geometry.call(this,_options);
	this.geometry = new Array();
};
phoenix.geometry.CompositeGeometry.__name__ = ["phoenix","geometry","CompositeGeometry"];
phoenix.geometry.CompositeGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.CompositeGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	toString: function() {
		return "CompositeGeometry " + Std.string(this.geometry) + " : " + Std.string(this.geometry);
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.geometry;
		while(_g < _g1.length) {
			var geom = _g1[_g];
			++_g;
			geom.transform.set_parent(null);
		}
		this.geometry.splice(0,this.geometry.length);
	}
	,replace: function(_geometry) {
		this.clear();
		this.geometry = _geometry;
		var _g = 0;
		var _g1 = this.geometry;
		while(_g < _g1.length) {
			var geom = _g1[_g];
			++_g;
			geom.transform.set_parent(this.transform);
		}
	}
	,has_geometry: function(geom) {
		return Lambda.has(this.geometry,geom);
	}
	,add_geometry: function(geom) {
		if(geom != null) {
			geom.transform.set_parent(this.transform);
			this.geometry.push(geom);
		}
	}
	,remove_geometry: function(g) {
		if(HxOverrides.remove(this.geometry,g)) g.transform.set_parent(null);
	}
	,add_to_batcher: function(_batcher) {
		var _g = 0;
		var _g1 = this.geometry;
		while(_g < _g1.length) {
			var geom = _g1[_g];
			++_g;
			_batcher.add(geom);
		}
	}
	,drop: function(remove) {
		if(remove == null) remove = true;
		phoenix.geometry.Geometry.prototype.drop.call(this,remove);
		var _g = 0;
		var _g1 = this.geometry;
		while(_g < _g1.length) {
			var geom = _g1[_g];
			++_g;
			geom.drop(remove);
			geom = null;
		}
		this.geometry = null;
		this.geometry = [];
	}
	,translate: function(_offset) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.translate(_offset);
			}
		}
	}
	,set_color: function(_color) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_color(_color);
			}
		}
		return this.color = _color;
	}
	,set_primitive_type: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_primitive_type(val);
			}
		}
		return this.primitive_type = val;
	}
	,set_shader: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_shader(val);
			}
		}
		return this.shader = val;
	}
	,set_texture: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_texture(val);
			}
		}
		return this.texture = val;
	}
	,set_depth: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_depth(val);
			}
		}
		return this.depth = val;
	}
	,set_group: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_group(val);
			}
		}
		return this.group = val;
	}
	,set_locked: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_locked(val);
			}
		}
		return this.locked = val;
	}
	,set_dirty: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_dirty(val);
			}
		}
		return this.dirty = val;
	}
	,set_clip_rect: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_clip_rect(val);
			}
		}
		return this.clip_rect = val;
	}
	,set_visible: function(val) {
		if(this.geometry != null) {
			var _g = 0;
			var _g1 = this.geometry;
			while(_g < _g1.length) {
				var geom = _g1[_g];
				++_g;
				geom.set_visible(val);
			}
		}
		return this.visible = val;
	}
	,__class__: phoenix.geometry.CompositeGeometry
});
phoenix.geometry.GeometryKey = function() {
	this.clip = false;
	this.depth = 0;
	this.group = 0;
	this.uuid = "";
	this.sequence = 0;
	this.timestamp = 0;
};
phoenix.geometry.GeometryKey.__name__ = ["phoenix","geometry","GeometryKey"];
phoenix.geometry.GeometryKey.prototype = {
	__class__: phoenix.geometry.GeometryKey
};
phoenix.geometry.GeometryState = function() {
	this.log = false;
	this.set_clip(false);
	this.set_clip_rect(new phoenix.Rectangle());
	this.set_texture(null);
	this.set_shader(null);
	this.set_group(0);
	this.set_depth(0.0);
	this.set_primitive_type(0);
	this.dirty = false;
};
phoenix.geometry.GeometryState.__name__ = ["phoenix","geometry","GeometryState"];
phoenix.geometry.GeometryState.prototype = {
	clone_onto: function(_other) {
		_other.dirty = this.dirty;
		_other.set_texture(this.texture);
		_other.set_shader(this.shader);
		_other.set_group(this.group);
		_other.set_depth(this.depth);
		_other.set_primitive_type(this.primitive_type);
		_other.set_clip(this.clip);
		_other.clip_rect.copy_from(this.clip_rect);
	}
	,str: function() {
		if(!this.log) return;
		haxe.Log.trace("\t+ GEOMETRYSTATE " + Std.string(this.dirty),{ fileName : "GeometryState.hx", lineNumber : 53, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tdepth - " + this.depth,{ fileName : "GeometryState.hx", lineNumber : 54, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tgroup - " + this.group,{ fileName : "GeometryState.hx", lineNumber : 55, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\ttexture - " + (this.texture == null?"null":this.texture.id),{ fileName : "GeometryState.hx", lineNumber : 56, className : "phoenix.geometry.GeometryState", methodName : "str"});
		if(this.texture != null) haxe.Log.trace("\t\t\t " + Std.string(this.texture.texture),{ fileName : "GeometryState.hx", lineNumber : 58, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tshader - " + (this.shader == null?"null":this.shader.id),{ fileName : "GeometryState.hx", lineNumber : 60, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tprimitive_type - " + Std.string(this.primitive_type),{ fileName : "GeometryState.hx", lineNumber : 61, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tclip - " + Std.string(this.clip),{ fileName : "GeometryState.hx", lineNumber : 62, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t\tclip rect - " + Std.string(this.clip_rect),{ fileName : "GeometryState.hx", lineNumber : 63, className : "phoenix.geometry.GeometryState", methodName : "str"});
		haxe.Log.trace("\t- GEOMETRYSTATE",{ fileName : "GeometryState.hx", lineNumber : 64, className : "phoenix.geometry.GeometryState", methodName : "str"});
	}
	,clean: function() {
		this.dirty = false;
	}
	,update: function(other) {
		if(this.depth != other.depth) this.set_depth(other.depth);
		if(this.group != other.group) this.set_group(other.group);
		if(this.texture != other.texture) this.set_texture(other.texture);
		if(this.shader != other.shader) this.set_shader(other.shader);
		if(this.primitive_type != other.primitive_type) this.set_primitive_type(other.primitive_type);
		if(this.clip != other.clip) this.set_clip(other.clip);
		if(this.clip_rect != null) {
			if(other.clip_rect != null && !this.clip_rect.equal(other.clip_rect)) this.clip_rect.set(other.clip_rect.x,other.clip_rect.y,other.clip_rect.w,other.clip_rect.h);
		}
	}
	,set_primitive_type: function(val) {
		this.dirty = true;
		return this.primitive_type = val;
	}
	,set_texture: function(val) {
		this.dirty = true;
		return this.texture = val;
	}
	,set_shader: function(val) {
		this.dirty = true;
		return this.shader = val;
	}
	,set_depth: function(val) {
		return this.depth = val;
	}
	,set_group: function(val) {
		this.dirty = true;
		return this.group = val;
	}
	,set_clip: function(val) {
		this.dirty = true;
		return this.clip = val;
	}
	,set_clip_rect: function(val) {
		this.dirty = true;
		return this.clip_rect = val;
	}
	,__class__: phoenix.geometry.GeometryState
	,__properties__: {set_clip_rect:"set_clip_rect",set_clip:"set_clip",set_group:"set_group",set_depth:"set_depth",set_texture:"set_texture",set_shader:"set_shader",set_primitive_type:"set_primitive_type"}
};
phoenix.geometry.LineGeometry = function(options) {
	phoenix.geometry.Geometry.call(this,options);
	if(options == null) return;
	if(options.color == null) options.color = new phoenix.Color();
	if(options.color0 == null) options.color0 = options.color;
	if(options.color1 == null) options.color1 = options.color;
	if(options.p0 != null) this.set_p0(options.p0); else this.set_p0(new phoenix.Vector());
	if(options.p1 != null) this.set_p1(options.p1); else this.set_p1(new phoenix.Vector());
	this.set(options);
};
phoenix.geometry.LineGeometry.__name__ = ["phoenix","geometry","LineGeometry"];
phoenix.geometry.LineGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.LineGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	set_p0: function(_p) {
		if(this.vertices.length == 0) return this.p0 = _p;
		this.vertices[0].pos.set_x(_p.x);
		this.vertices[0].pos.set_y(_p.y);
		this.vertices[0].pos.set_z(_p.z);
		return this.p0 = _p;
	}
	,set_p1: function(_p) {
		if(this.vertices.length == 0) return this.p1 = _p;
		this.vertices[1].pos.set_x(_p.x);
		this.vertices[1].pos.set_y(_p.y);
		this.vertices[1].pos.set_z(_p.z);
		return this.p1 = _p;
	}
	,set: function(options) {
		this.vertices.splice(0,this.vertices.length);
		var vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(options.p0.x,options.p0.y,options.p0.z),options.color0);
		vert0.uv.uv0.set_uv(0,0);
		var vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(options.p1.x,options.p1.y,options.p1.z),options.color1);
		vert1.uv.uv0.set_uv(1,0);
		this.add(vert0);
		this.add(vert1);
		this.set_primitive_type(1);
		this.immediate = options.immediate;
	}
	,__class__: phoenix.geometry.LineGeometry
	,__properties__: $extend(phoenix.geometry.Geometry.prototype.__properties__,{set_p1:"set_p1",set_p0:"set_p0"})
});
phoenix.geometry.PlaneGeometry = function(options) {
	this.is_set = false;
	this.flipy = false;
	this.flipx = false;
	phoenix.geometry.Geometry.call(this,options);
	if(options == null) return;
	if(options.flipx != null) this.set_flipx(options.flipx);
	if(options.flipy != null) this.set_flipy(options.flipy);
	this._uv_cache = new phoenix.Rectangle(0,0,1,1);
	this.set(new phoenix.Rectangle(options.x,options.z,options.w,options.h),options.y);
	if(options.visible != null) this.set_visible(options.visible);
	if(options.immediate != null) this.immediate = options.immediate;
};
phoenix.geometry.PlaneGeometry.__name__ = ["phoenix","geometry","PlaneGeometry"];
phoenix.geometry.PlaneGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.PlaneGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	uv: function(_rect) {
		if(this.get_texture() == null) {
			haxe.Log.trace("Warning : calling UV on a geometry with null texture.",{ fileName : "PlaneGeometry.hx", lineNumber : 45, className : "phoenix.geometry.PlaneGeometry", methodName : "uv"});
			return;
		}
		var tlx = _rect.x / this.get_texture().width_actual;
		var tly = _rect.y / this.get_texture().height_actual;
		var szx = _rect.w / this.get_texture().width_actual;
		var szy = _rect.h / this.get_texture().height_actual;
		this.uv_space(new phoenix.Rectangle(tlx,tly,szx,szy));
	}
	,uv_space: function(_rect) {
		var sz_x = _rect.w;
		var sz_y = _rect.h;
		var tl_x = _rect.x;
		var tl_y = _rect.y;
		this._uv_cache.set(tl_x,tl_y,sz_x,sz_y);
		var tr_x = tl_x + sz_x;
		var tr_y = tl_y;
		var br_x = tl_x + sz_x;
		var br_y = tl_y + sz_y;
		var bl_x = tl_x;
		var bl_y = tl_y + sz_y;
		var tmp_x = 0.0;
		var tmp_y = 0.0;
		if(this.flipy) {
			tmp_y = bl_y;
			bl_y = tl_y;
			tl_y = tmp_y;
			tmp_y = br_y;
			br_y = tr_y;
			tr_y = tmp_y;
		}
		if(this.flipx) {
			tmp_x = tr_x;
			tr_x = tl_x;
			tl_x = tmp_x;
			tmp_x = br_x;
			br_x = bl_x;
			bl_x = tmp_x;
		}
		this.vertices[0].uv.uv0.set_uv(tl_x,tl_y);
		this.vertices[1].uv.uv0.set_uv(tr_x,tr_y);
		this.vertices[2].uv.uv0.set_uv(br_x,br_y);
		this.vertices[3].uv.uv0.set_uv(bl_x,bl_y);
		this.vertices[4].uv.uv0.set_uv(tl_x,tl_y);
		this.vertices[5].uv.uv0.set_uv(br_x,br_y);
		this.set_dirty(true);
	}
	,set: function(quad,y) {
		this.vertices.splice(0,this.vertices.length);
		var vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0,0),this.color);
		var vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,0,0),this.color);
		var vert2 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,0,quad.h),this.color);
		var vert3 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0,quad.h),this.color);
		var vert4 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0,0),this.color);
		var vert5 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,0,quad.h),this.color);
		this.add(vert5);
		this.add(vert4);
		this.add(vert3);
		this.add(vert2);
		this.add(vert1);
		this.add(vert0);
		this.set_primitive_type(4);
		this.immediate = false;
		this.transform.set_pos(new phoenix.Vector(quad.x,y,quad.y));
		this.is_set = true;
		this.uv_space(new phoenix.Rectangle(0,0,1,1));
	}
	,set_flipx: function(_val) {
		this.flipx = _val;
		if(this.is_set) this.uv_space(this._uv_cache);
		return this.flipx;
	}
	,set_flipy: function(_val) {
		this.flipy = _val;
		if(this.is_set) this.uv_space(this._uv_cache);
		return this.flipy;
	}
	,__class__: phoenix.geometry.PlaneGeometry
	,__properties__: $extend(phoenix.geometry.Geometry.prototype.__properties__,{set_flipy:"set_flipy",set_flipx:"set_flipx"})
});
phoenix.geometry.QuadGeometry = function(options) {
	this.is_set = false;
	this.flipy = false;
	this.flipx = false;
	phoenix.geometry.Geometry.call(this,options);
	if(options == null) return;
	if(options.flipx != null) this.set_flipx(options.flipx);
	if(options.flipy != null) this.set_flipy(options.flipy);
	var _x = options.x;
	var _y = options.y;
	var _w = options.w;
	var _h = options.h;
	if(options.rect != null) {
		_x = options.rect.x;
		_y = options.rect.y;
		_w = options.rect.w;
		_h = options.rect.h;
	}
	this._uv_cache = new phoenix.Rectangle(0,0,1,1);
	this.set(new phoenix.Rectangle(_x,_y,_w,_h));
	if(options.visible != null) this.set_visible(options.visible);
	if(options.immediate != null) this.immediate = options.immediate;
};
phoenix.geometry.QuadGeometry.__name__ = ["phoenix","geometry","QuadGeometry"];
phoenix.geometry.QuadGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.QuadGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	uv: function(_rect) {
		if(this.get_texture() == null) {
			haxe.Log.trace("Warning : calling UV on a geometry with null texture.",{ fileName : "QuadGeometry.hx", lineNumber : 56, className : "phoenix.geometry.QuadGeometry", methodName : "uv"});
			return;
		}
		var tlx = _rect.x / this.get_texture().width_actual;
		var tly = _rect.y / this.get_texture().height_actual;
		var szx = _rect.w / this.get_texture().width_actual;
		var szy = _rect.h / this.get_texture().height_actual;
		this.uv_space(new phoenix.Rectangle(tlx,tly,szx,szy));
	}
	,uv_space: function(_rect) {
		var sz_x = _rect.w;
		var sz_y = _rect.h;
		var tl_x = _rect.x;
		var tl_y = _rect.y;
		this._uv_cache.set(tl_x,tl_y,sz_x,sz_y);
		var tr_x = tl_x + sz_x;
		var tr_y = tl_y;
		var br_x = tl_x + sz_x;
		var br_y = tl_y + sz_y;
		var bl_x = tl_x;
		var bl_y = tl_y + sz_y;
		var tmp_x = 0.0;
		var tmp_y = 0.0;
		if(this.flipy) {
			tmp_y = bl_y;
			bl_y = tl_y;
			tl_y = tmp_y;
			tmp_y = br_y;
			br_y = tr_y;
			tr_y = tmp_y;
		}
		if(this.flipx) {
			tmp_x = tr_x;
			tr_x = tl_x;
			tl_x = tmp_x;
			tmp_x = br_x;
			br_x = bl_x;
			bl_x = tmp_x;
		}
		this.vertices[0].uv.uv0.set_uv(tl_x,tl_y);
		this.vertices[1].uv.uv0.set_uv(tr_x,tr_y);
		this.vertices[2].uv.uv0.set_uv(br_x,br_y);
		this.vertices[3].uv.uv0.set_uv(bl_x,bl_y);
		this.vertices[4].uv.uv0.set_uv(tl_x,tl_y);
		this.vertices[5].uv.uv0.set_uv(br_x,br_y);
		this.set_dirty(true);
	}
	,resize: function(quad) {
		this.vertices[0].pos.set_xy(0,0);
		this.vertices[1].pos.set_xy(quad.x,0);
		this.vertices[2].pos.set_xy(quad.x,quad.y);
		this.vertices[3].pos.set_xy(0,quad.y);
		this.vertices[4].pos.set_xy(0,0);
		this.vertices[5].pos.set_xy(quad.x,quad.y);
	}
	,set: function(quad) {
		this.vertices.splice(0,this.vertices.length);
		var vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0),this.color);
		var vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,0),this.color);
		var vert2 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,quad.h),this.color);
		var vert3 = new phoenix.geometry.Vertex(new phoenix.Vector(0,quad.h),this.color);
		var vert4 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0),this.color);
		var vert5 = new phoenix.geometry.Vertex(new phoenix.Vector(quad.w,quad.h),this.color);
		this.add(vert0);
		this.add(vert1);
		this.add(vert2);
		this.add(vert3);
		this.add(vert4);
		this.add(vert5);
		this.set_primitive_type(4);
		this.immediate = false;
		this.transform.set_pos(new phoenix.Vector(quad.x,quad.y));
		this.is_set = true;
		this.uv_space(new phoenix.Rectangle(0,0,1,1));
	}
	,set_flipx: function(_val) {
		this.flipx = _val;
		if(this.is_set) this.uv_space(this._uv_cache);
		return this.flipx;
	}
	,set_flipy: function(_val) {
		this.flipy = _val;
		if(this.is_set) this.uv_space(this._uv_cache);
		return this.flipy;
	}
	,__class__: phoenix.geometry.QuadGeometry
	,__properties__: $extend(phoenix.geometry.Geometry.prototype.__properties__,{set_flipy:"set_flipy",set_flipx:"set_flipx"})
});
phoenix.geometry.QuadPackGeometry = function(_options) {
	phoenix.geometry.Geometry.call(this,_options);
	this.set_primitive_type(4);
	this.quads = new haxe.ds.IntMap();
};
phoenix.geometry.QuadPackGeometry.__name__ = ["phoenix","geometry","QuadPackGeometry"];
phoenix.geometry.QuadPackGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.QuadPackGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	clear: function() {
		var $it0 = this.quads.keys();
		while( $it0.hasNext() ) {
			var q = $it0.next();
			this.quad_remove(q);
		}
	}
	,quad_add: function(_options) {
		if(_options.visible == null) _options.visible = true;
		if(_options.flipx == null) _options.flipx = false;
		if(_options.flipy == null) _options.flipy = false;
		var _uid = Luxe.utils.uniquehash();
		var vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x,_options.y),_options.color);
		var vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x + _options.w,_options.y),_options.color);
		var vert2 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x + _options.w,_options.y + _options.h),_options.color);
		var vert3 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x,_options.y + _options.h),_options.color);
		var vert4 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x,_options.y),_options.color);
		var vert5 = new phoenix.geometry.Vertex(new phoenix.Vector(_options.x + _options.w,_options.y + _options.h),_options.color);
		this.add(vert0);
		this.add(vert1);
		this.add(vert2);
		this.add(vert3);
		this.add(vert4);
		this.add(vert5);
		var _quad = { uid : _uid, verts : new Array(), flipx : _options.flipx, flipy : _options.flipx, visible : _options.visible, _uv_cache : new phoenix.Rectangle(0,0,1,1)};
		_quad.verts.push(vert0);
		_quad.verts.push(vert1);
		_quad.verts.push(vert2);
		_quad.verts.push(vert3);
		_quad.verts.push(vert4);
		_quad.verts.push(vert5);
		this.quads.set(_uid,_quad);
		if(_options.uv != null) this.quad_uv(_uid,_options.uv);
		this.set_dirty(true);
		return _uid;
	}
	,quad_remove: function(_quad_id) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			this.remove(_quad.verts[0]);
			this.remove(_quad.verts[1]);
			this.remove(_quad.verts[2]);
			this.remove(_quad.verts[3]);
			this.remove(_quad.verts[4]);
			this.remove(_quad.verts[5]);
			this.quads.remove(_quad_id);
			this.set_dirty(true);
		}
	}
	,quad_visible: function(_quad_id,visible) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			if(visible && !_quad.visible) {
				_quad.visible = false;
				this.add(_quad.verts[0]);
				this.add(_quad.verts[1]);
				this.add(_quad.verts[2]);
				this.add(_quad.verts[3]);
				this.add(_quad.verts[4]);
				this.add(_quad.verts[5]);
			} else if(!visible && _quad.visible) {
				_quad.visible = false;
				this.remove(_quad.verts[0]);
				this.remove(_quad.verts[1]);
				this.remove(_quad.verts[2]);
				this.remove(_quad.verts[3]);
				this.remove(_quad.verts[4]);
				this.remove(_quad.verts[5]);
			}
			this.set_dirty(true);
		}
	}
	,quad_resize: function(_quad_id,_size) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			_quad.verts[0].pos = new phoenix.Vector(_size.x,_size.y);
			_quad.verts[1].pos = new phoenix.Vector(_size.x + _size.w,_size.y);
			_quad.verts[2].pos = new phoenix.Vector(_size.x + _size.w,_size.y + _size.h);
			_quad.verts[3].pos = new phoenix.Vector(_size.x,_size.y + _size.h);
			_quad.verts[4].pos = new phoenix.Vector(_size.x,_size.y);
			_quad.verts[5].pos = new phoenix.Vector(_size.x + _size.w,_size.y + _size.h);
			this.set_dirty(true);
		}
	}
	,quad_pos: function(_quad_id,_p) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			var _diffx = _p.x - _quad.verts[0].pos.x;
			var _diffy = _p.y - _quad.verts[0].pos.y;
			var _g = _quad.verts[0].pos;
			_g.set_x(_g.x + _diffx);
			var _g1 = _quad.verts[0].pos;
			_g1.set_y(_g1.y + _diffy);
			var _g2 = _quad.verts[1].pos;
			_g2.set_x(_g2.x + _diffx);
			var _g3 = _quad.verts[1].pos;
			_g3.set_y(_g3.y + _diffy);
			var _g4 = _quad.verts[2].pos;
			_g4.set_x(_g4.x + _diffx);
			var _g5 = _quad.verts[2].pos;
			_g5.set_y(_g5.y + _diffy);
			var _g6 = _quad.verts[3].pos;
			_g6.set_x(_g6.x + _diffx);
			var _g7 = _quad.verts[3].pos;
			_g7.set_y(_g7.y + _diffy);
			var _g8 = _quad.verts[4].pos;
			_g8.set_x(_g8.x + _diffx);
			var _g9 = _quad.verts[4].pos;
			_g9.set_y(_g9.y + _diffy);
			var _g10 = _quad.verts[5].pos;
			_g10.set_x(_g10.x + _diffx);
			var _g11 = _quad.verts[5].pos;
			_g11.set_y(_g11.y + _diffy);
			this.set_dirty(true);
		}
	}
	,quad_color: function(_quad_id,_c) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			_quad.verts[0].color = _c;
			_quad.verts[1].color = _c;
			_quad.verts[2].color = _c;
			_quad.verts[3].color = _c;
			_quad.verts[4].color = _c;
			_quad.verts[5].color = _c;
		}
	}
	,quad_alpha: function(_quad_id,_a) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			_quad.verts[0].color.a = _a;
			_quad.verts[1].color.a = _a;
			_quad.verts[2].color.a = _a;
			_quad.verts[3].color.a = _a;
			_quad.verts[4].color.a = _a;
			_quad.verts[5].color.a = _a;
		}
	}
	,quad_uv_space: function(_quad_id,_uv) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			var flipx = _quad.flipx;
			var flipy = _quad.flipy;
			var sz_x = _uv.w;
			var sz_y = _uv.h;
			var tl_x = _uv.x;
			var tl_y = _uv.y;
			_quad._uv_cache.set(tl_x,tl_y,sz_x,sz_y);
			var tr_x = tl_x + sz_x;
			var tr_y = tl_y;
			var br_x = tl_x + sz_x;
			var br_y = tl_y + sz_y;
			var bl_x = tl_x;
			var bl_y = tl_y + sz_y;
			var tmp_x = 0.0;
			var tmp_y = 0.0;
			if(flipy) {
				tmp_y = bl_y;
				bl_y = tl_y;
				tl_y = tmp_y;
				tmp_y = br_y;
				br_y = tr_y;
				tr_y = tmp_y;
			}
			if(flipx) {
				tmp_x = tr_x;
				tr_x = tl_x;
				tl_x = tmp_x;
				tmp_x = br_x;
				br_x = bl_x;
				bl_x = tmp_x;
			}
			_quad.verts[0].uv.uv0.set_uv(tl_x,tl_y);
			_quad.verts[1].uv.uv0.set_uv(tr_x,tr_y);
			_quad.verts[2].uv.uv0.set_uv(br_x,br_y);
			_quad.verts[3].uv.uv0.set_uv(bl_x,bl_y);
			_quad.verts[4].uv.uv0.set_uv(tl_x,tl_y);
			_quad.verts[5].uv.uv0.set_uv(br_x,br_y);
			this.set_dirty(true);
		}
	}
	,quad_uv: function(_quad_id,_uv) {
		if(this.get_texture() == null) {
			haxe.Log.trace("Warning : calling UV on a PackedQuad Geometry with null texture.",{ fileName : "QuadPackGeometry.hx", lineNumber : 350, className : "phoenix.geometry.QuadPackGeometry", methodName : "quad_uv"});
			return;
		}
		var tlx = _uv.x / this.get_texture().width_actual;
		var tly = _uv.y / this.get_texture().height_actual;
		var szx = _uv.w / this.get_texture().width_actual;
		var szy = _uv.h / this.get_texture().height_actual;
		this.quad_uv_space(_quad_id,new phoenix.Rectangle(tlx,tly,szx,szy));
	}
	,quad_flipx: function(_quad_id,_flip) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			_quad.flipx = _flip;
			this.quad_uv_space(_quad_id,_quad._uv_cache);
		}
	}
	,quad_flipy: function(_quad_id,_flip) {
		var _quad = this.quads.get(_quad_id);
		if(_quad != null) {
			_quad.flipy = _flip;
			this.quad_uv_space(_quad_id,_quad._uv_cache);
		}
	}
	,__class__: phoenix.geometry.QuadPackGeometry
});
phoenix.geometry.RectangleGeometry = function(options) {
	phoenix.geometry.Geometry.call(this,options);
	if(options == null) return;
	this.set(options);
};
phoenix.geometry.RectangleGeometry.__name__ = ["phoenix","geometry","RectangleGeometry"];
phoenix.geometry.RectangleGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.RectangleGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	set: function(options) {
		this.vertices.splice(0,this.vertices.length);
		var _x = options.x;
		var _y = options.y;
		var _w = options.w;
		var _h = options.h;
		if(options.rect != null) {
			_x = options.rect.x;
			_y = options.rect.y;
			_w = options.rect.w;
			_h = options.rect.h;
		}
		var vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0));
		vert0.uv.uv0.set_uv(0,0);
		var vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(_w,0));
		vert1.uv.uv0.set_uv(1,0);
		var vert2 = new phoenix.geometry.Vertex(new phoenix.Vector(_w,0));
		vert2.uv.uv0.set_uv(1,0);
		var vert3 = new phoenix.geometry.Vertex(new phoenix.Vector(_w,_h));
		vert3.uv.uv0.set_uv(1,1);
		var vert4 = new phoenix.geometry.Vertex(new phoenix.Vector(_w,_h));
		vert4.uv.uv0.set_uv(1,1);
		var vert5 = new phoenix.geometry.Vertex(new phoenix.Vector(0,_h));
		vert5.uv.uv0.set_uv(0,1);
		var vert6 = new phoenix.geometry.Vertex(new phoenix.Vector(0,_h));
		vert6.uv.uv0.set_uv(0,1);
		var vert7 = new phoenix.geometry.Vertex(new phoenix.Vector(0,0));
		vert7.uv.uv0.set_uv(0,0);
		this.add(vert0);
		this.add(vert1);
		this.add(vert2);
		this.add(vert3);
		this.add(vert4);
		this.add(vert5);
		this.add(vert6);
		this.add(vert7);
		this.set_primitive_type(1);
		if(options.immediate == null) this.immediate = false; else this.immediate = options.immediate;
		this.set_visible(options.visible == null?true:options.visible);
		this.set_color(options.color == null?new phoenix.Color():options.color);
		this.transform.set_pos(new phoenix.Vector(_x,_y));
	}
	,__class__: phoenix.geometry.RectangleGeometry
});
phoenix.geometry._TextGeometry = {};
phoenix.geometry._TextGeometry.EvTextGeometry_Impl_ = function() { };
phoenix.geometry._TextGeometry.EvTextGeometry_Impl_.__name__ = ["phoenix","geometry","_TextGeometry","EvTextGeometry_Impl_"];
phoenix.geometry.TextGeometry = function(_options) {
	this.dirty_align = true;
	this.dirty_sizing = true;
	this.point_ratio = 1;
	this.text_h_h = 0;
	this.text_h_w = 0;
	this.text_height = 0;
	this.text_width = 0;
	this.glow_amount = 0;
	this.glow_threshold = 0;
	this.outline = 0;
	this.thickness = 0.5;
	this.smoothness = 0.75;
	this.unique = false;
	this.sdf = false;
	this.bounds_wrap = false;
	this.letter_spacing = 0.0;
	this.line_spacing = 0.0;
	this.point_size = 32.0;
	this.text = "";
	this.options = _options;
	this.emitter = new luxe.Emitter();
	if(this.options == null) throw "TextGeometry: requires non-null options at the moment";
	if(this.options.sdf != null) this.sdf = this.options.sdf;
	if(this.options.font == null) this.font = Luxe.renderer.font; else this.font = this.options.font;
	if(this.font == Luxe.renderer.font) this.sdf = true;
	if(this.options.shader == null) {
		if(this.sdf) this.options.shader = Luxe.renderer.shaders.bitmapfont.shader; else this.options.shader = Luxe.renderer.shaders.textured.shader;
	} else if(this.options.shader != Luxe.renderer.shaders.bitmapfont.shader) this.unique = true;
	phoenix.geometry.Geometry.call(this,this.options);
	this.set_primitive_type(4);
	this.cache = [];
	this.line_widths = [];
	this.line_offsets = [[],[]];
	this.lines = [];
	this.set_outline_color(new phoenix.Color());
	this.set_glow_color(new phoenix.Color());
	this.default_options();
};
phoenix.geometry.TextGeometry.__name__ = ["phoenix","geometry","TextGeometry"];
phoenix.geometry.TextGeometry.__super__ = phoenix.geometry.Geometry;
phoenix.geometry.TextGeometry.prototype = $extend(phoenix.geometry.Geometry.prototype,{
	tidy: function() {
		var _vertidx = Math.floor(this.vertices.length / 6);
		var _diff = this.cache.length - _vertidx;
		if(_diff > 0) {
			var extra = this.cache.splice(_vertidx,_diff);
			var c = extra.length;
			while(c > 0) {
				c--;
				var vert = extra.pop();
				vert = null;
			}
		}
	}
	,default_options: function() {
		this.set_texture(this.font.pages.get(0));
		if(this.options.letter_spacing != null) this.set_letter_spacing(this.options.letter_spacing);
		if(this.options.line_spacing != null) this.set_line_spacing(this.options.line_spacing);
		if(this.options.point_size != null) this.set_point_size(this.options.point_size);
		if(this.options.bounds != null) this.set_bounds(this.options.bounds);
		if(this.options.bounds_wrap != null) this.set_bounds_wrap(this.options.bounds_wrap);
		if(this.options.align == null) this.options.align = 0;
		if(this.options.align_vertical == null) this.options.align_vertical = 0;
		this.set_align(this.options.align);
		this.set_align_vertical(this.options.align_vertical);
		if(this.options.thickness != null) this.set_thickness(this.options.thickness);
		if(this.options.smoothness != null) this.set_smoothness(this.options.smoothness);
		if(this.options.outline != null) this.set_outline(this.options.outline);
		if(this.options.outline_color != null) this.set_outline_color(this.options.outline_color);
		if(this.options.glow_threshold != null) this.set_glow_threshold(this.options.glow_threshold);
		if(this.options.glow_amount != null) this.set_glow_amount(this.options.glow_amount);
		if(this.options.glow_color != null) this.set_glow_color(this.options.glow_color);
		if(this.sdf) this.flush_uniforms();
		if(this.options.text != null) this.set_text(this.options.text);
	}
	,set_text: function(_text) {
		if(_text == null) {
			haxe.Log.trace("i / textgeometry / " + "null text passed into TextGeometry!",{ fileName : "TextGeometry.hx", lineNumber : 239, className : "phoenix.geometry.TextGeometry", methodName : "set_text"});
			_text = "";
		}
		if(this.text != _text) {
			this.text = _text;
			if(this.text != "") {
				this.set_dirty_sizing(true);
				this.update_text();
			} else this.vertices.splice(0,this.vertices.length);
		}
		return this.text;
	}
	,stats: function() {
		return "letters:" + this.vertices.length / 6 + " / cache:" + this.cache.length;
	}
	,update_sizes: function() {
		if(!this.dirty_sizing) return false;
		var drawn_text = phoenix.geometry.TextGeometry.tab_regex.replace(this.text,"    ");
		if(this.bounds_wrap && this.bounds != null) drawn_text = this.font.wrap_string_to_bounds(drawn_text,this.bounds,this.point_size,this.letter_spacing);
		this.lines.splice(0,this.lines.length);
		this.lines = drawn_text.split("\n");
		this.line_widths.splice(0,this.line_widths.length);
		this.text_width = this.font.width_of(drawn_text,this.point_size,this.letter_spacing,this.line_widths);
		this.text_height = this.font.height_of_lines(this.lines,this.point_size,this.line_spacing);
		this.text_h_w = this.text_width / 2;
		this.text_h_h = this.text_height / 2;
		this.point_ratio = this.point_size / this.font.info.point_size;
		this.set_dirty_sizing(false);
		return true;
	}
	,update_text: function() {
		var _g = this;
		var _pos_x = 0.0;
		var _pos_y = 0.0;
		var _bounds_based = this.bounds != null;
		if(_bounds_based) {
			this.transform.local.pos.set_x(_pos_x = this.bounds.x);
			this.transform.local.pos.set_y(_pos_y = this.bounds.y);
		}
		var _cur_x = 0.0;
		var _cur_y = 0.0;
		var _line_idx = 0;
		var _total_idx = 0;
		var _is_char = true;
		var _was_dirty = this.update_sizes();
		var _g1 = 0;
		var _g11 = this.lines;
		while(_g1 < _g11.length) {
			var _line = _g11[_g1];
			++_g1;
			var _line_x_offset = 0.0;
			var _line_y_offset = 0.0;
			if(this.dirty_align) {
				if(!_bounds_based) {
					var _g2 = this.align;
					switch(_g2) {
					case 2:
						_line_x_offset = -(this.line_widths[_line_idx] / 2.0);
						break;
					case 1:
						_line_x_offset = -this.line_widths[_line_idx];
						break;
					default:
						_line_x_offset = 0.0;
					}
					var _g21 = this.align_vertical;
					switch(_g21) {
					case 2:
						_line_y_offset = -this.text_h_h;
						break;
					case 4:
						_line_y_offset = -this.text_height;
						break;
					default:
						_line_y_offset = 0.0;
					}
				} else {
					var _g22 = this.align;
					switch(_g22) {
					case 2:
						_line_x_offset = -(this.line_widths[_line_idx] / 2.0) + this.bounds.w / 2;
						break;
					case 1:
						_line_x_offset = -this.line_widths[_line_idx] + this.bounds.w;
						break;
					default:
						_line_x_offset = 0.0;
					}
					var _g23 = this.align_vertical;
					switch(_g23) {
					case 2:
						_line_y_offset = this.bounds.h / 2 - this.text_h_h;
						break;
					case 4:
						_line_y_offset = this.bounds.h - this.text_height;
						break;
					default:
						_line_y_offset = 0.0;
					}
				}
				this.line_offsets[0][_line_idx] = _line_x_offset;
				this.line_offsets[1][_line_idx] = _line_y_offset;
			} else {
				_line_x_offset = this.line_offsets[0][_line_idx];
				_line_y_offset = this.line_offsets[1][_line_idx];
			}
			if(_line_idx != 0) {
				_cur_y += (_g.font.info.line_height + _g.line_spacing) * _g.point_ratio;
				_cur_x = 0;
			}
			var _idx = 0;
			var $it0 = new luxe.utils.unifill.CodePointIter(_line);
			while( $it0.hasNext() ) {
				var _uglyph = $it0.next();
				var _index = _uglyph;
				var _char = this.font.info.chars.get(_index);
				_is_char = _char != null && _index > 32;
				if(!_is_char) _char = this.font.space_char;
				if(_is_char) {
					var _quad_x = _line_x_offset + _cur_x + _char.xoffset * this.point_ratio;
					var _quad_y = _line_y_offset + _cur_y + _char.yoffset * this.point_ratio;
					var _page = this.font.pages.get(_char.page);
					var _u1 = _char.x / _page.width_actual;
					var _v1 = _char.y / _page.height_actual;
					var _u2 = (_char.x + _char.width) / _page.width_actual;
					var _v2 = (_char.y + _char.height) / _page.height_actual;
					this.update_char(_total_idx,_quad_x,_quad_y,_char.width * this.point_ratio,_char.height * this.point_ratio,_u1,_v1,_u2,_v2,this.color);
					_total_idx++;
				}
				var _x_inc = _char.xadvance;
				if(_idx < _line.length - 1) {
					_x_inc += this.font.kerning(_index,luxe.utils.unifill.Unifill.uCharCodeAt(_line,_idx + 1));
					if(_index >= 32) _x_inc += this.letter_spacing;
				}
				_x_inc *= this.point_ratio;
				_cur_x += _x_inc;
				_idx++;
			}
			_line_idx++;
		}
		var _vertidx = this.vertices.length / 6 | 0;
		var _diff = _vertidx - _total_idx;
		if(_diff > 0) this.vertices.splice(_total_idx * 6,_diff * 6);
		this.dirty_align = false;
		this.emitter.emit(1,null,{ fileName : "TextGeometry.hx", lineNumber : 453, className : "phoenix.geometry.TextGeometry", methodName : "update_text"});
	}
	,update_char: function(_letteridx,_x,_y,_w,_h,_u,_v,_u2,_v2,_color) {
		var vert0;
		var vert1;
		var vert2;
		var vert3;
		var vert4;
		var vert5;
		var quad = this.cache[_letteridx];
		if(quad == null) {
			vert0 = new phoenix.geometry.Vertex(new phoenix.Vector(_x,_y),_color);
			vert1 = new phoenix.geometry.Vertex(new phoenix.Vector(_x + _w,_y),_color);
			vert2 = new phoenix.geometry.Vertex(new phoenix.Vector(_x + _w,_y + _h),_color);
			vert3 = new phoenix.geometry.Vertex(new phoenix.Vector(_x,_y + _h),_color);
			vert4 = new phoenix.geometry.Vertex(new phoenix.Vector(_x,_y),_color);
			vert5 = new phoenix.geometry.Vertex(new phoenix.Vector(_x + _w,_y + _h),_color);
			quad = [vert0,vert1,vert2,vert3,vert4,vert5];
			this.cache[_letteridx] = quad;
		} else {
			vert0 = quad[0];
			vert1 = quad[1];
			vert2 = quad[2];
			vert3 = quad[3];
			vert4 = quad[4];
			vert5 = quad[5];
			vert0.pos.set_xy(_x,_y);
			vert1.pos.set_xy(_x + _w,_y);
			vert2.pos.set_xy(_x + _w,_y + _h);
			vert3.pos.set_xy(_x,_y + _h);
			vert4.pos.set_xy(_x,_y);
			vert5.pos.set_xy(_x + _w,_y + _h);
		}
		vert0.uv.uv0.set_uv(_u,_v);
		vert1.uv.uv0.set_uv(_u2,_v);
		vert2.uv.uv0.set_uv(_u2,_v2);
		vert3.uv.uv0.set_uv(_u,_v2);
		vert4.uv.uv0.set_uv(_u,_v);
		vert5.uv.uv0.set_uv(_u2,_v2);
		var _vertidx = Math.floor(this.vertices.length / 6);
		if(_vertidx <= _letteridx) {
			this.add(vert0);
			this.add(vert1);
			this.add(vert2);
			this.add(vert3);
			this.add(vert4);
			this.add(vert5);
		}
	}
	,set_dirty_sizing: function(_b) {
		this.dirty_align = true;
		return this.dirty_sizing = _b;
	}
	,set_bounds: function(_bounds) {
		this.bounds = _bounds;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.bounds;
	}
	,set_bounds_wrap: function(_wrap) {
		this.bounds_wrap = _wrap;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.bounds_wrap;
	}
	,set_line_spacing: function(_line_spacing) {
		this.line_spacing = _line_spacing;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.line_spacing;
	}
	,set_letter_spacing: function(_letter_spacing) {
		this.letter_spacing = _letter_spacing;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.letter_spacing;
	}
	,set_align: function(_align) {
		this.align = _align;
		this.dirty_align = true;
		this.update_text();
		return this.align;
	}
	,set_align_vertical: function(_align_vertical) {
		this.align_vertical = _align_vertical;
		this.dirty_align = true;
		this.update_text();
		return this.align_vertical;
	}
	,set_point_size: function(s) {
		if(s < 0) s = 0;
		this.point_size = s;
		this.set_dirty_sizing(true);
		this.update_text();
		return this.point_size;
	}
	,set_smoothness: function(s) {
		if(s < 0) s = 0;
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_float("smoothness",s);
		return this.smoothness = s;
	}
	,set_thickness: function(s) {
		if(s < 0) s = 0;
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_float("thickness",s);
		return this.thickness = s;
	}
	,set_outline: function(s) {
		if(s < 0.0) s = 0.0; else if(s > 1.0) s = 1.0; else s = s;
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_float("outline",s);
		return this.outline = s;
	}
	,set_glow_threshold: function(s) {
		if(s < 0) s = 0;
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_float("glow_threshold",s);
		return this.glow_threshold = s;
	}
	,set_glow_amount: function(s) {
		if(s < 0) s = 0;
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_float("glow_amount",s);
		return this.glow_amount = s;
	}
	,set_outline_color: function(c) {
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_color("outline_color",c);
		return this.outline_color = c;
	}
	,set_glow_color: function(c) {
		if(this.get_shader() != null && this.sdf && this.unique) this.get_shader().set_color("glow_color",c);
		return this.glow_color = c;
	}
	,flush_uniforms: function() {
		if(this.get_shader() != null && this.sdf) {
			this.get_shader().set_float("smoothness",this.smoothness);
			this.get_shader().set_float("thickness",this.thickness);
			this.get_shader().set_float("outline",this.outline);
			this.get_shader().set_float("glow_threshold",this.glow_threshold);
			this.get_shader().set_float("glow_amount",this.glow_amount);
			this.get_shader().set_color("outline_color",this.outline_color);
			this.get_shader().set_color("glow_color",this.glow_color);
		}
	}
	,__class__: phoenix.geometry.TextGeometry
	,__properties__: $extend(phoenix.geometry.Geometry.prototype.__properties__,{set_dirty_sizing:"set_dirty_sizing",set_glow_color:"set_glow_color",set_glow_amount:"set_glow_amount",set_glow_threshold:"set_glow_threshold",set_outline_color:"set_outline_color",set_outline:"set_outline",set_thickness:"set_thickness",set_smoothness:"set_smoothness",set_align_vertical:"set_align_vertical",set_align:"set_align",set_bounds_wrap:"set_bounds_wrap",set_bounds:"set_bounds",set_letter_spacing:"set_letter_spacing",set_line_spacing:"set_line_spacing",set_point_size:"set_point_size",set_text:"set_text"})
});
phoenix.geometry.TextureCoordSet = function() {
	this.uv0 = new phoenix.geometry.TextureCoord();
	this.uv1 = new phoenix.geometry.TextureCoord();
	this.uv2 = new phoenix.geometry.TextureCoord();
	this.uv3 = new phoenix.geometry.TextureCoord();
	this.uv4 = new phoenix.geometry.TextureCoord();
	this.uv5 = new phoenix.geometry.TextureCoord();
	this.uv6 = new phoenix.geometry.TextureCoord();
	this.uv7 = new phoenix.geometry.TextureCoord();
};
phoenix.geometry.TextureCoordSet.__name__ = ["phoenix","geometry","TextureCoordSet"];
phoenix.geometry.TextureCoordSet.prototype = {
	clone: function() {
		var _set = new phoenix.geometry.TextureCoordSet();
		_set.uv0.set(this.uv0.u,this.uv0.v,this.uv0.w,this.uv0.t);
		_set.uv1.set(this.uv1.u,this.uv1.v,this.uv1.w,this.uv1.t);
		_set.uv2.set(this.uv2.u,this.uv2.v,this.uv2.w,this.uv2.t);
		_set.uv3.set(this.uv3.u,this.uv3.v,this.uv3.w,this.uv3.t);
		_set.uv4.set(this.uv4.u,this.uv4.v,this.uv4.w,this.uv4.t);
		_set.uv5.set(this.uv5.u,this.uv5.v,this.uv5.w,this.uv5.t);
		_set.uv6.set(this.uv6.u,this.uv6.v,this.uv6.w,this.uv6.t);
		_set.uv7.set(this.uv7.u,this.uv7.v,this.uv7.w,this.uv7.t);
		return _set;
	}
	,__class__: phoenix.geometry.TextureCoordSet
};
phoenix.geometry.TextureCoord = function(_u,_v,_w,_t) {
	if(_t == null) _t = 0.0;
	if(_w == null) _w = 0.0;
	if(_v == null) _v = 0.0;
	if(_u == null) _u = 0.0;
	this.t = 0.0;
	this.w = 0.0;
	this.v = 0.0;
	this.u = 0.0;
	this.u = _u;
	this.v = _v;
	this.w = _w;
	this.t = _t;
};
phoenix.geometry.TextureCoord.__name__ = ["phoenix","geometry","TextureCoord"];
phoenix.geometry.TextureCoord.prototype = {
	clone: function() {
		return new phoenix.geometry.TextureCoord(this.u,this.v,this.w,this.t);
	}
	,set: function(_u,_v,_w,_t) {
		this.u = _u;
		this.v = _v;
		this.w = _w;
		this.t = _t;
		return this;
	}
	,set_uv: function(_u,_v) {
		this.u = _u;
		this.v = _v;
		return this;
	}
	,toString: function() {
		return "{ u:" + this.v + ", v:" + this.v + " }";
	}
	,__class__: phoenix.geometry.TextureCoord
};
phoenix.geometry.Vertex = function(_pos,_color,_normal) {
	this.uv = new phoenix.geometry.TextureCoordSet();
	this.pos = _pos;
	if(_color == null) this.color = new phoenix.Color(); else this.color = _color;
	if(_normal == null) this.normal = new phoenix.Vector(); else this.normal = _normal;
};
phoenix.geometry.Vertex.__name__ = ["phoenix","geometry","Vertex"];
phoenix.geometry.Vertex.prototype = {
	clone: function() {
		var _new = new phoenix.geometry.Vertex(this.pos.clone(),this.color.clone(),this.normal.clone());
		_new.uv = this.uv.clone();
		return _new;
	}
	,__class__: phoenix.geometry.Vertex
};
phoenix.utils = {};
phoenix.utils.Rendering = function() { };
phoenix.utils.Rendering.__name__ = ["phoenix","utils","Rendering"];
phoenix.utils.Rendering.gl_blend_mode_from_BlendMode = function(_b) {
	switch(_b) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 768:
		return 768;
	case 769:
		return 769;
	case 770:
		return 770;
	case 771:
		return 771;
	case 772:
		return 772;
	case 773:
		return 773;
	case 774:
		return 774;
	case 775:
		return 775;
	case 776:
		return 776;
	}
};
phoenix.utils.Rendering.get_elements_for_type = function(type,length) {
	switch(type) {
	case 0:
		return length / 4 | 0;
	case 1:
		return length / 4 | 0;
	case 3:
		return length / 4 | 0;
	case 2:
		return length / 4 | 0;
	case 5:
		return length / 4 | 0;
	case 6:
		return length / 4 | 0;
	default:
		return length / 4 | 0;
	}
};
phoenix.utils.Rendering.fovx_to_y = function(fovx,aspect) {
	return 180 / Math.PI * (2 * Math.atan(Math.tan(fovx * (Math.PI / 180) / 2) * (1 / aspect)));
};
snow.AppFixedTimestep = function() {
	this.overflow = 0.0;
	this.frame_time = 0.0167;
	snow.App.call(this);
};
snow.AppFixedTimestep.__name__ = ["snow","AppFixedTimestep"];
snow.AppFixedTimestep.__super__ = snow.App;
snow.AppFixedTimestep.prototype = $extend(snow.App.prototype,{
	on_internal_init: function() {
		snow.App.prototype.on_internal_init.call(this);
		this.frame_time = 0.0166666666666666664;
		this.last_frame_start = snow.Snow.core.timestamp();
	}
	,on_internal_update: function() {
		this.cur_frame_start = snow.Snow.core.timestamp();
		this.delta_time = this.cur_frame_start - this.last_frame_start;
		this.delta_sim = this.delta_time * this.timescale;
		if(this.delta_sim > this.max_frame_time) this.delta_sim = this.max_frame_time;
		this.last_frame_start = this.cur_frame_start;
		this.overflow += this.delta_sim;
		while(this.overflow >= this.frame_time) {
			this.app.do_internal_update(this.frame_time * this.timescale);
			this.current_time += this.frame_time * this.timescale;
			this.overflow -= this.frame_time * this.timescale;
		}
		this.alpha = this.overflow / this.frame_time;
	}
	,__class__: snow.AppFixedTimestep
});
snow.Snow = function() {
	this.is_ready = false;
	this.was_ready = false;
	this.has_shutdown = false;
	this.shutting_down = false;
	this.freeze = false;
	snow.Snow.core = new snow.core.web.Core(this);
	snow.Snow.next_queue = [];
};
snow.Snow.__name__ = ["snow","Snow"];
snow.Snow.__properties__ = {get_timestamp:"get_timestamp"}
snow.Snow.next = function(func) {
	if(func != null) snow.Snow.next_queue.push(func);
};
snow.Snow.get_timestamp = function() {
	return snow.Snow.core.timestamp();
};
snow.Snow.prototype = {
	shutdown: function() {
		this.shutting_down = true;
		this.host.ondestroy();
		this.io.module.destroy();
		this.audio.destroy();
		this.input.destroy();
		this.windowing.destroy();
		snow.Snow.core.shutdown();
		this.has_shutdown = true;
	}
	,render: function() {
		this.windowing.update();
	}
	,dispatch_system_event: function(_event) {
		this.on_event(_event);
	}
	,init: function(_snow_config,_host) {
		this.snow_config = _snow_config;
		if(this.snow_config.app_package == null) this.snow_config.app_package = "org.snowkit.snowdefault";
		this.config = { has_window : true, runtime : { }, window : null, render : null, web : { no_context_menu : true, prevent_default_keys : [snow.system.input.Keycodes.left,snow.system.input.Keycodes.right,snow.system.input.Keycodes.up,snow.system.input.Keycodes.down,snow.system.input.Keycodes.backspace,snow.system.input.Keycodes.tab,snow.system.input.Keycodes["delete"]], prevent_default_mouse_wheel : true, true_fullscreen : false}, 'native' : { audio_buffer_length : 176400, audio_buffer_count : 4}};
		this.host = _host;
		this.host.app = this;
		snow.Snow.core.init($bind(this,this.on_event));
	}
	,on_snow_init: function() {
		this.host.on_internal_init();
	}
	,on_snow_ready: function() {
		var _g = this;
		if(this.was_ready) throw snow.types.Error.error("firing ready event more than once is invalid usage");
		this.io = new snow.system.io.IO(this);
		this.input = new snow.system.input.Input(this);
		this.audio = new snow.system.audio.Audio(this);
		this.assets = new snow.system.assets.Assets(this);
		this.windowing = new snow.system.window.Windowing(this);
		this.was_ready = true;
		this.setup_app_path();
		this.setup_default_assets().then(function(_) {
			_g.setup_configs().then(function(_1) {
				_g.setup_default_window();
				snow.Snow.next($bind(_g,_g.on_ready));
			});
		}).error(function(e) {
			throw snow.types.Error.init("snow / cannot recover from error: " + e);
		});
		snow.api.Promises.step();
		while(snow.Snow.next_queue.length > 0) this.cycle_next_queue();
	}
	,do_internal_update: function(dt) {
		this.io.module.update();
		this.input.update();
		this.audio.update();
		this.host.update(dt);
	}
	,on_ready: function() {
		this.is_ready = true;
		this.host.ready();
	}
	,on_snow_update: function() {
		if(this.freeze) return;
		snow.api.Timer.update();
		snow.api.Promises.step();
		this.cycle_next_queue();
		if(!this.is_ready) return;
		this.host.on_internal_update();
		this.host.on_internal_render();
	}
	,on_event: function(_event) {
		if(_event.type != 3 && _event.type != 0 && _event.type != 5 && _event.type != 6) null;
		if(_event.type != 3) null;
		if(this.is_ready) {
			this.io.module.on_event(_event);
			this.audio.on_event(_event);
			this.windowing.on_event(_event);
			this.input.on_event(_event);
			this.host.onevent(_event);
		}
		var _g = _event.type;
		switch(_g) {
		case 1:
			this.on_snow_init();
			break;
		case 2:
			this.on_snow_ready();
			break;
		case 3:
			this.on_snow_update();
			break;
		case 7:case 8:
			this.shutdown();
			break;
		case 4:
			haxe.Log.trace("     i / snow / " + "Goodbye.",{ fileName : "Snow.hx", lineNumber : 328, className : "snow.Snow", methodName : "on_event"});
			break;
		default:
		}
	}
	,cycle_next_queue: function() {
		var count = snow.Snow.next_queue.length;
		if(count > 0) {
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				(snow.Snow.next_queue.shift())();
			}
		}
	}
	,setup_app_path: function() {
	}
	,setup_default_assets: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			if(!_g.snow_config.config_custom_assets) {
				_g.assets.manifest_path = _g.snow_config.config_assets_path;
				_g.default_asset_list().then(function(list) {
					_g.assets.list = list;
				}).error(function(e) {
					null;
				}).then(resolve);
			}
		});
	}
	,setup_configs: function() {
		var _g = this;
		this.config.window = this.default_window_config();
		this.config.render = this.default_render_config();
		return new snow.api.Promise(function(resolve,reject) {
			if(!_g.snow_config.config_custom_runtime) _g.default_runtime_config().then(function(_runtime_conf) {
				_g.config.runtime = _runtime_conf;
			}).error(function(error) {
				throw snow.types.Error.init("config / failed / default runtime config failed to parse as JSON. cannot recover. " + error);
			}).then(function() {
				_g.setup_host_config();
				resolve();
			}); else {
				_g.setup_host_config();
				resolve();
			}
		});
	}
	,setup_host_config: function() {
		this.config = this.host.config(this.config);
	}
	,setup_default_window: function() {
		if(this.config.has_window == true) {
			this.window = this.windowing.create(this.config.window);
			if(this.window.handle == null) throw snow.types.Error.windowing("requested default window cannot be created. cannot continue");
		}
	}
	,default_runtime_config: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			var load = _g.io.data_flow(_g.snow_config.config_runtime_path,snow.system.assets.AssetJSON.processor);
			load.then(resolve).error(function(error) {
				switch(error[1]) {
				case 3:
					var val = error[2];
					reject(error);
					break;
				default:
					resolve();
				}
			});
		});
	}
	,default_asset_list: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			var list_path = _g.assets.root + _g.assets.manifest_path;
			var load = _g.io.data_flow(list_path,snow.system.assets.AssetJSON.processor);
			load.then(function(json) {
				var _list = json;
				resolve(_list);
			}).error(reject);
		});
	}
	,default_render_config: function() {
		return { depth : false, stencil : false, antialiasing : 0, red_bits : 8, green_bits : 8, blue_bits : 8, alpha_bits : 8, depth_bits : 0, stencil_bits : 0, opengl : { minor : 0, major : 0, profile : 0}};
	}
	,default_window_config: function() {
		var conf = { fullscreen_desktop : true, fullscreen : false, borderless : false, resizable : true, x : 536805376, y : 536805376, width : 960, height : 640, title : "snow app"};
		return conf;
	}
	,set_freeze: function(_freeze) {
		this.freeze = _freeze;
		if(_freeze) this.audio.suspend(); else this.audio.resume();
		return this.freeze;
	}
	,get_time: function() {
		return snow.Snow.core.timestamp();
	}
	,get_uniqueid: function() {
		return this.make_uniqueid();
	}
	,make_uniqueid: function(val) {
		if(val == null) val = Std.random(2147483647);
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		if(q > 0) return this.make_uniqueid(q) + (r > 9?(function($this) {
			var $r;
			var ascii = 65 + (r - 10);
			if(ascii > 90) ascii += 6;
			$r = String.fromCharCode(ascii);
			return $r;
		}(this)):(r == null?"null":"" + r).charAt(0));
		return Std.string(r > 9?(function($this) {
			var $r;
			var ascii1 = 65 + (r - 10);
			if(ascii1 > 90) ascii1 += 6;
			$r = String.fromCharCode(ascii1);
			return $r;
		}(this)):(r == null?"null":"" + r).charAt(0));
	}
	,typename: function(t) {
		return Type.getClassName(Type.getClass(t));
	}
	,__class__: snow.Snow
	,__properties__: {set_freeze:"set_freeze",get_uniqueid:"get_uniqueid",get_time:"get_time"}
};
snow.api = {};
snow.api._Debug = {};
snow.api._Debug.LogError = { __ename__ : true, __constructs__ : ["RequireString"] };
snow.api._Debug.LogError.RequireString = function(detail) { var $x = ["RequireString",0,detail]; $x.__enum__ = snow.api._Debug.LogError; $x.toString = $estr; return $x; };
snow.api.Debug = function() { };
snow.api.Debug.__name__ = ["snow","api","Debug"];
snow.api.Debug._get_spacing = function(_file) {
	var _spaces = "";
	var _trace_length = _file.length + 4;
	var _diff = snow.api.Debug._log_width - _trace_length;
	if(_diff > 0) {
		var _g = 0;
		while(_g < _diff) {
			var i = _g++;
			_spaces += " ";
		}
	}
	return _spaces;
};
snow.api.DebugError = { __ename__ : true, __constructs__ : ["assertion","null_assertion"] };
snow.api.DebugError.assertion = function(expr) { var $x = ["assertion",0,expr]; $x.__enum__ = snow.api.DebugError; $x.toString = $estr; return $x; };
snow.api.DebugError.null_assertion = function(expr) { var $x = ["null_assertion",1,expr]; $x.__enum__ = snow.api.DebugError; $x.toString = $estr; return $x; };
snow.api.Libs = function() { };
snow.api.Libs.__name__ = ["snow","api","Libs"];
snow.api.Libs.tryLoad = function(name,library,func,args) {
	return null;
};
snow.api.Libs.findHaxeLib = function(library) {
	try {
	} catch( e ) {
	}
	return "";
};
snow.api.Libs.get_system_name = function() {
	return window.navigator.userAgent;
	return "unknown";
};
snow.api.Libs.web_add_lib = function(library,root) {
	if(snow.api.Libs._web_libs == null) snow.api.Libs._web_libs = new haxe.ds.StringMap();
	var value = root;
	snow.api.Libs._web_libs.set(library,value);
	return true;
};
snow.api.Libs.web_lib_load = function(library,method) {
	if(snow.api.Libs._web_libs == null) snow.api.Libs._web_libs = new haxe.ds.StringMap();
	var _root = snow.api.Libs._web_libs.get(library);
	if(_root != null) return Reflect.field(_root,method);
	return null;
};
snow.api.Libs.load = function(library,method,args) {
	if(args == null) args = 0;
	var found_in_web_libs = snow.api.Libs.web_lib_load(library,method);
	if(found_in_web_libs) return found_in_web_libs;
	if(snow.api.Libs.__moduleNames == null) snow.api.Libs.__moduleNames = new haxe.ds.StringMap();
	if(snow.api.Libs.__moduleNames.exists(library)) {
	}
	snow.api.Libs.__moduleNames.set(library,library);
	var result = snow.api.Libs.tryLoad("./" + library,library,method,args);
	if(result == null) result = snow.api.Libs.tryLoad(".\\" + library,library,method,args);
	if(result == null) result = snow.api.Libs.tryLoad(library,library,method,args);
	if(result == null) {
		var slash;
		if(((function($this) {
			var $r;
			var _this = snow.api.Libs.get_system_name();
			$r = HxOverrides.substr(_this,7,null);
			return $r;
		}(this))).toLowerCase() == "windows") slash = "\\"; else slash = "/";
		var haxelib = snow.api.Libs.findHaxeLib("snow");
		if(haxelib != "") {
			result = snow.api.Libs.tryLoad(haxelib + slash + "ndll" + slash + snow.api.Libs.get_system_name() + slash + library,library,method,args);
			if(result == null) result = snow.api.Libs.tryLoad(haxelib + slash + "ndll" + slash + snow.api.Libs.get_system_name() + "64" + slash + library,library,method,args);
		}
	}
	snow.api.Libs.loaderTrace("Result : " + Std.string(result));
	return result;
};
snow.api.Libs.loaderTrace = function(message) {
};
snow.api.Promise = function(func) {
	this.was_caught = false;
	var _g = this;
	this.state = 0;
	this.reject_reactions = [];
	this.fulfill_reactions = [];
	this.settle_reactions = [];
	snow.api.Promises.queue(function() {
		func($bind(_g,_g.onfulfill),$bind(_g,_g.onreject));
		snow.api.Promises.defer(snow.api.Promises.next);
	});
};
snow.api.Promise.__name__ = ["snow","api","Promise"];
snow.api.Promise.all = function(_tag,list) {
	if(_tag == null) _tag = "all";
	return new snow.api.Promise(function(ok,no) {
		var current = 0;
		var total = list.length;
		var fulfill_result = [];
		var reject_result = null;
		var all_state = 0;
		var single_ok = function(val) {
			if(all_state != 0) return;
			current++;
			fulfill_result.push(val);
			if(total == current) {
				all_state = 1;
				ok(fulfill_result);
			}
		};
		var single_err = function(val1) {
			if(all_state != 0) return;
			all_state = 2;
			reject_result = val1;
			no(reject_result);
		};
		var _g = 0;
		while(_g < list.length) {
			var promise = list[_g];
			++_g;
			promise.then(single_ok).error(single_err);
		}
	});
};
snow.api.Promise.race = function(list) {
	return new snow.api.Promise(function(ok,no) {
		var settled = false;
		var single_ok = function(val) {
			if(settled) return;
			settled = true;
			ok(val);
		};
		var single_err = function(val1) {
			if(settled) return;
			settled = true;
			no(val1);
		};
		var _g = 0;
		while(_g < list.length) {
			var promise = list[_g];
			++_g;
			promise.then(single_ok).error(single_err);
		}
	});
};
snow.api.Promise.reject = function(reason) {
	return new snow.api.Promise(function(ok,no) {
		no(reason);
	});
};
snow.api.Promise.resolve = function(val) {
	return new snow.api.Promise(function(ok,no) {
		ok(val);
	});
};
snow.api.Promise.prototype = {
	then: function(on_fulfilled,on_rejected) {
		var _g = this.state;
		switch(_g) {
		case 0:
			this.add_fulfill(on_fulfilled);
			this.add_reject(on_rejected);
			return this.new_linked_promise();
		case 1:
			snow.api.Promises.defer(on_fulfilled,this.result);
			return snow.api.Promise.resolve(this.result);
		case 2:
			snow.api.Promises.defer(on_rejected,this.result);
			return snow.api.Promise.reject(this.result);
		}
	}
	,error: function(on_rejected) {
		var _g = this.state;
		switch(_g) {
		case 0:
			this.add_reject(on_rejected);
			return this.new_linked_resolve_empty();
		case 1:
			return snow.api.Promise.resolve(this.result);
		case 2:
			snow.api.Promises.defer(on_rejected,this.result);
			return snow.api.Promise.reject(this.result);
		}
	}
	,toString: function() {
		return "Promise { state:" + this.state_string() + ", result:" + Std.string(this.result) + " }";
	}
	,add_settle: function(f) {
		if(this.state == 0) this.settle_reactions.push(f); else snow.api.Promises.defer(f,this.result);
	}
	,new_linked_promise: function() {
		var _g = this;
		return new snow.api.Promise(function(f,r) {
			_g.add_settle(function(_) {
				if(_g.state == 1) f(_g.result); else r(_g.result);
			});
		});
	}
	,new_linked_resolve: function() {
		var _g = this;
		return new snow.api.Promise(function(f,r) {
			_g.add_settle(function(val) {
				f(val);
			});
		});
	}
	,new_linked_reject: function() {
		var _g = this;
		return new snow.api.Promise(function(f,r) {
			_g.add_settle(function(val) {
				r(val);
			});
		});
	}
	,new_linked_resolve_empty: function() {
		var _g = this;
		return new snow.api.Promise(function(f,r) {
			_g.add_settle(function(_) {
				f();
			});
		});
	}
	,new_linked_reject_empty: function() {
		var _g = this;
		return new snow.api.Promise(function(f,r) {
			_g.add_settle(function(_) {
				r();
			});
		});
	}
	,add_fulfill: function(f) {
		if(f != null) this.fulfill_reactions.push(f);
	}
	,add_reject: function(f) {
		if(f != null) {
			this.was_caught = true;
			this.reject_reactions.push(f);
		}
	}
	,onfulfill: function(val) {
		this.state = 1;
		this.result = val;
		while(this.fulfill_reactions.length > 0) {
			var fn = this.fulfill_reactions.shift();
			fn(this.result);
		}
		this.onsettle();
	}
	,onreject: function(reason) {
		this.state = 2;
		this.result = reason;
		while(this.reject_reactions.length > 0) {
			var fn = this.reject_reactions.shift();
			fn(this.result);
		}
		this.onsettle();
	}
	,onsettle: function() {
		while(this.settle_reactions.length > 0) {
			var fn = this.settle_reactions.shift();
			fn(this.result);
		}
	}
	,onexception: function(err) {
		var _g = this;
		this.add_settle(function(_) {
			if(!_g.was_caught) {
				if(_g.state == 2) {
					throw snow.api.PromiseError.UnhandledPromiseRejection(_g.toString());
					return;
				}
			}
		});
		if(this.state == 0) this.onreject(err);
	}
	,state_string: function() {
		var _g = this.state;
		switch(_g) {
		case 0:
			return "pending";
		case 1:
			return "fulfilled";
		case 2:
			return "rejected";
		}
	}
	,__class__: snow.api.Promise
};
snow.api.Promises = function() { };
snow.api.Promises.__name__ = ["snow","api","Promises"];
snow.api.Promises.step = function() {
	snow.api.Promises.next();
	while(snow.api.Promises.defers.length > 0) {
		var defer = snow.api.Promises.defers.shift();
		defer.f(defer.a);
	}
};
snow.api.Promises.next = function() {
	if(snow.api.Promises.calls.length > 0) (snow.api.Promises.calls.shift())();
};
snow.api.Promises.defer = function(f,a) {
	if(f == null) return;
	snow.api.Promises.defers.push({ f : f, a : a});
};
snow.api.Promises.queue = function(f) {
	if(f == null) return;
	snow.api.Promises.calls.push(f);
};
snow.api.PromiseError = { __ename__ : true, __constructs__ : ["UnhandledPromiseRejection"] };
snow.api.PromiseError.UnhandledPromiseRejection = function(err) { var $x = ["UnhandledPromiseRejection",0,err]; $x.__enum__ = snow.api.PromiseError; $x.toString = $estr; return $x; };
snow.api._Promise = {};
snow.api._Promise.PromiseState_Impl_ = function() { };
snow.api._Promise.PromiseState_Impl_.__name__ = ["snow","api","_Promise","PromiseState_Impl_"];
snow.api.Timer = function(_time) {
	this.time = _time;
	snow.api.Timer.running_timers.push(this);
	this.fire_at = snow.Snow.core.timestamp() + this.time;
	this.running = true;
};
snow.api.Timer.__name__ = ["snow","api","Timer"];
snow.api.Timer.measure = function(f,pos) {
	var t0 = snow.Snow.core.timestamp();
	var r = f();
	haxe.Log.trace(snow.Snow.core.timestamp() - t0 + "s",pos);
	return r;
};
snow.api.Timer.update = function() {
	var now = snow.Snow.core.timestamp();
	var _g = 0;
	var _g1 = snow.api.Timer.running_timers;
	while(_g < _g1.length) {
		var timer = _g1[_g];
		++_g;
		if(timer.running) {
			if(timer.fire_at < now) {
				timer.fire_at += timer.time;
				timer.run();
			}
		}
	}
};
snow.api.Timer.delay = function(_time,_f) {
	var t = new snow.api.Timer(_time);
	t.run = function() {
		t.stop();
		_f();
	};
	return t;
};
snow.api.Timer.prototype = {
	run: function() {
	}
	,stop: function() {
		if(this.running) {
			this.running = false;
			HxOverrides.remove(snow.api.Timer.running_timers,this);
		}
	}
	,__class__: snow.api.Timer
};
snow.api.buffers = {};
snow.api.buffers._Float32Array = {};
snow.api.buffers._Float32Array.Float32Array_Impl_ = function() { };
snow.api.buffers._Float32Array.Float32Array_Impl_.__name__ = ["snow","api","buffers","_Float32Array","Float32Array_Impl_"];
snow.api.buffers._Float32Array.Float32Array_Impl_.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow.api.buffers._Float32Array.Float32Array_Impl_.__get = function(this1,idx) {
	return this1[idx];
};
snow.api.buffers._Float32Array.Float32Array_Impl_.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b);
	if(len == null) return new Float32Array(bytes.b,byteOffset);
	return new Float32Array(bytes.b,byteOffset,len);
};
snow.api.buffers._Float32Array.Float32Array_Impl_.toBytes = function(this1) {
	return new haxe.io.Bytes(this1.byteLength,new Uint8Array(this1.buffer));
};
snow.api.buffers._Float32Array.Float32Array_Impl_.toString = function(this1) {
	return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
snow.api.buffers._Int32Array = {};
snow.api.buffers._Int32Array.Int32Array_Impl_ = function() { };
snow.api.buffers._Int32Array.Int32Array_Impl_.__name__ = ["snow","api","buffers","_Int32Array","Int32Array_Impl_"];
snow.api.buffers._Int32Array.Int32Array_Impl_.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow.api.buffers._Int32Array.Int32Array_Impl_.__get = function(this1,idx) {
	return this1[idx];
};
snow.api.buffers._Int32Array.Int32Array_Impl_.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b);
	if(len == null) return new Int32Array(bytes.b,byteOffset);
	return new Int32Array(bytes.b,byteOffset,len);
};
snow.api.buffers._Int32Array.Int32Array_Impl_.toBytes = function(this1) {
	return new haxe.io.Bytes(this1.byteLength,new Uint8Array(this1.buffer));
};
snow.api.buffers._Int32Array.Int32Array_Impl_.toString = function(this1) {
	return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
snow.api.buffers._Uint8Array = {};
snow.api.buffers._Uint8Array.Uint8Array_Impl_ = function() { };
snow.api.buffers._Uint8Array.Uint8Array_Impl_.__name__ = ["snow","api","buffers","_Uint8Array","Uint8Array_Impl_"];
snow.api.buffers._Uint8Array.Uint8Array_Impl_.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow.api.buffers._Uint8Array.Uint8Array_Impl_.__get = function(this1,idx) {
	return this1[idx];
};
snow.api.buffers._Uint8Array.Uint8Array_Impl_.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b);
	if(len == null) return new Uint8Array(bytes.b,byteOffset);
	return new Uint8Array(bytes.b,byteOffset,len);
};
snow.api.buffers._Uint8Array.Uint8Array_Impl_.toBytes = function(this1) {
	return new haxe.io.Bytes(this1.byteLength,new Uint8Array(this1.buffer));
};
snow.api.buffers._Uint8Array.Uint8Array_Impl_.toString = function(this1) {
	return "Uint8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
snow.core = {};
snow.core.web = {};
snow.core.web.Core = function(_app) {
	this._time_now = 0.0;
	this._lf_timestamp = 0.016;
	this.start_timestamp = 0.0;
	this.app = _app;
	this.start_timestamp = this.timestamp();
};
snow.core.web.Core.__name__ = ["snow","core","web","Core"];
snow.core.web.Core.prototype = {
	init: function(_event_handler) {
		this.app.on_event({ type : 1});
		this.app.on_event({ type : 2});
		if(this.app.snow_config.has_loop) this.request_update();
	}
	,shutdown: function() {
	}
	,timestamp: function() {
		var now;
		if(window.performance != null) now = window.performance.now() / 1000.0; else now = haxe.Timer.stamp();
		return now - this.start_timestamp;
	}
	,request_update: function() {
		var _g = this;
		if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) window.requestAnimationFrame($bind(this,this.snow_core_loop)); else {
			haxe.Log.trace("     i / core / " + ("warning : requestAnimationFrame not found, falling back to render_rate! render_rate:" + this.app.host.render_rate),{ fileName : "Core.hx", lineNumber : 76, className : "snow.core.web.Core", methodName : "request_update"});
			window.setTimeout(function() {
				var _now = _g.timestamp();
				_g._time_now += _now - _g._lf_timestamp;
				_g.snow_core_loop(_g._time_now * 1000.0);
				_g._lf_timestamp = _now;
			},this.app.host.render_rate * 1000.0 | 0);
		}
	}
	,snow_core_loop: function(_t) {
		if(_t == null) _t = 0.016;
		this.update();
		this.app.on_event({ type : 3});
		this.request_update();
		return true;
	}
	,update: function() {
	}
	,__class__: snow.core.web.Core
};
snow.modules = {};
snow.modules.interfaces = {};
snow.modules.interfaces.Assets = function() { };
snow.modules.interfaces.Assets.__name__ = ["snow","modules","interfaces","Assets"];
snow.modules.interfaces.Assets.prototype = {
	__class__: snow.modules.interfaces.Assets
};
snow.core.web.assets = {};
snow.core.web.assets.Assets = function(_system) {
	this.system = _system;
};
snow.core.web.assets.Assets.__name__ = ["snow","core","web","assets","Assets"];
snow.core.web.assets.Assets.__interfaces__ = [snow.modules.interfaces.Assets];
snow.core.web.assets.Assets.prototype = {
	init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,image_load_info: function(_id,_components) {
		if(_components == null) _components = 4;
		return this.system.app.io.data_flow(_id,snow.system.assets.AssetImage.processor);
	}
	,image_info_from_element: function(_id,_elem) {
		var width_pot = this.nearest_power_of_two(_elem.width);
		var height_pot = this.nearest_power_of_two(_elem.height);
		var image_bytes = this.POT_bytes_from_element(_elem.width,_elem.height,width_pot,height_pot,_elem);
		var info = { id : _id, bpp : 4, width : _elem.width, height : _elem.height, width_actual : width_pot, height_actual : height_pot, bpp_source : 4, pixels : image_bytes};
		image_bytes = null;
		return info;
	}
	,image_info_from_pixels: function(_id,_width,_height,_pixels) {
		var width_pot = this.nearest_power_of_two(_width);
		var height_pot = this.nearest_power_of_two(_height);
		var image_bytes = this.POT_bytes_from_pixels(_width,_height,width_pot,height_pot,_pixels);
		var info = { id : _id, bpp : 4, width : _width, height : _height, width_actual : width_pot, height_actual : height_pot, bpp_source : 4, pixels : image_bytes};
		image_bytes = null;
		return info;
	}
	,image_info_from_bytes: function(_id,_bytes,_components) {
		if(_components == null) _components = 4;
		var _g = this;
		var ext = haxe.io.Path.extension(_id);
		return new snow.api.Promise(function(resolve,reject) {
			var str = "";
			var i = 0;
			var len = _bytes.length;
			while(i < len) str += String.fromCharCode((function($this) {
				var $r;
				var a;
				{
					var idx = i++;
					a = _bytes[idx];
				}
				$r = a & 255;
				return $r;
			}(this)));
			var b64 = window.btoa(str);
			var src = "data:image/" + ext + ";base64," + b64;
			var _img = new Image();
			_img.onload = function(_) {
				var info = _g.image_info_from_element(_id,_img);
				resolve(info);
			};
			_img.onerror = function(e) {
				reject(snow.types.Error.error("failed to load image from bytes, on error: " + e));
			};
			_img.src = src;
		});
	}
	,POT_bytes_from_pixels: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas;
		var _this = window.document;
		tmp_canvas = _this.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d");
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		var image_bytes = null;
		var _pixels = new Uint8ClampedArray(_source.buffer);
		var _imgdata = tmp_context.createImageData(_width,_height);
		_imgdata.data.set(_pixels);
		try {
			tmp_context.putImageData(_imgdata,0,0);
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe.Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 197, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_pixels"});
			throw e;
		}
		tmp_canvas = null;
		tmp_context = null;
		_imgdata = null;
		var view = image_bytes.data;
		var len = null;
		var this1;
		if(view != null) this1 = new Uint8Array(view); else this1 = null;
		return this1;
	}
	,POT_bytes_from_element: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas;
		var _this = window.document;
		tmp_canvas = _this.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d");
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		tmp_context.drawImage(_source,0,0,_width,_height);
		var image_bytes = null;
		try {
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe.Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 233, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_element"});
			throw e;
		}
		tmp_canvas = null;
		tmp_context = null;
		var view = image_bytes.data;
		var len = null;
		var this1;
		if(view != null) this1 = new Uint8Array(view); else this1 = null;
		return this1;
	}
	,nearest_power_of_two: function(_value) {
		_value--;
		_value |= _value >> 1;
		_value |= _value >> 2;
		_value |= _value >> 4;
		_value |= _value >> 8;
		_value |= _value >> 16;
		_value++;
		return _value;
	}
	,__class__: snow.core.web.assets.Assets
};
snow.core.web.input = {};
snow.core.web.input.DOMKeys = function() { };
snow.core.web.input.DOMKeys.__name__ = ["snow","core","web","input","DOMKeys"];
snow.core.web.input.DOMKeys.dom_key_to_keycode = function(_keycode) {
	switch(_keycode) {
	case 16:
		return snow.system.input.Keycodes.lshift;
	case 17:
		return snow.system.input.Keycodes.lctrl;
	case 18:
		return snow.system.input.Keycodes.lalt;
	case 20:
		return snow.system.input.Keycodes.capslock;
	case 33:
		return snow.system.input.Keycodes.pageup;
	case 34:
		return snow.system.input.Keycodes.pagedown;
	case 35:
		return snow.system.input.Keycodes.end;
	case 36:
		return snow.system.input.Keycodes.home;
	case 37:
		return snow.system.input.Keycodes.left;
	case 38:
		return snow.system.input.Keycodes.up;
	case 39:
		return snow.system.input.Keycodes.right;
	case 40:
		return snow.system.input.Keycodes.down;
	case 44:
		return snow.system.input.Keycodes.printscreen;
	case 45:
		return snow.system.input.Keycodes.insert;
	case 46:
		return snow.system.input.Keycodes["delete"];
	case 91:
		return snow.system.input.Keycodes.lmeta;
	case 93:
		return snow.system.input.Keycodes.rmeta;
	case 224:
		return snow.system.input.Keycodes.lmeta;
	case 96:
		return snow.system.input.Keycodes.kp_0;
	case 97:
		return snow.system.input.Keycodes.kp_1;
	case 98:
		return snow.system.input.Keycodes.kp_2;
	case 99:
		return snow.system.input.Keycodes.kp_3;
	case 100:
		return snow.system.input.Keycodes.kp_4;
	case 101:
		return snow.system.input.Keycodes.kp_5;
	case 102:
		return snow.system.input.Keycodes.kp_6;
	case 103:
		return snow.system.input.Keycodes.kp_7;
	case 104:
		return snow.system.input.Keycodes.kp_8;
	case 105:
		return snow.system.input.Keycodes.kp_9;
	case 106:
		return snow.system.input.Keycodes.kp_multiply;
	case 107:
		return snow.system.input.Keycodes.kp_plus;
	case 109:
		return snow.system.input.Keycodes.kp_minus;
	case 110:
		return snow.system.input.Keycodes.kp_decimal;
	case 111:
		return snow.system.input.Keycodes.kp_divide;
	case 144:
		return snow.system.input.Keycodes.numlockclear;
	case 112:
		return snow.system.input.Keycodes.f1;
	case 113:
		return snow.system.input.Keycodes.f2;
	case 114:
		return snow.system.input.Keycodes.f3;
	case 115:
		return snow.system.input.Keycodes.f4;
	case 116:
		return snow.system.input.Keycodes.f5;
	case 117:
		return snow.system.input.Keycodes.f6;
	case 118:
		return snow.system.input.Keycodes.f7;
	case 119:
		return snow.system.input.Keycodes.f8;
	case 120:
		return snow.system.input.Keycodes.f9;
	case 121:
		return snow.system.input.Keycodes.f10;
	case 122:
		return snow.system.input.Keycodes.f11;
	case 123:
		return snow.system.input.Keycodes.f12;
	case 124:
		return snow.system.input.Keycodes.f13;
	case 125:
		return snow.system.input.Keycodes.f14;
	case 126:
		return snow.system.input.Keycodes.f15;
	case 127:
		return snow.system.input.Keycodes.f16;
	case 128:
		return snow.system.input.Keycodes.f17;
	case 129:
		return snow.system.input.Keycodes.f18;
	case 130:
		return snow.system.input.Keycodes.f19;
	case 131:
		return snow.system.input.Keycodes.f20;
	case 132:
		return snow.system.input.Keycodes.f21;
	case 133:
		return snow.system.input.Keycodes.f22;
	case 134:
		return snow.system.input.Keycodes.f23;
	case 135:
		return snow.system.input.Keycodes.f24;
	case 160:
		return snow.system.input.Keycodes.caret;
	case 161:
		return snow.system.input.Keycodes.exclaim;
	case 162:
		return snow.system.input.Keycodes.quotedbl;
	case 163:
		return snow.system.input.Keycodes.hash;
	case 164:
		return snow.system.input.Keycodes.dollar;
	case 165:
		return snow.system.input.Keycodes.percent;
	case 166:
		return snow.system.input.Keycodes.ampersand;
	case 167:
		return snow.system.input.Keycodes.underscore;
	case 168:
		return snow.system.input.Keycodes.leftparen;
	case 169:
		return snow.system.input.Keycodes.rightparen;
	case 170:
		return snow.system.input.Keycodes.asterisk;
	case 171:
		return snow.system.input.Keycodes.plus;
	case 172:
		return snow.system.input.Keycodes.backslash;
	case 173:
		return snow.system.input.Keycodes.minus;
	case 174:
		return snow.system.input.Keycodes.leftbracket;
	case 175:
		return snow.system.input.Keycodes.rightbracket;
	case 176:
		return snow.system.input.Keycodes.backquote;
	case 181:
		return snow.system.input.Keycodes.audiomute;
	case 182:
		return snow.system.input.Keycodes.volumedown;
	case 183:
		return snow.system.input.Keycodes.volumeup;
	case 188:
		return snow.system.input.Keycodes.comma;
	case 190:
		return snow.system.input.Keycodes.period;
	case 191:
		return snow.system.input.Keycodes.slash;
	case 192:
		return snow.system.input.Keycodes.backquote;
	case 219:
		return snow.system.input.Keycodes.leftbracket;
	case 221:
		return snow.system.input.Keycodes.rightbracket;
	case 220:
		return snow.system.input.Keycodes.backslash;
	case 222:
		return snow.system.input.Keycodes.quote;
	}
	return _keycode;
};
snow.modules.interfaces.Input = function() { };
snow.modules.interfaces.Input.__name__ = ["snow","modules","interfaces","Input"];
snow.modules.interfaces.Input.prototype = {
	__class__: snow.modules.interfaces.Input
};
snow.system = {};
snow.system.input = {};
snow.system.input.Scancodes = function() { };
snow.system.input.Scancodes.__name__ = ["snow","system","input","Scancodes"];
snow.system.input.Scancodes.$name = function(scancode) {
	var res = null;
	if(scancode >= 0 && scancode < snow.system.input.Scancodes.scancode_names.length) res = snow.system.input.Scancodes.scancode_names[scancode];
	if(res != null) return res; else return "";
};
snow.system.input.Keycodes = function() { };
snow.system.input.Keycodes.__name__ = ["snow","system","input","Keycodes"];
snow.system.input.Keycodes.from_scan = function(scancode) {
	return scancode | snow.system.input.Scancodes.MASK;
};
snow.system.input.Keycodes.to_scan = function(keycode) {
	if((keycode & snow.system.input.Scancodes.MASK) != 0) return keycode & ~snow.system.input.Scancodes.MASK;
	switch(keycode) {
	case snow.system.input.Keycodes.enter:
		return snow.system.input.Scancodes.enter;
	case snow.system.input.Keycodes.escape:
		return snow.system.input.Scancodes.escape;
	case snow.system.input.Keycodes.backspace:
		return snow.system.input.Scancodes.backspace;
	case snow.system.input.Keycodes.tab:
		return snow.system.input.Scancodes.tab;
	case snow.system.input.Keycodes.space:
		return snow.system.input.Scancodes.space;
	case snow.system.input.Keycodes.slash:
		return snow.system.input.Scancodes.slash;
	case snow.system.input.Keycodes.key_0:
		return snow.system.input.Scancodes.key_0;
	case snow.system.input.Keycodes.key_1:
		return snow.system.input.Scancodes.key_1;
	case snow.system.input.Keycodes.key_2:
		return snow.system.input.Scancodes.key_2;
	case snow.system.input.Keycodes.key_3:
		return snow.system.input.Scancodes.key_3;
	case snow.system.input.Keycodes.key_4:
		return snow.system.input.Scancodes.key_4;
	case snow.system.input.Keycodes.key_5:
		return snow.system.input.Scancodes.key_5;
	case snow.system.input.Keycodes.key_6:
		return snow.system.input.Scancodes.key_6;
	case snow.system.input.Keycodes.key_7:
		return snow.system.input.Scancodes.key_7;
	case snow.system.input.Keycodes.key_8:
		return snow.system.input.Scancodes.key_8;
	case snow.system.input.Keycodes.key_9:
		return snow.system.input.Scancodes.key_9;
	case snow.system.input.Keycodes.semicolon:
		return snow.system.input.Scancodes.semicolon;
	case snow.system.input.Keycodes.equals:
		return snow.system.input.Scancodes.equals;
	case snow.system.input.Keycodes.leftbracket:
		return snow.system.input.Scancodes.leftbracket;
	case snow.system.input.Keycodes.backslash:
		return snow.system.input.Scancodes.backslash;
	case snow.system.input.Keycodes.rightbracket:
		return snow.system.input.Scancodes.rightbracket;
	case snow.system.input.Keycodes.backquote:
		return snow.system.input.Scancodes.grave;
	case snow.system.input.Keycodes.key_a:
		return snow.system.input.Scancodes.key_a;
	case snow.system.input.Keycodes.key_b:
		return snow.system.input.Scancodes.key_b;
	case snow.system.input.Keycodes.key_c:
		return snow.system.input.Scancodes.key_c;
	case snow.system.input.Keycodes.key_d:
		return snow.system.input.Scancodes.key_d;
	case snow.system.input.Keycodes.key_e:
		return snow.system.input.Scancodes.key_e;
	case snow.system.input.Keycodes.key_f:
		return snow.system.input.Scancodes.key_f;
	case snow.system.input.Keycodes.key_g:
		return snow.system.input.Scancodes.key_g;
	case snow.system.input.Keycodes.key_h:
		return snow.system.input.Scancodes.key_h;
	case snow.system.input.Keycodes.key_i:
		return snow.system.input.Scancodes.key_i;
	case snow.system.input.Keycodes.key_j:
		return snow.system.input.Scancodes.key_j;
	case snow.system.input.Keycodes.key_k:
		return snow.system.input.Scancodes.key_k;
	case snow.system.input.Keycodes.key_l:
		return snow.system.input.Scancodes.key_l;
	case snow.system.input.Keycodes.key_m:
		return snow.system.input.Scancodes.key_m;
	case snow.system.input.Keycodes.key_n:
		return snow.system.input.Scancodes.key_n;
	case snow.system.input.Keycodes.key_o:
		return snow.system.input.Scancodes.key_o;
	case snow.system.input.Keycodes.key_p:
		return snow.system.input.Scancodes.key_p;
	case snow.system.input.Keycodes.key_q:
		return snow.system.input.Scancodes.key_q;
	case snow.system.input.Keycodes.key_r:
		return snow.system.input.Scancodes.key_r;
	case snow.system.input.Keycodes.key_s:
		return snow.system.input.Scancodes.key_s;
	case snow.system.input.Keycodes.key_t:
		return snow.system.input.Scancodes.key_t;
	case snow.system.input.Keycodes.key_u:
		return snow.system.input.Scancodes.key_u;
	case snow.system.input.Keycodes.key_v:
		return snow.system.input.Scancodes.key_v;
	case snow.system.input.Keycodes.key_w:
		return snow.system.input.Scancodes.key_w;
	case snow.system.input.Keycodes.key_x:
		return snow.system.input.Scancodes.key_x;
	case snow.system.input.Keycodes.key_y:
		return snow.system.input.Scancodes.key_y;
	case snow.system.input.Keycodes.key_z:
		return snow.system.input.Scancodes.key_z;
	}
	return snow.system.input.Scancodes.unknown;
};
snow.system.input.Keycodes.$name = function(keycode) {
	if((keycode & snow.system.input.Scancodes.MASK) != 0) return snow.system.input.Scancodes.$name(keycode & ~snow.system.input.Scancodes.MASK);
	switch(keycode) {
	case snow.system.input.Keycodes.enter:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes.enter);
	case snow.system.input.Keycodes.escape:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes.escape);
	case snow.system.input.Keycodes.backspace:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes.backspace);
	case snow.system.input.Keycodes.tab:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes.tab);
	case snow.system.input.Keycodes.space:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes.space);
	case snow.system.input.Keycodes["delete"]:
		return snow.system.input.Scancodes.$name(snow.system.input.Scancodes["delete"]);
	default:
		var decoder = new haxe.Utf8();
		decoder.__b += String.fromCharCode(keycode);
		return decoder.__b;
	}
};
snow.core.web.input.Input = function(_system) {
	this.gamepads_supported = false;
	this.system = _system;
};
snow.core.web.input.Input.__name__ = ["snow","core","web","input","Input"];
snow.core.web.input.Input.__interfaces__ = [snow.modules.interfaces.Input];
snow.core.web.input.Input.prototype = {
	init: function() {
		window.document.addEventListener("keypress",$bind(this,this.on_keypress));
		window.document.addEventListener("keydown",$bind(this,this.on_keydown));
		window.document.addEventListener("keyup",$bind(this,this.on_keyup));
		this.active_gamepads = new haxe.ds.IntMap();
		this.gamepads_supported = this.get_gamepad_list() != null;
		haxe.Log.trace("    i / input / " + ("Gamepads supported: " + Std.string(this.gamepads_supported)),{ fileName : "Input.hx", lineNumber : 42, className : "snow.core.web.input.Input", methodName : "init"});
	}
	,update: function() {
		if(this.gamepads_supported) this.poll_gamepads();
	}
	,destroy: function() {
	}
	,listen: function(window) {
		window.handle.addEventListener("contextmenu",$bind(this,this.on_contextmenu));
		window.handle.addEventListener("mousedown",$bind(this,this.on_mousedown));
		window.handle.addEventListener("mouseup",$bind(this,this.on_mouseup));
		window.handle.addEventListener("mousemove",$bind(this,this.on_mousemove));
		window.handle.addEventListener("mousewheel",$bind(this,this.on_mousewheel));
		window.handle.addEventListener("wheel",$bind(this,this.on_mousewheel));
		window.handle.addEventListener("touchstart",$bind(this,this.on_touchdown));
		window.handle.addEventListener("touchend",$bind(this,this.on_touchup));
		window.handle.addEventListener("touchmove",$bind(this,this.on_touchmove));
	}
	,unlisten: function(window) {
	}
	,on_event: function(_event) {
	}
	,text_input_start: function() {
	}
	,text_input_stop: function() {
	}
	,text_input_rect: function(x,y,w,h) {
	}
	,gamepad_add: function(id) {
	}
	,gamepad_remove: function(id) {
	}
	,poll_gamepads: function() {
		if(!this.gamepads_supported) return;
		var list = this.get_gamepad_list();
		if(list != null) {
			var _g1 = 0;
			var _g = list.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list[i] != null) this.handle_gamepad(list[i]); else {
					var _gamepad = this.active_gamepads.get(i);
					if(_gamepad != null) this.system.dispatch_gamepad_device_event(_gamepad.index,2,snow.Snow.core.timestamp());
					this.active_gamepads.remove(i);
				}
			}
		}
	}
	,handle_gamepad: function(_gamepad) {
		if(_gamepad == null) return;
		if(!(function($this) {
			var $r;
			var key = _gamepad.index;
			$r = $this.active_gamepads.exists(key);
			return $r;
		}(this))) {
			var _new_gamepad = { id : _gamepad.id, index : _gamepad.index, axes : [], buttons : [], timestamp : snow.Snow.core.timestamp()};
			var axes = _gamepad.axes;
			var _g = 0;
			while(_g < axes.length) {
				var value = axes[_g];
				++_g;
				_new_gamepad.axes.push(value);
			}
			var _button_list = _gamepad.buttons;
			var _g1 = 0;
			while(_g1 < _button_list.length) {
				var _button = _button_list[_g1];
				++_g1;
				_new_gamepad.buttons.push({ pressed : false, value : 0});
			}
			this.active_gamepads.set(_new_gamepad.index,_new_gamepad);
			this.system.dispatch_gamepad_device_event(_new_gamepad.index,1,_new_gamepad.timestamp);
		} else {
			var gamepad;
			var key1 = _gamepad.index;
			gamepad = this.active_gamepads.get(key1);
			if(gamepad.id != _gamepad.id) gamepad.id = _gamepad.id;
			var axes_changed = [];
			var buttons_changed = [];
			var last_axes = gamepad.axes;
			var last_buttons = gamepad.buttons;
			var new_axes = _gamepad.axes;
			var new_buttons = _gamepad.buttons;
			var axis_index = 0;
			var _g2 = 0;
			while(_g2 < new_axes.length) {
				var axis = new_axes[_g2];
				++_g2;
				if(axis != last_axes[axis_index]) {
					axes_changed.push(axis_index);
					gamepad.axes[axis_index] = axis;
				}
				axis_index++;
			}
			var button_index = 0;
			var _g3 = 0;
			while(_g3 < new_buttons.length) {
				var button = new_buttons[_g3];
				++_g3;
				if(button.value != last_buttons[button_index].value) {
					buttons_changed.push(button_index);
					gamepad.buttons[button_index].pressed = button.pressed;
					gamepad.buttons[button_index].value = button.value;
				}
				button_index++;
			}
			var _g4 = 0;
			while(_g4 < axes_changed.length) {
				var index = axes_changed[_g4];
				++_g4;
				this.system.dispatch_gamepad_axis_event(gamepad.index,index,new_axes[index],gamepad.timestamp);
			}
			var _g5 = 0;
			while(_g5 < buttons_changed.length) {
				var index1 = buttons_changed[_g5];
				++_g5;
				if(new_buttons[index1].pressed == true) this.system.dispatch_gamepad_button_down_event(gamepad.index,index1,new_buttons[index1].value,gamepad.timestamp); else this.system.dispatch_gamepad_button_up_event(gamepad.index,index1,new_buttons[index1].value,gamepad.timestamp);
			}
		}
	}
	,fail_gamepads: function() {
		this.gamepads_supported = false;
		haxe.Log.trace("    i / input / " + "Gamepads are not supported in this browser :(",{ fileName : "Input.hx", lineNumber : 262, className : "snow.core.web.input.Input", methodName : "fail_gamepads"});
	}
	,get_gamepad_list: function() {
		var modernizr = window.Modernizr;
		if(modernizr != null) {
			if(modernizr.gamepads == true) {
				if(($_=window.navigator,$bind($_,$_.getGamepads)) != null) return window.navigator.getGamepads();
				if(window.navigator.webkitGetGamepads != null) return window.navigator.webkitGetGamepads();
				this.fail_gamepads();
			} else this.fail_gamepads();
		}
		return null;
	}
	,on_mousedown: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		this.system.dispatch_mouse_down_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_mouse_event.button + 1,_mouse_event.timeStamp,_window.id);
	}
	,on_mouseup: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		this.system.dispatch_mouse_up_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_mouse_event.button + 1,_mouse_event.timeStamp,_window.id);
	}
	,on_mousemove: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		var _movement_x = _mouse_event.movementX;
		var _movement_y = _mouse_event.movementY;
		if(_mouse_event.webkitMovementX != null) {
			_movement_x = _mouse_event.webkitMovementX;
			_movement_y = _mouse_event.webkitMovementY;
		} else if(_mouse_event.mozMovementX != null) {
			_movement_x = _mouse_event.mozMovementX;
			_movement_y = _mouse_event.mozMovementY;
		}
		this.system.dispatch_mouse_move_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_movement_x,_movement_y,_mouse_event.timeStamp,_window.id);
	}
	,on_mousewheel: function(_wheel_event) {
		if(this.system.app.config.web.prevent_default_mouse_wheel) _wheel_event.preventDefault();
		var _window = this.system.app.windowing.window_from_handle(_wheel_event.target);
		var _x = 0;
		var _y = 0;
		if(_wheel_event.deltaY != null) _y = _wheel_event.deltaY; else if(_wheel_event.wheelDeltaY != null) _y = -_wheel_event.wheelDeltaY / 3 | 0;
		if(_wheel_event.deltaX != null) _x = _wheel_event.deltaX; else if(_wheel_event.wheelDeltaX != null) _x = -_wheel_event.wheelDeltaX / 3 | 0;
		this.system.dispatch_mouse_wheel_event(Math.round(_x / 16),Math.round(_y / 16),_wheel_event.timeStamp,_window.id);
	}
	,on_contextmenu: function(_event) {
		if(this.system.app.config.web.no_context_menu) _event.preventDefault();
	}
	,on_keypress: function(_key_event) {
		if(_key_event.which != 0 && HxOverrides.indexOf(snow.core.web.input.Input._keypress_blacklist,_key_event.keyCode,0) == -1) {
			var _text = String.fromCharCode(_key_event.charCode);
			this.system.dispatch_text_event(_text,0,_text.length,2,_key_event.timeStamp,1);
		}
	}
	,on_keydown: function(_key_event) {
		var _keycode = this.convert_keycode(_key_event.keyCode);
		var _scancode = snow.system.input.Keycodes.to_scan(_keycode);
		var _mod_state = this.mod_state_from_event(_key_event);
		if(HxOverrides.indexOf(this.system.app.config.web.prevent_default_keys,_keycode,0) != -1) _key_event.preventDefault();
		this.system.dispatch_key_down_event(_keycode,_scancode,_key_event.repeat,_mod_state,_key_event.timeStamp,1);
	}
	,on_keyup: function(_key_event) {
		var _keycode = this.convert_keycode(_key_event.keyCode);
		var _scancode = snow.system.input.Keycodes.to_scan(_keycode);
		var _mod_state = this.mod_state_from_event(_key_event);
		if(HxOverrides.indexOf(this.system.app.config.web.prevent_default_keys,_keycode,0) != -1) _key_event.preventDefault();
		this.system.dispatch_key_up_event(_keycode,_scancode,_key_event.repeat,_mod_state,_key_event.timeStamp,1);
	}
	,mod_state_from_event: function(_key_event) {
		var _none = !_key_event.altKey && !_key_event.ctrlKey && !_key_event.metaKey && !_key_event.shiftKey;
		return { none : _none, lshift : _key_event.shiftKey, rshift : _key_event.shiftKey, lctrl : _key_event.ctrlKey, rctrl : _key_event.ctrlKey, lalt : _key_event.altKey, ralt : _key_event.altKey, lmeta : _key_event.metaKey, rmeta : _key_event.metaKey, num : false, caps : false, mode : false, ctrl : _key_event.ctrlKey, shift : _key_event.shiftKey, alt : _key_event.altKey, meta : _key_event.metaKey};
	}
	,convert_keycode: function(dom_keycode) {
		if(dom_keycode >= 65 && dom_keycode <= 90) return dom_keycode + 32;
		return snow.core.web.input.DOMKeys.dom_key_to_keycode(dom_keycode);
	}
	,on_touchdown: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_down_event(_x,_y,touch.identifier,snow.Snow.core.timestamp());
		}
	}
	,on_touchup: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_up_event(_x,_y,touch.identifier,snow.Snow.core.timestamp());
		}
	}
	,on_touchmove: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_move_event(_x,_y,0,0,touch.identifier,snow.Snow.core.timestamp());
		}
	}
	,__class__: snow.core.web.input.Input
};
snow.modules.interfaces.IO = function() { };
snow.modules.interfaces.IO.__name__ = ["snow","modules","interfaces","IO"];
snow.modules.interfaces.IO.prototype = {
	__class__: snow.modules.interfaces.IO
};
snow.core.web.io = {};
snow.core.web.io.IO = function(_system) {
	this.system = _system;
};
snow.core.web.io.IO.__name__ = ["snow","core","web","io","IO"];
snow.core.web.io.IO.__interfaces__ = [snow.modules.interfaces.IO];
snow.core.web.io.IO.prototype = {
	url_open: function(_url) {
		if(_url != null && _url.length > 0) window.open(_url,"_blank");
	}
	,data_load: function(_path,_options) {
		return new snow.api.Promise(function(resolve,reject) {
			var _async = true;
			var _binary = true;
			if(_options != null) {
				if(_options.binary != null) _binary = _options.binary;
			}
			var request = new XMLHttpRequest();
			request.open("GET",_path,_async);
			if(_binary) request.overrideMimeType("text/plain; charset=x-user-defined"); else request.overrideMimeType("text/plain; charset=UTF-8");
			if(_async) request.responseType = "arraybuffer";
			request.onload = function(data) {
				if(request.status == 200) resolve((function($this) {
					var $r;
					var elements = request.response;
					var len = null;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this))); else reject(snow.types.Error.error("request status was " + request.status + " / " + request.statusText));
			};
			request.send();
		});
	}
	,data_save: function(_path,_data,_options) {
		return false;
	}
	,init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(_event) {
	}
	,__class__: snow.core.web.io.IO
};
snow.modules.interfaces.Windowing = function() { };
snow.modules.interfaces.Windowing.__name__ = ["snow","modules","interfaces","Windowing"];
snow.modules.interfaces.Windowing.prototype = {
	__class__: snow.modules.interfaces.Windowing
};
snow.core.web.window = {};
snow.core.web.window.Windowing = function(_system) {
	this._hidden_event_name = "";
	this._hidden_name = "";
	this._cursor_visible = true;
	this._pre_fs_body_margin = "0";
	this._pre_fs_body_overflow = "0";
	this._pre_fs_height = 0;
	this._pre_fs_width = 0;
	this._pre_fs_s_height = "";
	this._pre_fs_s_width = "";
	this._pre_fs_margin = "0";
	this._pre_fs_padding = "0";
	this.seq_window = 1;
	this.system = _system;
	this.fs_windows = [];
	this.gl_contexts = new haxe.ds.IntMap();
};
snow.core.web.window.Windowing.__name__ = ["snow","core","web","window","Windowing"];
snow.core.web.window.Windowing.__interfaces__ = [snow.modules.interfaces.Windowing];
snow.core.web.window.Windowing.prototype = {
	init: function() {
		this.listen_for_visibility();
		this.listen_for_resize();
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,_copy_config: function(_config) {
		return { borderless : _config.borderless, fullscreen : _config.fullscreen, fullscreen_desktop : _config.fullscreen_desktop, height : _config.height, no_input : _config.no_input, resizable : _config.resizable, title : _config.title, width : _config.width, x : _config.x, y : _config.y};
	}
	,create: function(render_config,_config,on_created) {
		var _window_id = this.seq_window;
		var _handle;
		var _this = window.document;
		_handle = _this.createElement("canvas");
		var config = this._copy_config(_config);
		_handle.width = config.width;
		_handle.height = config.height;
		if(config.fullscreen) {
			this.internal_fullscreen(_handle,config.fullscreen);
			config.width = _handle.width;
			config.height = _handle.height;
		}
		_handle.style.display = "block";
		_handle.style.position = "relative";
		_handle.style.background = "#000";
		window.document.body.appendChild(_handle);
		var _gl_context = js.html._CanvasElement.CanvasUtil.getContextWebGL(_handle,{ alpha : false, premultipliedAlpha : false, antialias : render_config.antialiasing > 0});
		if(_gl_context == null) {
			var msg = "WebGL is required to run this!<br/><br/>";
			msg += "visit http://get.webgl.org/ for help <br/>";
			msg += "and contact the developer of the application";
			this.internal_fallback(msg);
			throw snow.types.Error.windowing(msg);
		}
		if(snow.modules.opengl.web.GL.current_context == null) snow.modules.opengl.web.GL.current_context = _gl_context;
		this.gl_contexts.set(_window_id,_gl_context);
		var _window_pos = this.get_real_window_position(_handle);
		config.x = _window_pos.x;
		config.y = _window_pos.y;
		if(config.title != null && config.title != "") window.document.title = config.title;
		on_created(_handle,_window_id,{ config : config, render_config : render_config});
		_handle.setAttribute("id","window" + _window_id);
		this.seq_window++;
	}
	,destroy_window: function(_window) {
		window.document.body.removeChild(_window.handle);
	}
	,close: function(_window) {
		_window.handle.style.display = "none";
	}
	,show: function(_window) {
		_window.handle.style.display = null;
	}
	,internal_resize: function(_window,_w,_h) {
		this.system.app.dispatch_system_event({ type : 5, window : { type : 7, timestamp : snow.Snow.core.timestamp(), window_id : _window.id, event : { x : _w, y : _h}}});
		this.system.app.dispatch_system_event({ type : 5, window : { type : 6, timestamp : snow.Snow.core.timestamp(), window_id : _window.id, event : { x : _w, y : _h}}});
	}
	,update_window: function(_window) {
		var _rect = _window.handle.getBoundingClientRect();
		if(_rect.left != _window.x || _rect.top != _window.y) this.system.app.dispatch_system_event({ type : 5, window : { type : 5, timestamp : snow.Snow.core.timestamp(), window_id : _window.id, event : { x : _rect.left, y : _rect.top}}});
		if(_rect.width != _window.width || _rect.height != _window.height) this.internal_resize(_window,_rect.width,_rect.height);
		_rect = null;
	}
	,render: function(_window) {
		var _window_gl_context = this.gl_contexts.get(_window.id);
		if(snow.modules.opengl.web.GL.current_context != _window_gl_context) snow.modules.opengl.web.GL.current_context = _window_gl_context;
	}
	,swap: function(_window) {
	}
	,simple_message: function(_window,message,title) {
		if(title == null) title = "";
		window.alert(message);
	}
	,set_size: function(_window,w,h) {
		_window.handle.width = w;
		_window.handle.height = h;
		_window.handle.style.width = "" + w + "px";
		_window.handle.style.height = "" + h + "px";
		this.internal_resize(_window,w,h);
	}
	,set_position: function(_window,x,y) {
		_window.handle.style.left = "" + x + "px";
		_window.handle.style.top = "" + y + "px";
	}
	,get_real_window_position: function(handle) {
		var curleft = 0;
		var curtop = 0;
		var _obj = handle;
		var _has_parent = true;
		var _max_count = 0;
		while(_has_parent == true) {
			_max_count++;
			if(_max_count > 100) {
				_has_parent = false;
				break;
			}
			if(_obj.offsetParent != null) {
				curleft += _obj.offsetLeft;
				curtop += _obj.offsetTop;
				_obj = _obj.offsetParent;
			} else _has_parent = false;
		}
		return { x : curleft, y : curtop};
	}
	,set_title: function(_window,title) {
		window.document.title = title;
	}
	,set_max_size: function(_window,w,h) {
		_window.handle.style.maxWidth = "" + w + "px";
		_window.handle.style.maxHeight = "" + h + "px";
	}
	,set_min_size: function(_window,w,h) {
		_window.handle.style.minWidth = "" + w + "px";
		_window.handle.style.minHeight = "" + h + "px";
	}
	,internal_fullscreen: function(_handle,fullscreen) {
		var true_fullscreen = this.system.app.config.web.true_fullscreen;
		if(fullscreen) {
			if(true_fullscreen) {
				if($bind(_handle,_handle.requestFullscreen) == null) {
					if($bind(_handle,_handle.requestFullScreen) == null) {
						if(_handle.webkitRequestFullscreen == null) {
							if(_handle.mozRequestFullScreen == null) {
							} else _handle.mozRequestFullScreen();
						} else _handle.webkitRequestFullscreen();
					} else _handle.requestFullScreen(null);
				} else _handle.requestFullscreen();
			} else {
				this._pre_fs_padding = _handle.style.padding;
				this._pre_fs_margin = _handle.style.margin;
				this._pre_fs_s_width = _handle.style.width;
				this._pre_fs_s_height = _handle.style.height;
				this._pre_fs_width = _handle.width;
				this._pre_fs_height = _handle.height;
				this._pre_fs_body_margin = window.document.body.style.margin;
				this._pre_fs_body_overflow = window.document.body.style.overflow;
				_handle.style.margin = "0";
				_handle.style.padding = "0";
				_handle.style.width = window.innerWidth + "px";
				_handle.style.height = window.innerHeight + "px";
				_handle.width = window.innerWidth;
				_handle.height = window.innerHeight;
				window.document.body.style.margin = "0";
				window.document.body.style.overflow = "hidden";
			}
		} else if(true_fullscreen) {
		} else {
			_handle.style.padding = this._pre_fs_padding;
			_handle.style.margin = this._pre_fs_margin;
			_handle.style.width = this._pre_fs_s_width;
			_handle.style.height = this._pre_fs_s_height;
			_handle.width = this._pre_fs_width;
			_handle.height = this._pre_fs_height;
			window.document.body.style.margin = this._pre_fs_body_margin;
			window.document.body.style.overflow = this._pre_fs_body_overflow;
		}
	}
	,fullscreen: function(_window,fullscreen) {
		if(fullscreen) {
			if(HxOverrides.indexOf(this.fs_windows,_window,0) == -1) this.fs_windows.push(_window);
		} else HxOverrides.remove(this.fs_windows,_window);
		this.internal_fullscreen(_window.handle,fullscreen);
	}
	,bordered: function(_window,bordered) {
	}
	,grab: function(_window,grabbed) {
		if(grabbed) {
			if(($_=_window.handle,$bind($_,$_.requestPointerLock)) == null) {
				if(_window.handle.webkitRequestPointerLock == null) {
					if(_window.handle.mozRequestPointerLock == null) {
					} else _window.handle.mozRequestPointerLock();
				} else _window.handle.webkitRequestPointerLock();
			} else _window.handle.requestPointerLock();
		} else {
		}
	}
	,set_cursor_position: function(_window,x,y) {
	}
	,system_enable_cursor: function(enable) {
		if(this.cursor_style == null) {
			var _this = window.document;
			this.cursor_style = _this.createElement("style");
			this.cursor_style.innerHTML = "* { cursor:none; }";
		}
		if(enable && !this._cursor_visible) {
			this._cursor_visible = true;
			window.document.body.removeChild(this.cursor_style);
		} else if(!enable && this._cursor_visible) {
			this._cursor_visible = false;
			window.document.body.appendChild(this.cursor_style);
		}
	}
	,system_lock_cursor: function(enable) {
		if(this.system.app.window != null) this.grab(this.system.app.window,enable);
	}
	,system_enable_vsync: function(enable) {
		return -1;
	}
	,display_count: function() {
		return 1;
	}
	,display_mode_count: function(display) {
		return 1;
	}
	,display_native_mode: function(display) {
		return { format : 0, refresh_rate : 0, width : window.screen.width, height : window.screen.height};
	}
	,display_current_mode: function(display) {
		return this.display_native_mode(display);
	}
	,display_mode: function(display,mode_index) {
		return this.display_native_mode(display);
	}
	,display_bounds: function(display) {
		return { x : 0, y : 0, width : window.innerWidth, height : window.innerHeight};
	}
	,display_name: function(display) {
		return window.navigator.vendor;
	}
	,listen: function(_window) {
		_window.handle.addEventListener("mouseleave",$bind(this,this.on_internal_leave));
		_window.handle.addEventListener("mouseenter",$bind(this,this.on_internal_enter));
	}
	,unlisten: function(_window) {
		_window.handle.removeEventListener("mouseleave",$bind(this,this.on_internal_leave));
		_window.handle.removeEventListener("mouseenter",$bind(this,this.on_internal_enter));
	}
	,on_internal_leave: function(_mouse_event) {
		var _window = this.system.window_from_handle(_mouse_event.target);
		this.system.app.dispatch_system_event({ type : 5, window : { type : 12, timestamp : _mouse_event.timeStamp, window_id : _window.id, event : _mouse_event}});
	}
	,on_internal_enter: function(_mouse_event) {
		var _window = this.system.window_from_handle(_mouse_event.target);
		this.system.app.dispatch_system_event({ type : 5, window : { type : 11, timestamp : _mouse_event.timeStamp, window_id : _window.id, event : _mouse_event}});
	}
	,listen_for_resize: function() {
		var _g = this;
		window.onresize = function(e) {
			if(!_g.system.app.config.web.true_fullscreen) {
				var _g1 = 0;
				var _g2 = _g.fs_windows;
				while(_g1 < _g2.length) {
					var $window = _g2[_g1];
					++_g1;
					$window.set_size(window.innerWidth,window.innerHeight);
					_g.internal_resize($window,$window.width,$window.height);
				}
			}
		};
	}
	,listen_for_visibility: function() {
		if(typeof document.hidden !== undefined) {
			this._hidden_name = "hidden";
			this._hidden_event_name = "visibilitychange";
		} else if(typeof document.mozHidden !== undefined ) {
			this._hidden_name = "mozHidden";
			this._hidden_name = "mozvisibilitychange";
		} else if(typeof document.msHidden !== "undefined") {
			this._hidden_name = "msHidden";
			this._hidden_event_name = "msvisibilitychange";
		} else if(typeof document.webkitHidden !== "undefined") {
			this._hidden_name = "webkitHidden";
			this._hidden_event_name = "webkitvisibilitychange";
		}
		if(this._hidden_name != "" && this._hidden_event_name != "") window.document.addEventListener(this._hidden_event_name,$bind(this,this.on_visibility_change));
	}
	,on_visibility_change: function(jsevent) {
		var _event = { type : 5, window : { type : 2, timestamp : snow.Snow.core.timestamp(), window_id : 1, event : jsevent}};
		if(document[this._hidden_name]) {
			_event.window.type = 3;
			this.system.app.dispatch_system_event(_event);
			_event.window.type = 8;
			this.system.app.dispatch_system_event(_event);
			_event.window.type = 14;
			this.system.app.dispatch_system_event(_event);
		} else {
			_event.window.type = 2;
			this.system.app.dispatch_system_event(_event);
			_event.window.type = 10;
			this.system.app.dispatch_system_event(_event);
			_event.window.type = 13;
			this.system.app.dispatch_system_event(_event);
		}
	}
	,internal_fallback: function(message) {
		var text_el;
		var overlay_el;
		var _this = window.document;
		text_el = _this.createElement("div");
		var _this1 = window.document;
		overlay_el = _this1.createElement("div");
		text_el.style.marginLeft = "auto";
		text_el.style.marginRight = "auto";
		text_el.style.color = "#d3d3d3";
		text_el.style.marginTop = "5em";
		text_el.style.fontSize = "1.4em";
		text_el.style.fontFamily = "helvetica,sans-serif";
		text_el.innerHTML = message;
		overlay_el.style.top = "0";
		overlay_el.style.left = "0";
		overlay_el.style.width = "100%";
		overlay_el.style.height = "100%";
		overlay_el.style.display = "block";
		overlay_el.style.minWidth = "100%";
		overlay_el.style.minHeight = "100%";
		overlay_el.style.textAlign = "center";
		overlay_el.style.position = "absolute";
		overlay_el.style.background = "rgba(1,1,1,0.90)";
		overlay_el.appendChild(text_el);
		window.document.body.appendChild(overlay_el);
	}
	,__class__: snow.core.web.window.Windowing
};
snow.modules.interfaces.Audio = function() { };
snow.modules.interfaces.Audio.__name__ = ["snow","modules","interfaces","Audio"];
snow.modules.interfaces.Audio.prototype = {
	__class__: snow.modules.interfaces.Audio
};
snow.modules.howlerjs = {};
snow.modules.howlerjs.Audio = function(_system) {
	this.system = _system;
	this.suspended_sounds = [];
	this.handles = new haxe.ds.ObjectMap();
};
snow.modules.howlerjs.Audio.__name__ = ["snow","modules","howlerjs","Audio"];
snow.modules.howlerjs.Audio.__interfaces__ = [snow.modules.interfaces.Audio];
snow.modules.howlerjs.Audio.prototype = {
	init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,suspend: function() {
		var $it0 = this.handles.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			if(sound.get_playing()) {
				sound.toggle();
				this.suspended_sounds.push(sound);
			}
		}
	}
	,resume: function() {
		while(this.suspended_sounds.length > 0) {
			var sound = this.suspended_sounds.pop();
			sound.toggle();
		}
	}
	,info_from_id: function(_id,_format) {
		if(_format == null) {
			var _ext = haxe.io.Path.extension(_id);
			switch(_ext) {
			case "wav":
				_format = 2;
				break;
			case "ogg":
				_format = 1;
				break;
			case "pcm":
				_format = 3;
				break;
			default:
				_format = 0;
			}
		}
		return { format : _format, id : _id, handle : null, data : null};
	}
	,create_sound: function(_id,_name,_streaming,_format) {
		if(_streaming == null) _streaming = false;
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			var _path = _g.system.app.assets.root + _id;
			var info = _g.info_from_id(_path,_format);
			var sound = new snow.modules.howlerjs.sound.Sound(_g.system,_name,_streaming);
			info.handle = new window.Howl({ urls : [_path], onend : function() {
				_g.system.app.audio.module._on_end(info.handle);
			}, onloaderror : function() {
				reject(snow.types.Error.error("failed to create sound " + _name + " from " + _id));
			}, onload : function() {
				sound.set_info(info);
				resolve(sound);
			}});
		});
	}
	,create_sound_from_bytes: function(_name,_bytes,_format) {
		throw snow.types.Error.error("unimplemented / wip");
	}
	,_on_end: function(handle) {
		var sound;
		var key = handle;
		sound = this.handles.h[key.__id__];
		if(sound != null) sound.emit("end");
	}
	,__class__: snow.modules.howlerjs.Audio
};
snow.system.audio = {};
snow.system.audio.Sound = function(_system,_name,_is_stream) {
	if(_is_stream == null) _is_stream = false;
	this.is_stream = false;
	this.position_bytes = 0;
	this.length_bytes = 0;
	this.duration = 0.0;
	this.position = 0.0;
	this.looping = false;
	this.pan = 0.0;
	this.volume = 1.0;
	this.pitch = 1.0;
	this.loaded = false;
	this.paused = false;
	this.playing = false;
	this.name = "";
	this.name = _name;
	this.system = _system;
	this.is_stream = _is_stream;
	this.onload_list = [];
	this.onend_list = [];
};
snow.system.audio.Sound.__name__ = ["snow","system","audio","Sound"];
snow.system.audio.Sound.prototype = {
	emit: function(_event) {
		switch(_event) {
		case "end":
			this.do_onend();
			break;
		case "load":
			this.do_onload();
			break;
		default:
			haxe.Log.trace("    i / sound / " + ("no event {" + _event + "}"),{ fileName : "Sound.hx", lineNumber : 87, className : "snow.system.audio.Sound", methodName : "emit"});
		}
	}
	,on: function(_event,_handler) {
		switch(_event) {
		case "end":
			this.onend_list.push(_handler);
			break;
		case "load":
			this.add_onload(_handler);
			break;
		default:
			haxe.Log.trace("    i / sound / " + ("no event {" + _event + "}"),{ fileName : "Sound.hx", lineNumber : 100, className : "snow.system.audio.Sound", methodName : "on"});
		}
	}
	,off: function(_event,_handler) {
		switch(_event) {
		case "end":
			HxOverrides.remove(this.onend_list,_handler);
			break;
		case "load":
			HxOverrides.remove(this.onload_list,_handler);
			break;
		default:
			haxe.Log.trace("    i / sound / " + ("no event {" + _event + "}"),{ fileName : "Sound.hx", lineNumber : 112, className : "snow.system.audio.Sound", methodName : "off"});
		}
	}
	,play: function() {
		haxe.Log.trace("    i / sound / " + "Sound:play called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 123, className : "snow.system.audio.Sound", methodName : "play"});
	}
	,loop: function() {
		haxe.Log.trace("    i / sound / " + "Sound:loop called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 125, className : "snow.system.audio.Sound", methodName : "loop"});
	}
	,stop: function() {
		haxe.Log.trace("    i / sound / " + "Sound:stop called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 127, className : "snow.system.audio.Sound", methodName : "stop"});
	}
	,pause: function() {
		haxe.Log.trace("    i / sound / " + "Sound:pause called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 129, className : "snow.system.audio.Sound", methodName : "pause"});
	}
	,destroy: function() {
		haxe.Log.trace("    i / sound / " + "Sound:destroy called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 131, className : "snow.system.audio.Sound", methodName : "destroy"});
	}
	,internal_update: function() {
	}
	,internal_play: function() {
	}
	,internal_loop: function() {
	}
	,internal_stop: function() {
	}
	,internal_pause: function() {
	}
	,toggle: function() {
		this.set_playing(!this.get_playing());
		if(this.get_playing()) {
			if(this.get_looping()) this.loop(); else this.play();
		} else this.pause();
	}
	,get_playing: function() {
		return this.playing;
	}
	,get_paused: function() {
		return this.paused;
	}
	,get_loaded: function() {
		return this.loaded;
	}
	,get_info: function() {
		return this.info;
	}
	,set_info: function(_info) {
		return this.info = _info;
	}
	,get_pan: function() {
		return this.pan;
	}
	,get_pitch: function() {
		return this.pitch;
	}
	,get_volume: function() {
		return this.volume;
	}
	,get_looping: function() {
		return this.looping;
	}
	,get_position: function() {
		return this.position;
	}
	,get_position_bytes: function() {
		return this.position_bytes;
	}
	,get_length_bytes: function() {
		return this.length_bytes;
	}
	,get_duration: function() {
		return 0;
	}
	,set_playing: function(_playing) {
		return this.playing = _playing;
	}
	,set_paused: function(_paused) {
		return this.paused = _paused;
	}
	,set_loaded: function(_loaded) {
		return this.loaded = _loaded;
	}
	,set_pan: function(_pan) {
		return this.pan = _pan;
	}
	,set_pitch: function(_pitch) {
		return this.pitch = _pitch;
	}
	,set_volume: function(_volume) {
		return this.volume = _volume;
	}
	,set_position: function(_position) {
		return this.position = _position;
	}
	,set_looping: function(_looping) {
		return this.looping = _looping;
	}
	,set_position_bytes: function(_position_bytes) {
		return this.position_bytes = _position_bytes;
	}
	,do_onload: function() {
		var _g = 0;
		var _g1 = this.onload_list;
		while(_g < _g1.length) {
			var _f = _g1[_g];
			++_g;
			_f(this);
		}
		this.onload_list = null;
		this.onload_list = [];
	}
	,do_onend: function() {
		var _g = 0;
		var _g1 = this.onend_list;
		while(_g < _g1.length) {
			var _f = _g1[_g];
			++_g;
			_f(this);
		}
	}
	,add_onload: function(_onload) {
		if(this.get_loaded()) _onload(this); else this.onload_list.push(_onload);
		return _onload;
	}
	,__class__: snow.system.audio.Sound
	,__properties__: {set_position_bytes:"set_position_bytes",get_position_bytes:"get_position_bytes",get_length_bytes:"get_length_bytes",get_duration:"get_duration",set_position:"set_position",get_position:"get_position",set_looping:"set_looping",get_looping:"get_looping",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume",set_pitch:"set_pitch",get_pitch:"get_pitch",set_info:"set_info",get_info:"get_info",set_loaded:"set_loaded",get_loaded:"get_loaded",set_paused:"set_paused",get_paused:"get_paused",set_playing:"set_playing",get_playing:"get_playing"}
};
snow.modules.howlerjs.sound = {};
snow.modules.howlerjs.sound.Sound = function(_system,_name,_is_stream) {
	if(_is_stream == null) _is_stream = false;
	this.volume_dirty = false;
	this.pan_dirty = false;
	snow.system.audio.Sound.call(this,_system,_name,_is_stream);
};
snow.modules.howlerjs.sound.Sound.__name__ = ["snow","modules","howlerjs","sound","Sound"];
snow.modules.howlerjs.sound.Sound.__super__ = snow.system.audio.Sound;
snow.modules.howlerjs.sound.Sound.prototype = $extend(snow.system.audio.Sound.prototype,{
	set_info: function(_info) {
		if(this.get_info() != null) this.destroy();
		this.info = null;
		if(_info == null) {
			haxe.Log.trace("    i / sound / " + "not creating sound, info was null",{ fileName : "Sound.hx", lineNumber : 27, className : "snow.modules.howlerjs.sound.Sound", methodName : "set_info"});
			return this.get_info();
		}
		this.info = _info;
		this.set_loaded(true);
		this.emit("load");
		return this.get_info();
	}
	,set_pan: function(_pan) {
		this.pan_dirty = true;
		return this.pan = _pan;
	}
	,set_volume: function(_volume) {
		this.volume_dirty = true;
		return this.volume = _volume;
	}
	,set_pitch: function(_pitch) {
		this.get_info().handle._rate = _pitch;
		return this.pitch = _pitch;
	}
	,set_position: function(_position) {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.pos(_position);
		return this.position = _position;
	}
	,get_position: function() {
		if(this.get_info() != null && this.get_info().handle != null) return this.get_info().handle.pos();
		return this.position;
	}
	,get_duration: function() {
		if(this.get_info() != null && this.get_info().handle != null) return this.get_info().handle._duration;
		return 0;
	}
	,play: function() {
		if(this.get_info() != null && this.get_info().handle != null) {
			this.set_playing(true);
			this.set_looping(false);
			if(this.pan_dirty) this.get_info().handle.pos3d(this.get_pan());
			if(this.volume_dirty) this.get_info().handle.volume(this.get_volume());
			this.get_info().handle.loop(false);
			this.get_info().handle.play();
		}
	}
	,loop: function() {
		if(this.get_info() != null && this.get_info().handle != null) {
			this.set_playing(true);
			this.set_looping(true);
			if(this.pan_dirty) this.get_info().handle.pos3d(this.get_pan());
			if(this.volume_dirty) this.get_info().handle.volume(this.get_volume());
			this.get_info().handle.loop(true);
			this.get_info().handle.play();
		}
	}
	,stop: function() {
		this.set_playing(false);
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.stop();
	}
	,pause: function() {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.pause();
	}
	,destroy: function() {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.unload();
		this.system.kill(this);
	}
	,__class__: snow.modules.howlerjs.sound.Sound
});
snow.modules.opengl = {};
snow.modules.opengl.web = {};
snow.modules.opengl.web.GL = function() { };
snow.modules.opengl.web.GL.__name__ = ["snow","modules","opengl","web","GL"];
snow.modules.opengl.web.GL.__properties__ = {get_version:"get_version"}
snow.modules.opengl.web.GL.versionString = function() {
	var ver = snow.modules.opengl.web.GL.current_context.getParameter(7938);
	var slver = snow.modules.opengl.web.GL.current_context.getParameter(35724);
	var ren = snow.modules.opengl.web.GL.current_context.getParameter(7937);
	var ven = snow.modules.opengl.web.GL.current_context.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
snow.modules.opengl.web.GL.activeTexture = function(texture) {
	snow.modules.opengl.web.GL.current_context.activeTexture(texture);
};
snow.modules.opengl.web.GL.attachShader = function(program,shader) {
	snow.modules.opengl.web.GL.current_context.attachShader(program,shader);
};
snow.modules.opengl.web.GL.bindAttribLocation = function(program,index,name) {
	snow.modules.opengl.web.GL.current_context.bindAttribLocation(program,index,name);
};
snow.modules.opengl.web.GL.bindBuffer = function(target,buffer) {
	snow.modules.opengl.web.GL.current_context.bindBuffer(target,buffer);
};
snow.modules.opengl.web.GL.bindFramebuffer = function(target,framebuffer) {
	snow.modules.opengl.web.GL.current_context.bindFramebuffer(target,framebuffer);
};
snow.modules.opengl.web.GL.bindRenderbuffer = function(target,renderbuffer) {
	snow.modules.opengl.web.GL.current_context.bindRenderbuffer(target,renderbuffer);
};
snow.modules.opengl.web.GL.bindTexture = function(target,texture) {
	snow.modules.opengl.web.GL.current_context.bindTexture(target,texture);
};
snow.modules.opengl.web.GL.blendColor = function(red,green,blue,alpha) {
	snow.modules.opengl.web.GL.current_context.blendColor(red,green,blue,alpha);
};
snow.modules.opengl.web.GL.blendEquation = function(mode) {
	snow.modules.opengl.web.GL.current_context.blendEquation(mode);
};
snow.modules.opengl.web.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	snow.modules.opengl.web.GL.current_context.blendEquationSeparate(modeRGB,modeAlpha);
};
snow.modules.opengl.web.GL.blendFunc = function(sfactor,dfactor) {
	snow.modules.opengl.web.GL.current_context.blendFunc(sfactor,dfactor);
};
snow.modules.opengl.web.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	snow.modules.opengl.web.GL.current_context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
snow.modules.opengl.web.GL.bufferData = function(target,data,usage) {
	snow.modules.opengl.web.GL.current_context.bufferData(target,data,usage);
};
snow.modules.opengl.web.GL.bufferSubData = function(target,offset,data) {
	snow.modules.opengl.web.GL.current_context.bufferSubData(target,offset,data);
};
snow.modules.opengl.web.GL.checkFramebufferStatus = function(target) {
	return snow.modules.opengl.web.GL.current_context.checkFramebufferStatus(target);
};
snow.modules.opengl.web.GL.clear = function(mask) {
	snow.modules.opengl.web.GL.current_context.clear(mask);
};
snow.modules.opengl.web.GL.clearColor = function(red,green,blue,alpha) {
	snow.modules.opengl.web.GL.current_context.clearColor(red,green,blue,alpha);
};
snow.modules.opengl.web.GL.clearDepth = function(depth) {
	snow.modules.opengl.web.GL.current_context.clearDepth(depth);
};
snow.modules.opengl.web.GL.clearStencil = function(s) {
	snow.modules.opengl.web.GL.current_context.clearStencil(s);
};
snow.modules.opengl.web.GL.colorMask = function(red,green,blue,alpha) {
	snow.modules.opengl.web.GL.current_context.colorMask(red,green,blue,alpha);
};
snow.modules.opengl.web.GL.compileShader = function(shader) {
	snow.modules.opengl.web.GL.current_context.compileShader(shader);
};
snow.modules.opengl.web.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	snow.modules.opengl.web.GL.current_context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
snow.modules.opengl.web.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	snow.modules.opengl.web.GL.current_context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
snow.modules.opengl.web.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	snow.modules.opengl.web.GL.current_context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
snow.modules.opengl.web.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	snow.modules.opengl.web.GL.current_context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
snow.modules.opengl.web.GL.createBuffer = function() {
	return snow.modules.opengl.web.GL.current_context.createBuffer();
};
snow.modules.opengl.web.GL.createFramebuffer = function() {
	return snow.modules.opengl.web.GL.current_context.createFramebuffer();
};
snow.modules.opengl.web.GL.createProgram = function() {
	return snow.modules.opengl.web.GL.current_context.createProgram();
};
snow.modules.opengl.web.GL.createRenderbuffer = function() {
	return snow.modules.opengl.web.GL.current_context.createRenderbuffer();
};
snow.modules.opengl.web.GL.createShader = function(type) {
	return snow.modules.opengl.web.GL.current_context.createShader(type);
};
snow.modules.opengl.web.GL.createTexture = function() {
	return snow.modules.opengl.web.GL.current_context.createTexture();
};
snow.modules.opengl.web.GL.cullFace = function(mode) {
	snow.modules.opengl.web.GL.current_context.cullFace(mode);
};
snow.modules.opengl.web.GL.deleteBuffer = function(buffer) {
	snow.modules.opengl.web.GL.current_context.deleteBuffer(buffer);
};
snow.modules.opengl.web.GL.deleteFramebuffer = function(framebuffer) {
	snow.modules.opengl.web.GL.current_context.deleteFramebuffer(framebuffer);
};
snow.modules.opengl.web.GL.deleteProgram = function(program) {
	snow.modules.opengl.web.GL.current_context.deleteProgram(program);
};
snow.modules.opengl.web.GL.deleteRenderbuffer = function(renderbuffer) {
	snow.modules.opengl.web.GL.current_context.deleteRenderbuffer(renderbuffer);
};
snow.modules.opengl.web.GL.deleteShader = function(shader) {
	snow.modules.opengl.web.GL.current_context.deleteShader(shader);
};
snow.modules.opengl.web.GL.deleteTexture = function(texture) {
	snow.modules.opengl.web.GL.current_context.deleteTexture(texture);
};
snow.modules.opengl.web.GL.depthFunc = function(func) {
	snow.modules.opengl.web.GL.current_context.depthFunc(func);
};
snow.modules.opengl.web.GL.depthMask = function(flag) {
	snow.modules.opengl.web.GL.current_context.depthMask(flag);
};
snow.modules.opengl.web.GL.depthRange = function(zNear,zFar) {
	snow.modules.opengl.web.GL.current_context.depthRange(zNear,zFar);
};
snow.modules.opengl.web.GL.detachShader = function(program,shader) {
	snow.modules.opengl.web.GL.current_context.detachShader(program,shader);
};
snow.modules.opengl.web.GL.disable = function(cap) {
	snow.modules.opengl.web.GL.current_context.disable(cap);
};
snow.modules.opengl.web.GL.disableVertexAttribArray = function(index) {
	snow.modules.opengl.web.GL.current_context.disableVertexAttribArray(index);
};
snow.modules.opengl.web.GL.drawArrays = function(mode,first,count) {
	snow.modules.opengl.web.GL.current_context.drawArrays(mode,first,count);
};
snow.modules.opengl.web.GL.drawElements = function(mode,count,type,offset) {
	snow.modules.opengl.web.GL.current_context.drawElements(mode,count,type,offset);
};
snow.modules.opengl.web.GL.enable = function(cap) {
	snow.modules.opengl.web.GL.current_context.enable(cap);
};
snow.modules.opengl.web.GL.enableVertexAttribArray = function(index) {
	snow.modules.opengl.web.GL.current_context.enableVertexAttribArray(index);
};
snow.modules.opengl.web.GL.finish = function() {
	snow.modules.opengl.web.GL.current_context.finish();
};
snow.modules.opengl.web.GL.flush = function() {
	snow.modules.opengl.web.GL.current_context.flush();
};
snow.modules.opengl.web.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	snow.modules.opengl.web.GL.current_context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
snow.modules.opengl.web.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	snow.modules.opengl.web.GL.current_context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
snow.modules.opengl.web.GL.frontFace = function(mode) {
	snow.modules.opengl.web.GL.current_context.frontFace(mode);
};
snow.modules.opengl.web.GL.generateMipmap = function(target) {
	snow.modules.opengl.web.GL.current_context.generateMipmap(target);
};
snow.modules.opengl.web.GL.getActiveAttrib = function(program,index) {
	return snow.modules.opengl.web.GL.current_context.getActiveAttrib(program,index);
};
snow.modules.opengl.web.GL.getActiveUniform = function(program,index) {
	return snow.modules.opengl.web.GL.current_context.getActiveUniform(program,index);
};
snow.modules.opengl.web.GL.getAttachedShaders = function(program) {
	return snow.modules.opengl.web.GL.current_context.getAttachedShaders(program);
};
snow.modules.opengl.web.GL.getAttribLocation = function(program,name) {
	return snow.modules.opengl.web.GL.current_context.getAttribLocation(program,name);
};
snow.modules.opengl.web.GL.getBufferParameter = function(target,pname) {
	return snow.modules.opengl.web.GL.current_context.getBufferParameter(target,pname);
};
snow.modules.opengl.web.GL.getContextAttributes = function() {
	return snow.modules.opengl.web.GL.current_context.getContextAttributes();
};
snow.modules.opengl.web.GL.getError = function() {
	return snow.modules.opengl.web.GL.current_context.getError();
};
snow.modules.opengl.web.GL.getExtension = function(name) {
	return snow.modules.opengl.web.GL.current_context.getExtension(name);
};
snow.modules.opengl.web.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return snow.modules.opengl.web.GL.current_context.getFramebufferAttachmentParameter(target,attachment,pname);
};
snow.modules.opengl.web.GL.getParameter = function(pname) {
	return snow.modules.opengl.web.GL.current_context.getParameter(pname);
};
snow.modules.opengl.web.GL.getProgramInfoLog = function(program) {
	return snow.modules.opengl.web.GL.current_context.getProgramInfoLog(program);
};
snow.modules.opengl.web.GL.getProgramParameter = function(program,pname) {
	return snow.modules.opengl.web.GL.current_context.getProgramParameter(program,pname);
};
snow.modules.opengl.web.GL.getRenderbufferParameter = function(target,pname) {
	return snow.modules.opengl.web.GL.current_context.getRenderbufferParameter(target,pname);
};
snow.modules.opengl.web.GL.getShaderInfoLog = function(shader) {
	return snow.modules.opengl.web.GL.current_context.getShaderInfoLog(shader);
};
snow.modules.opengl.web.GL.getShaderParameter = function(shader,pname) {
	return snow.modules.opengl.web.GL.current_context.getShaderParameter(shader,pname);
};
snow.modules.opengl.web.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return snow.modules.opengl.web.GL.current_context.getShaderPrecisionFormat(shadertype,precisiontype);
};
snow.modules.opengl.web.GL.getShaderSource = function(shader) {
	return snow.modules.opengl.web.GL.current_context.getShaderSource(shader);
};
snow.modules.opengl.web.GL.getSupportedExtensions = function() {
	return snow.modules.opengl.web.GL.current_context.getSupportedExtensions();
};
snow.modules.opengl.web.GL.getTexParameter = function(target,pname) {
	return snow.modules.opengl.web.GL.current_context.getTexParameter(target,pname);
};
snow.modules.opengl.web.GL.getUniform = function(program,location) {
	return snow.modules.opengl.web.GL.current_context.getUniform(program,location);
};
snow.modules.opengl.web.GL.getUniformLocation = function(program,name) {
	return snow.modules.opengl.web.GL.current_context.getUniformLocation(program,name);
};
snow.modules.opengl.web.GL.getVertexAttrib = function(index,pname) {
	return snow.modules.opengl.web.GL.current_context.getVertexAttrib(index,pname);
};
snow.modules.opengl.web.GL.getVertexAttribOffset = function(index,pname) {
	return snow.modules.opengl.web.GL.current_context.getVertexAttribOffset(index,pname);
};
snow.modules.opengl.web.GL.hint = function(target,mode) {
	snow.modules.opengl.web.GL.current_context.hint(target,mode);
};
snow.modules.opengl.web.GL.isBuffer = function(buffer) {
	return snow.modules.opengl.web.GL.current_context.isBuffer(buffer);
};
snow.modules.opengl.web.GL.isEnabled = function(cap) {
	return snow.modules.opengl.web.GL.current_context.isEnabled(cap);
};
snow.modules.opengl.web.GL.isFramebuffer = function(framebuffer) {
	return snow.modules.opengl.web.GL.current_context.isFramebuffer(framebuffer);
};
snow.modules.opengl.web.GL.isProgram = function(program) {
	return snow.modules.opengl.web.GL.current_context.isProgram(program);
};
snow.modules.opengl.web.GL.isRenderbuffer = function(renderbuffer) {
	return snow.modules.opengl.web.GL.current_context.isRenderbuffer(renderbuffer);
};
snow.modules.opengl.web.GL.isShader = function(shader) {
	return snow.modules.opengl.web.GL.current_context.isShader(shader);
};
snow.modules.opengl.web.GL.isTexture = function(texture) {
	return snow.modules.opengl.web.GL.current_context.isTexture(texture);
};
snow.modules.opengl.web.GL.lineWidth = function(width) {
	snow.modules.opengl.web.GL.current_context.lineWidth(width);
};
snow.modules.opengl.web.GL.linkProgram = function(program) {
	snow.modules.opengl.web.GL.current_context.linkProgram(program);
};
snow.modules.opengl.web.GL.pixelStorei = function(pname,param) {
	snow.modules.opengl.web.GL.current_context.pixelStorei(pname,param);
};
snow.modules.opengl.web.GL.polygonOffset = function(factor,units) {
	snow.modules.opengl.web.GL.current_context.polygonOffset(factor,units);
};
snow.modules.opengl.web.GL.readPixels = function(x,y,width,height,format,type,data) {
	snow.modules.opengl.web.GL.current_context.readPixels(x,y,width,height,format,type,data);
};
snow.modules.opengl.web.GL.renderbufferStorage = function(target,internalformat,width,height) {
	snow.modules.opengl.web.GL.current_context.renderbufferStorage(target,internalformat,width,height);
};
snow.modules.opengl.web.GL.sampleCoverage = function(value,invert) {
	snow.modules.opengl.web.GL.current_context.sampleCoverage(value,invert);
};
snow.modules.opengl.web.GL.scissor = function(x,y,width,height) {
	snow.modules.opengl.web.GL.current_context.scissor(x,y,width,height);
};
snow.modules.opengl.web.GL.shaderSource = function(shader,source) {
	snow.modules.opengl.web.GL.current_context.shaderSource(shader,source);
};
snow.modules.opengl.web.GL.stencilFunc = function(func,ref,mask) {
	snow.modules.opengl.web.GL.current_context.stencilFunc(func,ref,mask);
};
snow.modules.opengl.web.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	snow.modules.opengl.web.GL.current_context.stencilFuncSeparate(face,func,ref,mask);
};
snow.modules.opengl.web.GL.stencilMask = function(mask) {
	snow.modules.opengl.web.GL.current_context.stencilMask(mask);
};
snow.modules.opengl.web.GL.stencilMaskSeparate = function(face,mask) {
	snow.modules.opengl.web.GL.current_context.stencilMaskSeparate(face,mask);
};
snow.modules.opengl.web.GL.stencilOp = function(fail,zfail,zpass) {
	snow.modules.opengl.web.GL.current_context.stencilOp(fail,zfail,zpass);
};
snow.modules.opengl.web.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	snow.modules.opengl.web.GL.current_context.stencilOpSeparate(face,fail,zfail,zpass);
};
snow.modules.opengl.web.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	snow.modules.opengl.web.GL.current_context.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
snow.modules.opengl.web.GL.texParameterf = function(target,pname,param) {
	snow.modules.opengl.web.GL.current_context.texParameterf(target,pname,param);
};
snow.modules.opengl.web.GL.texParameteri = function(target,pname,param) {
	snow.modules.opengl.web.GL.current_context.texParameteri(target,pname,param);
};
snow.modules.opengl.web.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	snow.modules.opengl.web.GL.current_context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
snow.modules.opengl.web.GL.uniform1f = function(location,x) {
	snow.modules.opengl.web.GL.current_context.uniform1f(location,x);
};
snow.modules.opengl.web.GL.uniform1fv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform1fv(location,data);
};
snow.modules.opengl.web.GL.uniform1i = function(location,x) {
	snow.modules.opengl.web.GL.current_context.uniform1i(location,x);
};
snow.modules.opengl.web.GL.uniform1iv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform1iv(location,data);
};
snow.modules.opengl.web.GL.uniform2f = function(location,x,y) {
	snow.modules.opengl.web.GL.current_context.uniform2f(location,x,y);
};
snow.modules.opengl.web.GL.uniform2fv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform2fv(location,data);
};
snow.modules.opengl.web.GL.uniform2i = function(location,x,y) {
	snow.modules.opengl.web.GL.current_context.uniform2i(location,x,y);
};
snow.modules.opengl.web.GL.uniform2iv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform2iv(location,data);
};
snow.modules.opengl.web.GL.uniform3f = function(location,x,y,z) {
	snow.modules.opengl.web.GL.current_context.uniform3f(location,x,y,z);
};
snow.modules.opengl.web.GL.uniform3fv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform3fv(location,data);
};
snow.modules.opengl.web.GL.uniform3i = function(location,x,y,z) {
	snow.modules.opengl.web.GL.current_context.uniform3i(location,x,y,z);
};
snow.modules.opengl.web.GL.uniform3iv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform3iv(location,data);
};
snow.modules.opengl.web.GL.uniform4f = function(location,x,y,z,w) {
	snow.modules.opengl.web.GL.current_context.uniform4f(location,x,y,z,w);
};
snow.modules.opengl.web.GL.uniform4fv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform4fv(location,data);
};
snow.modules.opengl.web.GL.uniform4i = function(location,x,y,z,w) {
	snow.modules.opengl.web.GL.current_context.uniform4i(location,x,y,z,w);
};
snow.modules.opengl.web.GL.uniform4iv = function(location,data) {
	snow.modules.opengl.web.GL.current_context.uniform4iv(location,data);
};
snow.modules.opengl.web.GL.uniformMatrix2fv = function(location,transpose,data) {
	snow.modules.opengl.web.GL.current_context.uniformMatrix2fv(location,transpose,data);
};
snow.modules.opengl.web.GL.uniformMatrix3fv = function(location,transpose,data) {
	snow.modules.opengl.web.GL.current_context.uniformMatrix3fv(location,transpose,data);
};
snow.modules.opengl.web.GL.uniformMatrix4fv = function(location,transpose,data) {
	snow.modules.opengl.web.GL.current_context.uniformMatrix4fv(location,transpose,data);
};
snow.modules.opengl.web.GL.useProgram = function(program) {
	snow.modules.opengl.web.GL.current_context.useProgram(program);
};
snow.modules.opengl.web.GL.validateProgram = function(program) {
	snow.modules.opengl.web.GL.current_context.validateProgram(program);
};
snow.modules.opengl.web.GL.vertexAttrib1f = function(indx,x) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib1f(indx,x);
};
snow.modules.opengl.web.GL.vertexAttrib1fv = function(indx,data) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib1fv(indx,data);
};
snow.modules.opengl.web.GL.vertexAttrib2f = function(indx,x,y) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib2f(indx,x,y);
};
snow.modules.opengl.web.GL.vertexAttrib2fv = function(indx,data) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib2fv(indx,data);
};
snow.modules.opengl.web.GL.vertexAttrib3f = function(indx,x,y,z) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib3f(indx,x,y,z);
};
snow.modules.opengl.web.GL.vertexAttrib3fv = function(indx,data) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib3fv(indx,data);
};
snow.modules.opengl.web.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib4f(indx,x,y,z,w);
};
snow.modules.opengl.web.GL.vertexAttrib4fv = function(indx,data) {
	snow.modules.opengl.web.GL.current_context.vertexAttrib4fv(indx,data);
};
snow.modules.opengl.web.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	snow.modules.opengl.web.GL.current_context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
snow.modules.opengl.web.GL.viewport = function(x,y,width,height) {
	snow.modules.opengl.web.GL.current_context.viewport(x,y,width,height);
};
snow.modules.opengl.web.GL.get_version = function() {
	return 7938;
};
snow.system.assets = {};
snow.system.assets.Asset = function(_system,_id,_type) {
	if(_type == null) _type = 0;
	this.loaded = false;
	this.system = _system;
	this.type = _type;
	this.id = _id;
};
snow.system.assets.Asset.__name__ = ["snow","system","assets","Asset"];
snow.system.assets.Asset.prototype = {
	__class__: snow.system.assets.Asset
};
snow.system.assets.AssetImage = function(_system,_id,_image) {
	snow.system.assets.Asset.call(this,_system,_id,4);
	this.set_image(_image);
};
snow.system.assets.AssetImage.__name__ = ["snow","system","assets","AssetImage"];
snow.system.assets.AssetImage.load = function(_system,_id) {
	return new snow.system.assets.AssetImage(_system,_id,null).reload();
};
snow.system.assets.AssetImage.load_from_bytes = function(_system,_id,_bytes) {
	return new snow.system.assets.AssetImage(_system,_id,null).reload_from_bytes(_bytes);
};
snow.system.assets.AssetImage.load_from_pixels = function(_system,_id,_width,_height,_pixels) {
	var info = _system.module.image_info_from_pixels(_id,_width,_height,_pixels);
	return new snow.system.assets.AssetImage(_system,_id,info);
};
snow.system.assets.AssetImage.provider = function(_app,_id) {
	return _app.assets.module.image_load_info(_app.assets.root + _id);
};
snow.system.assets.AssetImage.processor = function(_app,_id,_data) {
	if(_data == null) return snow.api.Promise.reject(snow.types.Error.error("AssetImage processor: data was null"));
	return _app.assets.module.image_info_from_bytes(_id,_data);
};
snow.system.assets.AssetImage.__super__ = snow.system.assets.Asset;
snow.system.assets.AssetImage.prototype = $extend(snow.system.assets.Asset.prototype,{
	reload: function() {
		var _g = this;
		this.loaded = false;
		return new snow.api.Promise(function(resolve,reject) {
			var _load = _g.system.app.io.data_flow(_g.id,null,snow.system.assets.AssetImage.provider);
			_load.then(function(_image) {
				_g.set_image(_image);
				resolve(_g);
			}).error(reject);
		});
	}
	,reload_from_bytes: function(_bytes) {
		var _g = this;
		this.loaded = false;
		return new snow.api.Promise(function(resolve,reject) {
			var _load = _g.system.module.image_info_from_bytes(_g.id,_bytes);
			_load.then(function(_image) {
				_g.set_image(_image);
				resolve(_g);
			}).error(reject);
		});
	}
	,reload_from_pixels: function(_width,_height,_pixels) {
		this.loaded = false;
		this.set_image(this.system.module.image_info_from_pixels(this.id,_width,_height,_pixels));
	}
	,set_image: function(_image) {
		this.loaded = _image != null;
		return this.image = _image;
	}
	,__class__: snow.system.assets.AssetImage
	,__properties__: {set_image:"set_image"}
});
snow.system.assets.AssetBytes = function(_system,_id,_bytes) {
	snow.system.assets.Asset.call(this,_system,_id,1);
	this.set_bytes(_bytes);
};
snow.system.assets.AssetBytes.__name__ = ["snow","system","assets","AssetBytes"];
snow.system.assets.AssetBytes.load = function(_system,_id) {
	return new snow.system.assets.AssetBytes(_system,_id,null).reload();
};
snow.system.assets.AssetBytes.__super__ = snow.system.assets.Asset;
snow.system.assets.AssetBytes.prototype = $extend(snow.system.assets.Asset.prototype,{
	reload: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.id).then(function(_bytes) {
				_g.set_bytes(_bytes);
				resolve(_g);
			}).error(reject);
		});
	}
	,set_bytes: function(_bytes) {
		this.loaded = _bytes != null;
		return this.bytes = _bytes;
	}
	,__class__: snow.system.assets.AssetBytes
	,__properties__: {set_bytes:"set_bytes"}
});
snow.system.assets.AssetText = function(_system,_id,_text) {
	snow.system.assets.Asset.call(this,_system,_id,2);
	this.set_text(_text);
};
snow.system.assets.AssetText.__name__ = ["snow","system","assets","AssetText"];
snow.system.assets.AssetText.load = function(_system,_id) {
	return new snow.system.assets.AssetText(_system,_id,null).reload();
};
snow.system.assets.AssetText.processor = function(_app,_id,_data) {
	if(_data == null) return snow.api.Promise.reject(snow.types.Error.error("AssetText processor: data was null"));
	return snow.api.Promise.resolve(snow.api.buffers._Uint8Array.Uint8Array_Impl_.toBytes(_data).toString());
};
snow.system.assets.AssetText.__super__ = snow.system.assets.Asset;
snow.system.assets.AssetText.prototype = $extend(snow.system.assets.Asset.prototype,{
	reload: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.id,snow.system.assets.AssetText.processor).then(function(_text) {
				_g.set_text(_text);
				resolve(_g);
			}).error(reject);
		});
	}
	,set_text: function(_text) {
		this.loaded = _text != null;
		return this.text = _text;
	}
	,__class__: snow.system.assets.AssetText
	,__properties__: {set_text:"set_text"}
});
snow.system.assets.AssetJSON = function(_system,_id,_json) {
	snow.system.assets.Asset.call(this,_system,_id,3);
	this.set_json(_json);
};
snow.system.assets.AssetJSON.__name__ = ["snow","system","assets","AssetJSON"];
snow.system.assets.AssetJSON.load = function(_system,_id) {
	return new snow.system.assets.AssetJSON(_system,_id,null).reload();
};
snow.system.assets.AssetJSON.processor = function(_app,_id,_data) {
	if(_data == null) return snow.api.Promise.reject(snow.types.Error.error("AssetJSON: data was null"));
	return new snow.api.Promise(function(resolve,reject) {
		var _data_json = null;
		try {
			_data_json = JSON.parse(snow.api.buffers._Uint8Array.Uint8Array_Impl_.toBytes(_data).toString());
		} catch( e ) {
			return reject(snow.types.Error.parse(e));
		}
		return resolve(_data_json);
	});
};
snow.system.assets.AssetJSON.__super__ = snow.system.assets.Asset;
snow.system.assets.AssetJSON.prototype = $extend(snow.system.assets.Asset.prototype,{
	reload: function() {
		var _g = this;
		return new snow.api.Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.id,snow.system.assets.AssetJSON.processor).then(function(_json) {
				_g.set_json(_json);
				resolve(_g);
			}).error(reject);
		});
	}
	,set_json: function(_json) {
		this.loaded = _json != null;
		return this.json = _json;
	}
	,__class__: snow.system.assets.AssetJSON
	,__properties__: {set_json:"set_json"}
});
snow.system.assets.Assets = function(_app) {
	this.manifest_path = "manifest";
	this.root = "";
	this.app = _app;
	this.list = [];
	this.module = new snow.core.web.assets.Assets(this);
};
snow.system.assets.Assets.__name__ = ["snow","system","assets","Assets"];
snow.system.assets.Assets.prototype = {
	listed: function(_id) {
		return HxOverrides.indexOf(this.list,_id,0) != -1;
	}
	,path: function(_id) {
		return this.root + _id;
	}
	,bytes: function(_id) {
		return snow.system.assets.AssetBytes.load(this,_id);
	}
	,text: function(_id) {
		return snow.system.assets.AssetText.load(this,_id);
	}
	,json: function(_id) {
		return snow.system.assets.AssetJSON.load(this,_id);
	}
	,image: function(_id) {
		return snow.system.assets.AssetImage.load(this,_id);
	}
	,image_from_bytes: function(_id,_bytes) {
		return snow.system.assets.AssetImage.load_from_bytes(this,_id,_bytes);
	}
	,image_from_pixels: function(_id,_width,_height,_pixels) {
		return snow.system.assets.AssetImage.load_from_pixels(this,_id,_width,_height,_pixels);
	}
	,__class__: snow.system.assets.Assets
};
snow.system.audio.Audio = function(_app) {
	this.active = false;
	this.app = _app;
	this.module = new snow.modules.howlerjs.Audio(this);
	this.module.init();
	this.sound_list = new haxe.ds.StringMap();
	this.stream_list = new haxe.ds.StringMap();
	this.active = true;
};
snow.system.audio.Audio.__name__ = ["snow","system","audio","Audio"];
snow.system.audio.Audio.prototype = {
	create: function(_id,_name,_streaming) {
		if(_streaming == null) _streaming = false;
		if(_name == null) _name = "";
		var _g = this;
		if(_name == "") _name = this.app.make_uniqueid();
		return new snow.api.Promise(function(resolve,reject) {
			var _create = _g.module.create_sound(_id,_name,_streaming);
			_create.then(function(_sound) {
				_g.sound_list.set(_name,_sound);
				if(_streaming) _g.stream_list.set(_name,_sound);
				resolve(_sound);
			}).error(reject);
		});
	}
	,create_from_bytes: function(_name,_bytes,_format) {
		if(_name == null) _name = "";
		if(_name == "") _name = this.app.make_uniqueid();
		var sound = this.module.create_sound_from_bytes(_name,_bytes,_format);
		this.sound_list.set(_name,sound);
		return sound;
	}
	,uncreate: function(_name) {
		var _sound = this.sound_list.get(_name);
		if(_sound == null) haxe.Log.trace("    i / audio / " + ("can't find sound, unable to uncreate, use create first: " + _name),{ fileName : "Audio.hx", lineNumber : 94, className : "snow.system.audio.Audio", methodName : "uncreate"});
		_sound.destroy();
	}
	,add: function(sound) {
		this.sound_list.set(sound.name,sound);
		if(sound.is_stream) this.stream_list.set(sound.name,sound);
	}
	,on: function(_name,_event,_handler) {
		var sound = this.get(_name);
		if(sound != null) sound.on(_event,_handler);
	}
	,off: function(_name,_event,_handler) {
		var sound = this.get(_name);
		if(sound != null) sound.off(_event,_handler);
	}
	,get: function(_name) {
		var _sound = this.sound_list.get(_name);
		if(_sound == null) haxe.Log.trace("    i / audio / " + ("sound not found, use create first: " + _name),{ fileName : "Audio.hx", lineNumber : 132, className : "snow.system.audio.Audio", methodName : "get"});
		return _sound;
	}
	,volume: function(_name,_volume) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_volume != null) return sound.set_volume(_volume); else return sound.get_volume();
		}
		return 0;
	}
	,pan: function(_name,_pan) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_pan != null) return sound.set_pan(_pan); else return sound.get_pan();
		}
		return 0;
	}
	,pitch: function(_name,_pitch) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_pitch != null) return sound.set_pitch(_pitch); else return sound.get_pitch();
		}
		return 0;
	}
	,position: function(_name,_position) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_position != null) return sound.set_position(_position); else return sound.get_position();
		}
		return 0;
	}
	,duration: function(_name) {
		var sound = this.get(_name);
		if(sound != null) return sound.get_duration();
		return 0;
	}
	,play: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.play();
	}
	,loop: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.loop();
	}
	,pause: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.pause();
	}
	,stop: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.stop();
	}
	,toggle: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.toggle();
	}
	,kill: function(_sound) {
		if(_sound == null) return;
		this.sound_list.remove(_sound.name);
		this.stream_list.remove(_sound.name);
	}
	,suspend: function() {
		if(!this.active) return;
		haxe.Log.trace("    i / audio / " + "suspending sound context",{ fileName : "Audio.hx", lineNumber : 313, className : "snow.system.audio.Audio", methodName : "suspend"});
		this.active = false;
		var $it0 = this.stream_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.internal_pause();
		}
		this.module.suspend();
	}
	,resume: function() {
		if(this.active) return;
		haxe.Log.trace("    i / audio / " + "resuming sound context",{ fileName : "Audio.hx", lineNumber : 331, className : "snow.system.audio.Audio", methodName : "resume"});
		this.active = true;
		this.module.resume();
		var $it0 = this.stream_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.internal_play();
		}
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
		if(_event.type == 10) this.suspend(); else if(_event.type == 12) this.resume();
	}
	,destroy: function() {
		this.active = false;
		var $it0 = this.sound_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.destroy();
		}
		this.module.destroy();
	}
	,update: function() {
		if(!this.active) return;
		var $it0 = this.sound_list.iterator();
		while( $it0.hasNext() ) {
			var _sound = $it0.next();
			if(_sound.get_playing()) _sound.internal_update();
		}
		this.module.update();
	}
	,__class__: snow.system.audio.Audio
};
snow.system.input.Input = function(_app) {
	this.touch_count = 0;
	this.app = _app;
	this.module = new snow.core.web.input.Input(this);
	this.module.init();
	this.key_code_pressed = new haxe.ds.IntMap();
	this.key_code_down = new haxe.ds.IntMap();
	this.key_code_released = new haxe.ds.IntMap();
	this.scan_code_pressed = new haxe.ds.IntMap();
	this.scan_code_down = new haxe.ds.IntMap();
	this.scan_code_released = new haxe.ds.IntMap();
	this.mouse_button_pressed = new haxe.ds.IntMap();
	this.mouse_button_down = new haxe.ds.IntMap();
	this.mouse_button_released = new haxe.ds.IntMap();
	this.gamepad_button_pressed = new haxe.ds.IntMap();
	this.gamepad_button_down = new haxe.ds.IntMap();
	this.gamepad_button_released = new haxe.ds.IntMap();
	this.gamepad_axis_values = new haxe.ds.IntMap();
	this.touches_down = new haxe.ds.IntMap();
};
snow.system.input.Input.__name__ = ["snow","system","input","Input"];
snow.system.input.Input.prototype = {
	keypressed: function(_code) {
		return this.key_code_pressed.exists(_code);
	}
	,keyreleased: function(_code) {
		return this.key_code_released.exists(_code);
	}
	,keydown: function(_code) {
		return this.key_code_down.exists(_code);
	}
	,scanpressed: function(_code) {
		return this.scan_code_pressed.exists(_code);
	}
	,scanreleased: function(_code) {
		return this.scan_code_released.exists(_code);
	}
	,scandown: function(_code) {
		return this.scan_code_down.exists(_code);
	}
	,mousepressed: function(_button) {
		return this.mouse_button_pressed.exists(_button);
	}
	,mousereleased: function(_button) {
		return this.mouse_button_released.exists(_button);
	}
	,mousedown: function(_button) {
		return this.mouse_button_down.exists(_button);
	}
	,gamepadpressed: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_pressed.get(_gamepad);
		if(_gamepad_state != null) return _gamepad_state.exists(_button); else return false;
	}
	,gamepadreleased: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_released.get(_gamepad);
		if(_gamepad_state != null) return _gamepad_state.exists(_button); else return false;
	}
	,gamepaddown: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_down.get(_gamepad);
		if(_gamepad_state != null) return _gamepad_state.exists(_button); else return false;
	}
	,gamepadaxis: function(_gamepad,_axis) {
		var _gamepad_state = this.gamepad_axis_values.get(_gamepad);
		if(_gamepad_state != null) {
			if(_gamepad_state.exists(_axis)) return _gamepad_state.get(_axis);
		}
		return 0;
	}
	,dispatch_key_down_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(!repeat) {
			this.key_code_pressed.set(keycode,false);
			this.key_code_down.set(keycode,true);
			this.scan_code_pressed.set(scancode,false);
			this.scan_code_down.set(scancode,true);
		}
		this.app.host.onkeydown(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_key_up_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		this.key_code_released.set(keycode,false);
		this.key_code_down.remove(keycode);
		this.scan_code_released.set(scancode,false);
		this.scan_code_down.remove(scancode);
		this.app.host.onkeyup(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_text_event: function(text,start,length,type,timestamp,window_id) {
		this.app.host.ontextinput(text,start,length,type,timestamp,window_id);
	}
	,dispatch_mouse_move_event: function(x,y,xrel,yrel,timestamp,window_id) {
		this.app.host.onmousemove(x,y,xrel,yrel,timestamp,window_id);
	}
	,dispatch_mouse_down_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_pressed.set(button,false);
		this.mouse_button_down.set(button,true);
		this.app.host.onmousedown(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_up_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_released.set(button,false);
		this.mouse_button_down.remove(button);
		this.app.host.onmouseup(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_wheel_event: function(x,y,timestamp,window_id) {
		this.app.host.onmousewheel(x,y,timestamp,window_id);
	}
	,dispatch_touch_down_event: function(x,y,touch_id,timestamp) {
		if(!this.touches_down.exists(touch_id)) {
			this.touch_count++;
			this.touches_down.set(touch_id,true);
		}
		this.app.host.ontouchdown(x,y,touch_id,timestamp);
	}
	,dispatch_touch_up_event: function(x,y,touch_id,timestamp) {
		this.app.host.ontouchup(x,y,touch_id,timestamp);
		if(this.touches_down.remove(touch_id)) this.touch_count--;
	}
	,dispatch_touch_move_event: function(x,y,dx,dy,touch_id,timestamp) {
		this.app.host.ontouchmove(x,y,dx,dy,touch_id,timestamp);
	}
	,dispatch_gamepad_axis_event: function(gamepad,axis,value,timestamp) {
		if(!this.gamepad_axis_values.exists(gamepad)) {
			var value1 = new haxe.ds.IntMap();
			this.gamepad_axis_values.set(gamepad,value1);
		}
		var this1 = this.gamepad_axis_values.get(gamepad);
		this1.set(axis,value);
		this.app.host.ongamepadaxis(gamepad,axis,value,timestamp);
	}
	,dispatch_gamepad_button_down_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_pressed.exists(gamepad)) {
			var value1 = new haxe.ds.IntMap();
			this.gamepad_button_pressed.set(gamepad,value1);
		}
		if(!this.gamepad_button_down.exists(gamepad)) {
			var value2 = new haxe.ds.IntMap();
			this.gamepad_button_down.set(gamepad,value2);
		}
		var this1 = this.gamepad_button_pressed.get(gamepad);
		this1.set(button,false);
		var this2 = this.gamepad_button_down.get(gamepad);
		this2.set(button,true);
		this.app.host.ongamepaddown(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_button_up_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_released.exists(gamepad)) {
			var value1 = new haxe.ds.IntMap();
			this.gamepad_button_released.set(gamepad,value1);
		}
		if(!this.gamepad_button_down.exists(gamepad)) {
			var value2 = new haxe.ds.IntMap();
			this.gamepad_button_down.set(gamepad,value2);
		}
		var this1 = this.gamepad_button_released.get(gamepad);
		this1.set(button,false);
		var this2 = this.gamepad_button_down.get(gamepad);
		this2.remove(button);
		this.app.host.ongamepadup(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_device_event: function(gamepad,type,timestamp) {
		this.app.host.ongamepaddevice(gamepad,type,timestamp);
	}
	,listen: function(_window) {
		this.module.listen(_window);
	}
	,unlisten: function(_window) {
		this.module.unlisten(_window);
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
	}
	,on_gamepad_added: function(_event) {
		this.module.gamepad_add(_event.which);
	}
	,on_gamepad_removed: function(_event) {
		this.module.gamepad_remove(_event.which);
	}
	,update: function() {
		this.module.update();
		this._update_keystate();
		this._update_gamepadstate();
		this._update_mousestate();
	}
	,destroy: function() {
		this.module.destroy();
	}
	,_update_mousestate: function() {
		var $it0 = this.mouse_button_pressed.keys();
		while( $it0.hasNext() ) {
			var _code = $it0.next();
			if(this.mouse_button_pressed.get(_code)) this.mouse_button_pressed.remove(_code); else this.mouse_button_pressed.set(_code,true);
		}
		var $it1 = this.mouse_button_released.keys();
		while( $it1.hasNext() ) {
			var _code1 = $it1.next();
			if(this.mouse_button_released.get(_code1)) this.mouse_button_released.remove(_code1); else this.mouse_button_released.set(_code1,true);
		}
	}
	,_update_gamepadstate: function() {
		var $it0 = this.gamepad_button_pressed.iterator();
		while( $it0.hasNext() ) {
			var _gamepad_pressed = $it0.next();
			var $it1 = _gamepad_pressed.keys();
			while( $it1.hasNext() ) {
				var _button = $it1.next();
				if(_gamepad_pressed.get(_button)) _gamepad_pressed.remove(_button); else _gamepad_pressed.set(_button,true);
			}
		}
		var $it2 = this.gamepad_button_released.iterator();
		while( $it2.hasNext() ) {
			var _gamepad_released = $it2.next();
			var $it3 = _gamepad_released.keys();
			while( $it3.hasNext() ) {
				var _button1 = $it3.next();
				if(_gamepad_released.get(_button1)) _gamepad_released.remove(_button1); else _gamepad_released.set(_button1,true);
			}
		}
	}
	,_update_keystate: function() {
		var $it0 = this.key_code_pressed.keys();
		while( $it0.hasNext() ) {
			var _code = $it0.next();
			if(this.key_code_pressed.get(_code)) this.key_code_pressed.remove(_code); else this.key_code_pressed.set(_code,true);
		}
		var $it1 = this.key_code_released.keys();
		while( $it1.hasNext() ) {
			var _code1 = $it1.next();
			if(this.key_code_released.get(_code1)) this.key_code_released.remove(_code1); else this.key_code_released.set(_code1,true);
		}
		var $it2 = this.scan_code_pressed.keys();
		while( $it2.hasNext() ) {
			var _code2 = $it2.next();
			if(this.scan_code_pressed.get(_code2)) this.scan_code_pressed.remove(_code2); else this.scan_code_pressed.set(_code2,true);
		}
		var $it3 = this.scan_code_released.keys();
		while( $it3.hasNext() ) {
			var _code3 = $it3.next();
			if(this.scan_code_released.get(_code3)) this.scan_code_released.remove(_code3); else this.scan_code_released.set(_code3,true);
		}
	}
	,__class__: snow.system.input.Input
};
snow.system.io = {};
snow.system.io.IO = function(_app) {
	this.app = _app;
	this.module = new snow.core.web.io.IO(this);
	this.module.init();
};
snow.system.io.IO.__name__ = ["snow","system","io","IO"];
snow.system.io.IO.prototype = {
	url_open: function(_url) {
		this.module.url_open(_url);
	}
	,data_load: function(_path,_options) {
		return this.module.data_load(_path,_options);
	}
	,data_save: function(_path,_data,_options) {
		return this.module.data_save(_path,_data,_options);
	}
	,data_flow: function(_id,_processor,_provider) {
		var _g = this;
		if(_provider == null) _provider = $bind(this,this.default_provider);
		return new snow.api.Promise(function(resolve,reject) {
			_provider(_g.app,_id).then(function(data) {
				if(_processor != null) _processor(_g.app,_id,data).then(resolve,reject); else resolve(data);
			}).error(reject);
		});
	}
	,default_provider: function(_app,_id) {
		return this.module.data_load(_id,null);
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
	}
	,update: function() {
		this.module.update();
	}
	,destroy: function() {
		this.module.destroy();
	}
	,__class__: snow.system.io.IO
};
snow.system.window = {};
snow.system.window.Window = function(_system,_config) {
	this.internal_resize = false;
	this.internal_position = false;
	this.minimized = false;
	this.closed = true;
	this.auto_render = true;
	this.auto_swap = true;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.fullscreen = false;
	this.grab = false;
	this.bordered = true;
	this.title = "snow window";
	this.set_max_size({ x : 0, y : 0});
	this.set_min_size({ x : 0, y : 0});
	this.system = _system;
	this.asked_config = _config;
	this.config = _config;
	if(this.config.x == null) this.config.x = 536805376;
	if(this.config.y == null) this.config.y = 536805376;
	this.system.module.create(this.system.app.config.render,_config,$bind(this,this.on_window_created));
};
snow.system.window.Window.__name__ = ["snow","system","window","Window"];
snow.system.window.Window.prototype = {
	on_window_created: function(_handle,_id,_configs) {
		this.id = _id;
		this.handle = _handle;
		if(this.handle == null) {
			haxe.Log.trace("   i / window / " + "failed to create window",{ fileName : "Window.hx", lineNumber : 92, className : "snow.system.window.Window", methodName : "on_window_created"});
			return;
		}
		this.closed = false;
		this.config = _configs.config;
		this.system.app.config.render = _configs.render_config;
		this.internal_position = true;
		this.set_x(this.config.x);
		this.set_y(this.config.y);
		this.internal_position = false;
		this.internal_resize = true;
		this.set_width(this.config.width);
		this.set_height(this.config.height);
		this.internal_resize = false;
		this.on_event({ type : 1, window_id : _id, timestamp : snow.Snow.core.timestamp(), event : { }});
		null;
	}
	,on_event: function(_event) {
		var _g = _event.type;
		switch(_g) {
		case 5:
			this.internal_position = true;
			this.set_position(_event.event.x,_event.event.y);
			this.internal_position = false;
			break;
		case 6:
			this.internal_resize = true;
			this.set_size(_event.event.x,_event.event.y);
			this.internal_resize = false;
			break;
		case 7:
			this.internal_resize = true;
			this.set_size(_event.event.x,_event.event.y);
			this.internal_resize = false;
			break;
		case 8:
			this.minimized = true;
			break;
		case 10:
			this.minimized = false;
			break;
		default:
		}
		if(this.onevent != null) this.onevent(_event);
	}
	,update: function() {
		if(this.handle != null && !this.closed) this.system.module.update_window(this);
	}
	,render: function() {
		if(this.minimized || this.closed) return;
		if(this.handle == null) return;
		this.system.module.render(this);
		if(this.onrender != null) {
			this.onrender(this);
			if(this.auto_swap) this.swap();
			return;
		}
		snow.modules.opengl.web.GL.clearColor(0,0,0,1.0);
		snow.modules.opengl.web.GL.clear(16384);
		if(this.auto_swap) this.swap();
	}
	,swap: function() {
		if(this.handle == null || this.closed || this.minimized) return;
		this.system.module.swap(this);
	}
	,destroy: function() {
		this.closed = true;
		if(this.handle == null) return;
		this.system.remove(this);
		this.system.module.destroy_window(this);
		this.handle = null;
	}
	,close: function() {
		this.closed = true;
		if(this.handle == null) return;
		this.system.module.close(this);
	}
	,show: function() {
		if(this.handle == null) return;
		this.closed = false;
		this.system.module.show(this);
	}
	,simple_message: function(message,title) {
		if(title == null) title = "";
		if(this.handle == null) return;
		this.system.module.simple_message(this,message,title);
	}
	,get_fullscreen: function() {
		return this.fullscreen;
	}
	,set_fullscreen: function(_enable) {
		if(this.handle != null) this.system.module.fullscreen(this,_enable);
		return this.fullscreen = _enable;
	}
	,get_bordered: function() {
		return this.bordered;
	}
	,get_grab: function() {
		return this.grab;
	}
	,get_max_size: function() {
		return this.max_size;
	}
	,get_min_size: function() {
		return this.min_size;
	}
	,get_title: function() {
		return this.title;
	}
	,set_title: function(_title) {
		if(this.handle != null) this.system.module.set_title(this,_title);
		return this.title = _title;
	}
	,set_x: function(_x) {
		this.x = _x;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
		return this.x;
	}
	,set_y: function(_y) {
		this.y = _y;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
		return this.y;
	}
	,set_width: function(_width) {
		this.width = _width;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,this.width,this.height);
		return this.width;
	}
	,set_height: function(_height) {
		this.height = _height;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,this.width,this.height);
		return this.height;
	}
	,set_cursor_position: function(_x,_y) {
		if(this.handle != null && !this.closed) this.system.module.set_cursor_position(this,_x,_y);
	}
	,set_position: function(_x,_y) {
		var last_internal_position_flag = this.internal_position;
		this.internal_position = true;
		this.set_x(_x);
		this.set_y(_y);
		this.internal_position = last_internal_position_flag;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
	}
	,set_size: function(_width,_height) {
		var last_internal_resize_flag = this.internal_resize;
		this.internal_resize = true;
		this.set_width(_width);
		this.set_height(_height);
		this.internal_resize = last_internal_resize_flag;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,_width,_height);
	}
	,set_max_size: function(_size) {
		if(this.get_max_size() != null && this.handle != null) this.system.module.set_max_size(this,_size.x,_size.y);
		return this.max_size = _size;
	}
	,set_min_size: function(_size) {
		if(this.get_min_size() != null && this.handle != null) this.system.module.set_min_size(this,_size.x,_size.y);
		return this.min_size = _size;
	}
	,set_bordered: function(_bordered) {
		if(this.handle != null) this.system.module.bordered(this,_bordered);
		return this.bordered = _bordered;
	}
	,set_grab: function(_grab) {
		if(this.handle != null) this.system.module.grab(this,_grab);
		return this.grab = _grab;
	}
	,__class__: snow.system.window.Window
	,__properties__: {set_min_size:"set_min_size",get_min_size:"get_min_size",set_max_size:"set_max_size",get_max_size:"get_max_size",set_height:"set_height",set_width:"set_width",set_y:"set_y",set_x:"set_x",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_grab:"set_grab",get_grab:"get_grab",set_bordered:"set_bordered",get_bordered:"get_bordered",set_title:"set_title",get_title:"get_title"}
};
snow.system.window.Windowing = function(_app) {
	this.window_count = 0;
	this.app = _app;
	this.window_list = new haxe.ds.IntMap();
	this.window_handles = new haxe.ds.ObjectMap();
	this.module = new snow.core.web.window.Windowing(this);
	this.module.init();
};
snow.system.window.Windowing.__name__ = ["snow","system","window","Windowing"];
snow.system.window.Windowing.prototype = {
	create: function(_config) {
		var _window = new snow.system.window.Window(this,_config);
		this.window_list.set(_window.id,_window);
		this.window_handles.set(_window.handle,_window.id);
		this.window_count++;
		this.module.listen(_window);
		if(_config.no_input == null || _config.no_input == false) this.app.input.listen(_window);
		return _window;
	}
	,remove: function(_window) {
		this.window_list.remove(_window.id);
		this.window_handles.remove(_window.handle);
		this.window_count--;
		this.module.unlisten(_window);
		if(_window.config.no_input == null || _window.config.no_input == false) this.app.input.unlisten(_window);
	}
	,window_from_handle: function(_handle) {
		if(this.window_handles.h.__keys__[_handle.__id__] != null) {
			var _id = this.window_handles.h[_handle.__id__];
			return this.window_list.get(_id);
		}
		return null;
	}
	,window_from_id: function(_id) {
		return this.window_list.get(_id);
	}
	,enable_vsync: function(_enable) {
		return this.module.system_enable_vsync(_enable);
	}
	,enable_cursor: function(_enable) {
		this.module.system_enable_cursor(_enable);
	}
	,enable_cursor_lock: function(_enable) {
		this.module.system_lock_cursor(_enable);
	}
	,display_count: function() {
		return this.module.display_count();
	}
	,display_mode_count: function(display) {
		return this.module.display_mode_count(display);
	}
	,display_native_mode: function(display) {
		return this.module.display_native_mode(display);
	}
	,display_current_mode: function(display) {
		return this.module.display_current_mode(display);
	}
	,display_mode: function(display,mode_index) {
		return this.module.display_mode(display,mode_index);
	}
	,display_bounds: function(display) {
		return this.module.display_bounds(display);
	}
	,display_name: function(display) {
		return this.module.display_name(display);
	}
	,on_event: function(_event) {
		if(_event.type == 5) {
			var _window_event = _event.window;
			var _window = this.window_list.get(_window_event.window_id);
			if(_window != null) _window.on_event(_window_event);
		}
	}
	,update: function() {
		this.module.update();
		var $it0 = this.window_list.iterator();
		while( $it0.hasNext() ) {
			var $window = $it0.next();
			$window.update();
		}
		var $it1 = this.window_list.iterator();
		while( $it1.hasNext() ) {
			var window1 = $it1.next();
			if(window1.auto_render) window1.render();
		}
	}
	,destroy: function() {
		this.module.destroy();
	}
	,__class__: snow.system.window.Windowing
};
snow.types = {};
snow.types.Error = { __ename__ : true, __constructs__ : ["error","init","windowing","parse"] };
snow.types.Error.error = function(value) { var $x = ["error",0,value]; $x.__enum__ = snow.types.Error; $x.toString = $estr; return $x; };
snow.types.Error.init = function(value) { var $x = ["init",1,value]; $x.__enum__ = snow.types.Error; $x.toString = $estr; return $x; };
snow.types.Error.windowing = function(value) { var $x = ["windowing",2,value]; $x.__enum__ = snow.types.Error; $x.toString = $estr; return $x; };
snow.types.Error.parse = function(value) { var $x = ["parse",3,value]; $x.__enum__ = snow.types.Error; $x.toString = $estr; return $x; };
snow.types._Types = {};
snow.types._Types.AssetType_Impl_ = function() { };
snow.types._Types.AssetType_Impl_.__name__ = ["snow","types","_Types","AssetType_Impl_"];
snow.types._Types.AudioFormatType_Impl_ = function() { };
snow.types._Types.AudioFormatType_Impl_.__name__ = ["snow","types","_Types","AudioFormatType_Impl_"];
snow.types._Types.OpenGLProfile_Impl_ = function() { };
snow.types._Types.OpenGLProfile_Impl_.__name__ = ["snow","types","_Types","OpenGLProfile_Impl_"];
snow.types._Types.TextEventType_Impl_ = function() { };
snow.types._Types.TextEventType_Impl_.__name__ = ["snow","types","_Types","TextEventType_Impl_"];
snow.types._Types.GamepadDeviceEventType_Impl_ = function() { };
snow.types._Types.GamepadDeviceEventType_Impl_.__name__ = ["snow","types","_Types","GamepadDeviceEventType_Impl_"];
snow.types._Types.SystemEventType_Impl_ = function() { };
snow.types._Types.SystemEventType_Impl_.__name__ = ["snow","types","_Types","SystemEventType_Impl_"];
snow.types._Types.WindowEventType_Impl_ = function() { };
snow.types._Types.WindowEventType_Impl_.__name__ = ["snow","types","_Types","WindowEventType_Impl_"];
snow.types._Types.InputEventType_Impl_ = function() { };
snow.types._Types.InputEventType_Impl_.__name__ = ["snow","types","_Types","InputEventType_Impl_"];
snow.types._Types.FileEventType_Impl_ = function() { };
snow.types._Types.FileEventType_Impl_.__name__ = ["snow","types","_Types","FileEventType_Impl_"];
zpp_nape.ZPP_Const = function() { };
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.POSINF = function() {
	return Math.POSITIVE_INFINITY;
};
zpp_nape.ZPP_Const.NEGINF = function() {
	return Math.NEGATIVE_INFINITY;
};
zpp_nape.callbacks.ZPP_Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
zpp_nape.callbacks.ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_nape.callbacks.ZPP_Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_body = new nape.callbacks.BodyCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_con = new nape.callbacks.ConstraintCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_int = new nape.callbacks.InteractionCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) this.prev.next = obj; else this.next = obj;
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,push_rev: function(obj) {
		if(this.next != null) this.next.prev = obj; else this.prev = obj;
		obj.next = this.next;
		obj.prev = null;
		this.next = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) this.prev = null; else this.next.prev = null;
		this.length--;
		return ret;
	}
	,pop_rev: function() {
		var ret = this.prev;
		this.prev = ret.prev;
		if(this.prev == null) this.next = null; else this.prev.next = null;
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,clear: function() {
		while(!this.empty()) this.pop();
	}
	,splice: function(o) {
		var ret = o.next;
		if(o.prev == null) {
			this.next = o.next;
			if(this.next != null) this.next.prev = null; else this.prev = null;
		} else {
			o.prev.next = o.next;
			if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
		}
		this.length--;
		return ret;
	}
	,rotateL: function() {
		this.push(this.pop());
	}
	,rotateR: function() {
		this.push_rev(this.pop_rev());
	}
	,cycleNext: function(o) {
		if(o.next == null) return this.next; else return o.next;
	}
	,cyclePrev: function(o) {
		if(o.prev == null) return this.prev; else return o.prev;
	}
	,at: function(i) {
		var ret = this.next;
		while(i-- != 0) ret = ret.next;
		return ret;
	}
	,rev_at: function(i) {
		var ret = this.prev;
		while(i-- != 0) ret = ret.prev;
		return ret;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
		this.set = null;
	}
	,alloc: function() {
	}
	,genarbs: function() {
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,__class__: zpp_nape.callbacks.ZPP_Callback
};
zpp_nape.callbacks.ZPP_CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.id = zpp_nape.ZPP_ID.CbSet();
	this.cbpairs = new zpp_nape.util.ZNPList_ZPP_CbSetPair();
};
zpp_nape.callbacks.ZPP_CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_nape.callbacks.ZPP_CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
};
zpp_nape.callbacks.ZPP_CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSet(); else {
		ret = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
};
zpp_nape.callbacks.ZPP_CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_nape.callbacks.ZPP_CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_nape.callbacks.ZPP_CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_nape.callbacks.ZPP_CbSet.prototype = {
	increment: function() {
		this.count++;
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!(this.cbTypes.head == null)) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSet
};
zpp_nape.callbacks.ZPP_CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
};
zpp_nape.callbacks.ZPP_CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_nape.callbacks.ZPP_CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSetPair(); else {
		ret = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSetPair.setlt = function(x,y) {
	return zpp_nape.callbacks.ZPP_CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_nape.callbacks.ZPP_CbSet.setlt(x.b,y.b);
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype = {
	free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
	}
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
		}
	}
	,empty_intersection: function() {
		return this.listeners.head == null;
	}
	,single_intersection: function(i) {
		var ite = this.listeners.head;
		return ite != null && ite.elt == i && ite.next == null;
	}
	,forall: function(event,cb) {
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.event == event) cb(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSetPair
};
zpp_nape.util.ZPP_Flags = function() { };
zpp_nape.util.ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_nape.callbacks.ZPP_Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.Listener();
};
zpp_nape.callbacks.ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_nape.callbacks.ZPP_Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
};
zpp_nape.callbacks.ZPP_Listener.prototype = {
	swapEvent: function(event) {
	}
	,invalidate_precedence: function() {
	}
	,addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_nape.callbacks.ZPP_Listener
};
zpp_nape.callbacks.ZPP_BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_nape.callbacks.ZPP_BodyListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_BodyListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	immutable_options: function() {
		if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			cb.invalidatebody();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) throw "Error: BodyListener event must be either WAKE or SLEEP only";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_BodyListener
});
zpp_nape.callbacks.ZPP_ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_nape.callbacks.ZPP_ConstraintListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	immutable_options: function() {
		if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			cb.invalidateconstraint();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) throw "Error: ConstraintListener event must be either WAKE or SLEEP only";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_ConstraintListener
});
zpp_nape.util.ZNPList_ZPP_CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_nape.util.ZNPList_ZPP_CbType.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbType
};
zpp_nape.callbacks.ZPP_InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
zpp_nape.callbacks.ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_nape.callbacks.ZPP_InteractionListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_InteractionListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	setInteractionType: function(itype) {
		this.itype = itype;
	}
	,wake: function() {
		this.with_union(function(cb) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		});
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbSet;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbSet;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbSet;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbType;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbType;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbType;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,with_uniquesets: function(fresh) {
		var _g = this;
		var set;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) set = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			set = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		null;
		set.lt = zpp_nape.callbacks.ZPP_CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_nape.callbacks.ZPP_CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_nape.callbacks.ZPP_CbSetPair.get(a1,b1));
			});
		});
		set.clear_with(function(pair) {
			if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		});
		var o1 = set;
		o1.data = null;
		o1.lt = null;
		o1.swapped = null;
		o1.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o1;
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elt);
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elt);
			ite2 = ite2.next;
		}
	}
	,addedToSpace: function() {
		var _g = this;
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _g = this;
		this.with_uniquesets(false);
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,invalidate_precedence: function() {
		var _g = this;
		if(this.space != null) {
			var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
			this.with_union(function(cb) {
				cb.listeners.remove(_g);
				cb.invalidateint();
				cb.addint(_g);
				if(pre) {
					var cx_ite = cb.interactors.head;
					while(cx_ite != null) {
						var i = cx_ite.elt;
						i.wake();
						cx_ite = cx_ite.next;
					}
				}
			});
		}
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		null;
	}
	,swapEvent: function(newev) {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE) throw "Error: PreListener event can only be PRE"; else if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_END && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING) throw "Error: InteractionListener event must be either BEGIN, END, ONGOING";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_nape.callbacks.ZPP_InteractionListener
});
zpp_nape.callbacks.ZPP_OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.excludes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.callbacks.ZPP_OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_nape.callbacks.ZPP_OptionType.argument = function(val) {
	if(val == null) return new nape.callbacks.OptionType(); else if(js.Boot.__instanceof(val,nape.callbacks.OptionType)) return val; else return new nape.callbacks.OptionType().including(val);
};
zpp_nape.callbacks.ZPP_OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_nape.util.ZPP_CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_nape.util.ZPP_CbTypeList.get(this.excludes,true);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,compatible: function(xs) {
		return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
		}
		return ret;
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(val.id < j.id) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else this.includes.remove(val);
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(val.id < j1.id) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			this.excludes.inlined_insert(pre1,val);
		} else this.excludes.remove(val);
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
				} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
			} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
		}
	}
	,set: function(options) {
		if(options != this) {
			while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
			while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.excludes,i);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = options.includes.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				this.append_type(this.includes,i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		return this;
	}
	,append: function(list,val) {
		if(val == null) throw "Error: Cannot append null, only CbType and CbType list values";
		if(js.Boot.__instanceof(val,nape.callbacks.CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js.Boot.__instanceof(val,nape.callbacks.CbTypeList)) {
			var cbs = val;
			var _g;
			cbs.zpp_inner.valmod();
			_g = nape.callbacks.CbTypeIterator.get(cbs);
			while(_g.hasNext()) {
				var cb1;
				_g.zpp_critical = false;
				cb1 = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb1.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb2 = cbs1[_g1];
				++_g1;
				if(!js.Boot.__instanceof(cb2,nape.callbacks.CbType)) throw "Error: Cannot append non-CbType or CbType list value";
				var cbx = cb2;
				this.append_type(list,cbx.zpp_inner);
			}
		} else throw "Error: Cannot append non-CbType or CbType list value";
	}
	,__class__: zpp_nape.callbacks.ZPP_OptionType
};
zpp_nape.constraint = {};
zpp_nape.constraint.ZPP_Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_nape.ZPP_ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Math.POSITIVE_INFINITY;
	this.maxError = Math.POSITIVE_INFINITY;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.constraint.ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_nape.constraint.ZPP_Constraint.prototype = {
	clear: function() {
	}
	,immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: Constraint::" + name + " cannot be set during space step()";
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Constraint::cbTypes");
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.remove(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) this.activeInSpace();
	}
	,deactivate: function() {
		if(this.space != null) this.inactiveOrOutSpace();
	}
	,addedToSpace: function() {
		if(this.active) this.activeInSpace();
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) this.inactiveOrOutSpace();
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) this.space.wake_constraint(this);
	}
	,draw: function(g) {
	}
	,copy: function(dict,todo) {
		return null;
	}
	,copyto: function(ret) {
		var me = this.outer;
		var _g = ((function($this) {
			var $r;
			if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
			$r = me.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
				$r = ret.zpp_inner.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
		ret.zpp_inner.removeOnBreak;
		ret.set_breakUnderError(me.zpp_inner.breakUnderError);
		ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
		ret.set_maxError(me.zpp_inner.maxError);
		ret.set_maxForce(me.zpp_inner.maxForce);
		ret.set_damping(me.zpp_inner.damping);
		ret.set_frequency(me.zpp_inner.frequency);
		ret.set_stiff(me.zpp_inner.stiff);
		ret.set_ignore(me.zpp_inner.ignore);
		ret.set_active(me.zpp_inner.active);
	}
	,__class__: zpp_nape.constraint.ZPP_Constraint
};
zpp_nape.constraint.ZPP_AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_nape.constraint.ZPP_AngleJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_AngleJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.scale * this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: AngleJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: AngleJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C;
		var C1 = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.scale = -1.0;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
		if(!this.stiff) {
			if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_AngleJoint
});
zpp_nape.constraint.ZPP_CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
zpp_nape.constraint.ZPP_CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
zpp_nape.constraint.ZPP_CopyHelper.dict = function(id,bc) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.todo = function(id,cb) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.prototype = {
	__class__: zpp_nape.constraint.ZPP_CopyHelper
};
zpp_nape.constraint.ZPP_DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
zpp_nape.constraint.ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_nape.constraint.ZPP_DistanceJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_DistanceJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = nx * nx + ny * ny;
		if(C < nape.Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape.geom.Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: DistanceJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var C;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C1 = this.nx * this.nx + this.ny * this.ny;
		if(C1 < nape.Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C1 = 0;
			this.slack = true;
		} else {
			C1 = Math.sqrt(C1);
			var t = 1.0 / C1;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C1 -= this.jointMax;
				this.slack = false;
			} else if(C1 < this.jointMin) {
				C1 = this.jointMin - C1;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C1 > this.jointMax) {
				C1 -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C1 = 0;
				this.slack = true;
			}
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape.Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape.Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var k1;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k1 != 0) k1 = 1 / k1;
			j = -E * k1;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_DistanceJoint
});
zpp_nape.constraint.ZPP_LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.jointMin = Math.NEGATIVE_INFINITY;
	this.jointMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_nape.constraint.ZPP_LineJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_LineJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) return nape.geom.Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape.geom.Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		this.wrap_n = nape.geom.Vec2.get(this.nlocalx,this.nlocaly,null);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape.Config.epsilon) throw "Error: DistanceJoint direction must be non-degenerate";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
			var biasCoef;
			var X;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) this.jAccy = 0;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) Jy = 0;
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_LineJoint
});
zpp_nape.constraint.ZPP_MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
zpp_nape.constraint.ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_nape.constraint.ZPP_MotorJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_MotorJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.MotorJoint(null,null,this.rate,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: MotorJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
		} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_nape.constraint.ZPP_MotorJoint
});
zpp_nape.constraint.ZPP_PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_nape.constraint.ZPP_PivotJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PivotJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: PivotJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * (1.0 / Math.sqrt(ls));
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * (1.0 / Math.sqrt(ls1));
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_PivotJoint
});
zpp_nape.constraint.ZPP_PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
zpp_nape.constraint.ZPP_PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_nape.constraint.ZPP_PulleyJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PulleyJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape.geom.Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				_g.set_x((function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n12x);
				var _g1 = ret;
				_g1.set_y((function($this) {
					var $r;
					if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n12y);
				var _g2 = ret;
				_g2.set_z((function($this) {
					var $r;
					if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g2.zpp_inner.validate();
					$r = _g2.zpp_inner.z;
					return $r;
				}(this)) - this.cx1 * this.jAcc);
			}
			if(b == this.b2) {
				var _g3 = ret;
				_g3.set_x((function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n12x);
				var _g4 = ret;
				_g4.set_y((function($this) {
					var $r;
					if(_g4 != null && _g4.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g4.zpp_inner.validate();
					$r = _g4.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n12y);
				var _g5 = ret;
				_g5.set_z((function($this) {
					var $r;
					if(_g5 != null && _g5.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g5.zpp_inner.validate();
					$r = _g5.zpp_inner.z;
					return $r;
				}(this)) + this.cx2 * this.jAcc);
			}
			if(b == this.b3) {
				var _g6 = ret;
				_g6.set_x((function($this) {
					var $r;
					if(_g6 != null && _g6.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g6.zpp_inner.validate();
					$r = _g6.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n34x);
				var _g7 = ret;
				_g7.set_y((function($this) {
					var $r;
					if(_g7 != null && _g7.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g7.zpp_inner.validate();
					$r = _g7.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n34y);
				var _g8 = ret;
				_g8.set_z((function($this) {
					var $r;
					if(_g8 != null && _g8.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g8.zpp_inner.validate();
					$r = _g8.zpp_inner.z;
					return $r;
				}(this)) - this.cx3 * this.jAcc);
			}
			if(b == this.b4) {
				var _g9 = ret;
				_g9.set_x((function($this) {
					var $r;
					if(_g9 != null && _g9.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g9.zpp_inner.validate();
					$r = _g9.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n34x);
				var _g10 = ret;
				_g10.set_y((function($this) {
					var $r;
					if(_g10 != null && _g10.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g10.zpp_inner.validate();
					$r = _g10.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n34y);
				var _g11 = ret;
				_g11.set_z((function($this) {
					var $r;
					if(_g11 != null && _g11.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g11.zpp_inner.validate();
					$r = _g11.zpp_inner.z;
					return $r;
				}(this)) + this.cx4 * this.jAcc);
			}
			return ret;
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.add(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.remove(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		this.wrap_a3 = nape.geom.Vec2.get(this.a3localx,this.a3localy,null);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		this.wrap_a4 = nape.geom.Vec2.get(this.a4localx,this.a4localy,null);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		if(dict != null && this.b3 != null) {
			var b4 = null;
			var _g2 = 0;
			while(_g2 < dict.length) {
				var idc2 = dict[_g2];
				++_g2;
				if(idc2.id == this.b3.id) {
					b4 = idc2.bc;
					break;
				}
			}
			if(b4 != null) ret.zpp_inner_zn.b3 = b4.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b3.id,function(b5) {
				ret.zpp_inner_zn.b3 = b5.zpp_inner;
			}));
		}
		if(dict != null && this.b4 != null) {
			var b6 = null;
			var _g3 = 0;
			while(_g3 < dict.length) {
				var idc3 = dict[_g3];
				++_g3;
				if(idc3.id == this.b4.id) {
					b6 = idc3.bc;
					break;
				}
			}
			if(b6 != null) ret.zpp_inner_zn.b4 = b6.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b4.id,function(b7) {
				ret.zpp_inner_zn.b4 = b7.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw "Error: PulleyJoint cannot be simulated with null bodies";
		if(this.b1 == this.b2 || this.b3 == this.b4) throw "Error: PulleyJoint cannot have body1==body2 or body3==body4";
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: PulleyJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
		if(!(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
		if(this.b3 != null && this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b3.wake();
		if(this.b4 != null && this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b4.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) xr2 = this.b3.component; else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) yr2 = this.component; else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) xr3 = this.b4.component; else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) yr3 = this.component; else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var C;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C1 = C12 + this.ratio * C34;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			this.kMass = K;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			var k1;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			k1 = K;
			if(k1 != 0) k1 = 1 / k1;
			j = -E * k1;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_PulleyJoint
});
zpp_nape.constraint.ZPP_UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.bodies = new Array();
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = new Array();
	this.bias = new Array();
	this.L = new Array();
	this.J = new Array();
	this.jOld = new Array();
	this.y = new Array();
	this.Keff = new Array();
	this.vec3 = nape.geom.Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
zpp_nape.constraint.ZPP_UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_nape.constraint.ZPP_UserConstraint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_UserConstraint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bindVec2_invalidate: function(_) {
		this.outer_zn.__invalidate();
	}
	,addBody: function(b) {
		var match = null;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.body == b) {
				match = x;
				break;
			}
		}
		if(match == null) {
			this.bodies.push(new zpp_nape.constraint.ZPP_UserBody(1,b));
			if(this.active && this.space != null) {
				if(b != null) b.constraints.add(this);
			}
		} else match.cnt++;
	}
	,remBody: function(b) {
		var match = null;
		var bl = this.bodies.length | 0;
		var i = 0;
		while(i < bl) {
			var x = this.bodies[i];
			if(x.body == b) {
				x.cnt--;
				if(x.cnt == 0) {
					if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
					this.bodies.pop();
					if(this.active && this.space != null) {
						if(b != null) b.constraints.remove(this);
					}
				}
				match = x;
				break;
			}
			i++;
		}
		return match != null;
	}
	,bodyImpulse: function(b) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape.geom.Vec3.get(0,0,0);
		if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
		return ret;
	}
	,activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = this.outer_zn.__copy();
		this.copyto(ret);
		throw "not done yet";
		return ret;
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) throw "Error: Constraints must have each body within the same sapce to which the constraint has been assigned";
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) b.body.wake();
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var xr;
				if(b.body.component == b.body.component.parent) xr = b.body.component; else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) yr = this.component; else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		while(_g < bl) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g1 = bi + 1;
			while(_g1 < bl) {
				var ci = _g1++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) break;
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				while(_g2 < i) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else this.y[i] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.dim;
		while(_g11 < _g3) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else x[i1] = 0.0;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) return false;
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,draw: function(g) {
		this.outer_zn.__draw(g);
	}
	,__class__: zpp_nape.constraint.ZPP_UserConstraint
});
zpp_nape.constraint.ZPP_UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
zpp_nape.constraint.ZPP_UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_nape.constraint.ZPP_UserBody.prototype = {
	__class__: zpp_nape.constraint.ZPP_UserBody
};
zpp_nape.constraint.ZPP_WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_nape.constraint.ZPP_WeldJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_WeldJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var flag;
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) this.kMassd = 1 / this.kMassd; else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) this.kMassf = 1 / this.kMassf; else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if((flag & 4) != 0) this.jAccz = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * (1.0 / Math.sqrt(ls));
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(Ez * Ez < zpp_nape.util.ZPP_Math.sqr(nape.Config.constraintAngularSlop)) {
			if(!cont) return false; else Ez = 0;
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * (1.0 / Math.sqrt(ls));
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * (1.0 / Math.sqrt(ls1));
			Jx *= t9;
			Jy *= t9;
		}
		zpp_nape.util.ZPP_Math.clamp(Jz,-0.25,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kd != 0) Jy /= Kd; else Jy = 0;
			if(Kf != 0) Jz /= Kf; else Jz = 0;
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_nape.constraint.ZPP_WeldJoint
});
zpp_nape.dynamics.ZPP_Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
zpp_nape.dynamics.ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_nape.dynamics.ZPP_Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Arbiter.internal = true;
			if(this.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				this.colarb.outer_zn = new nape.dynamics.CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape.dynamics.FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else this.outer = new nape.dynamics.Arbiter();
			this.outer.zpp_inner = this;
			zpp_nape.dynamics.ZPP_Arbiter.internal = false;
		}
		return this.outer;
	}
	,inactiveme: function() {
		return !this.active;
	}
	,acting: function() {
		return this.active && (this.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0;
	}
	,swap_features: function() {
		var t = this.b1;
		this.b1 = this.b2;
		this.b2 = t;
		var t1 = this.ws1;
		this.ws1 = this.ws2;
		this.ws2 = t1;
		var t2 = this.colarb.s1;
		this.colarb.s1 = this.colarb.s2;
		this.colarb.s2 = t2;
	}
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
		if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,__class__: zpp_nape.dynamics.ZPP_Arbiter
};
zpp_nape.dynamics.ZPP_SensorArbiter = function() {
	this.next = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	this.sensorarb = this;
};
zpp_nape.dynamics.ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_nape.dynamics.ZPP_SensorArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
	}
	,makemutable: function() {
	}
	,makeimmutable: function() {
	}
	,__class__: zpp_nape.dynamics.ZPP_SensorArbiter
});
zpp_nape.dynamics.ZPP_FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
zpp_nape.dynamics.ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_nape.dynamics.ZPP_FluidArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,position_validate: function() {
		if(!this.active) throw "Error: Arbiter not currently in use";
		this.wrap_position.zpp_inner.x = this.centroidx;
		this.wrap_position.zpp_inner.y = this.centroidy;
	}
	,position_invalidate: function(x) {
		this.centroidx = x.x;
		this.centroidy = x.y;
	}
	,getposition: function() {
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = !this.mutable;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
		this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t1 = mass1 + mass2;
				buoyx += g2x * t1;
				buoyy += g2y * t1;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t2 = 0.5;
				gx *= t2;
				gy *= t2;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t3 = mass1 + mass2;
					buoyx -= gx * t3;
					buoyy -= gy * t3;
				} else {
					var t4 = mass1 + mass2;
					buoyx += gx * t4;
					buoyy += gy * t4;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t5 = mass;
			buoyx -= g1x * t5;
			buoyy -= g1y * t5;
		} else if(this.ws2.fluidEnabled) {
			var mass3 = this.overlap * this.ws2.fluidProperties.density;
			var t6 = mass3;
			buoyx += g2x * t6;
			buoyy += g2y * t6;
		}
		var t7 = dt;
		buoyx *= t7;
		buoyy *= t7;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t8 = this.b1.imass;
			this.b1.velx -= buoyx * t8;
			this.b1.vely -= buoyy * t8;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t9 = this.b2.imass;
			this.b2.velx += buoyx * t9;
			this.b2.vely += buoyy * t9;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
				var biasCoef;
				tViscosity *= 0.0004;
				var omega = 2 * Math.PI * tViscosity;
				this.agamma = 1 / (dt * omega * (2 + omega * dt));
				var ig = 1 / (1 + this.agamma);
				biasCoef = dt * omega * omega * this.agamma;
				this.agamma *= ig;
				this.wMass *= ig;
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(vrnx * vrnx + vrny * vrny < nape.Config.epsilon * nape.Config.epsilon) {
			} else {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = 1.0 / Math.sqrt(d);
				var t10 = imag;
				vrnx *= t10;
				vrny *= t10;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape.Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f1 * this.ws1.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
					var poly1 = this.ws1.polygon;
					var bord1 = 0.0;
					var acc1 = 0.0;
					var cx_ite1 = poly1.edges.head;
					while(cx_ite1 != null) {
						var ex1 = cx_ite1.elt;
						bord1 += ex1.length;
						var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
						if(fact1 > 0) fact1 = fact1 *= -nape.Config.fluidVacuumDrag;
						acc1 -= fact1 * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite1 = cx_ite1.next;
					}
					tViscosity1 += acc1 / bord1;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X1 = this.r2x * this.b2.sinertia;
					var Y1 = this.r2y * this.b2.sinertia;
					Ka += Y1 * this.r2y;
					Kb += -Y1 * this.r2x;
					Kc += X1 * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Ka = Kb = Kc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) Ka = 1 / Ka; else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) Kc = 1 / Kc; else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
					flag;
				} else {
					det = 1 / det;
					var t11 = Kc * det;
					Kc = Ka * det;
					Ka = t11;
					Kb *= -det;
					0;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef1;
				var X2;
				var omega1 = 2 * Math.PI * tViscosity1;
				this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
				var ig1 = 1 / (1 + this.lgamma);
				biasCoef1 = dt * omega1 * omega1 * this.lgamma;
				this.lgamma *= ig1;
				X2 = ig1;
				this.vMassa *= X2;
				this.vMassb *= X2;
				this.vMassc *= X2;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t12 = dtratio;
		this.dampx *= t12;
		this.dampy *= t12;
		this.adamp *= dtratio;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.dampx * t1;
		this.b2.vely += this.dampy * t1;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t1 = this.lgamma;
			jx -= this.dampx * t1;
			jy -= this.dampy * t1;
			var t2 = 1.0;
			this.dampx += jx * t2;
			this.dampy += jy * t2;
			var t3 = this.b1.imass;
			this.b1.velx -= jx * t3;
			this.b1.vely -= jy * t3;
			var t4 = this.b2.imass;
			this.b2.velx += jx * t4;
			this.b2.vely += jy * t4;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_FluidArbiter
});
zpp_nape.dynamics.ZPP_ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_nape.dynamics.ZPP_Contact();
	this.innards = new zpp_nape.dynamics.ZPP_IContact();
	this.type = zpp_nape.dynamics.ZPP_Arbiter.COL;
	this.colarb = this;
};
zpp_nape.dynamics.ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_nape.dynamics.ZPP_ColArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_ColArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	normal_validate: function() {
		if(this.cleared) throw "Error: Arbiter not currently in use";
		this.wrap_normal.zpp_inner.x = this.nx;
		this.wrap_normal.zpp_inner.y = this.ny;
		if(this.ws1.id > this.ws2.id) {
			this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
			this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
		}
	}
	,getnormal: function() {
		this.wrap_normal = nape.geom.Vec2.get(0,0,null);
		this.wrap_normal.zpp_inner._immutable = true;
		this.wrap_normal.zpp_inner._inuse = true;
		this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
	}
	,alloc: function() {
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) posOnly = false;
		var c = null;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var cur = cx_ite;
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_nape.dynamics.ZPP_Contact.zpp_pool == null) c = new zpp_nape.dynamics.ZPP_Contact(); else {
				c = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = c.next;
				c.next = null;
			}
			null;
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else c.fresh = false;
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.s1 = s1;
		this.s2 = s2;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		while(!(this.contacts.next == null)) {
			var o = this.contacts.inlined_pop_unsafe();
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o1 = this;
		o1.userdef_dyn_fric = false;
		o1.userdef_stat_fric = false;
		o1.userdef_restitution = false;
		o1.userdef_rfric = false;
		o1.__ref_edge1 = o1.__ref_edge2 = null;
		o1.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o1;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
	}
	,contacts_adder: function(x) {
		throw "Error: Cannot add new contacts, information required is far too specific and detailed :)";
		return false;
	}
	,contacts_subber: function(x) {
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c == x.zpp_inner) {
				this.contacts.erase(pre);
				this.innards.erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				break;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
	}
	,setupcontacts: function() {
		this.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(this.contacts,true);
		this.wrap_contacts.zpp_inner.immutable = !this.mutable;
		this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
		this.wrap_contacts.zpp_inner.dontremove = true;
		this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		this.hc2 = false;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		return fst;
	}
	,preStep: function(dt) {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC);
		var bias;
		if(statType) {
			if(this.continuous) bias = nape.Config.contactContinuousStaticBiasCoef; else bias = nape.Config.contactStaticBiasCoef;
		} else if(this.continuous) bias = nape.Config.contactContinuousBiasCoef; else bias = nape.Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				if(kt < nape.Config.epsilon * nape.Config.epsilon) ci.tMass = 0; else ci.tMass = 1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				if(nt < nape.Config.epsilon * nape.Config.epsilon) ci.nMass = 0; else ci.nMass = 1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape.Config.elasticThreshold) ci.bounce = 0;
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape.Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape.Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
					0;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t1 = this.c1;
					this.c1 = this.c2;
					this.c2 = t1;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t2 = 1.0;
		this.surfacex += this.b1.svelx * t2;
		this.surfacey += this.b1.svely * t2;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) this.rMass = 1 / this.rMass;
		return fst;
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t1 = this.b2.imass;
		this.b2.velx += jx * t1;
		this.b2.vely += jy * t1;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t2 = this.b1.imass;
			this.b1.velx -= jx1 * t2;
			this.b1.vely -= jy1 * t2;
			this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
			var t3 = this.b2.imass;
			this.b2.velx += jx1 * t3;
			this.b2.vely += jy1 * t3;
			this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) cjAcc = 0.0;
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t1 = 1.0;
			r1x += this.b1.posx * t1;
			r1y += this.b1.posy * t1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape.Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape.Config.epsilon) {
					if(this.b1.smass != 0.0) this.b1.posx += nape.Config.epsilon * 10; else this.b2.posx += nape.Config.epsilon * 10;
				} else {
					var t2 = 1.0 / dl;
					dx1 *= t2;
					dy1 *= t2;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t3 = jn;
						Jx = dx1 * t3;
						Jy = dy1 * t3;
						var t4 = this.b1.imass;
						this.b1.posx -= Jx * t4;
						this.b1.posy -= Jy * t4;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t5 = this.b2.imass;
						this.b2.posx += Jx * t5;
						this.b2.posy += Jy * t5;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t6 = 1.0;
				clip1x += this.b2.posx * t6;
				clip1y += this.b2.posy * t6;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t7 = 1.0;
					clip2x += this.b2.posx * t7;
					clip2y += this.b2.posy * t7;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t8 = 1.0;
				clip1x += this.b1.posx * t8;
				clip1y += this.b1.posy * t8;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t9 = 1.0;
					clip2x += this.b1.posx * t9;
					clip2y += this.b1.posy * t9;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape.Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape.Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					do {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) xx = xy = 0; else if(det == 0) {
							if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
							if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
						} else {
							det = 1 / det;
							var t10 = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t10;
						}
						if(xx >= 0 && xy >= 0) {
							var t11 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t11;
							this.b1.posy -= gnormy * t11;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t12 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t12;
							this.b2.posy += gnormy * t12;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t13 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t13;
							this.b1.posy -= gnormy * t13;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t14 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t14;
							this.b2.posy += gnormy * t14;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t15 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t15;
							this.b1.posy -= gnormy * t15;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t16 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t16;
							this.b2.posy += gnormy * t16;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
					} while(false);
				} else {
					var rn11 = gnormy * c1r1x - gnormx * c1r1y;
					var rn21 = gnormy * c1r2x - gnormx * c1r2y;
					var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
					if(K1 != 0) {
						var jn1 = -this.biasCoef * err1 / K1;
						var Jx1 = 0.0;
						var Jy1 = 0.0;
						var t17 = jn1;
						Jx1 = gnormx * t17;
						Jy1 = gnormy * t17;
						var t18 = this.b1.imass;
						this.b1.posx -= Jx1 * t18;
						this.b1.posy -= Jy1 * t18;
						this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
						var t19 = this.b2.imass;
						this.b2.posx += Jx1 * t19;
						this.b2.posy += Jy1 * t19;
						this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
					}
				}
			}
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_ColArbiter
});
zpp_nape.dynamics.ZPP_Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_IContact();
};
zpp_nape.dynamics.ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_nape.dynamics.ZPP_Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Contact.internal = true;
			this.outer = new nape.dynamics.Contact();
			zpp_nape.dynamics.ZPP_Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,position_validate: function() {
		if(this.inactiveme()) throw "Error: Contact not currently in use";
		this.wrap_position.zpp_inner.x = this.px;
		this.wrap_position.zpp_inner.y = this.py;
	}
	,getposition: function() {
		var me = this;
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = true;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	}
	,inactiveme: function() {
		return !(this.active && this.arbiter != null && !(!this.arbiter.active));
	}
	,free: function() {
		this.arbiter = null;
	}
	,alloc: function() {
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_nape.dynamics.ZPP_Contact
};
zpp_nape.dynamics.ZPP_IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
zpp_nape.dynamics.ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_nape.dynamics.ZPP_IContact.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_nape.dynamics.ZPP_IContact
};
zpp_nape.dynamics.ZPP_InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
};
zpp_nape.dynamics.ZPP_InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_nape.dynamics.ZPP_InteractionGroup.prototype = {
	setGroup: function(group) {
		if(this.group != group) {
			if(this.group != null) {
				this.group.groups.remove(this);
				this.depth = 0;
				this.group.invalidate(true);
			}
			this.group = group;
			if(group != null) {
				group.groups.add(this);
				this.depth = group.depth + 1;
				group.invalidate(true);
			} else this.invalidate(true);
		}
	}
	,invalidate: function(force) {
		if(force == null) force = false;
		if(!(force || this.ignore)) return;
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.head;
		while(cx_ite1 != null) {
			var g = cx_ite1.elt;
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,addGroup: function(group) {
		this.groups.add(group);
		group.depth = this.depth + 1;
	}
	,remGroup: function(group) {
		this.groups.remove(group);
		group.depth = 0;
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remInteractor: function(intx,flag) {
		if(flag == null) flag = -1;
		this.interactors.remove(intx);
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionGroup
};
zpp_nape.dynamics.ZPP_SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape.dynamics.ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_nape.dynamics.ZPP_SpaceArbiterList.__super__ = nape.dynamics.ArbiterList;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype = $extend(nape.dynamics.ArbiterList.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				if(i1.active) len1++;
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				if(i2.active) len2++;
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				if(i3.active) len3++;
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,push: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,pop: function() {
		throw "Error: ArbiterList is immutable";
		return null;
	}
	,unshift: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,shift: function() {
		throw "Error: ArbiterList is immutable";
		return null;
	}
	,remove: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,clear: function() {
		throw "Error: ArbiterList is immutable";
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elt;
						if(x1.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else accum_length += this.lengths[0];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x2 = this.ite_1.elt;
						if(x2.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elt;
						if(x3.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else accum_length += this.lengths[1];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x4 = this.ite_2.elt;
						if(x4.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elt;
						if(x5.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else accum_length += this.lengths[2];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x6 = this.ite_3.elt;
						if(x6.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elt;
						if(x7.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else accum_length += this.lengths[3];
		}
		return ret;
	}
	,__class__: zpp_nape.dynamics.ZPP_SpaceArbiterList
});
zpp_nape.geom.ZPP_AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_nape.geom.ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
		ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_nape.geom.ZPP_AABB.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.AABB();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,alloc: function() {
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_AABB.get(this.minx,this.miny,this.maxx,this.maxy);
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,perimeter: function() {
		return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
	}
	,getmin: function() {
		if(this.wrap_min == null) {
			this.wrap_min = nape.geom.Vec2.get(this.minx,this.miny,null);
			this.wrap_min.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
			this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
		}
		return this.wrap_min;
	}
	,dom_min: function() {
		if(this._validate != null) this._validate();
		this.wrap_min.zpp_inner.x = this.minx;
		this.wrap_min.zpp_inner.y = this.miny;
	}
	,mod_min: function(min) {
		if(min.x != this.minx || min.y != this.miny) {
			this.minx = min.x;
			this.miny = min.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,getmax: function() {
		if(this.wrap_max == null) {
			this.wrap_max = nape.geom.Vec2.get(this.maxx,this.maxy,null);
			this.wrap_max.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
			this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
		}
		return this.wrap_max;
	}
	,dom_max: function() {
		if(this._validate != null) this._validate();
		this.wrap_max.zpp_inner.x = this.maxx;
		this.wrap_max.zpp_inner.y = this.maxy;
	}
	,mod_max: function(max) {
		if(max.x != this.maxx || max.y != this.maxy) {
			this.maxx = max.x;
			this.maxy = max.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,intersectX: function(x) {
		return !(x.minx > this.maxx || this.minx > x.maxx);
	}
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersect: function(x) {
		return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
	}
	,combine: function(x) {
		if(x.minx < this.minx) this.minx = x.minx;
		if(x.maxx > this.maxx) this.maxx = x.maxx;
		if(x.miny < this.miny) this.miny = x.miny;
		if(x.maxy > this.maxy) this.maxy = x.maxy;
	}
	,contains: function(x) {
		return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
	}
	,containsPoint: function(v) {
		return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
	}
	,setCombine: function(a,b) {
		if(a.minx < b.minx) this.minx = a.minx; else this.minx = b.minx;
		if(a.miny < b.miny) this.miny = a.miny; else this.miny = b.miny;
		if(a.maxx > b.maxx) this.maxx = a.maxx; else this.maxx = b.maxx;
		if(a.maxy > b.maxy) this.maxy = a.maxy; else this.maxy = b.maxy;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,setExpandPoint: function(x,y) {
		if(x < this.minx) this.minx = x;
		if(x > this.maxx) this.maxx = x;
		if(y < this.miny) this.miny = y;
		if(y > this.maxy) this.maxy = y;
	}
	,toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_nape.geom.ZPP_AABB
};
zpp_nape.util.ZNPList_ZPP_Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_nape.util.ZNPList_ZPP_Vec2.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Vec2
};
zpp_nape.geom.ZPP_Collide = function() { };
zpp_nape.geom.ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_nape.geom.ZPP_Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_nape.geom.ZPP_Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.shapeContains = function(s,p) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p); else return zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p);
};
zpp_nape.geom.ZPP_Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_nape.geom.ZPP_Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var minDist = s1.circle.radius + -s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			var distSqr = px * px + py * py;
			return distSqr <= minDist * minDist;
		} else {
			var retvar;
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = p.x - s1.circle.worldCOMx;
						py1 = p.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			return retvar;
		}
	} else if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var retvar1;
		retvar1 = true;
		var cx_ite1 = s1.polygon.edges.head;
		while(cx_ite1 != null) {
			var a = cx_ite1.elt;
			if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
				cx_ite1 = cx_ite1.next;
				continue;
			} else {
				retvar1 = false;
				break;
			}
			cx_ite1 = cx_ite1.next;
		}
		return retvar1;
	} else {
		var retvar2;
		retvar2 = true;
		var cx_ite2 = s1.polygon.edges.head;
		while(cx_ite2 != null) {
			var a1 = cx_ite2.elt;
			if((function($this) {
				var $r;
				var max = -1e+100;
				{
					var cx_ite3 = s2.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v = cx_ite3;
						var k = a1.gnormx * v.x + a1.gnormy * v.y;
						if(k > max) max = k;
						cx_ite3 = cx_ite3.next;
					}
				}
				$r = max <= a1.gprojection;
				return $r;
			}(this))) {
				cx_ite2 = cx_ite2.next;
				continue;
			} else {
				retvar2 = false;
				break;
			}
			cx_ite2 = cx_ite2.next;
		}
		return retvar2;
	} else return false;
};
zpp_nape.geom.ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) min1 = k1;
						if(min1 - ax1.gprojection <= max) break;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) return false; else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape.Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t2 = (-ax2.tp0 - d1) * den;
					if(t2 < -nape.Config.epsilon) {
						var t3 = t2;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					if(arb.rev) arb.ptype = 1; else arb.ptype = 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite5 = s2.polygon.edges.head;
			while(cx_ite5 != null) {
				var a = cx_ite5.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					if(distSqr > minDist * minDist) co = null; else if(distSqr < nape.Config.epsilon * nape.Config.epsilon) co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null); else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1;
						if(invDist < nape.Config.epsilon) dist1 = 1e100; else dist1 = 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0,null); else co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0,null);
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var co1;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					if(distSqr1 > minDist1 * minDist1) co1 = null; else if(distSqr1 < nape.Config.epsilon * nape.Config.epsilon) co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0,null); else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2;
						if(invDist1 < nape.Config.epsilon) dist2 = 1e100; else dist2 = 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0,null); else co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0,null);
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) con3 = arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0,null); else con3 = arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0,null);
					if(rev) arb.ptype = 0; else arb.ptype = 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co2;
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		if(distSqr2 > minDist2 * minDist2) co2 = null; else if(distSqr2 < nape.Config.epsilon * nape.Config.epsilon) co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0,null); else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3;
			if(invDist2 < nape.Config.epsilon) dist3 = 1e100; else dist3 = 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0,null); else co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0,null);
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
};
zpp_nape.geom.ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_nape.geom.ZPP_Collide.testCollide(s1,s2);
};
zpp_nape.geom.ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var cont = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(cont) {
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			return cont;
		} else return false;
	} else {
		var a0 = null;
		var vi = null;
		var cont1 = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		var cx_ite4 = s2.polygon.edges.head;
		while(cx_ite4 != null) {
			var a = cx_ite4.elt;
			var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
			if(dist > 0) {
				cont1 = false;
				break;
			}
			if(dist > max) {
				max = dist;
				a0 = a;
				vi = vite;
			}
			vite = vite.next;
			cx_ite4 = cx_ite4.next;
		}
		if(cont1) {
			var v0 = vi;
			var v11;
			if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = v0.x - s1.circle.worldCOMx;
				py = v0.y - s1.circle.worldCOMy;
				var distSqr = px * px + py * py;
				return distSqr <= minDist * minDist;
			} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
				var minDist1 = s1.circle.radius;
				var px1 = 0.0;
				var py1 = 0.0;
				px1 = v11.x - s1.circle.worldCOMx;
				py1 = v11.y - s1.circle.worldCOMy;
				var distSqr1 = px1 * px1 + py1 * py1;
				return distSqr1 <= minDist1 * minDist1;
			} else return true;
		} else return false;
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_nape.geom.ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var out1 = new Array();
		var out2 = new Array();
		var cont = true;
		var total = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var ind = 0;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				if(k >= ax.gprojection + nape.Config.epsilon) {
					out2[ind] = true;
					total = false;
				}
				ind++;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(total) {
			s2.polygon.validate_worldCOM();
			arb.overlap = s2.polygon.area;
			arb.centroidx = s2.polygon.worldCOMx;
			arb.centroidy = s2.polygon.worldCOMy;
			null;
			return true;
		} else if(cont) {
			total = true;
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var ind1 = 0;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					if(k1 >= ax1.gprojection + nape.Config.epsilon) {
						out1[ind1] = true;
						total = false;
					}
					ind1++;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(total) {
				s1.polygon.validate_worldCOM();
				arb.overlap = s1.polygon.area;
				arb.centroidx = s1.polygon.worldCOMx;
				arb.centroidy = s1.polygon.worldCOMy;
				null;
				return true;
			} else if(cont) {
				while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
					var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
						zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind11 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				var _g1 = 0;
				var _g = s2.polygon.edgeCnt;
				while(_g1 < _g) {
					var i = _g1++;
					if(!out2[i]) {
						ind2 = i;
						break;
					} else ite2 = ite2.next;
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g11 = 0;
					var _g2 = s1.polygon.edgeCnt;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!out1[i1]) {
							ind11 = i1;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ite1);
						fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
					}
				} else {
					zpp_nape.geom.ZPP_Collide.flowpoly.add(ite2);
					fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v2 = cx_itej;
						var min2 = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v2.x - u.x;
									_vy = v2.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t < min2) {
									min2 = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b1 = cx_itej1;
							var t1 = 0.0;
							if((function($this) {
								var $r;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								{
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
								}
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								{
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
								}
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								{
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
								}
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								$r = den1 * den1 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									$r = txx1 > nape.Config.epsilon && txx1 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										$r = sxx1 > nape.Config.epsilon && sxx1 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t1 = txx1;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t1 < min2) {
									min2 = t1;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min2 != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min2;
							cx = u.x + (v2.x - u.x) * T;
							cy = u.y + (v2.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v2;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v3 = cx_itej;
						var min3 = 2.0;
						var cx_cont2 = true;
						var cx_itei2 = s2.polygon.gverts.next;
						var a1 = cx_itei2;
						var cx_itej2 = cx_itei2.next;
						while(cx_itej2 != null) {
							var b2 = cx_itej2;
							var t2 = 0.0;
							if((function($this) {
								var $r;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								{
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
								}
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								{
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
								}
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								{
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
								}
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								$r = den2 * den2 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									$r = txx2 > nape.Config.epsilon && txx2 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										$r = sxx2 > nape.Config.epsilon && sxx2 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t2 = txx2;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t2 < min3) {
									min3 = t2;
									ite2 = cx_itei2;
								}
							}
							cx_itei2 = cx_itej2;
							a1 = b2;
							cx_itej2 = cx_itej2.next;
						}
						if(cx_cont2) do {
							cx_itej2 = s2.polygon.gverts.next;
							var b3 = cx_itej2;
							var t3 = 0.0;
							if((function($this) {
								var $r;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								{
									_sx3 = u.x - a1.x;
									_sy3 = u.y - a1.y;
								}
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								{
									_vx3 = v3.x - u.x;
									_vy3 = v3.y - u.y;
								}
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								{
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
								}
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								$r = den3 * den3 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									$r = txx3 > nape.Config.epsilon && txx3 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										$r = sxx3 > nape.Config.epsilon && sxx3 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t3 = txx3;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t3 < min3) {
									min3 = t3;
									ite2 = cx_itei2;
								}
							}
						} while(false);
						if(min3 != 2.0) {
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = min3;
							cx1 = u.x + (v3.x - u.x) * T1;
							cy1 = u.y + (v3.y - u.y) * T1;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind11++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind11 = 0;
					}
					if(!out1[ind11]) {
						var ex = ite1;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a2 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b4 = ite1;
						var u1 = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite4 = itm;
						do {
							var v4 = cx_ite4;
							var t4 = 0.0;
							if((function($this) {
								var $r;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								{
									_sx4 = u1.x - a2.x;
									_sy4 = u1.y - a2.y;
								}
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								{
									_vx4 = v4.x - u1.x;
									_vy4 = v4.y - u1.y;
								}
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								{
									_qx4 = b4.x - a2.x;
									_qy4 = b4.y - a2.y;
								}
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								$r = den4 * den4 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									$r = txx4 > nape.Config.epsilon && txx4 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										$r = sxx4 > nape.Config.epsilon && sxx4 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t4 = txx4;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t4 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t4;
										cx_ite4 = beg_ite;
										break;
									} else max = t4;
								}
							}
							u1 = v4;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite4 != beg_ite) {
							var v5 = cx_ite4;
							var t5 = 0.0;
							if((function($this) {
								var $r;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								{
									_sx5 = u1.x - a2.x;
									_sy5 = u1.y - a2.y;
								}
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								{
									_vx5 = v5.x - u1.x;
									_vy5 = v5.y - u1.y;
								}
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								{
									_qx5 = b4.x - a2.x;
									_qy5 = b4.y - a2.y;
								}
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								$r = den5 * den5 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									$r = txx5 > nape.Config.epsilon && txx5 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										$r = sxx5 > nape.Config.epsilon && sxx5 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t5 = txx5;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t5 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t5;
										cx_ite4 = beg_ite;
										break;
									} else max = t5;
								}
							}
							u1 = v5;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u2 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v6 = itm2;
						var cx2 = 0.0;
						var cy2 = 0.0;
						var T2 = max;
						cx2 = u2.x + (v6.x - u2.x) * T2;
						cy2 = u2.y + (v6.y - u2.y) * T2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx2,cy2,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex1 = ite2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex1);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a3 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b5 = ite2;
						var u3 = ite1;
						var itm1 = ite1.next;
						if(itm1 == null) itm1 = s1.polygon.gverts.next;
						var max1 = -1.0;
						var itmo1 = null;
						var indo1 = 0;
						var icnt1 = 0;
						var beg_ite1 = itm1;
						var cx_ite5 = itm1;
						do {
							var v7 = cx_ite5;
							var t6 = 0.0;
							if((function($this) {
								var $r;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								{
									_sx6 = u3.x - a3.x;
									_sy6 = u3.y - a3.y;
								}
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								{
									_vx6 = v7.x - u3.x;
									_vy6 = v7.y - u3.y;
								}
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								{
									_qx6 = b5.x - a3.x;
									_qy6 = b5.y - a3.y;
								}
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								$r = den6 * den6 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									$r = txx6 > nape.Config.epsilon && txx6 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										$r = sxx6 > nape.Config.epsilon && sxx6 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t6 = txx6;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t6 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t6;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t6;
								}
							}
							u3 = v7;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite5 != beg_ite1) {
							var v8 = cx_ite5;
							var t7 = 0.0;
							if((function($this) {
								var $r;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								{
									_sx7 = u3.x - a3.x;
									_sy7 = u3.y - a3.y;
								}
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								{
									_vx7 = v8.x - u3.x;
									_vy7 = v8.y - u3.y;
								}
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								{
									_qx7 = b5.x - a3.x;
									_qy7 = b5.y - a3.y;
								}
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								$r = den7 * den7 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									$r = txx7 > nape.Config.epsilon && txx7 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										$r = sxx7 > nape.Config.epsilon && sxx7 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t7 = txx7;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t7 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t7;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t7;
								}
							}
							u3 = v8;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						}
						if(itmo1 == null) break;
						var u4 = itmo1;
						var itm21 = itmo1.next;
						if(itm21 == null) itm21 = s1.polygon.gverts.next;
						var v9 = itm21;
						var cx3 = 0.0;
						var cy3 = 0.0;
						var T3 = max1;
						cx3 = u4.x + (v9.x - u4.x) * T3;
						cy3 = u4.y + (v9.y - u4.y) * T3;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx3,cy3,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite1 = itmo1;
						ind11 = indo1;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					COMx = 0;
					COMy = 0;
					area = 0.0;
					var cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var u5 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					var v10 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var w = cx_ite6.elt;
						area += v10.x * (w.y - u5.y);
						var cf = w.y * v10.x - w.x * v10.y;
						COMx += (v10.x + w.x) * cf;
						COMy += (v10.y + w.y) * cf;
						u5 = v10;
						v10 = w;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var w1 = cx_ite6.elt;
					area += v10.x * (w1.y - u5.y);
					var cf1 = w1.y * v10.x - w1.x * v10.y;
					COMx += (v10.x + w1.x) * cf1;
					COMy += (v10.y + w1.y) * cf1;
					u5 = v10;
					v10 = w1;
					cx_ite6 = cx_ite6.next;
					var w2 = cx_ite6.elt;
					area += v10.x * (w2.y - u5.y);
					var cf2 = w2.y * v10.x - w2.x * v10.y;
					COMx += (v10.x + w2.x) * cf2;
					COMy += (v10.y + w2.y) * cf2;
					area *= 0.5;
					var ia = 1 / (6 * area);
					var t8 = ia;
					COMx *= t8;
					COMy *= t8;
					arb.overlap = -area;
					arb.centroidx = COMx;
					arb.centroidy = COMy;
					null;
					return true;
				} else return false;
			} else return false;
		} else return false;
	} else {
		var inte = new Array();
		var total1 = true;
		var a0 = null;
		var vi = null;
		var max2 = -1e+100;
		var cont1 = true;
		var vite = s2.polygon.gverts.next;
		var ind3 = 0;
		var cx_ite7 = s2.polygon.edges.head;
		while(cx_ite7 != null) {
			var a4 = cx_ite7.elt;
			var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
			if(dist > a4.gprojection + s1.circle.radius) {
				cont1 = false;
				break;
			} else if(dist + s1.circle.radius > a4.gprojection + nape.Config.epsilon) {
				total1 = false;
				inte[ind3] = true;
			}
			dist -= a4.gprojection + s1.circle.radius;
			if(dist > max2) {
				max2 = dist;
				a0 = a4;
				vi = vite;
			}
			vite = vite.next;
			ind3++;
			cx_ite7 = cx_ite7.next;
		}
		if(cont1) {
			if(total1) {
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
				return true;
			} else {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}(this)):dt >= v11.y * a0.gnormx - v11.x * a0.gnormy?(function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this)):true) {
					var ins = new Array();
					var ind4 = 0;
					var total2 = true;
					var vi1 = null;
					var vind = 0;
					var cx_ite8 = s2.polygon.gverts.next;
					while(cx_ite8 != null) {
						var v12 = cx_ite8;
						var dist1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) total2 = false; else {
							vind = ind4;
							vi1 = cx_ite8;
						}
						ind4++;
						cx_ite8 = cx_ite8.next;
					}
					if(total2) {
						s2.polygon.validate_worldCOM();
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
						return true;
					} else {
						while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
							var p1 = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
							if(!p1._inuse) {
								var o1 = p1;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1._isimmutable = null;
								o1._validate = null;
								o1._invalidate = null;
								o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
								zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
							}
						}
						zpp_nape.geom.ZPP_Collide.flowsegs.clear();
						var fst_vert1 = null;
						var state = 1;
						if(vi1 == null) {
							vi1 = s2.polygon.gverts.next;
							state = 2;
						} else zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert1 = vi1);
						while(state != 0) if(state == 1) {
							vi1 = vi1.next;
							if(vi1 == null) vi1 = s2.polygon.gverts.next;
							vind++;
							if(vind >= s2.polygon.edgeCnt) vind = 0;
							if(ins[vind]) {
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.x,vi1.y) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(vi1);
							} else {
								var u6 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
								var v13 = vi1;
								var tval;
								var vx = 0.0;
								var vy = 0.0;
								vx = v13.x - u6.x;
								vy = v13.y - u6.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = u6.x - s1.circle.worldCOMx;
								qy = u6.y - s1.circle.worldCOMy;
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t9 = (-B - D) * A;
								if(t9 < nape.Config.epsilon) tval = (-B + D) * A; else tval = t9;
								var cx4 = 0.0;
								var cy4 = 0.0;
								var T4 = tval;
								cx4 = u6.x + (v13.x - u6.x) * T4;
								cy4 = u6.y + (v13.y - u6.y) * T4;
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx4,cy4,null));
								state = 2;
							}
						} else if(state == 2) {
							var vi2 = vi1.next;
							if(vi2 == null) vi2 = s2.polygon.gverts.next;
							var u7 = vi1;
							state = 0;
							var beg_ite2 = vi2;
							var cx_ite9 = vi2;
							do {
								var v14 = cx_ite9;
								var vind2 = vind + 1;
								if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
								if(inte[vind]) {
									if(ins[vind2]) {
										var tval1;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v14.x - u7.x;
										vy1 = v14.y - u7.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = u7.x - s1.circle.worldCOMx;
										qy1 = u7.y - s1.circle.worldCOMy;
										var A1 = vx1 * vx1 + vy1 * vy1;
										var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
										var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
										var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
										A1 = 1 / (2 * A1);
										var t10 = (-B1 - D1) * A1;
										if(t10 < nape.Config.epsilon) tval1 = (-B1 + D1) * A1; else tval1 = t10;
										var cx5 = 0.0;
										var cy5 = 0.0;
										var T5 = tval1;
										cx5 = u7.x + (v14.x - u7.x) * T5;
										cy5 = u7.y + (v14.y - u7.y) * T5;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx5,cy5,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t0 = 0.0;
										var t11 = 0.0;
										var two;
										var vx2 = 0.0;
										var vy2 = 0.0;
										vx2 = v14.x - u7.x;
										vy2 = v14.y - u7.y;
										var qx2 = 0.0;
										var qy2 = 0.0;
										qx2 = u7.x - s1.circle.worldCOMx;
										qy2 = u7.y - s1.circle.worldCOMy;
										var A2 = vx2 * vx2 + vy2 * vy2;
										var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
										var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
										var D2 = B2 * B2 - 4 * A2 * C2;
										if(D2 * D2 < nape.Config.epsilon) {
											if(D2 < 0) t0 = 10.0; else t0 = t11 = -B2 / (2 * A2);
											two = false;
										} else {
											D2 = Math.sqrt(D2);
											A2 = 1 / (2 * A2);
											t0 = (-B2 - D2) * A2;
											t11 = (-B2 + D2) * A2;
											two = true;
										}
										if(t0 < 1 - nape.Config.epsilon && t11 > nape.Config.epsilon) {
											var cx6 = 0.0;
											var cy6 = 0.0;
											var T6 = t0;
											cx6 = u7.x + (v14.x - u7.x) * T6;
											cy6 = u7.y + (v14.y - u7.y) * T6;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp1 = zpp_nape.geom.ZPP_Vec2.get(cx6,cy6,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp1);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp1);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two) {
												var cx7 = 0.0;
												var cy7 = 0.0;
												var T7 = t11;
												cx7 = u7.x + (v14.x - u7.x) * T7;
												cy7 = u7.y + (v14.y - u7.y) * T7;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx7,cy7,null));
											}
										}
									}
								}
								u7 = v14;
								vi1 = cx_ite9;
								vind = vind2;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							} while(false);
							while(cx_ite9 != beg_ite2) {
								var v15 = cx_ite9;
								var vind21 = vind + 1;
								if(vind21 == s2.polygon.edgeCnt) vind21 = 0;
								if(inte[vind]) {
									if(ins[vind21]) {
										var tval2;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v15.x - u7.x;
										vy3 = v15.y - u7.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = u7.x - s1.circle.worldCOMx;
										qy3 = u7.y - s1.circle.worldCOMy;
										var A3 = vx3 * vx3 + vy3 * vy3;
										var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
										var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
										var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
										A3 = 1 / (2 * A3);
										var t12 = (-B3 - D3) * A3;
										if(t12 < nape.Config.epsilon) tval2 = (-B3 + D3) * A3; else tval2 = t12;
										var cx8 = 0.0;
										var cy8 = 0.0;
										var T8 = tval2;
										cx8 = u7.x + (v15.x - u7.x) * T8;
										cy8 = u7.y + (v15.y - u7.y) * T8;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp2 = zpp_nape.geom.ZPP_Vec2.get(cx8,cy8,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp2);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp2);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t01 = 0.0;
										var t13 = 0.0;
										var two1;
										var vx4 = 0.0;
										var vy4 = 0.0;
										vx4 = v15.x - u7.x;
										vy4 = v15.y - u7.y;
										var qx4 = 0.0;
										var qy4 = 0.0;
										qx4 = u7.x - s1.circle.worldCOMx;
										qy4 = u7.y - s1.circle.worldCOMy;
										var A4 = vx4 * vx4 + vy4 * vy4;
										var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
										var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
										var D4 = B4 * B4 - 4 * A4 * C4;
										if(D4 * D4 < nape.Config.epsilon) {
											if(D4 < 0) t01 = 10.0; else t01 = t13 = -B4 / (2 * A4);
											two1 = false;
										} else {
											D4 = Math.sqrt(D4);
											A4 = 1 / (2 * A4);
											t01 = (-B4 - D4) * A4;
											t13 = (-B4 + D4) * A4;
											two1 = true;
										}
										if(t01 < 1 - nape.Config.epsilon && t13 > nape.Config.epsilon) {
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T9 = t01;
											cx9 = u7.x + (v15.x - u7.x) * T9;
											cy9 = u7.y + (v15.y - u7.y) * T9;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp3 = zpp_nape.geom.ZPP_Vec2.get(cx9,cy9,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp3);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp3);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two1) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T10 = t13;
												cx10 = u7.x + (v15.x - u7.x) * T10;
												cy10 = u7.y + (v15.y - u7.y) * T10;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx10,cy10,null));
											}
										}
									}
								}
								u7 = v15;
								vi1 = cx_ite9;
								vind = vind21;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							}
						}
						if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) return false; else if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next == null) {
							var all = true;
							var cx_ite10 = s2.polygon.edges.head;
							while(cx_ite10 != null) {
								var e = cx_ite10.elt;
								var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist2 > e.gprojection) {
									all = false;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(all) {
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
								return true;
							} else return false;
						} else {
							var COMx1 = 0;
							var COMy1 = 0;
							var area1 = 0.0;
							if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
								var parea = 0.0;
								var pCOMx = 0.0;
								var pCOMy = 0.0;
								pCOMx = 0;
								pCOMy = 0;
								parea = 0.0;
								var cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var u8 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								var v16 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								while(cx_ite11 != null) {
									var w3 = cx_ite11.elt;
									parea += v16.x * (w3.y - u8.y);
									var cf3 = w3.y * v16.x - w3.x * v16.y;
									pCOMx += (v16.x + w3.x) * cf3;
									pCOMy += (v16.y + w3.y) * cf3;
									u8 = v16;
									v16 = w3;
									cx_ite11 = cx_ite11.next;
								}
								cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var w4 = cx_ite11.elt;
								parea += v16.x * (w4.y - u8.y);
								var cf4 = w4.y * v16.x - w4.x * v16.y;
								pCOMx += (v16.x + w4.x) * cf4;
								pCOMy += (v16.y + w4.y) * cf4;
								u8 = v16;
								v16 = w4;
								cx_ite11 = cx_ite11.next;
								var w5 = cx_ite11.elt;
								parea += v16.x * (w5.y - u8.y);
								var cf5 = w5.y * v16.x - w5.x * v16.y;
								pCOMx += (v16.x + w5.x) * cf5;
								pCOMy += (v16.y + w5.y) * cf5;
								parea *= 0.5;
								var ia1 = 1 / (6 * parea);
								var t14 = ia1;
								pCOMx *= t14;
								pCOMy *= t14;
								var t15 = -parea;
								COMx1 += pCOMx * t15;
								COMy1 += pCOMy * t15;
								area1 -= parea;
							} else {
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.elt);
							}
							while(!(zpp_nape.geom.ZPP_Collide.flowsegs.head == null)) {
								var u9 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var v17 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var dx = 0.0;
								var dy = 0.0;
								dx = v17.x - u9.x;
								dy = v17.y - u9.y;
								var nx = 0.0;
								var ny = 0.0;
								nx = dx;
								ny = dy;
								var d = nx * nx + ny * ny;
								var imag = 1.0 / Math.sqrt(d);
								var t16 = imag;
								nx *= t16;
								ny *= t16;
								var t17 = nx;
								nx = -ny;
								ny = t17;
								var cx11 = 0.0;
								var cy11 = 0.0;
								cx11 = u9.x + v17.x;
								cy11 = u9.y + v17.y;
								var t18 = 0.5;
								cx11 *= t18;
								cy11 *= t18;
								var t19 = 1.0;
								cx11 -= s1.circle.worldCOMx * t19;
								cy11 -= s1.circle.worldCOMy * t19;
								var xd = nx * cx11 + ny * cy11;
								var carea = 0.0;
								var ccom = 0.0;
								var X = xd;
								var cos = X / s1.circle.radius;
								var sin = Math.sqrt(1 - cos * cos);
								var theta = Math.acos(cos);
								carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
								ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
								cx11 = s1.circle.worldCOMx;
								cy11 = s1.circle.worldCOMy;
								var t20 = ccom;
								cx11 += nx * t20;
								cy11 += ny * t20;
								var t21 = carea;
								COMx1 += cx11 * t21;
								COMy1 += cy11 * t21;
								area1 += carea;
							}
							var t22 = 1.0 / area1;
							COMx1 *= t22;
							COMy1 *= t22;
							arb.overlap = area1;
							arb.centroidx = COMx1;
							arb.centroidy = COMy1;
							null;
							return true;
						}
					}
				} else return false;
			}
		} else return false;
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) return false; else if(ds < nape.Config.epsilon * nape.Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			return true;
		}
	}
};
zpp_nape.geom.ZPP_Convex = function() { };
zpp_nape.geom.ZPP_Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
zpp_nape.geom.ZPP_Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
zpp_nape.geom.ZPP_Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var pright = p1.prev;
			var ppre = null;
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft;
				if(cx_ite.next == null) pleft = p1.next; else pleft = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Convex.isinner(pleft,p1,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p1) {
						var qleft;
						if(cx_ite1.next == null) qleft = q.next; else qleft = cx_ite1.next.elt;
						removable = zpp_nape.geom.ZPP_Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p1.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
};
zpp_nape.geom.ZPP_ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
zpp_nape.geom.ZPP_ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_nape.geom.ZPP_ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.rayPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.RayResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.ray;
		zpp_nape.geom.ZPP_ConvexRayResult.rayPool = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.convexPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.ConvexResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.convex;
		zpp_nape.geom.ZPP_ConvexRayResult.convexPool = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.prototype = {
	disposed: function() {
		if(this.next != null) throw "Error: This object has been disposed of and cannot be used";
	}
	,free: function() {
		this.normal.zpp_inner._immutable = false;
		this.normal.dispose();
		if(this.position != null) {
			this.position.zpp_inner._immutable = false;
			this.position.dispose();
		}
		this.shape = null;
		this.toiDistance = 0.0;
		if(this.convex != null) {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.convexPool;
			zpp_nape.geom.ZPP_ConvexRayResult.convexPool = this;
		} else {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.rayPool;
			zpp_nape.geom.ZPP_ConvexRayResult.rayPool = this;
		}
	}
	,__class__: zpp_nape.geom.ZPP_ConvexRayResult
};
zpp_nape.geom.ZPP_CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
zpp_nape.geom.ZPP_CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
zpp_nape.geom.ZPP_CutVert.path = function(poly) {
	var ret;
	if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutVert(); else {
		ret = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
zpp_nape.geom.ZPP_CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.vert = null;
		this.parent = null;
	}
	,__class__: zpp_nape.geom.ZPP_CutVert
};
zpp_nape.geom.ZPP_CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
zpp_nape.geom.ZPP_CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
zpp_nape.geom.ZPP_CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_nape.geom.ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutInt(); else {
		ret = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
zpp_nape.geom.ZPP_CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.end = this.start = null;
		this.path0 = this.path1 = null;
	}
	,__class__: zpp_nape.geom.ZPP_CutInt
};
zpp_nape.geom.ZPP_Cutter = function() { };
zpp_nape.geom.ZPP_Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
zpp_nape.geom.ZPP_Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	_start.zpp_inner.validate();
	px = _start.zpp_inner.x;
	if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	_start.zpp_inner.validate();
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min;
	if(bstart) min = 0; else min = Math.NEGATIVE_INFINITY;
	var max;
	if(bend) max = 1; else max = Math.POSITIVE_INFINITY;
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) c = new zpp_nape.geom.ZPP_CutVert(); else {
			c = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		var obj = c;
		if(verts == null) verts = obj.prev = obj.next = obj; else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p1 = nite;
				if(p1.value != 0.0) {
					start = p1;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t1 = nx;
		nx = -ny;
		ny = t1;
		var pre = null;
		var p2 = start;
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod = pre.value * p2.value;
			if(prod == 0) {
				p2 = p2.next;
				continue;
			}
			var a = pre.next;
			var positive;
			if(prod > 0) positive = pre.positive; else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				var t2 = 0.5;
				midx *= t2;
				midy *= t2;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret = false;
				var F1 = P;
				var L1 = P;
				if(F1 != null) {
					var nite1 = F1;
					do {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) ret = !ret;
						}
						nite1 = nite1.next;
					} while(nite1 != L1);
				}
				positive = ret;
			}
			var F2 = a;
			var L2 = p2;
			if(F2 != null) {
				var nite2 = F2;
				do {
					var q1 = nite2;
					q1.positive = positive;
					nite2 = nite2.next;
				} while(nite2 != L2);
			}
			pre = p2;
			p2 = p2.next;
		} while(p2 != start);
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod1 = pre.value * p2.value;
			if(prod1 == 0) {
				p2 = p2.next;
				continue;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) positive1 = pre.positive; else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				var t3 = 0.5;
				midx1 *= t3;
				midy1 *= t3;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret1 = false;
				var F3 = P;
				var L3 = P;
				if(F3 != null) {
					var nite3 = F3;
					do {
						var p4 = nite3;
						var q2 = p4.prev;
						if((p4.y < y1 && q2.y >= y1 || q2.y < y1 && p4.y >= y1) && (p4.x <= x1 || q2.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q2.y - p4.y) * (q2.x - p4.x) < x1) ret1 = !ret1;
						}
						nite3 = nite3.next;
					} while(nite3 != L3);
				}
				positive1 = ret1;
			}
			var F4 = a1;
			var L4 = p2;
			if(F4 != null) {
				var nite4 = F4;
				do {
					var q3 = nite4;
					q3.positive = positive1;
					nite4 = nite4.next;
				} while(nite4 != L4);
			}
			pre = p2;
			p2 = p2.next;
		} while(false);
	}
	if(zpp_nape.geom.ZPP_Cutter.ints == null) zpp_nape.geom.ZPP_Cutter.ints = new zpp_nape.util.ZNPList_ZPP_CutInt();
	if(zpp_nape.geom.ZPP_Cutter.paths == null) zpp_nape.geom.ZPP_Cutter.paths = new zpp_nape.util.ZNPList_ZPP_CutVert();
	var start1 = null;
	var obj1 = zpp_nape.geom.ZPP_GeomVert.get(verts.posx,verts.posy);
	if(start1 == null) start1 = obj1.prev = obj1.next = obj1; else {
		obj1.next = start1;
		obj1.prev = start1.prev;
		start1.prev.next = obj1;
		start1.prev = obj1;
	}
	obj1;
	var origin = start1;
	var firstpath = zpp_nape.geom.ZPP_CutVert.path(start1);
	zpp_nape.geom.ZPP_Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj2 = pj;
			if(start1 == null) start1 = obj2.prev = obj2.next = obj2; else {
				obj2.next = start1;
				obj2.prev = start1.prev;
				start1.prev.next = obj2;
				start1.prev = obj2;
			}
			obj2;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,null,null,null,null,true,null));
				var obj3 = pj;
				if(start1 == null) start1 = obj3.prev = obj3.next = obj3; else {
					obj3.next = start1;
					obj3.prev = start1.prev;
					start1.prev.next = obj3;
					start1.prev = obj3;
				}
				obj3;
			} else if(i.value == 0) {
				var endof = start1.prev;
				start1 = null;
				var obj4 = zpp_nape.geom.ZPP_GeomVert.get(endof.x,endof.y);
				if(start1 == null) start1 = obj4.prev = obj4.next = obj4; else {
					obj4.next = start1;
					obj4.prev = start1.prev;
					start1.prev.next = obj4;
					start1.prev = obj4;
				}
				obj4;
				var obj5 = pj;
				if(start1 == null) start1 = obj5.prev = obj5.next = obj5; else {
					obj5.next = start1;
					obj5.prev = start1.prev;
					start1.prev.next = obj5;
					start1.prev = obj5;
				}
				obj5;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start1,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj6 = pj;
				if(start1 == null) start1 = obj6.prev = obj6.next = obj6; else {
					obj6.next = start1;
					obj6.prev = start1.prev;
					start1.prev.next = obj6;
					start1.prev = obj6;
				}
				obj6;
				var endof1 = start1.prev;
				start1 = null;
				var obj7 = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
				if(start1 == null) start1 = obj7.prev = obj7.next = obj7; else {
					obj7.next = start1;
					obj7.prev = start1.prev;
					start1.prev.next = obj7;
					start1.prev = obj7;
				}
				obj7;
				var prepath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof1,start1,prepath1,postpath1,true,null));
			} else {
				var t4 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t5 = t4;
				qx += ux * t5;
				qy += uy * t5;
				var obj8 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj8.prev = obj8.next = obj8; else {
					obj8.next = start1;
					obj8.prev = start1.prev;
					start1.prev.next = obj8;
					start1.prev = obj8;
				}
				obj8;
				var endof2 = start1.prev;
				start1 = null;
				var obj9 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj9.prev = obj9.next = obj9; else {
					obj9.next = start1;
					obj9.prev = start1.prev;
					start1.prev.next = obj9;
					start1.prev = obj9;
				}
				obj9;
				var obj10 = pj;
				if(start1 == null) start1 = obj10.prev = obj10.next = obj10; else {
					obj10.next = start1;
					obj10.prev = start1.prev;
					start1.prev.next = obj10;
					start1.prev = obj10;
				}
				obj10;
				var prepath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof2,start1,prepath2,postpath2,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof3 = start1.prev;
	endof3.next.prev = origin.prev;
	origin.prev.next = endof3.next;
	endof3.next = origin;
	origin.prev = endof3;
	var lastpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) xr = firstpath; else {
		var obj11 = firstpath;
		var stack = null;
		while(obj11 != obj11.parent) {
			var nxt = obj11.parent;
			obj11.parent = stack;
			stack = obj11;
			obj11 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj11;
			stack = nxt1;
		}
		xr = obj11;
	}
	var yr;
	if(lastpath == lastpath.parent) yr = lastpath; else {
		var obj12 = lastpath;
		var stack1 = null;
		while(obj12 != obj12.parent) {
			var nxt2 = obj12.parent;
			obj12.parent = stack1;
			stack1 = obj12;
			obj12 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj12;
			stack1 = nxt3;
		}
		yr = obj12;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_nape.geom.ZPP_Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else {
						nxt4 = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt4; else head = nxt4;
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.ints.head == null)) {
		var i1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		var j1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) xr1 = i1.path0; else {
				var obj13 = i1.path0;
				var stack2 = null;
				while(obj13 != obj13.parent) {
					var nxt5 = obj13.parent;
					obj13.parent = stack2;
					stack2 = obj13;
					obj13 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj13;
					stack2 = nxt6;
				}
				xr1 = obj13;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) yr1 = j1.path1; else {
				var obj14 = j1.path1;
				var stack3 = null;
				while(obj14 != obj14.parent) {
					var nxt7 = obj14.parent;
					obj14.parent = stack3;
					stack3 = obj14;
					obj14 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj14;
					stack3 = nxt8;
				}
				yr1 = obj14;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) xr2 = i1.path1; else {
				var obj15 = i1.path1;
				var stack4 = null;
				while(obj15 != obj15.parent) {
					var nxt9 = obj15.parent;
					obj15.parent = stack4;
					stack4 = obj15;
					obj15 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj15;
					stack4 = nxt10;
				}
				xr2 = obj15;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) yr2 = j1.path0; else {
				var obj16 = j1.path0;
				var stack5 = null;
				while(obj16 != obj16.parent) {
					var nxt11 = obj16.parent;
					obj16.parent = stack5;
					stack5 = obj16;
					obj16 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj16;
					stack5 = nxt12;
				}
				yr2 = obj16;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					o.wrap.dispose();
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				j1.end = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					o1.wrap.dispose();
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
				j1.end = null;
				j1.end = retnodes;
			}
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							o2.wrap.dispose();
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
						j1.end = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							o3.wrap.dispose();
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
						j1.end = null;
						j1.end = retnodes1;
					}
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							o4.wrap.dispose();
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							o5.wrap.dispose();
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) xr3 = j1.path0; else {
				var obj17 = j1.path0;
				var stack6 = null;
				while(obj17 != obj17.parent) {
					var nxt13 = obj17.parent;
					obj17.parent = stack6;
					stack6 = obj17;
					obj17 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj17;
					stack6 = nxt14;
				}
				xr3 = obj17;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) yr3 = j1.path1; else {
				var obj18 = j1.path1;
				var stack7 = null;
				while(obj18 != obj18.parent) {
					var nxt15 = obj18.parent;
					obj18.parent = stack7;
					stack7 = obj18;
					obj18 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj18;
					stack7 = nxt16;
				}
				yr3 = obj18;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					o6.wrap.dispose();
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o6;
				i1.end = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					o7.wrap.dispose();
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o7;
				i1.end = null;
				i1.end = retnodes2;
			}
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							o8.wrap.dispose();
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o8;
						i1.end = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							o9.wrap.dispose();
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o9;
						i1.end = null;
						i1.end = retnodes3;
					}
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							o10.wrap.dispose();
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							o11.wrap.dispose();
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) xr4 = i1.path0; else {
				var obj19 = i1.path0;
				var stack8 = null;
				while(obj19 != obj19.parent) {
					var nxt17 = obj19.parent;
					obj19.parent = stack8;
					stack8 = obj19;
					obj19 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj19;
					stack8 = nxt18;
				}
				xr4 = obj19;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) yr4 = i1.path1; else {
				var obj20 = i1.path1;
				var stack9 = null;
				while(obj20 != obj20.parent) {
					var nxt19 = obj20.parent;
					obj20.parent = stack9;
					stack9 = obj20;
					obj20 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj20;
					stack9 = nxt20;
				}
				yr4 = obj20;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) xr4.parent = yr4; else if(xr4.rank > yr4.rank) yr4.parent = xr4; else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		var o12 = i1;
		o12.end = o12.start = null;
		o12.path0 = o12.path1 = null;
		o12.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o12;
		var o13 = j1;
		o13.end = o13.start = null;
		o13.path0 = o13.path1 = null;
		o13.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o13;
	}
	var ret2;
	if(output == null) ret2 = new nape.geom.GeomPolyList(); else ret2 = output;
	var cx_ite = zpp_nape.geom.ZPP_Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) poly = p5; else {
			var obj21 = p5;
			var stack10 = null;
			while(obj21 != obj21.parent) {
				var nxt21 = obj21.parent;
				obj21.parent = stack10;
				stack10 = obj21;
				obj21 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj21;
				stack10 = nxt22;
			}
			poly = obj21;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					if(p6.next == p6) poly.vert = null; else poly.vert = p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = p6 = null;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else p6 = p6.next;
		}
		if(poly.vert != null) {
			var gp = nape.geom.GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret2.zpp_inner.reverse_flag) ret2.push(gp); else ret2.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.paths.head == null)) {
		var p7 = zpp_nape.geom.ZPP_Cutter.paths.pop_unsafe();
		var o14 = p7;
		o14.vert = null;
		o14.parent = null;
		o14.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o14;
	}
	while(!(verts == null)) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o15 = verts;
		o15.vert = null;
		o15.parent = null;
		o15.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o15;
		verts = verts = null;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o16 = verts;
		o16.vert = null;
		o16.parent = null;
		o16.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o16;
		verts = null;
		verts = retnodes5;
	}
	return ret2;
};
zpp_nape.geom.ZPP_Geom = function() { };
zpp_nape.geom.ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_nape.geom.ZPP_Geom.validateShape = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
zpp_nape.geom.ZPP_GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_nape.geom.ZPP_GeomVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVert(); else {
		ret = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_GeomVert.prototype = {
	free: function() {
		if(this.wrap != null) {
			this.wrap.zpp_inner._inuse = false;
			this.wrap.dispose();
			this.wrap = null;
		}
		this.prev = this.next = null;
	}
	,alloc: function() {
		this.forced = false;
	}
	,wrapper: function() {
		if(this.wrap == null) {
			this.wrap = nape.geom.Vec2.get(this.x,this.y,null);
			this.wrap.zpp_inner._inuse = true;
			this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
			this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
		}
		return this.wrap;
	}
	,modwrap: function(n) {
		this.x = n.x;
		this.y = n.y;
	}
	,getwrap: function() {
		this.wrap.zpp_inner.x = this.x;
		this.wrap.zpp_inner.y = this.y;
	}
	,__class__: zpp_nape.geom.ZPP_GeomVert
};
zpp_nape.geom.ZPP_GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_nape.geom.ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_nape.geom.ZPP_GeomPoly.prototype = {
	__class__: zpp_nape.geom.ZPP_GeomPoly
};
zpp_nape.geom.ZPP_GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = true;
	this.outer = new nape.geom.GeomVertexIterator();
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
};
zpp_nape.geom.ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_nape.geom.ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVertexIterator(); else {
		ret = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
zpp_nape.geom.ZPP_GeomVertexIterator.prototype = {
	free: function() {
		this.outer.zpp_inner = null;
		this.ptr = this.start = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_GeomVertexIterator
};
zpp_nape.geom.ZPP_MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
zpp_nape.geom.ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_nape.geom.ZPP_MarchSpan.prototype = {
	free: function() {
		this.parent = this;
	}
	,alloc: function() {
		this.out = false;
		this.rank = 0;
	}
	,__class__: zpp_nape.geom.ZPP_MarchSpan
};
zpp_nape.geom.ZPP_MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
zpp_nape.geom.ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_nape.geom.ZPP_MarchPair.prototype = {
	free: function() {
		this.p1 = this.p2 = this.pr = this.pd = null;
		this.span1 = this.span2 = this.spanr = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_MarchPair
};
zpp_nape.geom.ZPP_MarchingSquares = function() {
};
zpp_nape.geom.ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_nape.geom.ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp;
	xp = (bx1 - bx0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp;
	yp = (by1 - by0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchingSquares.map == null) zpp_nape.geom.ZPP_MarchingSquares.map = new zpp_nape.util.ZNPArray2_ZPP_MarchPair(xn,yn); else zpp_nape.geom.ZPP_MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.isos == null) zpp_nape.geom.ZPP_MarchingSquares.isos = new zpp_nape.util.ZNPArray2_Float(xn + 1,yn + 1); else zpp_nape.geom.ZPP_MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) yc = by0; else if(y <= yn) yc = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y; else yc = by1;
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) xc = bx0; else if(x <= xn) xc = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x; else xc = bx1;
			zpp_nape.geom.ZPP_MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.ints == null) zpp_nape.geom.ZPP_MarchingSquares.ints = new zpp_nape.util.ZNPArray2_ZPP_GeomVert(xn + 1,(yn << 1) + 1); else zpp_nape.geom.ZPP_MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) spans = new zpp_nape.geom.ZPP_MarchSpan(); else {
			spans = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
			zpp_nape.geom.ZPP_MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g4 = 0;
	while(_g4 < yn) {
		var y1 = _g4++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) y11 = by1; else y11 = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y1 + 1);
		py = y11;
		var px = bx0;
		var pre = null;
		var _g11 = 0;
		while(_g11 < xn) {
			var x1 = _g11++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) x11 = bx1; else x11 = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x1 + 1);
			px = x11;
			var fstx = x1 == 0 || !combine;
			var fsty = y1 == 0 || !combine;
			var sndx = x1 == xn - 1 || !combine;
			var sndy = y1 == yn - 1 || !combine;
			var pp = zpp_nape.geom.ZPP_MarchingSquares.me.marchSquare(iso,zpp_nape.geom.ZPP_MarchingSquares.isos,zpp_nape.geom.ZPP_MarchingSquares.ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd;
				if(pp.p2 != null && pp.okey2 != 14) pd = pp.p2; else pd = pp.p1;
				if(((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0) pp.pd = pd.prev; else pp.pd = pd.prev.prev;
				zpp_nape.geom.ZPP_MarchingSquares.map.set(x1,y1,pp);
				if(pre != null && zpp_nape.geom.ZPP_MarchingSquares.me.combLeft(pp.key1)) {
					zpp_nape.geom.ZPP_MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span2 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span2 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_nape.geom.ZPP_MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g5 = 1;
	while(_g5 < yn) {
		var y2 = _g5++;
		var pre1 = null;
		var _g12 = 0;
		while(_g12 < xn) {
			var x2 = _g12++;
			var b = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2);
			if(b == null) {
				pre1 = null;
				continue;
			}
			var bkey;
			if(b.p2 != null && b.okey2 == 14) bkey = b.okey2; else bkey = b.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combUp(bkey)) {
				pre1 = null;
				continue;
			}
			var a = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2 - 1);
			if(a == null) {
				pre1 = null;
				continue;
			}
			var akey;
			if(a.p2 != null && a.okey2 == 56) akey = a.okey2; else akey = a.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combDown(akey)) {
				pre1 = null;
				continue;
			}
			var ad;
			if(a.p2 != null && a.okey2 == 56) ad = a.span2; else ad = a.span1;
			var bu;
			if(b.p2 != null && b.okey2 == 14) bu = b.span2; else bu = b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj1 = bu;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				$r = obj1;
				return $r;
			}(this)))) {
				if(pre1 != bu) zpp_nape.geom.ZPP_MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr;
				if(ad == ad.parent) xr = ad; else {
					var obj2 = ad;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr = obj2;
				}
				var yr;
				if(bu == bu.parent) yr = bu; else {
					var obj3 = bu;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr = obj3;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_nape.geom.ZPP_MarchingSquares.me.combUD(a,b);
			}
			var key;
			if(bu == b.span2) key = b.okey2; else key = b.okey1;
			if((key & 4) != 0) pre1 = bu; else pre1 = null;
		}
	}
	var _g6 = 0;
	while(_g6 < yn) {
		var y3 = _g6++;
		var _g13 = 0;
		while(_g13 < xn) {
			var x3 = _g13++;
			var p = zpp_nape.geom.ZPP_MarchingSquares.map.get(x3,y3);
			if(p == null) continue;
			var root;
			if(p.span1 == p.span1.parent) root = p.span1; else {
				var obj4 = p.span1;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(!root.out) {
				root.out = true;
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) root = p.span2; else {
					var obj5 = p.span2;
					var stack5 = null;
					while(obj5 != obj5.parent) {
						var nxt10 = obj5.parent;
						obj5.parent = stack5;
						stack5 = obj5;
						obj5 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj5;
						stack5 = nxt11;
					}
					root = obj5;
				}
				if(!root.out) {
					root.out = true;
					zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o1 = p;
			o1.p1 = o1.p2 = o1.pr = o1.pd = null;
			o1.span1 = o1.span2 = o1.spanr = null;
			o1.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = o1;
			zpp_nape.geom.ZPP_MarchingSquares.map.set(x3,y3,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o2 = t;
		o2.parent = o2;
		o2.next = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = o2;
	}
};
zpp_nape.geom.ZPP_MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype = {
	output: function(ret,poly) {
		if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
			var $r;
			var a;
			{
				var area = 0.0;
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
				a = area * 0.5;
			}
			$r = a * a < nape.Config.epsilon * nape.Config.epsilon;
			return $r;
		}(this))) {
			while(!(poly == null)) if(poly != null && poly.prev == poly) {
				poly.next = poly.prev = null;
				poly = poly = null;
			} else {
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				poly = null;
				poly = retnodes;
			}
			return;
		}
		var gp = nape.geom.GeomPoly.get();
		gp.zpp_inner.vertices = poly;
		if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
	}
	,linkright: function(poly,key) {
		var kind = key & 7;
		if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
	}
	,linkleft: function(poly,key) {
		if((key & 1) == 0) return poly.prev; else return poly;
	}
	,linkdown: function(poly,key) {
		if((key & 128) == 0) return poly.prev; else return poly.prev.prev;
	}
	,linkup: function(poly,key) {
		return poly;
	}
	,combLR: function(a,b) {
		var ap = this.linkright(a.pr,a.okeyr);
		var bp = this.linkleft(b.p1,b.okey1);
		var ap2 = ap.next;
		var bp2 = bp.prev;
		if((a.keyr & 4) != 0) {
			if(b.pr == b.p1) b.pr = ap.prev;
			b.p1 = ap.prev;
			ap.prev.next = bp.next;
			bp.next.prev = ap.prev;
			var o = ap;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		} else {
			ap.next = bp.next;
			bp.next.prev = ap;
		}
		var o1 = bp;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
		if((a.keyr & 16) != 0) {
			b.pd = ap2.next;
			ap2.next.prev = bp2.prev;
			bp2.prev.next = ap2.next;
			var o2 = ap2;
			if(o2.wrap != null) {
				o2.wrap.zpp_inner._inuse = false;
				o2.wrap.dispose();
				o2.wrap = null;
			}
			o2.prev = o2.next = null;
			o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
		} else {
			ap2.prev = bp2.prev;
			bp2.prev.next = ap2;
		}
		var o3 = bp2;
		if(o3.wrap != null) {
			o3.wrap.zpp_inner._inuse = false;
			o3.wrap.dispose();
			o3.wrap = null;
		}
		o3.prev = o3.next = null;
		o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
	}
	,combUD: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		bp.next = ap.next;
		ap.next.prev = bp;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		bp2.prev = ap2.prev;
		ap2.prev.next = bp2;
		if(ap2 == a.p1) a.p1 = bp2;
		var o1 = ap2;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
	}
	,combUD_virtual: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		ap.forced = bp.forced = ap2.forced = bp2.forced = true;
	}
	,combLeft: function(key) {
		var flag = key & 1 | (key & 192) >> 5;
		return this.comb(flag);
	}
	,combRight: function(key) {
		var flag = (key & 28) >> 2;
		return this.comb(flag);
	}
	,combUp: function(key) {
		var flag = key & 7;
		return this.comb(flag);
	}
	,combDown: function(key) {
		var flag = (key & 112) >> 4;
		return this.comb(flag);
	}
	,comb: function(flag) {
		var cnt = 0;
		if((flag & 1) != 0) cnt++;
		if((flag & 2) != 0) cnt++;
		if((flag & 4) != 0) cnt++;
		return cnt >= 2;
	}
	,marchSquare: function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
		var key = 0;
		var v0 = isos.list[yn * isos.width + xn];
		if(v0 < 0) key |= 8;
		var v1 = isos.list[yn * isos.width + (xn + 1)];
		if(v1 < 0) key |= 4;
		var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
		if(v2 < 0) key |= 2;
		var v3 = isos.list[(yn + 1) * isos.width + xn];
		if(v3 < 0) key |= 1;
		if(key == 0) return null; else {
			var ret;
			if(zpp_nape.geom.ZPP_MarchPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_MarchPair(); else {
				ret = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			if(key != 10 && key != 5) {
				var val = zpp_nape.geom.ZPP_MarchingSquares.look_march[key];
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = ints.list[(yn << 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						var obj = p;
						if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
							obj.prev = ret.p1;
							obj.next = ret.p1.next;
							ret.p1.next.prev = obj;
							ret.p1.next = obj;
						}
						ret.p1 = obj;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
				if(key == 10) {
					if(mid) {
						var val1 = 187;
						ret.okey1 = val1;
						var _g1 = 0;
						while(_g1 < 8) {
							var i1 = _g1++;
							if((val1 & 1 << i1) != 0) {
								var p1 = null;
								if(i1 == 0) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p1.forced = true;
								} else if(i1 == 2) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p1.forced = true;
								} else if(i1 == 4) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p1.forced = true;
								} else if(i1 == 6) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p1.forced = true;
								} else if(i1 == 1) {
									p1 = ints.list[(yn << 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(fsty) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i1 == 5) {
									p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(sndy) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i1 == 3) {
									p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(sndx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
									} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
									if(fstx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								var obj1 = p1;
								if(ret.p1 == null) ret.p1 = obj1.prev = obj1.next = obj1; else {
									obj1.prev = ret.p1;
									obj1.next = ret.p1.next;
									ret.p1.next.prev = obj1;
									ret.p1.next = obj1;
								}
								ret.p1 = obj1;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					} else {
						var val2 = 131;
						ret.okey1 = val2;
						var _g2 = 0;
						while(_g2 < 8) {
							var i2 = _g2++;
							if((val2 & 1 << i2) != 0) {
								var p2 = null;
								if(i2 == 0) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p2.forced = true;
								} else if(i2 == 2) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p2.forced = true;
								} else if(i2 == 4) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p2.forced = true;
								} else if(i2 == 6) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p2.forced = true;
								} else if(i2 == 1) {
									p2 = ints.list[(yn << 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(fsty) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) val2 ^= 2;
									}
								} else if(i2 == 5) {
									p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(sndy) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) val2 ^= 32;
									}
								} else if(i2 == 3) {
									p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(sndx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) val2 ^= 8;
									}
								} else {
									p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
									} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
									if(fstx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) val2 ^= 128;
									}
								}
								var obj2 = p2;
								if(ret.p1 == null) ret.p1 = obj2.prev = obj2.next = obj2; else {
									obj2.prev = ret.p1;
									obj2.next = ret.p1.next;
									ret.p1.next.prev = obj2;
									ret.p1.next = obj2;
								}
								ret.p1 = obj2;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val2;
						if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
							val2 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val2 != 0) {
							var val3 = 56;
							ret.okey2 = val3;
							var _g3 = 0;
							while(_g3 < 8) {
								var i3 = _g3++;
								if((val3 & 1 << i3) != 0) {
									var p3 = null;
									if(i3 == 0) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p3.forced = true;
									} else if(i3 == 2) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p3.forced = true;
									} else if(i3 == 4) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p3.forced = true;
									} else if(i3 == 6) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p3.forced = true;
									} else if(i3 == 1) {
										p3 = ints.list[(yn << 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(fsty) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) val3 ^= 2;
										}
									} else if(i3 == 5) {
										p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(sndy) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) val3 ^= 32;
										}
									} else if(i3 == 3) {
										p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(sndx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) val3 ^= 8;
										}
									} else {
										p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
										} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
										if(fstx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) val3 ^= 128;
										}
									}
									var obj3 = p3;
									if(ret.p2 == null) ret.p2 = obj3.prev = obj3.next = obj3; else {
										obj3.prev = ret.p2;
										obj3.next = ret.p2.next;
										ret.p2.next.prev = obj3;
										ret.p2.next = obj3;
									}
									ret.p2 = obj3;
								}
							}
							ret.p2 = ret.p2.next;
							ret.key2 = val3;
							if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
								val3 = 0;
								ret.key2 = 0;
								ret.p2 = null;
							}
							if(val3 == 0) {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							} else {
								ret.pr = ret.p2;
								ret.okeyr = ret.okey2;
								ret.keyr = ret.key2;
							}
						} else {
							var val4 = 56;
							ret.okey1 = val4;
							var _g4 = 0;
							while(_g4 < 8) {
								var i4 = _g4++;
								if((val4 & 1 << i4) != 0) {
									var p4 = null;
									if(i4 == 0) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p4.forced = true;
									} else if(i4 == 2) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p4.forced = true;
									} else if(i4 == 4) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p4.forced = true;
									} else if(i4 == 6) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p4.forced = true;
									} else if(i4 == 1) {
										p4 = ints.list[(yn << 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(fsty) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) val4 ^= 2;
										}
									} else if(i4 == 5) {
										p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(sndy) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) val4 ^= 32;
										}
									} else if(i4 == 3) {
										p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(sndx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) val4 ^= 8;
										}
									} else {
										p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
										} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
										if(fstx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) val4 ^= 128;
										}
									}
									var obj4 = p4;
									if(ret.p1 == null) ret.p1 = obj4.prev = obj4.next = obj4; else {
										obj4.prev = ret.p1;
										obj4.next = ret.p1.next;
										ret.p1.next.prev = obj4;
										ret.p1.next = obj4;
									}
									ret.p1 = obj4;
								}
							}
							ret.p1 = ret.p1.next;
							ret.key1 = val4;
							if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
								val4 = 0;
								ret.key1 = 0;
								ret.p1 = null;
							}
							if(val4 == 0) ret = null; else {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							}
						}
					}
				} else if(mid) {
					var val5 = 238;
					ret.okey1 = val5;
					var _g5 = 0;
					while(_g5 < 8) {
						var i5 = _g5++;
						if((val5 & 1 << i5) != 0) {
							var p5 = null;
							if(i5 == 0) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p5.forced = true;
							} else if(i5 == 2) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p5.forced = true;
							} else if(i5 == 4) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p5.forced = true;
							} else if(i5 == 6) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p5.forced = true;
							} else if(i5 == 1) {
								p5 = ints.list[(yn << 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(fsty) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) val5 ^= 2;
								}
							} else if(i5 == 5) {
								p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(sndy) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) val5 ^= 32;
								}
							} else if(i5 == 3) {
								p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(sndx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) val5 ^= 8;
								}
							} else {
								p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
								} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
								if(fstx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) val5 ^= 128;
								}
							}
							var obj5 = p5;
							if(ret.p1 == null) ret.p1 = obj5.prev = obj5.next = obj5; else {
								obj5.prev = ret.p1;
								obj5.next = ret.p1.next;
								ret.p1.next.prev = obj5;
								ret.p1.next = obj5;
							}
							ret.p1 = obj5;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val5;
					if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
						val5 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val5 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val6 = 224;
					ret.okey1 = val6;
					var _g6 = 0;
					while(_g6 < 8) {
						var i6 = _g6++;
						if((val6 & 1 << i6) != 0) {
							var p6 = null;
							if(i6 == 0) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p6.forced = true;
							} else if(i6 == 2) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p6.forced = true;
							} else if(i6 == 4) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p6.forced = true;
							} else if(i6 == 6) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p6.forced = true;
							} else if(i6 == 1) {
								p6 = ints.list[(yn << 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(fsty) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) val6 ^= 2;
								}
							} else if(i6 == 5) {
								p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(sndy) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) val6 ^= 32;
								}
							} else if(i6 == 3) {
								p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(sndx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) val6 ^= 8;
								}
							} else {
								p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
								} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
								if(fstx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) val6 ^= 128;
								}
							}
							var obj6 = p6;
							if(ret.p1 == null) ret.p1 = obj6.prev = obj6.next = obj6; else {
								obj6.prev = ret.p1;
								obj6.next = ret.p1.next;
								ret.p1.next.prev = obj6;
								ret.p1.next = obj6;
							}
							ret.p1 = obj6;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val6;
					if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
						val6 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val6 != 0) {
						var val7 = 14;
						ret.okey2 = val7;
						var _g7 = 0;
						while(_g7 < 8) {
							var i7 = _g7++;
							if((val7 & 1 << i7) != 0) {
								var p7 = null;
								if(i7 == 0) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p7.forced = true;
								} else if(i7 == 2) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p7.forced = true;
								} else if(i7 == 4) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p7.forced = true;
								} else if(i7 == 6) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p7.forced = true;
								} else if(i7 == 1) {
									p7 = ints.list[(yn << 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(fsty) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) val7 ^= 2;
									}
								} else if(i7 == 5) {
									p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(sndy) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) val7 ^= 32;
									}
								} else if(i7 == 3) {
									p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(sndx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) val7 ^= 8;
									}
								} else {
									p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
									} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
									if(fstx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) val7 ^= 128;
									}
								}
								var obj7 = p7;
								if(ret.p2 == null) ret.p2 = obj7.prev = obj7.next = obj7; else {
									obj7.prev = ret.p2;
									obj7.next = ret.p2.next;
									ret.p2.next.prev = obj7;
									ret.p2.next = obj7;
								}
								ret.p2 = obj7;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val7;
						if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
							val7 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val7 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val8 = 14;
						ret.okey1 = val8;
						var _g8 = 0;
						while(_g8 < 8) {
							var i8 = _g8++;
							if((val8 & 1 << i8) != 0) {
								var p8 = null;
								if(i8 == 0) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p8.forced = true;
								} else if(i8 == 2) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p8.forced = true;
								} else if(i8 == 4) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p8.forced = true;
								} else if(i8 == 6) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p8.forced = true;
								} else if(i8 == 1) {
									p8 = ints.list[(yn << 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(fsty) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) val8 ^= 2;
									}
								} else if(i8 == 5) {
									p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(sndy) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) val8 ^= 32;
									}
								} else if(i8 == 3) {
									p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(sndx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) val8 ^= 8;
									}
								} else {
									p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
									} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
									if(fstx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) val8 ^= 128;
									}
								}
								var obj8 = p8;
								if(ret.p1 == null) ret.p1 = obj8.prev = obj8.next = obj8; else {
									obj8.prev = ret.p1;
									obj8.next = ret.p1.next;
									ret.p1.next.prev = obj8;
									ret.p1.next = obj8;
								}
								ret.p1 = obj8;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val8;
						if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
							val8 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val8 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			}
			return ret;
		}
	}
	,lerp: function(x0,x1,v0,v1) {
		if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
			var dv = v0 - v1;
			var t;
			if(dv * dv < nape.Config.epsilon * nape.Config.epsilon) t = 0.5; else t = v0 / dv;
			if(t < 0) t = 0; else if(t > 1) t = 1;
			return x0 + t * (x1 - x0);
		}
	}
	,xlerp: function(x0,x1,y,v0,v1,iso,quality) {
		var xm = this.lerp(x0,x1,v0,v1);
		while(quality-- != 0 && x0 < xm && xm < x1) {
			var vm = iso(xm,y);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				x1 = xm;
				v1 = vm;
			} else {
				x0 = xm;
				v0 = vm;
			}
			xm = this.lerp(x0,x1,v0,v1);
		}
		return xm;
	}
	,ylerp: function(y0,y1,x,v0,v1,iso,quality) {
		var ym = this.lerp(y0,y1,v0,v1);
		while(quality-- != 0 && y0 < ym && ym < y1) {
			var vm = iso(x,ym);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				y1 = ym;
				v1 = vm;
			} else {
				y0 = ym;
				v0 = vm;
			}
			ym = this.lerp(y0,y1,v0,v1);
		}
		return ym;
	}
	,__class__: zpp_nape.geom.ZPP_MarchingSquares
};
zpp_nape.geom.ZPP_Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
zpp_nape.geom.ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_nape.geom.ZPP_Mat23.get = function() {
	var ret;
	if(zpp_nape.geom.ZPP_Mat23.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Mat23(); else {
		ret = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
};
zpp_nape.geom.ZPP_Mat23.identity = function() {
	var ret = zpp_nape.geom.ZPP_Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
zpp_nape.geom.ZPP_Mat23.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Mat23();
			var o = this.outer.zpp_inner;
			o.next = zpp_nape.geom.ZPP_Mat23.zpp_pool;
			zpp_nape.geom.ZPP_Mat23.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate();
	}
	,set: function(m) {
		this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	}
	,setas: function(a,b,c,d,tx,ty) {
		this.tx = tx;
		this.ty = ty;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_Mat23
};
zpp_nape.geom.ZPP_MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = new Array();
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
zpp_nape.geom.ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_nape.geom.ZPP_MatMN.prototype = {
	__class__: zpp_nape.geom.ZPP_MatMN
};
zpp_nape.geom.ZPP_Monotone = function() { };
zpp_nape.geom.ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_nape.geom.ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_nape.geom.ZPP_Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_nape.geom.ZPP_Monotone.bisector(p);
		var qo = zpp_nape.geom.ZPP_Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t1 = 1.0;
		qo.x += q.x * t1;
		qo.y += q.y * t1;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		var o1 = qo;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
		return ret;
	}
};
zpp_nape.geom.ZPP_Monotone.above = function(p,q) {
	return zpp_nape.geom.ZPP_Monotone.below(q,p);
};
zpp_nape.geom.ZPP_Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
};
zpp_nape.geom.ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L1 = max;
		if(F1 != null) {
			var nite1 = F1;
			do {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
			} while(nite1 != L1);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L2 = max;
		if(F2 != null) {
			var nite2 = F2;
			do {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
			} while(nite2 != L2);
		}
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.getShared = function() {
	if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_Monotone.sharedPPoly;
};
zpp_nape.geom.ZPP_Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_nape.geom.ZPP_Monotone.queue == null) zpp_nape.geom.ZPP_Monotone.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_nape.geom.ZPP_Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			if(zpp_nape.geom.ZPP_Monotone.below(p.prev,p)) {
				if(zpp_nape.geom.ZPP_Monotone.below(p.next,p)) {
					if(cx) p.type = 0; else p.type = 3;
				} else p.type = 4;
			} else if(zpp_nape.geom.ZPP_Monotone.below(p,p.next)) {
				if(cx) p.type = 1; else p.type = 2;
			} else p.type = 4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_nape.geom.ZPP_Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_nape.geom.ZPP_Monotone.edges == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) zpp_nape.geom.ZPP_Monotone.edges = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			zpp_nape.geom.ZPP_Monotone.edges = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = zpp_nape.geom.ZPP_Monotone.edges.next;
			zpp_nape.geom.ZPP_Monotone.edges.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Monotone.edges.lt = zpp_nape.geom.ZPP_PartitionVertex.edge_lt;
		zpp_nape.geom.ZPP_Monotone.edges.swapped = zpp_nape.geom.ZPP_PartitionVertex.edge_swap;
	}
	while(!(zpp_nape.geom.ZPP_Monotone.queue.head == null)) {
		var v = zpp_nape.geom.ZPP_Monotone.queue.pop_unsafe();
		var _g = v.type;
		switch(_g) {
		case 0:
			v.helper = v;
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper == null) throw "Fatal error (1): Polygon is not weakly-simple and clockwise";
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e.node);
			e.helper = null;
			break;
		case 3:
			var e1;
			var ret = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			e1 = ret;
			if(e1 != null) {
				if(e1.helper == null) throw "Fatal error (2): Polygon is not weakly-simple and clockwise";
				poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e2 = v.prev;
			if(e2.helper == null) throw "Fatal error (3): Polygon is not weakly-simple and clockwise";
			if(e2.helper.type == 2) poly.add_diagonal(v,e2.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e2.node);
			e2.helper = null;
			var e3;
			var ret1 = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite1 = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			e3 = ret1;
			if(e3 != null) {
				if(e3.helper == null) throw "Fatal error (4): Polygon is not weakly-simple and clockwise";
				if(e3.helper.type == 2) poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_nape.geom.ZPP_Monotone.left_vertex(v)) {
				if(pre.helper == null) throw "Fatal error (5): Polygon is not weakly-simple and clockwise";
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_nape.geom.ZPP_Monotone.edges.remove_node(pre.node);
				pre.helper = null;
				v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e4;
				var ret2 = null;
				if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
					var set_ite2 = zpp_nape.geom.ZPP_Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				e4 = ret2;
				if(e4 == null || e4.helper == null) throw "Fatal error (6): Polygon is not weakly-simple and clockwise";
				if(e4.helper.type == 2) poly.add_diagonal(v,e4.helper);
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
zpp_nape.geom.ZPP_PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_nape.geom.ZPP_PartitionVertex.nextId++;
	this.diagonals = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
};
zpp_nape.geom.ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_nape.geom.ZPP_PartitionVertex.get = function(x) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
		ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
zpp_nape.geom.ZPP_PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
zpp_nape.geom.ZPP_PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) return true; else if(edge.y == edge.next.y) return (function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x; else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(edge,vert) <= 0.0;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_nape.geom.ZPP_PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_nape.geom.ZPP_PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) if(q.y == q.next.y) return (function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x1 = q.x;
		var y1 = q.next.x;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)); else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p) > 0.0 || zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x2 = p.x;
			var y2 = p.next.x;
			$r = x2 > y2?x2:y2;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x3 = q.x;
			var y3 = q.next.x;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
};
zpp_nape.geom.ZPP_PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.helper = null;
	}
	,copy: function() {
		var ret;
		if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
			ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.x = this.x;
		ret.y = this.y;
		ret.forced = this.forced;
		return ret;
	}
	,sort: function() {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var vorient;
		ux = this.prev.x - this.x;
		uy = this.prev.y - this.y;
		vx = this.next.x - this.x;
		vy = this.next.y - this.y;
		var ret = vy * ux - vx * uy;
		if(ret > 0) vorient = -1; else if(ret == 0) vorient = 0; else vorient = 1;
		var xxlist = this.diagonals;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(vorient == 1?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret1 = vy * ux - vx * uy;
							$r = ret1 > 0?-1:ret1 == 0?0:1;
							return $r;
						}(this)) == 1:(function($this) {
							var $r;
							var d1;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
								var ret2 = vy * ux - vx * uy;
								if(ret2 > 0) d1 = -1; else if(ret2 == 0) d1 = 0; else d1 = 1;
							}
							var d2;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
								var ret3 = vy * ux - vx * uy;
								if(ret3 > 0) d2 = -1; else if(ret3 == 0) d2 = 0; else d2 = 1;
							}
							$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
								var $r;
								{
									ux = left.elt.x - $this.x;
									uy = left.elt.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret4 = vy * ux - vx * uy;
								$r = ret4 > 0?-1:ret4 == 0?0:1;
								return $r;
							}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
								var $r;
								{
									ux = $this.x - $this.prev.x;
									uy = $this.y - $this.prev.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var d11 = ux * vx + uy * vy;
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var d21 = ux * vx + uy * vy;
								$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
								return $r;
							}($this)):true;
							return $r;
						}(this))) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	,__class__: zpp_nape.geom.ZPP_PartitionVertex
};
zpp_nape.geom.ZPP_PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
zpp_nape.geom.ZPP_PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
zpp_nape.geom.ZPP_PartitionedPoly.getSharedPP = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
};
zpp_nape.geom.ZPP_PartitionedPoly.getShared = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype = {
	eq: function(a,b) {
		return zpp_nape.geom.ZPP_VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape.Config.epsilon * nape.Config.epsilon;
	}
	,alloc: function() {
	}
	,free: function() {
	}
	,init: function(P) {
		if(P == null) return;
		var cw;
		cw = (function($this) {
			var $r;
			var area = 0.0;
			{
				var F = P;
				var L = P;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) > 0.0;
		var p = P;
		do {
			if(cw) {
				var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.vertices;
					obj.next = this.vertices.next;
					this.vertices.next.prev = obj;
					this.vertices.next = obj;
				}
				this.vertices = obj;
			} else {
				var obj1 = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.next = this.vertices;
					obj1.prev = this.vertices.prev;
					this.vertices.prev.next = obj1;
					this.vertices.prev = obj1;
				}
				this.vertices = obj1;
			}
			this.vertices.forced = p.forced;
			p = p.next;
		} while(p != P);
		this.remove_collinear_vertices();
	}
	,remove_collinear_vertices: function() {
		var p = this.vertices;
		var skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			if(this.eq(p,p.next)) {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p.forced) p.next.forced = true;
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o = p;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
					p = p = null;
				} else {
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o1 = p;
					o1.helper = null;
					null;
					o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
					p = null;
					p = retnodes;
				}
				if(p == null) {
					this.vertices = null;
					break;
				}
			} else p = p.next;
		}
		if(this.vertices == null) return true;
		var removed;
		do {
			removed = false;
			p = this.vertices;
			skip = true;
			while(skip || p != this.vertices) {
				skip = false;
				var pre = p.prev;
				var ux = 0.0;
				var uy = 0.0;
				ux = p.x - pre.x;
				uy = p.y - pre.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = p.next.x - p.x;
				vy = p.next.y - p.y;
				var crs = vy * ux - vx * uy;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
					if(p == this.vertices) {
						this.vertices = p.next;
						skip = true;
					}
					if(p != null && p.prev == p) {
						p.next = p.prev = null;
						var o2 = p;
						o2.helper = null;
						null;
						o2.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o2;
						p = p = null;
					} else {
						var retnodes1 = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						var o3 = p;
						o3.helper = null;
						null;
						o3.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o3;
						p = null;
						p = retnodes1;
					}
					removed = true;
					if(p == null) {
						removed = false;
						this.vertices = null;
						break;
					}
				}
			}
		} while(removed);
		return this.vertices == null;
	}
	,add_diagonal: function(p,q) {
		p.diagonals.add(q);
		q.diagonals.add(p);
		p.forced = q.forced = true;
	}
	,extract_partitions: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull_partitions(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
			var pre = null;
			var cx_ite = ret.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p.remove_collinear_vertices()) {
					ret.erase(pre);
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
		}
		return ret;
	}
	,pull_partitions: function(start,ret) {
		var poly;
		if(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(); else {
			poly = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = poly.next;
			poly.next = null;
		}
		null;
		var next = start;
		do {
			var obj = next.copy();
			if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
				obj.prev = poly.vertices;
				obj.next = poly.vertices.next;
				poly.vertices.next.prev = obj;
				poly.vertices.next = obj;
			}
			poly.vertices = obj;
			poly.vertices.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull_partitions(next,ret);
			} else next = next.next;
		} while(next != start);
		if((function($this) {
			var $r;
			var area = 0.0;
			{
				var F = poly.vertices;
				var L = poly.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) != 0) ret.add(poly);
		return next;
	}
	,extract: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_GeomVert();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
		}
		return ret;
	}
	,pull: function(start,ret) {
		var poly = null;
		var next = start;
		do {
			var obj = zpp_nape.geom.ZPP_GeomVert.get(next.x,next.y);
			if(poly == null) poly = obj.prev = obj.next = obj; else {
				obj.prev = poly;
				obj.next = poly.next;
				poly.next.prev = obj;
				poly.next = obj;
			}
			poly = obj;
			poly.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull(next,ret);
			} else next = next.next;
		} while(next != start);
		var area;
		var area1 = 0.0;
		var F = poly;
		var L = poly;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area1 += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		area = area1 * 0.5;
		if(area * area >= nape.Config.epsilon * nape.Config.epsilon) {
			if(!(function($this) {
				var $r;
				var p = poly;
				var skip = true;
				while(skip || p != poly) {
					skip = false;
					if(zpp_nape.geom.ZPP_VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape.Config.epsilon * nape.Config.epsilon) {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p.forced) p.next.forced = true;
						if(p != null && p.prev == p) {
							p.next = p.prev = null;
							p = p = null;
						} else {
							var retnodes = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							p = retnodes;
						}
						if(p == null) {
							poly = null;
							break;
						}
					} else p = p.next;
				}
				if(poly != null) {
					var removed;
					do {
						removed = false;
						p = poly;
						skip = true;
						while(skip || p != poly) {
							skip = false;
							var pre = p.prev;
							var ux = 0.0;
							var uy = 0.0;
							ux = p.x - pre.x;
							uy = p.y - pre.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = p.next.x - p.x;
							vy = p.next.y - p.y;
							var crs = vy * ux - vx * uy;
							if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
								if(p == poly) {
									poly = p.next;
									skip = true;
								}
								if(p != null && p.prev == p) {
									p.next = p.prev = null;
									p = p = null;
								} else {
									var retnodes1 = p.next;
									p.prev.next = p.next;
									p.next.prev = p.prev;
									p.next = p.prev = null;
									p = null;
									p = retnodes1;
								}
								removed = true;
								if(p == null) {
									removed = false;
									poly = null;
									break;
								}
							}
						}
					} while(removed);
				}
				$r = poly == null;
				return $r;
			}(this))) ret.add(poly);
		}
		return next;
	}
	,__class__: zpp_nape.geom.ZPP_PartitionedPoly
};
zpp_nape.geom.ZPP_Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape.geom.Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape.geom.Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
zpp_nape.geom.ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_nape.geom.ZPP_Ray.prototype = {
	origin_invalidate: function(x) {
		this.originx = x.x;
		this.originy = x.y;
	}
	,direction_invalidate: function(x) {
		this.dirx = x.x;
		this.diry = x.y;
		this.zip_dir = true;
	}
	,invalidate_dir: function() {
		this.zip_dir = true;
	}
	,validate_dir: function() {
		if(this.zip_dir) {
			this.zip_dir = false;
			if(this.dirx * this.dirx + this.diry * this.diry < nape.Config.epsilon) throw "Error: Ray::direction is degenerate";
			var d = this.dirx * this.dirx + this.diry * this.diry;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.dirx *= t;
			this.diry *= t;
			this.idirx = 1 / this.dirx;
			this.idiry = 1 / this.diry;
			this.normalx = -this.diry;
			this.normaly = this.dirx;
			var x = this.normalx;
			if(x < 0) this.absnormalx = -x; else this.absnormalx = x;
			var x1 = this.normaly;
			if(x1 < 0) this.absnormaly = -x1; else this.absnormaly = x1;
		}
	}
	,rayAABB: function() {
		var x0 = this.originx;
		var x1 = x0;
		var y0 = this.originy;
		var y1 = y0;
		if(this.maxdist >= Math.POSITIVE_INFINITY) {
			if(this.dirx > 0) x1 = Math.POSITIVE_INFINITY; else if(this.dirx < 0) x1 = Math.NEGATIVE_INFINITY;
			if(this.diry > 0) y1 = Math.POSITIVE_INFINITY; else if(this.diry < 0) y1 = Math.NEGATIVE_INFINITY;
		} else {
			x1 += this.maxdist * this.dirx;
			y1 += this.maxdist * this.diry;
		}
		if(x1 < x0) {
			var t = x0;
			x0 = x1;
			x1 = t;
		}
		if(y1 < y0) {
			var t1 = y0;
			y0 = y1;
			y1 = t1;
		}
		var rayab = zpp_nape.geom.ZPP_AABB.get(x0,y0,x1,y1);
		return rayab;
	}
	,aabbtest: function(a) {
		var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
		var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
		return (function($this) {
			var $r;
			var x = dot1;
			$r = x < 0?-x:x;
			return $r;
		}(this)) < dot2;
	}
	,aabbsect: function(a) {
		var cx = this.originx >= a.minx && this.originx <= a.maxx;
		var cy = this.originy >= a.miny && this.originy <= a.maxy;
		if(cx && cy) return 0.0; else {
			var ret = -1.0;
			do {
				if(this.dirx >= 0 && this.originx >= a.maxx) break;
				if(this.dirx <= 0 && this.originx <= a.minx) break;
				if(this.diry >= 0 && this.originy >= a.maxy) break;
				if(this.diry <= 0 && this.originy <= a.miny) break;
				if(this.dirx > 0) {
					var t = (a.minx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				} else if(this.dirx < 0) {
					var t1 = (a.maxx - this.originx) * this.idirx;
					if(t1 >= 0 && t1 <= this.maxdist) {
						var y1 = this.originy + t1 * this.diry;
						if(y1 >= a.miny && y1 <= a.maxy) {
							ret = t1;
							break;
						}
					}
				}
				if(this.diry > 0) {
					var t2 = (a.miny - this.originy) * this.idiry;
					if(t2 >= 0 && t2 <= this.maxdist) {
						var x = this.originx + t2 * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t2;
							break;
						}
					}
				} else if(this.diry < 0) {
					var t3 = (a.maxy - this.originy) * this.idiry;
					if(t3 >= 0 && t3 <= this.maxdist) {
						var x1 = this.originx + t3 * this.dirx;
						if(x1 >= a.minx && x1 <= a.maxx) {
							ret = t3;
							break;
						}
					}
				}
			} while(false);
			return ret;
		}
	}
	,circlesect: function(c,inner,mint) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			} else return null;
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0) {
				if(t0 < mint && t0 <= this.maxdist) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = this.originx;
					ny1 = this.originy;
					var t4 = t0;
					nx1 += this.dirx * t4;
					ny1 += this.diry * t4;
					var t5 = 1.0;
					nx1 -= c.worldCOMx * t5;
					ny1 -= c.worldCOMy * t5;
					var d1 = nx1 * nx1 + ny1 * ny1;
					var imag1 = 1.0 / Math.sqrt(d1);
					var t6 = imag1;
					nx1 *= t6;
					ny1 *= t6;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
				} else return null;
			} else if(t11 > 0 && inner) {
				if(t11 < mint && t11 <= this.maxdist) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = this.originx;
					ny2 = this.originy;
					var t7 = t11;
					nx2 += this.dirx * t7;
					ny2 += this.diry * t7;
					var t8 = 1.0;
					nx2 -= c.worldCOMx * t8;
					ny2 -= c.worldCOMy * t8;
					var d2 = nx2 * nx2 + ny2 * ny2;
					var imag2 = 1.0 / Math.sqrt(d2);
					var t9 = imag2;
					nx2 *= t9;
					ny2 *= t9;
					nx2 = -nx2;
					ny2 = -ny2;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
				} else return null;
			} else return null;
		}
	}
	,circlesect2: function(c,inner,list) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0 && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				var t4 = t0;
				nx1 += this.dirx * t4;
				ny1 += this.diry * t4;
				var t5 = 1.0;
				nx1 -= c.worldCOMx * t5;
				ny1 -= c.worldCOMy * t5;
				var d1 = nx1 * nx1 + ny1 * ny1;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t6 = imag1;
				nx1 *= t6;
				ny1 *= t6;
				var res1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
				var pre1 = null;
				var cx_ite1 = list.zpp_inner.inner.head;
				while(cx_ite1 != null) {
					var j1 = cx_ite1.elt;
					if((function($this) {
						var $r;
						if(res1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res1.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j1.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				list.zpp_inner.inner.inlined_insert(pre1,res1);
			}
			if(t11 > 0 && t11 <= this.maxdist && inner) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				var t7 = t11;
				nx2 += this.dirx * t7;
				ny2 += this.diry * t7;
				var t8 = 1.0;
				nx2 -= c.worldCOMx * t8;
				ny2 -= c.worldCOMy * t8;
				var d2 = nx2 * nx2 + ny2 * ny2;
				var imag2 = 1.0 / Math.sqrt(d2);
				var t9 = imag2;
				nx2 *= t9;
				ny2 *= t9;
				nx2 = -nx2;
				ny2 = -ny2;
				var res2 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
				var pre2 = null;
				var cx_ite2 = list.zpp_inner.inner.head;
				while(cx_ite2 != null) {
					var j2 = cx_ite2.elt;
					if((function($this) {
						var $r;
						if(res2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res2.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j2.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre2 = cx_ite2;
					cx_ite2 = cx_ite2.next;
				}
				list.zpp_inner.inner.inlined_insert(pre2,res2);
			}
		}
	}
	,polysect: function(p,inner,mint) {
		var min = mint;
		var edge = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape.Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
							min = sxx1;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		} else return null;
	}
	,polysect2: function(p,inner,list) {
		var min = Math.POSITIVE_INFINITY;
		var max = -1.0;
		var edge = null;
		var edgemax = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape.Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
							if(sxx1 < min) {
								min = sxx1;
								edge = ei.elt;
							}
							if(sxx1 > max) {
								max = sxx1;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if((function($this) {
					var $r;
					if(ret.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = ret.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
		if(edgemax != null && edge != edgemax) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = edgemax.gnormx;
			ny1 = edgemax.gnormy;
			var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
			if(inner2) {
				nx1 = -nx1;
				ny1 = -ny1;
			}
			var ret1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),max,inner2,p.outer);
			var pre1 = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if((function($this) {
					var $r;
					if(ret1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = ret1.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j1.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			list.zpp_inner.inner.inlined_insert(pre1,ret1);
		}
	}
	,__class__: zpp_nape.geom.ZPP_Ray
};
zpp_nape.geom.ZPP_SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleVert();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.links = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.links = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
};
zpp_nape.geom.ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_nape.geom.ZPP_SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleVert(); else {
		ret = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_SimpleVert.prototype = {
	free: function() {
		this.links.clear();
		this.node = null;
		this.forced = false;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimpleVert
};
zpp_nape.geom.ZPP_SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleSeg();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
zpp_nape.geom.ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_nape.geom.ZPP_SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleSeg(); else {
		ret = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
zpp_nape.geom.ZPP_SimpleSeg.prototype = {
	free: function() {
		this.left = this.right = null;
		this.prev = null;
		this.node = null;
		this.vertices.clear();
	}
	,alloc: function() {
	}
	,less_xy: function(a,b) {
		return a.x < b.x || a.x == b.x && a.y < b.y;
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSeg
};
zpp_nape.geom.ZPP_SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
zpp_nape.geom.ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_nape.geom.ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
};
zpp_nape.geom.ZPP_SimpleEvent.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleEvent(); else {
		ret = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
};
zpp_nape.geom.ZPP_SimpleEvent.prototype = {
	free: function() {
		this.vertex = null;
		this.segment = this.segment2 = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimpleEvent
};
zpp_nape.geom.ZPP_SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) this.tree = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
		this.tree = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
zpp_nape.geom.ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_nape.geom.ZPP_SimpleSweep.prototype = {
	swap_nodes: function(p,q) {
		var t = p.node;
		p.node = q.node;
		q.node = t;
	}
	,edge_lt: function(p,q) {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var flip;
		if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
			var $r;
			flip = q.right.x < q.left.x;
			{
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
			}
			{
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0); else if(p.left == q.left) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.right.y; else return p.right.y > q.right.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(p.left.x == p.right.x) {
			if(q.left.x == q.right.x) {
				var pmax;
				if(p.left.y < p.right.y) pmax = p.right; else pmax = p.left;
				var qmax;
				if(q.left.y < q.right.y) qmax = q.right; else qmax = q.left;
				return pmax.y > qmax.y;
			} else {
				var plrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
				if(flip) plrg = uy * vx - ux * vy; else plrg = vy * ux - vx * uy;
				var aplrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.right.x - q.left.x;
				vy = p.right.y - q.left.y;
				if(flip) aplrg = uy * vx - ux * vy; else aplrg = vy * ux - vx * uy;
				if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
			}
		} else if(q.left.x == q.right.x) {
			var qlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			if(flip) qlrg = uy * vx - ux * vy; else qlrg = vy * ux - vx * uy;
			var aqlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
			if(flip) aqlrg = uy * vx - ux * vy; else aqlrg = vy * ux - vx * uy;
			if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
		} else {
			var qlrg1;
			qlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			var aqlrg1;
			aqlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			if(qlrg1 == aqlrg1) return qlrg1; else {
				var plrg1;
				plrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				var aplrg1;
				aplrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				if(plrg1 == aplrg1) return plrg1;
				var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
				var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
				return py > qy;
			}
		}
	}
	,clear: function() {
		this.tree.clear();
	}
	,add: function(e) {
		e.node = this.tree.insert(e);
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) {
			e.next = nxt.data;
			nxt.data.prev = e;
		}
		if(pre != null) {
			e.prev = pre.data;
			pre.data.next = e;
		}
		return e;
	}
	,remove: function(e) {
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) nxt.data.prev = e.prev;
		if(pre != null) pre.data.next = e.next;
		this.tree.remove_node(e.node);
		e.node = null;
	}
	,intersect: function(p,q) {
		if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
			var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
			var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
			if(lsign * rsign > 0) return false; else {
				var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
				var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
				if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
			}
		}
	}
	,intersection: function(p,q) {
		if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
			var ux = 0.0;
			var uy = 0.0;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = q.right.x - q.left.x;
			vy = q.right.y - q.left.y;
			var denom = vy * ux - vx * uy;
			if(denom == 0.0) return null;
			denom = 1 / denom;
			var cx = 0.0;
			var cy = 0.0;
			cx = q.left.x - p.left.x;
			cy = q.left.y - p.left.y;
			var t = (vy * cx - vx * cy) * denom;
			if(t < 0 || t > 1) return null;
			var s = (uy * cx - ux * cy) * denom;
			if(s < 0 || s > 1) return null;
			var vet;
			if(s == 0 || s == 1 || t == 0 || t == 1) {
				var cases = s == 0;
				if(s == 1 && cases) throw "corner case 1a"; else if(s == 1) cases = true;
				if(t == 0 && cases) throw "corner case 1b"; else if(t == 0) cases = true;
				if(t == 1 && cases) throw "corner case 1c";
				if(s == 0) vet = q.left; else if(s == 1) vet = q.right; else if(t == 0) vet = p.left; else vet = p.right;
			} else vet = zpp_nape.geom.ZPP_SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
			var ret = zpp_nape.geom.ZPP_SimpleEvent.get(vet);
			ret.type = 0;
			ret.segment = p;
			ret.segment2 = q;
			return ret;
		}
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSweep
};
zpp_nape.geom.ZPP_Simple = function() { };
zpp_nape.geom.ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_nape.geom.ZPP_Simple.decompose = function(poly,rets) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	if(zpp_nape.geom.ZPP_Simple.vertices == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) zpp_nape.geom.ZPP_Simple.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			zpp_nape.geom.ZPP_Simple.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = zpp_nape.geom.ZPP_Simple.vertices.next;
			zpp_nape.geom.ZPP_Simple.vertices.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.vertices.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
		zpp_nape.geom.ZPP_Simple.vertices.swapped = zpp_nape.geom.ZPP_SimpleVert.swap_nodes;
	}
	if(zpp_nape.geom.ZPP_Simple.queue == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.queue = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.queue = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.queue.next;
			zpp_nape.geom.ZPP_Simple.queue.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.queue.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
		zpp_nape.geom.ZPP_Simple.queue.swapped = zpp_nape.geom.ZPP_SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y);
			var vx;
			var cur = zpp_nape.geom.ZPP_Simple.vertices.parent;
			while(cur != null) if(zpp_nape.geom.ZPP_Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
			vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_nape.geom.ZPP_Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
				var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(vert);
				var seg;
				if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_nape.geom.ZPP_Simple.queue.insert(e1);
				zpp_nape.geom.ZPP_Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e11 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
	var e21 = zpp_nape.geom.ZPP_SimpleEvent.get(fst);
	var seg1;
	if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	zpp_nape.geom.ZPP_Simple.queue.insert(e11);
	zpp_nape.geom.ZPP_Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_nape.geom.ZPP_Simple.ints == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.ints = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.ints = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.ints.next;
			zpp_nape.geom.ZPP_Simple.ints.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.ints.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	}
	while(!zpp_nape.geom.ZPP_Simple.queue.empty()) {
		var e = zpp_nape.geom.ZPP_Simple.queue.pop_front();
		zpp_nape.geom.ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_nape.geom.ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.next.id,s.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex;
						var cur1 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur1 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur1.data)) cur1 = cur1.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur1.data,intx)) cur1 = cur1.next; else break;
						ex = cur1;
						if(ex == null) {
							var vx1;
							var cur2 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur2 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur2.data)) cur2 = cur2.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur2.data,intx)) cur2 = cur2.next; else break;
							vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.next.id,s.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx.segment || intx.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
							var o3 = intx;
							o3.vertex = null;
							o3.segment = o3.segment2 = null;
							o3.node = null;
							o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
						}
					} else {
						var o4 = intx.vertex;
						o4.links.clear();
						o4.node = null;
						o4.forced = false;
						o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
						var o5 = intx;
						o5.vertex = null;
						o5.segment = o5.segment2 = null;
						o5.node = null;
						o5.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o5;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex1;
						var cur3 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur3 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx1,cur3.data)) cur3 = cur3.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur3.data,intx1)) cur3 = cur3.next; else break;
						ex1 = cur3;
						if(ex1 == null) {
							var vx2;
							var cur4 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur4 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx1,cur4.data)) cur4 = cur4.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur4.data,intx1)) cur4 = cur4.next; else break;
							vx2 = cur4;
							if(vx2 != null) {
								var o6 = intx1.vertex;
								o6.links.clear();
								o6.node = null;
								o6.forced = false;
								o6.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o6;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x1 = ex1.data;
							if(x1.segment != intx1.segment || intx1.segment2 != x1.segment2) throw "corner case 2, shiiiit.";
							var o7 = intx1.vertex;
							o7.links.clear();
							o7.node = null;
							o7.forced = false;
							o7.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o7;
							var o8 = intx1;
							o8.vertex = null;
							o8.segment = o8.segment2 = null;
							o8.node = null;
							o8.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o8;
						}
					} else {
						var o9 = intx1.vertex;
						o9.links.clear();
						o9.node = null;
						o9.forced = false;
						o9.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o9;
						var o10 = intx1;
						o10.vertex = null;
						o10.segment = o10.segment2 = null;
						o10.node = null;
						o10.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o10;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				zpp_nape.geom.ZPP_Simple.sweep.remove(s1);
				var o11 = s1;
				o11.left = o11.right = null;
				o11.prev = null;
				o11.node = null;
				o11.vertices.clear();
				o11.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
				zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o11;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_nape.geom.ZPP_Simple.inthash.has(nxt.id,pre1.id):zpp_nape.geom.ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = zpp_nape.geom.ZPP_Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
							var ex2;
							var cur5 = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur5 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx2,cur5.data)) cur5 = cur5.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur5.data,intx2)) cur5 = cur5.next; else break;
							ex2 = cur5;
							if(ex2 == null) {
								var vx3;
								var cur6 = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur6 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx2,cur6.data)) cur6 = cur6.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur6.data,intx2)) cur6 = cur6.next; else break;
								vx3 = cur6;
								if(vx3 != null) {
									var o12 = intx2.vertex;
									o12.links.clear();
									o12.node = null;
									o12.forced = false;
									o12.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
									zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o12;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
								} else {
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
									zpp_nape.geom.ZPP_Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(nxt.id,pre1.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x2 = ex2.data;
								if(x2.segment != intx2.segment || intx2.segment2 != x2.segment2) throw "corner case 2, shiiiit.";
								var o13 = intx2.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o13;
								var o14 = intx2;
								o14.vertex = null;
								o14.segment = o14.segment2 = null;
								o14.node = null;
								o14.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
								zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o14;
							}
						} else {
							var o15 = intx2.vertex;
							o15.links.clear();
							o15.node = null;
							o15.forced = false;
							o15.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o15;
							var o16 = intx2;
							o16.vertex = null;
							o16.segment = o16.segment2 = null;
							o16.node = null;
							o16.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o16;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew;
			anew = (function($this) {
				var $r;
				var cur7 = a.vertices.parent;
				while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) cur7 = cur7.prev; else if(a.vertices.lt(cur7.data,intx3)) cur7 = cur7.next; else break;
				$r = cur7;
				return $r;
			}(this)) == null;
			var bnew;
			bnew = (function($this) {
				var $r;
				var cur8 = b.vertices.parent;
				while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) cur8 = cur8.prev; else if(b.vertices.lt(cur8.data,intx3)) cur8 = cur8.next; else break;
				$r = cur8;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft;
				if(intx3 == a.left) naleft = intx3; else naleft = a.vertices.predecessor_node(aint).data;
				var naright;
				if(intx3 == a.right) naright = intx3; else naright = a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) naleft.links.insert(intx3);
				naright.links.remove(naleft);
				if(intx3 != naright) naright.links.insert(intx3);
				if(intx3 != naleft) intx3.links.insert(naleft);
				if(intx3 != naright) intx3.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft;
				if(intx3 == b.left) nbleft = intx3; else nbleft = b.vertices.predecessor_node(bint).data;
				var nbright;
				if(intx3 == b.right) nbright = intx3; else nbright = b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) nbleft.links.insert(intx3);
				nbright.links.remove(nbleft);
				if(intx3 != nbright) nbright.links.insert(intx3);
				if(intx3 != nbleft) intx3.links.insert(nbleft);
				if(intx3 != nbright) intx3.links.insert(nbright);
			}
			if(pnull) intx3.node = zpp_nape.geom.ZPP_Simple.vertices.insert(intx3);
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_nape.geom.ZPP_Simple.inthash.has(b.next.id,b.id):zpp_nape.geom.ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = zpp_nape.geom.ZPP_Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex3;
						var cur9 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur9 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx4,cur9.data)) cur9 = cur9.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur9.data,intx4)) cur9 = cur9.next; else break;
						ex3 = cur9;
						if(ex3 == null) {
							var vx4;
							var cur10 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur10 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx4,cur10.data)) cur10 = cur10.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur10.data,intx4)) cur10 = cur10.next; else break;
							vx4 = cur10;
							if(vx4 != null) {
								var o17 = intx4.vertex;
								o17.links.clear();
								o17.node = null;
								o17.forced = false;
								o17.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o17;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.next.id,b.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x3 = ex3.data;
							if(x3.segment != intx4.segment || intx4.segment2 != x3.segment2) throw "corner case 2, shiiiit.";
							var o18 = intx4.vertex;
							o18.links.clear();
							o18.node = null;
							o18.forced = false;
							o18.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o18;
							var o19 = intx4;
							o19.vertex = null;
							o19.segment = o19.segment2 = null;
							o19.node = null;
							o19.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o19;
						}
					} else {
						var o20 = intx4.vertex;
						o20.links.clear();
						o20.node = null;
						o20.forced = false;
						o20.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o20;
						var o21 = intx4;
						o21.vertex = null;
						o21.segment = o21.segment2 = null;
						o21.node = null;
						o21.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o21;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(a.id,a.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = zpp_nape.geom.ZPP_Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex4;
						var cur11 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur11 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx5,cur11.data)) cur11 = cur11.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur11.data,intx5)) cur11 = cur11.next; else break;
						ex4 = cur11;
						if(ex4 == null) {
							var vx5;
							var cur12 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur12 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx5,cur12.data)) cur12 = cur12.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur12.data,intx5)) cur12 = cur12.next; else break;
							vx5 = cur12;
							if(vx5 != null) {
								var o22 = intx5.vertex;
								o22.links.clear();
								o22.node = null;
								o22.forced = false;
								o22.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o22;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.id,a.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x4 = ex4.data;
							if(x4.segment != intx5.segment || intx5.segment2 != x4.segment2) throw "corner case 2, shiiiit.";
							var o23 = intx5.vertex;
							o23.links.clear();
							o23.node = null;
							o23.forced = false;
							o23.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o23;
							var o24 = intx5;
							o24.vertex = null;
							o24.segment = o24.segment2 = null;
							o24.node = null;
							o24.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o24;
						}
					} else {
						var o25 = intx5.vertex;
						o25.links.clear();
						o25.node = null;
						o25.forced = false;
						o25.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o25;
						var o26 = intx5;
						o26.vertex = null;
						o26.segment = o26.segment2 = null;
						o26.node = null;
						o26.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o26;
					}
				}
			}
			zpp_nape.geom.ZPP_Simple.ints.remove(e);
		}
		var o27 = e;
		o27.vertex = null;
		o27.segment = o27.segment2 = null;
		o27.node = null;
		o27.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o27;
	}
	var _g1 = 0;
	var _g = zpp_nape.geom.ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_nape.geom.ZPP_Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o28 = n;
			o28.next = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
			zpp_nape.util.Hashable2_Boolfalse.zpp_pool = o28;
			n = t1;
		}
		zpp_nape.geom.ZPP_Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!zpp_nape.geom.ZPP_Simple.vertices.empty()) zpp_nape.geom.ZPP_Simple.clip_polygon(zpp_nape.geom.ZPP_Simple.vertices,rets);
	return rets;
};
zpp_nape.geom.ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn;
	if(pren.prev == null) nxtn = pren.next; else nxtn = pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	var obj = zpp_nape.geom.ZPP_GeomVert.get(cur.x,cur.y);
	if(ret == null) ret = obj.prev = obj.next = obj; else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		var obj1 = zpp_nape.geom.ZPP_GeomVert.get(nxt.x,nxt.y);
		if(ret == null) ret = obj1.prev = obj1.next = obj1; else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var nleft;
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft;
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							pleft = vy3 * ux3 - vx3 * uy3;
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o3 = fst;
	o3.links.clear();
	o3.node = null;
	o3.forced = false;
	o3.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
	zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o3;
	rets.add(ret);
};
zpp_nape.geom.ZPP_Simple.isSimple = function(poly) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	var vertices = zpp_nape.geom.ZPP_Simple.list_vertices;
	if(vertices == null) vertices = zpp_nape.geom.ZPP_Simple.list_vertices = new zpp_nape.util.ZNPList_ZPP_SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_nape.geom.ZPP_Simple.list_queue;
	if(queue == null) queue = zpp_nape.geom.ZPP_Simple.list_queue = new zpp_nape.util.ZNPList_ZPP_SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v1 = cx_ite.elt;
		var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
		var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v1));
		e1.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v1);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v1,u);
			return $r;
		}(this));
		u = v1;
		cx_ite = cx_ite.next;
	}
	var v2 = vertices.head.elt;
	var e11 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
	var e21 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v2));
	e11.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)?(function($this) {
		var $r;
		e11.type = 1;
		e21.type = 2;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v2);
		return $r;
	}(this)):(function($this) {
		var $r;
		e11.type = 2;
		e21.type = 1;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v2,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_nape.geom.ZPP_Simple.sweep.add(seg);
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.next) || zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_nape.geom.ZPP_Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o1 = e;
		o1.vertex = null;
		o1.segment = o1.segment2 = null;
		o1.node = null;
		o1.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o1;
	}
	while(!(queue.head == null)) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o2 = e3.segment;
			o2.left = o2.right = null;
			o2.prev = null;
			o2.node = null;
			o2.vertices.clear();
			o2.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o2;
		}
		var o3 = e3;
		o3.vertex = null;
		o3.segment = o3.segment2 = null;
		o3.node = null;
		o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
	}
	zpp_nape.geom.ZPP_Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o4 = vertices.pop_unsafe();
		o4.links.clear();
		o4.node = null;
		o4.forced = false;
		o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
	}
	return ret;
};
zpp_nape.geom.ZPP_SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_nape.geom.ZPP_SimplifyV.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyV.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyV(); else {
		ret = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyV.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyV
};
zpp_nape.geom.ZPP_SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
zpp_nape.geom.ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_nape.geom.ZPP_SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyP(); else {
		ret = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyP.prototype = {
	free: function() {
		this.min = this.max = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyP
};
zpp_nape.geom.ZPP_Simplify = function() { };
zpp_nape.geom.ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_nape.geom.ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
zpp_nape.geom.ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
zpp_nape.geom.ZPP_Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_nape.geom.ZPP_VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
};
zpp_nape.geom.ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_nape.geom.ZPP_Simplify.stack == null) zpp_nape.geom.ZPP_Simplify.stack = new zpp_nape.util.ZNPList_ZPP_SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_nape.geom.ZPP_SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		var obj = v;
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		ret = obj;
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_nape.geom.ZPP_Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,max));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,max));
			}
		}
	} else zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,fst));
	while(!(zpp_nape.geom.ZPP_Simplify.stack.head == null)) {
		var cur1 = zpp_nape.geom.ZPP_Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_nape.geom.ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min1,dv));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var obj1 = zpp_nape.geom.ZPP_GeomVert.get(ret.x,ret.y);
			if(retp == null) retp = obj1.prev = obj1.next = obj1; else {
				obj1.prev = retp;
				obj1.next = retp.next;
				retp.next.prev = obj1;
				retp.next = obj1;
			}
			retp = obj1;
			retp.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o1;
			ret = ret = null;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o2 = ret;
			o2.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o2;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
zpp_nape.geom.ZPP_ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_nape.geom.ZPP_Vec2();
	this.c2 = new zpp_nape.geom.ZPP_Vec2();
	this.axis = new zpp_nape.geom.ZPP_Vec2();
};
zpp_nape.geom.ZPP_ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_nape.geom.ZPP_ToiEvent.prototype = {
	alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,free: function() {
	}
	,__class__: zpp_nape.geom.ZPP_ToiEvent
};
zpp_nape.geom.ZPP_SweepDistance = function() { };
zpp_nape.geom.ZPP_SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_nape.geom.ZPP_SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape.Config.dynamicSweepLinearThreshold * nape.Config.dynamicSweepLinearThreshold && angBias < nape.Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t1 = new zpp_nape.geom.ZPP_Vec2(); else {
		t1 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t2 = new zpp_nape.geom.ZPP_Vec2(); else {
		t2 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ax = new zpp_nape.geom.ZPP_Vec2(); else {
		ax = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o2;
	return min;
};
zpp_nape.geom.ZPP_SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) min = k;
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) min1 = k1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) t11 = 0; else if(t11 > 1) t11 = 1;
						if(t21 < 0) t21 = 0; else if(t21 > 1) t21 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape.Config.epsilon) {
							var t18 = t17;
							c0x += dvx * t18;
							c0y += dvy * t18;
						}
						var t19 = (-ax.tp0 - d11) * den;
						if(t19 < -nape.Config.epsilon) {
							var t20 = t19;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
};
zpp_nape.geom.ZPP_PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
zpp_nape.geom.ZPP_PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
zpp_nape.geom.ZPP_PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionPair(); else {
		ret = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
};
zpp_nape.geom.ZPP_PartitionPair.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.a = this.b = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_PartitionPair
};
zpp_nape.geom.ZPP_Triangular = function() { };
zpp_nape.geom.ZPP_Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
zpp_nape.geom.ZPP_Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
zpp_nape.geom.ZPP_Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
};
zpp_nape.geom.ZPP_Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.edgeSet == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) zpp_nape.geom.ZPP_Triangular.edgeSet = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			zpp_nape.geom.ZPP_Triangular.edgeSet = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = zpp_nape.geom.ZPP_Triangular.edgeSet.next;
			zpp_nape.geom.ZPP_Triangular.edgeSet.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Triangular.edgeSet.lt = zpp_nape.geom.ZPP_PartitionPair.edge_lt;
		zpp_nape.geom.ZPP_Triangular.edgeSet.swapped = zpp_nape.geom.ZPP_PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) edgeStack = new zpp_nape.geom.ZPP_PartitionPair(); else {
		edgeStack = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1;
				if(cx_ite.next == null) q1 = p1.prev; else q1 = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Triangular.delaunay(p1,q0,q,q1)) {
					var edge = zpp_nape.geom.ZPP_PartitionPair.get(p1,q);
					edgeStack.add(edge);
					edge.node = zpp_nape.geom.ZPP_Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
	while(!(edgeStack.next == null)) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) D = A.prev; else D = cx_ite1.elt;
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				var p3 = cx_ite2.elt;
				if(p3 == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				var p4 = cx_ite3.elt;
				if(p4 == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		zpp_nape.geom.ZPP_Triangular.edgeSet.remove_node(edge1.node);
		var o = edge1;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o;
	}
	var o1 = edgeStack;
	o1.a = o1.b = null;
	o1.node = null;
	o1.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
	zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o1;
};
zpp_nape.geom.ZPP_Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.queue == null) zpp_nape.geom.ZPP_Triangular.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_nape.geom.ZPP_Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_nape.geom.ZPP_Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_nape.geom.ZPP_Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_nape.geom.ZPP_Triangular.queue.add(min);
	if(zpp_nape.geom.ZPP_Triangular.stack == null) zpp_nape.geom.ZPP_Triangular.stack = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	zpp_nape.geom.ZPP_Triangular.stack.add(zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe());
	var pre = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
	zpp_nape.geom.ZPP_Triangular.stack.add(pre);
	while(true) {
		var p1 = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
		if(zpp_nape.geom.ZPP_Triangular.queue.head == null) break;
		if(p1.rightchain != zpp_nape.geom.ZPP_Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
				if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
				P.add_diagonal(s,p1);
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(pre);
		} else {
			var q = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
				var s1 = zpp_nape.geom.ZPP_Triangular.stack.head.elt;
				var right = zpp_nape.geom.ZPP_Triangular.right_turn(s1,q,p1);
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) break;
				P.add_diagonal(s1,p1);
				q = s1;
				zpp_nape.geom.ZPP_Triangular.stack.pop();
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(q);
		}
		zpp_nape.geom.ZPP_Triangular.stack.add(p1);
		pre = p1;
	}
	if(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
		zpp_nape.geom.ZPP_Triangular.stack.pop();
		while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
			var s2 = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
zpp_nape.geom.ZPP_Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
zpp_nape.geom.ZPP_Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_nape.geom.ZPP_Vec3.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_nape.geom.ZPP_Vec3
};
zpp_nape.geom.ZPP_VecMath = function() { };
zpp_nape.geom.ZPP_VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_nape.geom.ZPP_VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
zpp_nape.geom.ZPP_VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
zpp_nape.phys = {};
zpp_nape.phys.ZPP_Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_nape.ZPP_ID.Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CallbackSet();
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.phys.ZPP_Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_nape.phys.ZPP_Interactor.get = function(i1,i2) {
	var id;
	if(i1.id < i2.id) id = i1.id; else id = i2.id;
	var di;
	if(i1.id < i2.id) di = i2.id; else di = i1.id;
	var xs;
	if(i1.cbsets.length < i2.cbsets.length) xs = i1.cbsets; else xs = i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.phys.ZPP_Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_nape.phys.ZPP_Interactor.prototype = {
	isShape: function() {
		return this.ishape != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,__iaddedToSpace: function() {
		if(this.group != null) this.group.interactors.add(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) this.group.interactors.remove(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) body.space.non_inlined_wake(body);
			true;
		} else if(this.ibody != null) {
			if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
		} else {
			if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
			true;
		}
	}
	,getSpace: function() {
		if(this.ishape != null) {
			if(this.ishape.body == null) return null; else return this.ishape.body.space;
		} else if(this.ibody != null) return this.ibody.space; else return this.icompound.space;
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Interactor::cbTypes");
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,setGroup: function(group) {
		if(this.group != group) {
			var inspace;
			inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
			if(inspace && this.group != null) this.group.interactors.remove(this);
			this.group = group;
			if(inspace && group != null) group.interactors.add(this);
			if(inspace) {
				if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
			}
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) this.ibody.__immutable_midstep(n); else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
		if(cur == null) return null; else return cur.group;
	}
	,copyto: function(ret) {
		ret.zpp_inner_i.group = this.group;
		var _g = this.outer_i.get_cbTypes().iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
				$r = ret.zpp_inner_i.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
	,__class__: zpp_nape.phys.ZPP_Interactor
};
zpp_nape.phys.ZPP_Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Math.POSITIVE_INFINITY;
	this.pre_posy = Math.POSITIVE_INFINITY;
	this.pre_rot = Math.POSITIVE_INFINITY;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
zpp_nape.phys.ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_nape.phys.ZPP_Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.phys.ZPP_Body.__static = function() {
	var ret = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_nape.phys.ZPP_Body.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Body.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	isStatic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,init_bodysetlist: function() {
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
	}
	,connectedBodies_cont: function(b) {
		if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(b.zpp_inner)) {
			zpp_nape.phys.ZPP_Body.bodystack.add(b.zpp_inner);
			b.zpp_inner.graph_depth = zpp_nape.phys.ZPP_Body.cur_graph_depth + 1;
		}
	}
	,connectedBodies: function(depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			zpp_nape.phys.ZPP_Body.cur_graph_depth = cur.graph_depth;
			var cx_ite = cur.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				c.outer.visitBodies($bind(this,this.connectedBodies_cont));
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,interactingBodies: function(arbiter_type,depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			var cx_ite = cur.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if((arb.type & arbiter_type) != 0) {
					var other;
					if(arb.b1 == cur) other = arb.b2; else other = arb.b1;
					if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(other)) {
						zpp_nape.phys.ZPP_Body.bodystack.add(other);
						other.graph_depth = cur.graph_depth + 1;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,atRest: function(dt) {
		if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
			var linSq = nape.Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) cansleep = false; else if(zpp_nape.geom.ZPP_VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) cansleep = false; else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.aabb.maxx - this.aabb.minx;
				dy = this.aabb.maxy - this.aabb.miny;
				var idl = dx * dx + dy * dy;
				var angSq = nape.Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) cansleep = false; else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) cansleep = false; else cansleep = true;
				}
			}
			if(!cansleep) this.component.waket = this.space.stamp;
			return this.component.waket + nape.Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
		}
	}
	,sweepValidate: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.next;
			var cx_ite = p.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.head;
			var cx_ite1 = p.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
			e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
	}
	,invalidate_pos: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot move a static object once inside a Space";
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Static body cannot have its velocity set.";
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,kinvel_invalidate: function(vel) {
		this.kinvelx = vel.x;
		this.kinvely = vel.y;
		this.wake();
	}
	,kinvel_validate: function() {
		this.wrap_kinvel.zpp_inner.x = this.kinvelx;
		this.wrap_kinvel.zpp_inner.y = this.kinvely;
	}
	,svel_invalidate: function(vel) {
		this.svelx = vel.x;
		this.svely = vel.y;
		this.wake();
	}
	,svel_validate: function() {
		this.wrap_svel.zpp_inner.x = this.svelx;
		this.wrap_svel.zpp_inner.y = this.svely;
	}
	,force_invalidate: function(force) {
		if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have force applied.";
		this.forcex = force.x;
		this.forcey = force.y;
		this.wake();
	}
	,force_validate: function() {
		this.wrap_force.zpp_inner.x = this.forcex;
		this.wrap_force.zpp_inner.y = this.forcey;
	}
	,setupPosition: function() {
		this.wrap_pos = nape.geom.Vec2.get(this.posx,this.posy,null);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape.geom.Vec2.get(this.velx,this.vely,null);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,setupkinvel: function() {
		this.wrap_kinvel = nape.geom.Vec2.get(this.kinvelx,this.kinvely,null);
		this.wrap_kinvel.zpp_inner._inuse = true;
		if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
			this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
			this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
		}
	}
	,setupsvel: function() {
		this.wrap_svel = nape.geom.Vec2.get(this.svelx,this.svely,null);
		this.wrap_svel.zpp_inner._inuse = true;
		if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
			this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
			this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
		}
	}
	,setupForce: function() {
		this.wrap_force = nape.geom.Vec2.get(this.forcex,this.forcey,null);
		this.wrap_force.zpp_inner._inuse = true;
		if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
			this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
			this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
		}
	}
	,cvel_validate: function() {
		this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
		this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
		this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
	}
	,setup_cvel: function() {
		var me = this;
		this.wrapcvel = nape.geom.Vec3.get();
		this.wrapcvel.zpp_inner.immutable = true;
		this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
	}
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && exist) {
			this.zip_mass = false;
			if(this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Math.POSITIVE_INFINITY;
				this.imass = this.smass = 0.0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_gravMassScale: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
	}
	,validate_gravMassScale: function() {
		if(this.zip_gravMassScale) {
			this.zip_gravMassScale = false;
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) {
				this.validate_mass();
				this.gravMassScale = this.gravMass / this.cmass;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Math.POSITIVE_INFINITY;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,validate_aabb: function() {
		if(this.shapes.head == null) throw "Error: Body bounds only makes sense if it contains shapes";
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Math.POSITIVE_INFINITY;
			this.aabb.miny = Math.POSITIVE_INFINITY;
			this.aabb.maxx = Math.NEGATIVE_INFINITY;
			this.aabb.maxy = Math.NEGATIVE_INFINITY;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
					}
				}
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t1 = 1.0 / msum;
				this.localCOMx = tempx * t1;
				this.localCOMy = tempy * t1;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Math.POSITIVE_INFINITY;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,getlocalCOM: function() {
		if(this.shapes.head == null) throw "Error: localCOM only makes sense when Body has Shapes";
		this.validate_localCOM();
	}
	,getworldCOM: function() {
		if(this.shapes.head == null) throw "Error: worldCOM only makes sense when Body has Shapes";
		this.validate_worldCOM();
	}
	,__immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
	}
	,clear: function() {
		if(this.space != null) throw "Error: Cannot clear a Body if it is currently being used by a Space!";
		if(!(this.constraints.head == null)) throw "Error: Cannot clear a Body if it is currently being used by a constraint!";
		while(!(this.shapes.head == null)) {
			var s = this.shapes.pop_unsafe();
			s.removedFromBody();
			s.body = null;
		}
		this.invalidate_shapes();
		this.pre_posx = 0;
		this.pre_posy = 0;
		this.posx = 0;
		this.posy = 0;
		this.velx = 0;
		this.vely = 0;
		this.forcex = 0;
		this.forcey = 0;
		this.kinvelx = 0;
		this.kinvely = 0;
		this.svelx = 0;
		this.svely = 0;
		this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
		this.invalidate_pos();
		this.invalidate_rot();
		this.axisx = 0;
		this.axisy = 1;
		this.zip_axis = false;
		this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
		this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
		this.gravMassScale = 1.0;
		this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.norotate = false;
		this.nomove = false;
	}
	,aabb_validate: function() {
		if(this.shapes.head == null) throw "Error: bounds only makes sense when Body has shapes";
		this.validate_aabb();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) this.space.added_shape(s.zpp_inner,null);
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else return false;
	}
	,shapes_subber: function(s) {
		if(this.space != null) this.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,shapes_modifiable: function() {
		this.immutable_midstep("Body::shapes");
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	}
	,addedToSpace: function() {
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(!(this.arbiters.head == null)) {
			var arb = this.arbiters.pop_unsafe();
			arb.cleared = true;
			if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
			if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			this.space.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,copy: function() {
		var ret = new nape.phys.Body().zpp_inner;
		ret.type = this.type;
		ret.bulletEnabled = this.bulletEnabled;
		ret.disableCCD = this.disableCCD;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
			cx_ite = cx_ite.next;
		}
		ret.posx = this.posx;
		ret.posy = this.posy;
		ret.velx = this.velx;
		ret.vely = this.vely;
		ret.forcex = this.forcex;
		ret.forcey = this.forcey;
		ret.rot = this.rot;
		ret.angvel = this.angvel;
		ret.torque = this.torque;
		ret.kinvelx = this.kinvelx;
		ret.kinvely = this.kinvely;
		ret.kinangvel = this.kinangvel;
		ret.svelx = this.svelx;
		ret.svely = this.svely;
		if(!this.zip_axis) {
			ret.axisx = this.axisx;
			ret.axisy = this.axisy;
		} else ret.invalidate_rot();
		ret.rot = this.rot;
		ret.massMode = this.massMode;
		ret.gravMassMode = this.gravMassMode;
		ret.inertiaMode = this.inertiaMode;
		ret.norotate = this.norotate;
		ret.nomove = this.nomove;
		ret.cmass = this.cmass;
		ret.cinertia = this.cinertia;
		if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
		if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
		if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
		if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else ret.zip_aabb = true;
		if(!this.zip_localCOM) {
			ret.localCOMx = this.localCOMx;
			ret.localCOMy = this.localCOMy;
		} else {
			ret.zip_localCOM = true;
			ret.zip_worldCOM = true;
		}
		if(!this.zip_worldCOM) {
			ret.worldCOMx = this.worldCOMx;
			ret.worldCOMy = this.worldCOMy;
		} else ret.zip_worldCOM = true;
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_nape.phys.ZPP_Body
});
zpp_nape.phys.ZPP_Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
zpp_nape.phys.ZPP_Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_nape.phys.ZPP_Compound.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Compound.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	__imutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during space step()";
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,breakApart: function() {
		if(this.space != null) {
			this.__iremovedFromSpace();
			this.space.nullInteractorType(this);
		}
		if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
			if(this.space != null) this.space.freshInteractorType(b);
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
		}
		while(!(this.compounds.head == null)) {
			var c1 = this.compounds.pop_unsafe();
			if((c1.compound = this.compound) != null) this.compound.compounds.add(c1); else if(this.space != null) this.space.compounds.add(c1);
			if(this.space != null) this.space.freshInteractorType(c1);
		}
		this.compound = null;
		this.space = null;
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		this.immutable_midstep("Compound::" + "bodies");
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		this.immutable_midstep("Compound::" + "constraints");
	}
	,compounds_adder: function(x) {
		var cur = this;
		while(cur != null && cur != x.zpp_inner) cur = cur.compound;
		if(cur == x.zpp_inner) {
			throw "Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString();
			return false;
		}
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) this.space.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) this.space.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		this.immutable_midstep("Compound::" + "compounds");
	}
	,copy: function(dict,todo) {
		var root = dict == null;
		if(dict == null) dict = new Array();
		if(todo == null) todo = new Array();
		var ret = new nape.phys.Compound();
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			cc.zpp_inner.immutable_midstep("Compound::compound");
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			var bc = b.outer.copy();
			dict.push(zpp_nape.constraint.ZPP_CopyHelper.dict(b.id,bc));
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
				if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
				if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
			}
			if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			var cc1 = c1.copy(dict,todo);
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
				if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) (cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
				if(ret != null) ret.zpp_inner.wrap_constraints.add(cc1);
			}
			if(cc1.zpp_inner.compound == null) null; else cc1.zpp_inner.compound.outer;
			cx_ite2 = cx_ite2.next;
		}
		if(root) while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
		this.copyto(ret);
		return ret;
	}
	,__class__: zpp_nape.phys.ZPP_Compound
});
zpp_nape.phys.ZPP_FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
zpp_nape.phys.ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_nape.phys.ZPP_FluidProperties.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.FluidProperties();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
			ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.viscosity = this.viscosity;
		ret.density = this.density;
		return ret;
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		this.invalidate();
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.phys.ZPP_FluidProperties
};
zpp_nape.phys.ZPP_Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
zpp_nape.phys.ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_nape.phys.ZPP_Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret = new zpp_nape.phys.ZPP_Material();
		ret.dynamicFriction = this.dynamicFriction;
		ret.staticFriction = this.staticFriction;
		ret.density = this.density;
		ret.elasticity = this.elasticity;
		ret.rollingFriction = this.rollingFriction;
		return ret;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_nape.phys.ZPP_Material
};
zpp_nape.shape = {};
zpp_nape.shape.ZPP_Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.pairs = new zpp_nape.util.ZNPList_ZPP_AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_nape.phys.ZPP_Material();
	this.sweepRadius = this.sweepCoef = 0;
};
zpp_nape.shape.ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_nape.shape.ZPP_Shape.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.shape.ZPP_Shape.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	isCircle: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
		}
	}
	,clear: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
	}
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,force_validate_aabb: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,getworldCOM: function() {
		if(this.body == null) throw "Error: worldCOM only makes sense when Shape belongs to a Body";
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) this.body.invalidate_localCOM();
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_nape.phys.ZPP_Material.WAKE) != 0) this.wake();
		if((flags & zpp_nape.phys.ZPP_Material.ARBITERS) != 0) {
			if(this.body != null) this.body.refreshArbiters();
		}
		if((flags & zpp_nape.phys.ZPP_Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_nape.phys.ZPP_Material.ANGDRAG) != 0) this.invalidate_angDrag();
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) this.wake();
	}
	,aabb_validate: function() {
		if(this.body == null) throw "Error: bounds only makes sense when Shape belongs to a Body";
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) this.material.shapes.remove(this);
			}
			this.material = material;
			if(this.body != null && this.body.space != null) material.shapes.add(this);
			this.wake();
			if(this.body != null) this.body.refreshArbiters();
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) this.filter.shapes.remove(this);
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) filter.shapes.add(this);
			this.wake();
		}
	}
	,setFluid: function(fluid) {
		if(this.fluidProperties != fluid) {
			if(this.body != null && this.body.space != null) {
				if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
			}
			this.fluidProperties = fluid;
			if(this.body != null && this.body.space != null) fluid.shapes.add(this);
			if(this.fluidEnabled) this.wake();
		}
	}
	,__immutable_midstep: function(name) {
		if(this.body != null && this.body.space != null && this.body.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
	}
	,copy: function() {
		var ret = null;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
		if(!this.zip_area_inertia) {
			ret.area = this.area;
			ret.inertia = this.inertia;
		} else ret.invalidate_area_inertia();
		if(!this.zip_sweepRadius) {
			ret.sweepRadius = this.sweepRadius;
			ret.sweepCoef = this.sweepCoef;
		} else ret.zip_sweepRadius = true;
		if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else {
			ret.zip_aabb = true;
			if(ret.body != null) ret.body.zip_aabb = true;
		}
		var o = ret.material;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = o;
		var o1 = ret.filter;
		o1.outer = null;
		o1.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o1;
		ret.material = this.material;
		ret.filter = this.filter;
		if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
		ret.fluidEnabled = this.fluidEnabled;
		ret.sensorEnabled = this.sensorEnabled;
		if(this.userData != null) ret.userData = Reflect.copy(this.userData);
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_nape.shape.ZPP_Shape
});
zpp_nape.shape.ZPP_Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
zpp_nape.shape.ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_nape.shape.ZPP_Circle.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Circle.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__clear: function() {
	}
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		if(this.body != null) this.body.wake();
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) this.body.wake();
	}
	,localCOM_immutable: function() {
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space";
	}
	,setupLocalCOM: function() {
		var me = this;
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
		this.wrap_localCOM.zpp_inner._isimmutable = $bind(this,this.localCOM_immutable);
	}
	,__validate_aabb: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape.Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape.Config.fluidAngularDrag * (1 + nape.Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__scale: function(sx,sy) {
		var factor;
		factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
		if(factor < 0) this.radius *= -factor; else this.radius *= factor;
		this.invalidate_radius();
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			this.localCOMx *= sx;
			this.localCOMy *= sy;
			this.invalidate_localCOM();
		}
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__rotate: function(x,y) {
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			var tx = 0.0;
			var ty = 0.0;
			tx = y * this.localCOMx - x * this.localCOMy;
			ty = this.localCOMx * x + this.localCOMy * y;
			this.localCOMx = tx;
			this.localCOMy = ty;
			this.invalidate_localCOM();
		}
	}
	,__transform: function(m) {
		var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
		if(det < 0) det = -det;
		this.radius *= Math.sqrt(det);
		var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
		this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
		this.localCOMx = t;
		this.invalidate_radius();
		this.invalidate_localCOM();
	}
	,__copy: function() {
		var ret = new nape.shape.Circle(this.radius).zpp_inner_zn;
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
		ret.zip_localCOM = false;
		return ret;
	}
	,__class__: zpp_nape.shape.ZPP_Circle
});
zpp_nape.shape.ZPP_Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
zpp_nape.shape.ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_nape.shape.ZPP_Edge.prototype = {
	free: function() {
		this.polygon = null;
	}
	,alloc: function() {
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_nape.shape.ZPP_Edge.internal = true;
			this.outer = new nape.shape.Edge();
			zpp_nape.shape.ZPP_Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,lnorm_validate: function() {
		if(this.polygon == null) throw "Error: Edge not currently in use";
		this.polygon.validate_laxi();
		this.wrap_lnorm.zpp_inner.x = this.lnormx;
		this.wrap_lnorm.zpp_inner.y = this.lnormy;
	}
	,gnorm_validate: function() {
		if(this.polygon == null) throw "Error: Edge not currently in use";
		if(this.polygon.body == null) throw "Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body";
		this.polygon.validate_gaxi();
		this.wrap_gnorm.zpp_inner.x = this.gnormx;
		this.wrap_gnorm.zpp_inner.y = this.gnormy;
	}
	,getlnorm: function() {
		this.wrap_lnorm = nape.geom.Vec2.get(this.lnormx,this.lnormy,null);
		this.wrap_lnorm.zpp_inner._immutable = true;
		this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
	}
	,getgnorm: function() {
		this.wrap_gnorm = nape.geom.Vec2.get(this.gnormx,this.gnormy,null);
		this.wrap_gnorm.zpp_inner._immutable = true;
		this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
	}
	,__class__: zpp_nape.shape.ZPP_Edge
};
zpp_nape.shape.ZPP_Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_nape.geom.ZPP_Vec2();
	this.gverts = new zpp_nape.geom.ZPP_Vec2();
	this.edges = new zpp_nape.util.ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
};
zpp_nape.shape.ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_nape.shape.ZPP_Polygon.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Polygon.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__clear: function() {
	}
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,lverts_pa_immutable: function() {
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space";
	}
	,gverts_pa_validate: function() {
		if(this.body == null) throw "Error: World vertex only makes sense when Polygon is contained in a rigid body";
		this.validate_gverts();
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_nape.geom.ZPP_Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed = new zpp_nape.shape.ZPP_Edge(); else {
					ed = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed1 = new zpp_nape.shape.ZPP_Edge(); else {
					ed1 = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				null;
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed2 = new zpp_nape.shape.ZPP_Edge(); else {
					ed2 = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				null;
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,lverts_modifiable: function() {
		this.immutable_midstep("Polygon::localVerts");
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	}
	,gverts_validate: function() {
		this.validate_gverts();
	}
	,edges_validate: function() {
		this.validate_lverts();
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_nape.util.ZPP_MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,getgverts: function() {
		var me = this;
		this.wrap_gverts = zpp_nape.util.ZPP_MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,getedges: function() {
		var me = this;
		this.wrap_edges = zpp_nape.util.ZPP_EdgeList.get(this.edges,true);
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) this.body.wake();
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) return (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape.Config.epsilon) return (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w1 = cx_ite;
						do {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape.Config.epsilon) pos = true; else if(dot1 < -nape.Config.epsilon) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							do {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape.Config.epsilon) pos = true; else if(dot2 < -nape.Config.epsilon) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.next;
						var u1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1;
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.next;
							var a = cx_ite2;
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2;
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) do {
								var b1 = this.lverts.next;
								if(u1 == a || u1 == b1 || v1 == a || v1 == b1) break;
								var sx1 = 0.0;
								var sy1 = 0.0;
								sx1 = u1.x - a.x;
								sy1 = u1.y - a.y;
								var vx1 = 0.0;
								var vy1 = 0.0;
								vx1 = v1.x - u1.x;
								vy1 = v1.y - u1.y;
								var qx1 = 0.0;
								var qy1 = 0.0;
								qx1 = b1.x - a.x;
								qy1 = b1.y - a.y;
								var den1 = vy1 * qx1 - vx1 * qy1;
								if(den1 * den1 > nape.Config.epsilon) {
									den1 = 1 / den1;
									var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
									if(t1 > nape.Config.epsilon && t1 < 1 - nape.Config.epsilon) {
										var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
										if(s1 > nape.Config.epsilon && s1 < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) do {
							var v2 = this.lverts.next;
							if(!cont) break;
							var cx_cont3 = true;
							var cx_ite3 = this.lverts.next;
							var a1 = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var b2 = cx_ite3;
								if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
									a1 = b2;
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var sx2 = 0.0;
								var sy2 = 0.0;
								sx2 = u1.x - a1.x;
								sy2 = u1.y - a1.y;
								var vx2 = 0.0;
								var vy2 = 0.0;
								vx2 = v2.x - u1.x;
								vy2 = v2.y - u1.y;
								var qx2 = 0.0;
								var qy2 = 0.0;
								qx2 = b2.x - a1.x;
								qy2 = b2.y - a1.y;
								var den2 = vy2 * qx2 - vx2 * qy2;
								if(den2 * den2 > nape.Config.epsilon) {
									den2 = 1 / den2;
									var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
									if(t2 > nape.Config.epsilon && t2 < 1 - nape.Config.epsilon) {
										var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
										if(s2 > nape.Config.epsilon && s2 < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont3 = false;
											break;
										}
									}
								}
								a1 = b2;
								cx_ite3 = cx_ite3.next;
							}
							if(cx_cont3) do {
								var b3 = this.lverts.next;
								if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) break;
								var sx3 = 0.0;
								var sy3 = 0.0;
								sx3 = u1.x - a1.x;
								sy3 = u1.y - a1.y;
								var vx3 = 0.0;
								var vy3 = 0.0;
								vx3 = v2.x - u1.x;
								vy3 = v2.y - u1.y;
								var qx3 = 0.0;
								var qy3 = 0.0;
								qx3 = b3.x - a1.x;
								qy3 = b3.y - a1.y;
								var den3 = vy3 * qx3 - vx3 * qy3;
								if(den3 * den3 > nape.Config.epsilon) {
									den3 = 1 / den3;
									var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
									if(t3 > nape.Config.epsilon && t3 < 1 - nape.Config.epsilon) {
										var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
										if(s3 > nape.Config.epsilon && s3 < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		} else return this.validation;
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem;
		if(ite == null) rem = this.gverts.next; else rem = ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2;
			if(ite2 == null) rem2 = this.edges.head.elt; else rem2 = ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) return;
		if(this.lverts.next.next == null) return;
		if(this.lverts.next.next.next == null) return;
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt;
			if(cur.next == null) nxt = this.lverts.next; else nxt = cur.next;
			var u = cur;
			var v = nxt;
			if(zpp_nape.geom.ZPP_VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape.Config.epsilon * nape.Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) return;
		var removed;
		do {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1;
				if(pre1.next == null) cur1 = this.lverts.next; else cur1 = pre1.next;
				var nxt1;
				if(cur1.next == null) nxt1 = this.lverts.next; else nxt1 = cur1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = nxt1;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) pre1 = pre1.next; else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null?null:pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
		} while(removed);
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v1.x;
			dy1 = u.y - v1.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.head;
				var cx_ite = this.gverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v = cx_ite;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite = cx_ite.next;
				}
				var v1 = this.gverts.next;
				var e1 = ite.elt;
				ite = ite.next;
				e1.gp0 = u;
				e1.gp1 = v1;
				e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
				e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful bounds";
		var p0 = this.gverts.next;
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.next;
		var p0 = this.gverts.next;
		var l = li;
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) maxRadius = r;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) break;
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) minRadius = 0;
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w2.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		if(this.lverts.length < 3) throw "Error: Polygon's with less than 3 vertices have no meaningful angDrag";
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta;
				if(t > 1) ta = 1; else ta = t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape.Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb;
				if(t < 0) tb = 0; else tb = t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape.Config.fluidVacuumDrag * (1 - tb) * edge.length * nape.Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = this.lverts.next;
			var v1 = cx_itej;
			var edge1 = ei.elt;
			ei = ei.next;
			perim += edge1.length;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = v1.x - u.x;
			dy1 = v1.y - u.y;
			accum += edge1.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
			var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
			if(t3 > 0) {
				var ta1;
				if(t3 > 1) ta1 = 1; else ta1 = t3;
				var cx2 = 0.0;
				var cy2 = 0.0;
				cx2 = u.x;
				cy2 = u.y;
				var t4 = ta1;
				cx2 += dx1 * t4;
				cy2 += dy1 * t4;
				var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
				var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
				var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
				accum += dots2 * ta1 * edge1.length * nape.Config.fluidAngularDrag;
			}
			if(t3 < 1) {
				var tb1;
				if(t3 < 0) tb1 = 0; else tb1 = t3;
				var cx3 = 0.0;
				var cy3 = 0.0;
				cx3 = u.x;
				cy3 = u.y;
				var t5 = tb1;
				cx3 += dx1 * t5;
				cy3 += dy1 * t5;
				var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
				var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
				var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
				accum += dots3 * nape.Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape.Config.fluidAngularDrag;
			}
		} while(false);
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_localCOM: function() {
		if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful localCOM";
		if(this.lverts.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
		} else if(this.lverts.next.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
			var t = 1.0;
			this.localCOMx += this.lverts.next.next.x * t;
			this.localCOMy += this.lverts.next.next.y * t;
			var t1 = 0.5;
			this.localCOMx *= t1;
			this.localCOMy *= t1;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				area += v.x * (w.y - u.y);
				var cf = w.y * v.x - w.x * v.y;
				this.localCOMx += (v.x + w.x) * cf;
				this.localCOMy += (v.y + w.y) * cf;
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w1 = cx_ite;
			area += v.x * (w1.y - u.y);
			var cf1 = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf1;
			this.localCOMy += (v.y + w1.y) * cf1;
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite;
			area += v.x * (w2.y - u.y);
			var cf2 = w2.y * v.x - w2.x * v.y;
			this.localCOMx += (v.x + w2.x) * cf2;
			this.localCOMy += (v.y + w2.y) * cf2;
			area = 1 / (3 * area);
			var t2 = area;
			this.localCOMx *= t2;
			this.localCOMy *= t2;
		}
	}
	,localCOM_validate: function() {
		if(this.lverts.next == null) throw "Error: An empty polygon does not have any meaningful localCOM";
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += delx * t;
			p.y += dely * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__scale: function(sx,sy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			p.x *= sx;
			p.y *= sy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__rotate: function(ax,ay) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var tempx = 0.0;
			var tempy = 0.0;
			tempx = ay * p.x - ax * p.y;
			tempy = p.x * ax + p.y * ay;
			p.x = tempx;
			p.y = tempy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__transform: function(mat) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
			p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
			p.x = t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__copy: function() {
		var ret = new nape.shape.Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
		return ret;
	}
	,__class__: zpp_nape.shape.ZPP_Polygon
});
zpp_nape.space = {};
zpp_nape.space.ZPP_Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
zpp_nape.space.ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_nape.space.ZPP_Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
	}
	,remove: function(shape) {
		if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
		} else this.dynab.__sync(shape);
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,updateAABBShape: function(aabb) {
		if(this.aabbShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape.shape.Polygon(nape.shape.Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
		} else {
			var ab = this.aabbShape.zpp_inner.aabb;
			var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
			var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(sx);
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_d(sy);
			this.matrix.set_tx(aabb.minx - sx * ab.minx);
			this.matrix.set_ty(aabb.miny - sy * ab.miny);
			this.aabbShape.transform(this.matrix);
		}
		this.aabbShape.zpp_inner.validate_aabb();
		this.aabbShape.zpp_inner.polygon.validate_gaxi();
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,updateCircShape: function(x,y,r) {
		if(this.circShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.circShape = new nape.shape.Circle(r,nape.geom.Vec2.get(x,y,null)));
		} else {
			var ci = this.circShape.zpp_inner.circle;
			var ss = r / ci.radius;
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(this.matrix.set_d(ss));
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_tx(x - ss * ci.localCOMx);
			this.matrix.set_ty(y - ss * ci.localCOMy);
			this.circShape.transform(this.matrix);
		}
		this.circShape.zpp_inner.validate_aabb();
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,validateShape: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
		if(s.zip_aabb) {
			if(s.body != null) {
				s.zip_aabb = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
			}
		}
		if(s.zip_worldCOM) {
			if(s.body != null) {
				s.zip_worldCOM = false;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.body.validate_axis();
				s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
				s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			}
		}
	}
	,shapesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,rayCast: function(ray,inner,filter) {
		return null;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return null;
	}
	,__class__: zpp_nape.space.ZPP_Broadphase
};
zpp_nape.space.ZPP_AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
zpp_nape.space.ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_nape.space.ZPP_AABBNode.prototype = {
	alloc: function() {
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) this.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			this.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		null;
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: zpp_nape.space.ZPP_AABBNode
};
zpp_nape.space.ZPP_AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
zpp_nape.space.ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_nape.space.ZPP_AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,__class__: zpp_nape.space.ZPP_AABBPair
};
zpp_nape.space.ZPP_AABBTree = function() {
	this.root = null;
};
zpp_nape.space.ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_nape.space.ZPP_AABBTree.prototype = {
	clear: function() {
		if(this.root == null) return;
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var node;
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			node = ret;
			if(node.child1 == null) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,insertLeaf: function(leaf) {
		this.inlined_insertLeaf(leaf);
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!(node.child1 == null)) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				var cost1;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
				if(child1.child1 == null) cost1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea = child1.aabb.perimeter();
					var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					cost1 = narea - oarea + icost;
				}
				var cost2;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
				if(child2.child1 == null) cost2 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea1 = child2.aabb.perimeter();
					var narea1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					cost2 = narea1 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) break; else if(cost1 < cost2) node = child1; else node = child2;
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) nparent = new zpp_nape.space.ZPP_AABBNode(); else {
				nparent = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) nparent.aabb = new zpp_nape.geom.ZPP_AABB(); else {
				nparent.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
				zpp_nape.geom.ZPP_AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			null;
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child11 = node.child1;
				var child21 = node.child2;
				node.height = 1 + (function($this) {
					var $r;
					var x = child11.height;
					var y = child21.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node.aabb.setCombine(child11.aabb,child21.aabb);
				node = node.parent;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling;
			if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					node.height = 1 + (function($this) {
						var $r;
						var x = child1.height;
						var y = child2.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o1 = parent;
				o1.free();
				o1.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o1;
			}
		}
	}
	,balance: function(a) {
		if(a.child1 == null || a.height < 2) return a; else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
				} else this.root = c;
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x1 = a.height;
						var y1 = f.height;
						$r = x1 > y1?x1:y1;
						return $r;
					}(this));
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x2 = b.height;
						var y2 = f.height;
						$r = x2 > y2?x2:y2;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x3 = a.height;
						var y3 = g.height;
						$r = x3 > y3?x3:y3;
						return $r;
					}(this));
				}
				return c;
			} else if(balance < -1) {
				var f1 = b.child1;
				var g1 = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
				} else this.root = b;
				if(f1.height > g1.height) {
					b.child2 = f1;
					a.child1 = g1;
					g1.parent = a;
					a.aabb.setCombine(c.aabb,g1.aabb);
					b.aabb.setCombine(a.aabb,f1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x4 = c.height;
						var y4 = g1.height;
						$r = x4 > y4?x4:y4;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x5 = a.height;
						var y5 = f1.height;
						$r = x5 > y5?x5:y5;
						return $r;
					}(this));
				} else {
					b.child2 = g1;
					a.child1 = f1;
					f1.parent = a;
					a.aabb.setCombine(c.aabb,f1.aabb);
					b.aabb.setCombine(a.aabb,g1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x6 = c.height;
						var y6 = f1.height;
						$r = x6 > y6?x6:y6;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x7 = a.height;
						var y7 = g1.height;
						$r = x7 > y7?x7:y7;
						return $r;
					}(this));
				}
				return b;
			} else return a;
		}
	}
	,__class__: zpp_nape.space.ZPP_AABBTree
};
zpp_nape.space.ZPP_DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_nape.space.ZPP_AABBTree();
	this.dtree = new zpp_nape.space.ZPP_AABBTree();
};
zpp_nape.space.ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_nape.space.ZPP_DynAABBPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_DynAABBPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	dyn: function(shape) {
		if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
	}
	,__insert: function(shape) {
		var node;
		if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) node = new zpp_nape.space.ZPP_AABBNode(); else {
			node = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) node.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			node.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		null;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) break;
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) this.syncs = cur.snext; else pre.snext = cur.snext;
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre1 = null;
			var cur1 = this.moves;
			while(cur1 != null) {
				if(cur1 == node) break;
				pre1 = cur1;
				cur1 = cur1.mnext;
			}
			if(pre1 == null) this.moves = cur1.mnext; else pre1.mnext = cur1.mnext;
			cur1.mnext = null;
			node.moved = false;
		}
		var pre2 = null;
		var cur2 = this.pairs;
		while(cur2 != null) {
			var nxt = cur2.next;
			if(cur2.n1 == node || cur2.n2 == node) {
				if(pre2 == null) this.pairs = nxt; else pre2.next = nxt;
				if(cur2.arb != null) cur2.arb.pair = null;
				cur2.arb = null;
				cur2.n1.shape.pairs.remove(cur2);
				cur2.n2.shape.pairs.remove(cur2);
				var o = cur2;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur2 = nxt;
				continue;
			}
			pre2 = cur2;
			cur2 = nxt;
		}
		while(!(shape.pairs.head == null)) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) cur3.n2.shape.pairs.remove(cur3); else cur3.n1.shape.pairs.remove(cur3);
			if(cur3.arb != null) cur3.arb.pair = null;
			cur3.arb = null;
			var o1 = cur3;
			o1.n1 = o1.n2 = null;
			o1.sleeping = false;
			o1.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.free();
		o2.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = o2;
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			var sync;
			sync = node.dyn != (shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree;
						if(node.dyn) tree = this.dtree; else tree = this.stree;
						tree.inlined_removeLeaf(node);
					} else node.first_sync = false;
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
							}
						}
					}
					aabb.setExpand(shape.aabb,3.0);
					var tree1;
					if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
					tree1.inlined_insertLeaf(node);
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else while(this.syncs != null) {
				var node1;
				var ret = this.syncs;
				this.syncs = ret.snext;
				ret.snext = null;
				node1 = ret;
				var shape1 = node1.shape;
				if(!node1.first_sync) {
					var tree2;
					if(node1.dyn) tree2 = this.dtree; else tree2 = this.stree;
					tree2.inlined_removeLeaf(node1);
				} else node1.first_sync = false;
				var aabb1 = node1.aabb;
				if(!this.space.continuous) {
					if(shape1.zip_aabb) {
						if(shape1.body != null) {
							shape1.zip_aabb = false;
							if(shape1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape1.circle.__validate_aabb(); else shape1.polygon.__validate_aabb();
						}
					}
				}
				aabb1.setExpand(shape1.aabb,3.0);
				var tree3;
				if(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node1.dyn = false:node1.dyn = !shape1.body.component.sleeping) tree3 = this.dtree; else tree3 = this.stree;
				tree3.inlined_insertLeaf(node1);
				node1.synced = false;
				if(!node1.moved) {
					node1.moved = true;
					node1.mnext = this.moves;
					this.moves = node1;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree;
				if(node.dyn) tree = this.dtree; else tree = this.stree;
				tree.inlined_removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree1;
			if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
			tree1.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var leaf;
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			leaf = ret;
			if(leaf.moved) continue;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1;
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				node1 = ret1;
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s;
							if(lshape.pairs.length < shape1.pairs.length) s = lshape; else s = shape1;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape1.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node2;
				var ret2 = stack;
				stack = ret2.next;
				ret2.next = null;
				node2 = ret2;
				if(node2 == leaf) continue;
				if(node2.child1 == null) {
					var shape2 = node2.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node2.aabb)) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1;
							if(lshape.pairs.length < shape2.pairs.length) s1 = lshape; else s1 = shape2;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p1 = new zpp_nape.space.ZPP_AABBPair(); else {
								p1 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							null;
							p1.n1 = leaf;
							p1.n2 = node2;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							lshape.pairs.inlined_add(p1);
							shape2.pairs.inlined_add(p1);
						}
					}
				} else if(ab.intersect(node2.aabb)) {
					if(node2.child1 != null) {
						node2.child1.next = stack;
						stack = node2.child1;
					}
					if(node2.child2 != null) {
						node2.child2.next = stack;
						stack = node2.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var leaf1;
			var ret3 = this.moves;
			this.moves = ret3.mnext;
			ret3.mnext = null;
			leaf1 = ret3;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) continue;
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var node3;
				var ret4 = stack1;
				stack1 = ret4.next;
				ret4.next = null;
				node3 = ret4;
				if(node3 == leaf1) continue;
				if(node3.child1 == null) {
					var shape3 = node3.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node3.aabb)) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2;
							if(lshape1.pairs.length < shape3.pairs.length) s2 = lshape1; else s2 = shape3;
							var p2 = null;
							var cx_ite2 = s2.pairs.head;
							while(cx_ite2 != null) {
								var px2 = cx_ite2.elt;
								if(px2.id == id2 && px2.di == di2) {
									p2 = px2;
									break;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p2 = new zpp_nape.space.ZPP_AABBPair(); else {
								p2 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							null;
							p2.n1 = leaf1;
							p2.n2 = node3;
							p2.id = id2;
							p2.di = di2;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							lshape1.pairs.inlined_add(p2);
							shape3.pairs.inlined_add(p2);
						}
					}
				} else if(ab1.intersect(node3.aabb)) {
					if(node3.child1 != null) {
						node3.child1.next = stack1;
						stack1 = node3.child1;
					}
					if(node3.child2 != null) {
						node3.child2.next = stack1;
						stack1 = node3.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var node4;
				var ret5 = stack1;
				stack1 = ret5.next;
				ret5.next = null;
				node4 = ret5;
				if(node4 == leaf1) continue;
				if(node4.child1 == null) {
					var shape4 = node4.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node4.aabb)) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3;
							if(lshape1.pairs.length < shape4.pairs.length) s3 = lshape1; else s3 = shape4;
							var p3 = null;
							var cx_ite3 = s3.pairs.head;
							while(cx_ite3 != null) {
								var px3 = cx_ite3.elt;
								if(px3.id == id3 && px3.di == di3) {
									p3 = px3;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p3 = new zpp_nape.space.ZPP_AABBPair(); else {
								p3 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							null;
							p3.n1 = leaf1;
							p3.n2 = node4;
							p3.id = id3;
							p3.di = di3;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							lshape1.pairs.inlined_add(p3);
							shape4.pairs.inlined_add(p3);
						}
					}
				} else if(ab1.intersect(node4.aabb)) {
					if(node4.child1 != null) {
						node4.child1.next = stack1;
						stack1 = node4.child1;
					}
					if(node4.child2 != null) {
						node4.child2.next = stack1;
						stack1 = node4.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur.n1.shape.pairs.inlined_try_remove(cur);
				cur.n2.shape.pairs.inlined_try_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b1 = s11.body;
			var s21 = cur.n2.shape;
			var b2 = s21.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					cur.sleeping = true;
					if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s11.aabb.intersect(s21.aabb)) {
				var oarb = cur.arb;
				if(discrete) cur.arb = space.narrowPhase(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false);
				if(cur.arb == null) {
					if(oarb != null) oarb.pair = null;
				} else cur.arb.pair = cur;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) this.pairs.arb.pair = null;
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
			var o = this.pairs;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(!ret.has(body1)) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) {
								if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(body1);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(body1);
							}
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) ret.push(node2.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) ret.push(node3.shape.outer);
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) ret.push(node2.shape.outer);
								} else if(ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(node2.shape.outer);
							} else if(!containment || ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body1 = node1.shape.body.outer;
									if(!ret.has(body1)) ret.push(body1);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body2 = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body2)) {
										var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body2) && col) ret.push(body2); else if(!col) {
											ret.remove(body2);
											this.failed.push(body2);
										}
									}
								} else if(!ret.has(body2) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body2);
							} else if(containment) {
								if(!this.failed.has(body2)) {
									var col1 = ab.contains(node.shape.aabb);
									if(!ret.has(body2) && col1) ret.push(body2); else if(!col1) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else if(!ret.has(body2) && ab.contains(node.shape.aabb)) ret.push(body2);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							var body3 = node2.shape.body.outer;
							if(!ret.has(body3)) ret.push(body3);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) {
									var body4 = node3.shape.body.outer;
									if(!ret.has(body4)) ret.push(body4);
								}
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						var body5 = node2.shape.body.outer;
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body5)) {
										var col2 = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
										if(!ret.has(body5) && col2) ret.push(body5); else if(!col2) {
											ret.remove(body5);
											this.failed.push(body5);
										}
									}
								} else if(!ret.has(body5) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(body5);
							} else if(containment) {
								if(!this.failed.has(body5)) {
									var col3 = ab.contains(node2.shape.aabb);
									if(!ret.has(body5) && col3) ret.push(body5); else if(!col3) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else if(!ret.has(body5) && ab.contains(node2.shape.aabb)) ret.push(body5);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var mint = ray.maxdist;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < mint) {
					this.dtree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.dtree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < mint) {
					this.stree.root.rayt = t1;
					var pre1 = null;
					var cx_ite1 = this.openlist.head;
					while(cx_ite1 != null) {
						var j1 = cx_ite1.elt;
						if(this.stree.root.rayt < j1.rayt) break;
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					this.openlist.inlined_insert(pre1,this.stree.root);
				}
			}
		}
		var minres = null;
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.rayt >= mint) break;
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					var result;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(shape.circle,inner,mint); else if(ray.aabbtest(shape.aabb)) result = ray.polysect(shape.polygon,inner,mint); else result = null;
					if(result != null) {
						if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						mint = result.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							minres.zpp_inner.free();
						}
						minres = result;
					}
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < mint) {
							cnode.child1.rayt = t2;
							var pre2 = null;
							var cx_ite2 = this.openlist.head;
							while(cx_ite2 != null) {
								var j2 = cx_ite2.elt;
								if(cnode.child1.rayt < j2.rayt) break;
								pre2 = cx_ite2;
								cx_ite2 = cx_ite2.next;
							}
							this.openlist.inlined_insert(pre2,cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < mint) {
							cnode.child2.rayt = t3;
							var pre3 = null;
							var cx_ite3 = this.openlist.head;
							while(cx_ite3 != null) {
								var j3 = cx_ite3.elt;
								if(cnode.child2.rayt < j3.rayt) break;
								pre3 = cx_ite3;
								cx_ite3 = cx_ite3.next;
							}
							this.openlist.inlined_insert(pre3,cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var inf = ray.maxdist >= Math.POSITIVE_INFINITY;
		var ret;
		if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				if(inf) this.openlist.add(this.dtree.root); else {
					var t = ray.aabbsect(this.dtree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				if(inf) this.openlist.add(this.stree.root); else {
					var t1 = ray.aabbsect(this.stree.root.aabb);
					if(t1 >= 0 && t1 < ray.maxdist) this.openlist.add(this.stree.root);
				}
			}
		}
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						if(inf) this.openlist.add(cnode.child1); else {
							var t2 = ray.aabbsect(cnode.child1.aabb);
							if(t2 >= 0 && t2 < ray.maxdist) this.openlist.add(cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						if(inf) this.openlist.add(cnode.child2); else {
							var t3 = ray.aabbsect(cnode.child2.aabb);
							if(t3 >= 0 && t3 < ray.maxdist) this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_DynAABBPhase
});
zpp_nape.space.ZPP_Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_nape.util.ZNPList_ZPP_Component();
};
zpp_nape.space.ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_nape.space.ZPP_Island.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
	}
	,alloc: function() {
		this.waket = 0;
	}
	,__class__: zpp_nape.space.ZPP_Island
};
zpp_nape.space.ZPP_Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
zpp_nape.space.ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_nape.space.ZPP_Component.prototype = {
	free: function() {
		this.body = null;
		this.constraint = null;
	}
	,alloc: function() {
	}
	,reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,__class__: zpp_nape.space.ZPP_Component
};
zpp_nape.space.ZPP_CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
};
zpp_nape.space.ZPP_CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_nape.space.ZPP_CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_nape.space.ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.space.ZPP_CallbackSet(); else {
		ret = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.COLLISIONstamp = 0;
		this.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.SENSORstamp = 0;
		this.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.FLUIDstamp = 0;
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else return false;
	}
	,try_remove_arb: function(x) {
		return this.arbiters.inlined_try_remove(x);
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_try_remove(x);
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return retvar;
	}
	,really_empty: function() {
		return this.arbiters.head == null;
	}
	,sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_CallbackSet
};
zpp_nape.space.ZPP_CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) this.cbsets = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
		this.cbsets = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_nape.callbacks.ZPP_CbSet.setlt;
	this.space = space;
};
zpp_nape.space.ZPP_CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_nape.space.ZPP_CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) return null;
		var fake;
		if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) fake = new zpp_nape.callbacks.ZPP_CbSet(); else {
			fake = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		null;
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) ret = res.data; else {
			var set = zpp_nape.callbacks.ZPP_CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!(set.cbpairs.head == null)) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,clear: function() {
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs;
		if(a.cbpairs.length < b.cbpairs.length) pairs = a.cbpairs; else pairs = b.cbpairs;
		var cx_ite = pairs.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_nape.callbacks.ZPP_CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) b.cbpairs.add(ret);
		}
		if(ret.zip_listeners) {
			ret.zip_listeners = false;
			ret.__validate();
		}
		return ret;
	}
	,valid_listener: function(i) {
		return i.space == this.space;
	}
	,__class__: zpp_nape.space.ZPP_CbSetManager
};
zpp_nape.space.ZPP_Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_nape.util.ZNPList_ZPP_ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_nape.callbacks.ZPP_Callback.internal = true;
	this.precb = new nape.callbacks.PreCallback();
	this.precb.zpp_inner = new zpp_nape.callbacks.ZPP_Callback();
	zpp_nape.callbacks.ZPP_Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.c_arbiters_true = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new zpp_nape.util.ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new zpp_nape.util.ZNPList_ZPP_SensorArbiter();
	this.islands = new zpp_nape.space.ZPP_Island();
	this.live = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_live = zpp_nape.util.ZPP_BodyList.get(this.live,true);
	this.staticsleep = new zpp_nape.util.ZNPList_ZPP_Body();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_livecon = zpp_nape.util.ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_nape.phys.ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_nape.callbacks.ZPP_Callback();
	this.midstep = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
	this.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_nape.space.ZPP_CallbackSet();
	this.mrca1 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.mrca2 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.prelisteners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.cbsets = new zpp_nape.space.ZPP_CbSetManager(this);
};
zpp_nape.space.ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_nape.space.ZPP_Space.prototype = {
	getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_invalidate: function(x) {
		if(this.midstep) throw "Error: Space::gravity cannot be set during space step";
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			var o = x1;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.compounds.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			stack.add(i);
			cx_ite1 = cx_ite1.next;
		}
		while(!(stack.head == null)) {
			var s = stack.pop_unsafe();
			var cx_ite2 = s.bodies.head;
			while(cx_ite2 != null) {
				var x2 = cx_ite2.elt;
				var o1 = x2;
				if(!o1.world) {
					o1.component.waket = this.stamp + (this.midstep?0:1);
					if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
					if(o1.component.sleeping) this.really_wake(o1,false);
				}
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = s.compounds.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				stack.add(i1);
				cx_ite3 = cx_ite3.next;
			}
		}
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,clear: function() {
		while(!(this.listeners.head == null)) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!(this.callbackset_list.next == null)) {
			var c1 = this.callbackset_list.pop_unsafe();
			c1.arbiters.clear();
			var o = c1;
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
			zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
		}
		while(!(this.c_arbiters_true.head == null)) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!(this.c_arbiters_false.head == null)) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			arb1.retire();
		}
		while(!(this.s_arbiters.head == null)) {
			var arb2 = this.s_arbiters.pop_unsafe();
			arb2.retire();
		}
		while(!(this.f_arbiters.head == null)) {
			var arb3 = this.f_arbiters.pop_unsafe();
			arb3.retire();
		}
		this.bphase.clear();
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c2 = i.comps.pop_unsafe();
						c2.sleeping = false;
						c2.island = null;
						c2.parent = c2;
						c2.rank = 0;
					}
					var o1 = i;
					o1.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o1;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!(this.constraints.head == null)) {
			var c3 = this.constraints.pop_unsafe();
			if(c3.component != null) {
				var i1 = c3.component.island;
				if(i1 != null) {
					while(!(i1.comps.head == null)) {
						var c4 = i1.comps.pop_unsafe();
						c4.sleeping = false;
						c4.island = null;
						c4.parent = c4;
						c4.rank = 0;
					}
					var o2 = i1;
					o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o2;
				}
			}
			c3.removedFromSpace();
			c3.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		while(!(this.compounds.head == null)) {
			var c5 = this.compounds.pop_unsafe();
			stack.add(c5);
		}
		while(!(stack.head == null)) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(!(i2.comps.head == null)) {
							var c6 = i2.comps.pop_unsafe();
							c6.sleeping = false;
							c6.island = null;
							c6.parent = c6;
							c6.rank = 0;
						}
						var o3 = i2;
						o3.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o3;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.head;
			while(cx_ite1 != null) {
				var c7 = cx_ite1.elt;
				if(c7.component != null) {
					var i3 = c7.component.island;
					if(i3 != null) {
						while(!(i3.comps.head == null)) {
							var c8 = i3.comps.pop_unsafe();
							c8.sleeping = false;
							c8.island = null;
							c8.parent = c8;
							c8.rank = 0;
						}
						var o4 = i3;
						o4.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o4;
					}
				}
				c7.removedFromSpace();
				c7.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.head;
			while(cx_ite2 != null) {
				var i4 = cx_ite2.elt;
				stack.add(i4);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			this.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		if(this.midstep) throw "Error: Space::bodies cannot be set during space step()";
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			this.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		if(this.midstep) throw "Error: Space::compounds cannot be set during space step()";
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			this.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		if(this.midstep) throw "Error: Space::constraints cannot be set during space step()";
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			this.addListener(x.zpp_inner);
			return true;
		} else return false;
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,listeners_modifiable: function() {
		if(this.midstep) throw "Error: Space::listeners cannot be set during space step()";
	}
	,revoke_listener: function(x) {
	}
	,unrevoke_listener: function(x) {
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) null;
	}
	,remListener: function(x) {
		if(x.interaction != null) null;
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_try_remove(cb);
		cb.int2.cbsets.inlined_try_remove(cb);
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
		p.type = new_type;
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.static_validation(p);
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,true);
		}
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) dontwake = false;
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) deleting = false;
		var _g = this;
		var body = s.body;
		if(!deleting) body.wake();
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = [cx_ite.elt];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset,xarb) {
								return function(listener) {
									if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o1 = xarb[0].b2;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep?0:1);
						if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
						if(o1.component.sleeping) this.really_wake(o1,false);
					}
				}
				xarb[0].cleared = true;
				if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
				if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
				if(xarb[0].pair != null) {
					xarb[0].pair.arb = null;
					xarb[0].pair = null;
				}
				xarb[0].active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) flag = -1;
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			this.static_validation(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) flag = -1;
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep?0:1);
				if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
				if(o1.component.sleeping) this.really_wake(o1,true);
			}
			this.live.remove(body);
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep?0:1);
				if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
				if(o2.component.sleeping) this.really_wake(o2,true);
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return this.bphase.shapesUnderPoint(x,y,filter,output);
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,shapesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,bodiesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,shapesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.shapesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,bodiesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.bodiesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,shapesInShape: function(shape,cont,filter,output) {
		return this.bphase.shapesInShape(shape,cont,filter,output);
	}
	,bodiesInShape: function(shape,cont,filter,output) {
		return this.bphase.bodiesInShape(shape,cont,filter,output);
	}
	,rayCast: function(ray,inner,filter) {
		return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
	}
	,convexCast: function(shape,deltaTime,filter,dynamics) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var minAxisx = 0.0;
		var minAxisy = 0.0;
		minAxisx = 0;
		minAxisy = 0;
		var minPosx = 0.0;
		var minPosy = 0.0;
		minPosx = 0;
		minPosy = 0;
		var mins = null;
		var mint = deltaTime + 1;
		var _g;
		list.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0 && toi.toi < mint) {
					mint = toi.toi;
					minAxisx = toi.axis.x;
					minAxisy = toi.axis.y;
					minPosx = toi.c2.x;
					minPosy = toi.c2.y;
					mins = s;
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		if(mint <= deltaTime) return zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-minAxisx,-minAxisy,null),nape.geom.Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
	}
	,prepareCast: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
	}
	,convexMultiCast: function(shape,deltaTime,filter,dynamics,output) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var ret;
		if(output == null) ret = new nape.geom.ConvexResultList(); else ret = output;
		var _g;
		list.zpp_inner.valmod();
		_g = nape.shape.ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0) {
					var res = zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-toi.axis.x,-toi.axis.y,null),nape.geom.Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
					var pre = null;
					var cx_ite = ret.zpp_inner.inner.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if((function($this) {
							var $r;
							if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							$r = res.zpp_inner.toiDistance;
							return $r;
						}(this)) < (function($this) {
							var $r;
							if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							$r = j.zpp_inner.toiDistance;
							return $r;
						}(this))) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					ret.zpp_inner.inner.inlined_insert(pre,res);
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		return ret;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_nape.callbacks.ZPP_Callback.zpp_pool == null) cb = new zpp_nape.callbacks.ZPP_Callback(); else {
			cb = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		null;
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _g = this;
		if(this.midstep) throw "Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!";
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!(xxlist.head == null) && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				do {
					numMerges = 0;
					left = head;
					tail = head = null;
					while(left != null) {
						numMerges++;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							leftSize++;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								rightSize--;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else {
								nxt = right;
								right = right.next;
								rightSize--;
							}
							if(tail != null) tail.next = nxt; else head = nxt;
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
				} while(numMerges > 1);
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) cur2.invalidate_pos();
			if(urot) cur2.invalidate_rot();
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = this.live.head;
		while(cx_ite3 != null) {
			var cur3 = cx_ite3.elt;
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) cur3.invalidate_pos();
			if(urot1) cur3.invalidate_rot();
			cx_ite3 = cx_ite3.next;
		}
		var pre = null;
		var cx_ite4 = this.staticsleep.head;
		while(cx_ite4 != null) {
			var b = cx_ite4.elt;
			if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite4 = cx_ite4.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite4 = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite4;
			cx_ite4 = cx_ite4.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite5 = this.callbackset_list.next;
		while(cx_ite5 != null) {
			var set = [cx_ite5];
			if(set[0].arbiters.head == null) {
				cx_ite5 = this.callbackset_list.inlined_erase(pre1);
				var inf = set[0].int1.id + " " + set[0].int2.id;
				var o = set[0];
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				null;
				o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
				zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_nape.callbacks.ZPP_CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
				return function(x) {
					if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
						var cb = _g.push_callback(x);
						cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING;
						zpp_nape.phys.ZPP_Interactor.int_callback(set[0],x,cb);
						cb.set = set[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite5;
			cx_ite5 = cx_ite5.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
				var o1 = cb1.listener.body;
				o1.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
				var o2 = cb1.listener.constraint;
				o2.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION) {
				var o3 = cb1.listener.interaction;
				o3.handleri(cb1.wrapper_int());
			}
			var o4 = cb1;
			o4.int1 = o4.int2 = null;
			o4.body = null;
			o4.constraint = null;
			o4.listener = null;
			if(o4.wrap_arbiters != null) o4.wrap_arbiters.zpp_inner.inner = null;
			o4.set = null;
			o4.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = o4;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_nape.geom.ZPP_Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,nape.Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
							zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) break;
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				b11.sweepIntegrate(curTimeAlpha * deltaTime);
				b11.sweepValidate(minTOI.s1);
			}
			if(!b21.sweepFrozen) {
				b21.sweepIntegrate(curTimeAlpha * deltaTime);
				b21.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0)) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				if(!b11.sweepFrozen && !(b11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b11.sweepFrozen = true;
					if(minTOI.failed) b11.angvel = b11.sweep_angvel = 0; else if(minTOI.slipped) b11.angvel = b11.sweep_angvel *= nape.Config.angularCCDSlipScale; else b11.angvel = b11.sweep_angvel;
				}
				if(!b21.sweepFrozen && !(b21.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b21.sweepFrozen = true;
					if(minTOI.failed) b21.angvel = b21.sweep_angvel = 0; else if(minTOI.slipped) b21.angvel = b21.sweep_angvel *= nape.Config.angularCCDSlipScale; else b21.angvel = b21.sweep_angvel;
				}
			}
		}
		while(!(this.toiEvents.head == null)) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o3 = toi1;
			o3.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o3;
		}
		var cx_ite1 = this.kinematics.head;
		while(cx_ite1 != null) {
			var cur = cx_ite1.elt;
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			if(!cur1.sweepFrozen) cur1.sweepIntegrate(deltaTime);
			cur1.sweepTime = 0;
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
		if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
				toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
			if(stat && !kin) {
				if(!(s1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
				} else zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				if(in_arb != null) toi.arbiter = in_arb.colarb; else toi.arbiter = null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else b.component.woken = true;
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else con.component.woken = true;
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
							if(callbackset != null) {
								while(!(callbackset.arbiters.head == null)) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!cb1.manager.pair(cb1,cb2).empty_intersection()) {
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elt;
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(!(i.comps.head == null)) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep?0:1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
						} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_nape.space.ZPP_Island.zpp_pool;
		zpp_nape.space.ZPP_Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) fst = false;
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,fst);
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) fst = false;
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) this.wake_constraint(con);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
					if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
					if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
					if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep?0:1);
							if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
							if(o2.component.sleeping) this.really_wake(o2,false);
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
			if(!fst && !this.bphase.is_sweep && !(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite2 = cx_ite2.next;
				}
			}
		} else this.wakeIsland(o.component.island);
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) fst = false;
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep?0:1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) this.constraintCbWake(con);
				} else this.wakeIsland(con.component.island);
				return true;
			} else return false;
		} else return false;
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) xr = arb.b1.component; else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) yr = arb.b2.component; else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) xr1 = arb1.b1.component; else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) yr1 = arb1.b2.component; else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			var con = cx_ite2.elt;
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(!(this.live.head == null)) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root;
			if(oc == oc.parent) root = oc; else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_nape.space.ZPP_Island.zpp_pool == null) root.island = new zpp_nape.space.ZPP_Island(); else {
					root.island = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.live_constraints.head == null)) {
			var o1 = this.live_constraints.inlined_pop_unsafe();
			var oc1 = o1.component;
			var root1;
			if(oc1 == oc1.parent) root1 = oc1; else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			oc1.island.comps.inlined_add(oc1);
			if(oc1.waket > oc1.island.waket) oc1.island.waket = oc1.waket;
		}
		while(!(this.islands.next == null)) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite3 = i.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							var shape = cx_ite4.elt;
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(!(i.comps.head == null)) {
					var c1 = i.comps.inlined_pop_unsafe();
					c1.waket = i.waket;
					if(c1.isBody) this.live.inlined_add(c1.body); else this.live_constraints.inlined_add(c1.constraint);
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o2 = i;
				o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				arbite1 = arbs1.inlined_erase(pre1);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbite1 = null.begin();
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				arbite2 = arbs2.inlined_erase(pre2);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbite2 = null.begin();
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(!(body.shapes.head == null)) body.validate_aabb();
		body.validate_mass();
		body.validate_inertia();
		if(body.velx != 0 || body.vely != 0 || body.angvel != 0) throw "Error: Static body cannot have any real velocity, only kinematic or surface velocities";
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					var res = s.polygon.valid();
					if(res != (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(!cur.nomove && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
			if(!cur.norotate && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite2 = cur.cbSet.bodylisteners.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = cur;
					cx_ite2 = cx_ite2.next;
				}
			}
			cur.component.woken = false;
			var cx_ite3 = cur.shapes.head;
			while(cx_ite3 != null) {
				var shape = cx_ite3.elt;
				this.bphase.sync(shape);
				cx_ite3 = cx_ite3.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.sweepRadius = 0;
			var cx_ite5 = cur1.shapes.head;
			while(cx_ite5 != null) {
				var s1 = cx_ite5.elt;
				if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s1.polygon.splice_collinear();
					var res1 = s1.polygon.valid();
					if(res1 != (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s1.polygon.outer.toString() + " is invalid : " + res1.toString();
					s1.polygon.validate_gaxi();
				}
				s1.validate_sweepRadius();
				if(s1.sweepRadius > cur1.sweepRadius) cur1.sweepRadius = s1.sweepRadius;
				cx_ite5 = cx_ite5.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(!(cur1.shapes.head == null)) {
				cur1.validate_aabb();
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
				null;
			}
			if(!cur1.nomove && cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
			if(!cur1.norotate && cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
			var cx_ite6 = cur1.shapes.head;
			while(cx_ite6 != null) {
				var shape1 = cx_ite6.elt;
				this.bphase.sync(shape1);
				cx_ite6 = cx_ite6.next;
			}
			cx_ite4 = cx_ite4.next;
		}
		var cx_ite7 = this.live_constraints.head;
		while(cx_ite7 != null) {
			var con = cx_ite7.elt;
			if(con.active) {
				con.validate();
				if(con.component.woken && con.cbSet != null) {
					var cx_ite8 = con.cbSet.conlisteners.head;
					while(cx_ite8 != null) {
						var i1 = cx_ite8.elt;
						if(i1.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
							cx_ite8 = cx_ite8.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
						cb1.constraint = con;
						cx_ite8 = cx_ite8.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite7 = cx_ite7.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape.Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape.Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.00833333333333333322 | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape.Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape.Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			cur1.sweepIntegrate(dt);
			if(!cur1.disableCCD) {
				var linThreshold1 = nape.Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape.Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) angvel1 = -angvel1;
					var iangvel1 = 1 / angvel1;
					var cx_ite3 = cur1.shapes.head;
					while(cx_ite3 != null) {
						var s1 = cx_ite3.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.00833333333333333322 | 0;
						if(count1 > 8) count1 = 8;
						var anginc1 = angvel1 * dt / count1;
						cur1.sweepIntegrate(dt);
						if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
						if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
						if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
						if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
						if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						var _g1 = 1;
						while(_g1 < count1) {
							var i1 = _g1++;
							cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
							if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
							if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
							if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
							if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
							if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						}
						this.bphase.sync(s1);
						cx_ite3 = cx_ite3.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.bulletEnabled) {
						var linThreshold21 = nape.Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape.Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) cur1.bullet = true;
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) cont = false;
		var _g = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) arb.endGenerated = this.stamp;
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								callbackset[0] = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset[0]);
							}
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
								var $r;
								callbackset[0].arbiters.inlined_add(arb);
								$r = true;
								return $r;
							}(this)):false) arb.present++;
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset) {
								return function(listener1) {
									if((listener1.itype & arb.type) != 0 && callbackset[0].empty_arb(listener1.itype)) {
										var cb3 = _g.push_callback(listener1);
										cb3.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener1,cb3);
										cb3.set = callbackset[0];
									}
								};
							})(callbackset));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL?nape.Config.arbiterExpirationDelay:0) < this.stamp) {
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.active && arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) arb.active = false;
				} else arb.fluidarb.preStep(this,dt);
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) arb.active = false;
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(this.presteparb(arb1,dt)) {
				arbite1 = arbs1.inlined_erase(pre2);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbite1 = null.begin();
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(this.presteparb(arb2,dt)) {
				arbite2 = arbs2.inlined_erase(pre3);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbite2 = null.begin();
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.warmStart();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.applyImpulseVel();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
							this.midstep = true;
						} else con.active = false;
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) return false; else {
			var g2 = s2.lookup_group();
			if(g2 == null) return false; else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
				}
				return ret;
			}
		}
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
		} else return -1;
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _g = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b;
					if(b1.arbiters.length < b2.arbiters.length) b = b1; else b = b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else xarb = in_arb;
				var first = xarb == null;
				var arb1;
				var swapped = false;
				if(first) {
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					null;
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					null;
					arb1.intchange = true;
					first = true;
					swapped = true;
				} else arb1 = xarb.fluidarb;
				var inttype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID;
				if(first || arb1.stamp != this.stamp || continuous) {
					arb1.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.flowCollide(sa,sb,arb1)) {
						if(first) {
							arb1.b1 = s1.body;
							arb1.ws1 = s1;
							arb1.b2 = s2.body;
							arb1.ws2 = s2;
							arb1.id = sa.id;
							arb1.di = sb.id;
							arb1.b1.arbiters.inlined_add(arb1);
							arb1.b2.arbiters.inlined_add(arb1);
							arb1.active = true;
							arb1.present = 0;
							arb1.cleared = false;
							arb1.sleeping = false;
							arb1.fresh = false;
							arb1.presentable = false;
							arb1.nx = 0;
							arb1.ny = 1;
							arb1.dampx = 0;
							arb1.dampy = 0;
							arb1.adamp = 0.0;
							this.f_arbiters.inlined_add(arb1);
							arb1.fresh = !swapped;
						} else arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
						arb1.up_stamp = arb1.stamp;
						if(arb1.fresh || (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure = false;
							var arbs1;
							if(arb1.ws1.id > arb1.ws2.id) arbs1 = arb1.ws2; else arbs1 = arb1.ws1;
							var arbs2;
							if(arb1.ws1.id > arb1.ws2.id) arbs2 = arb1.ws1; else arbs2 = arb1.ws2;
							this.inlined_MRCA_chains(arbs1,arbs2);
							var cx_ite1 = this.mrca1.head;
							while(cx_ite1 != null) {
								var i1 = cx_ite1.elt;
								var cx_ite2 = this.mrca2.head;
								while(cx_ite2 != null) {
									var i2 = cx_ite2.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									this.prelisteners.inlined_clear();
									var lite = [null];
									cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite) {
										return function(listener) {
											if((listener.itype & inttype) != 0) {
												lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
												anyimpure = anyimpure || !listener.pure;
											}
										};
									})(lite));
									if(this.prelisteners.head == null) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset != null) callbackset = ncallbackset;
										if(callbackset != null) {
											var cx_ite3 = this.prelisteners.head;
											while(cx_ite3 != null) {
												var listener1 = cx_ite3.elt;
												if(listener1.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else callbackset.FLUIDstamp = this.stamp;
												cx_ite3 = cx_ite3.next;
											}
										}
										arb1.mutable = true;
										if(arb1.wrap_position != null) arb1.wrap_position.zpp_inner._immutable = false;
										var pact = arb1.active;
										arb1.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb1;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite4 = this.prelisteners.head;
										while(cx_ite4 != null) {
											var listener2 = cx_ite4.elt;
											this.precb.zpp_inner.listener = listener2;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret2 = listener2.handlerp(this.precb);
											if(ret2 != null) if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret2 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite4 = cx_ite4.next;
										}
										arb1.mutable = false;
										if(arb1.wrap_position != null) arb1.wrap_position.zpp_inner._immutable = true;
										arb1.active = pact;
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener3 = cx_ite5.elt;
												if(listener3.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstate = arb1.immState;
													callbackset.SENSORstate = arb1.immState;
													callbackset.FLUIDstate = arb1.immState;
												} else callbackset.FLUIDstate = arb1.immState;
												cx_ite5 = cx_ite5.next;
											}
										}
									} else if(callbackset == null) {
										if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb1.immState = callbackset.FLUIDstate;
									cx_ite2 = cx_ite2.next;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(anyimpure && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o = arb1.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) this.really_wake(o,false);
									}
								}
								if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o1 = arb1.b2;
									if(!o1.world) {
										o1.component.waket = this.stamp + (this.midstep?0:1);
										if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
										if(o1.component.sleeping) this.really_wake(o1,false);
									}
								}
							}
						}
						if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
							if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b1.component.sleeping) {
								var o2 = arb1.b1;
								if(!o2.world) {
									o2.component.waket = this.stamp + (this.midstep?0:1);
									if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
									if(o2.component.sleeping) this.really_wake(o2,false);
								}
							}
							if(arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.component.sleeping) {
								var o3 = arb1.b2;
								if(!o3.world) {
									o3.component.waket = this.stamp + (this.midstep?0:1);
									if(o3.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o3.kinematicDelaySleep = true;
									if(o3.component.sleeping) this.really_wake(o3,false);
								}
							}
						}
						if(arb1.sleeping) {
							arb1.sleeping = false;
							this.f_arbiters.inlined_add(arb1);
						}
						ret = arb1;
					} else if(first) {
						var o4 = arb1;
						o4.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o4;
						ret = null;
					} else ret = arb1;
				} else ret = arb1;
			} else if(itype == 1) {
				var carbs;
				if(stat) carbs = this.c_arbiters_true; else carbs = this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret3 = null;
					var b3;
					if(b1.arbiters.length < b2.arbiters.length) b3 = b1; else b3 = b2;
					var cx_ite6 = b3.arbiters.head;
					while(cx_ite6 != null) {
						var arb2 = cx_ite6.elt;
						if(arb2.id == sa.id && arb2.di == sb.id) {
							ret3 = arb2;
							break;
						}
						cx_ite6 = cx_ite6.next;
					}
					xarb1 = ret3;
				} else xarb1 = in_arb;
				var first1 = xarb1 == null;
				var arb3;
				var swapped1 = false;
				if(first1) {
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					null;
					arb3.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					xarb1.b1.arbiters.inlined_try_remove(xarb1);
					xarb1.b2.arbiters.inlined_try_remove(xarb1);
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					null;
					arb3.intchange = true;
					arb3.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb3 = xarb1.colarb;
					reverse = sa != arb3.s1;
					if(arb3.stat != stat) {
						arb3.stat = stat;
						if(!arb3.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb3);
							carbs.add(arb3);
						}
					}
				}
				var inttype1 = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION;
				if(first1 || arb3.stamp != this.stamp || continuous) {
					arb3.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.contactCollide(sa,sb,arb3,reverse)) {
						if(first1) {
							arb3.b1 = s1.body;
							arb3.ws1 = s1;
							arb3.b2 = s2.body;
							arb3.ws2 = s2;
							arb3.id = sa.id;
							arb3.di = sb.id;
							arb3.b1.arbiters.inlined_add(arb3);
							arb3.b2.arbiters.inlined_add(arb3);
							arb3.active = true;
							arb3.present = 0;
							arb3.cleared = false;
							arb3.sleeping = false;
							arb3.fresh = false;
							arb3.presentable = false;
							arb3.s1 = s1;
							arb3.s2 = s2;
							if(!arb3.userdef_restitution) {
								if(arb3.s1.material.elasticity <= Math.NEGATIVE_INFINITY || arb3.s2.material.elasticity <= Math.NEGATIVE_INFINITY) arb3.restitution = 0; else if(arb3.s1.material.elasticity >= Math.POSITIVE_INFINITY || arb3.s2.material.elasticity >= Math.POSITIVE_INFINITY) arb3.restitution = 1; else arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
								if(arb3.restitution < 0) arb3.restitution = 0;
								if(arb3.restitution > 1) arb3.restitution = 1;
							}
							if(!arb3.userdef_dyn_fric) arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
							if(!arb3.userdef_stat_fric) arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
							if(!arb3.userdef_rfric) arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
							carbs.inlined_add(arb3);
							arb3.fresh = !swapped1;
						} else arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
						arb3.up_stamp = arb3.stamp;
						if(arb3.fresh || (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure1 = false;
							var arbs11;
							if(arb3.ws1.id > arb3.ws2.id) arbs11 = arb3.ws2; else arbs11 = arb3.ws1;
							var arbs21;
							if(arb3.ws1.id > arb3.ws2.id) arbs21 = arb3.ws1; else arbs21 = arb3.ws2;
							this.inlined_MRCA_chains(arbs11,arbs21);
							var cx_ite7 = this.mrca1.head;
							while(cx_ite7 != null) {
								var i11 = cx_ite7.elt;
								var cx_ite8 = this.mrca2.head;
								while(cx_ite8 != null) {
									var i21 = cx_ite8.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									if(cb11.manager.pair(cb11,cb21).empty_intersection()) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									this.prelisteners.inlined_clear();
									var lite1 = [null];
									cb11.manager.pair(cb11,cb21).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite1) {
										return function(listener4) {
											if((listener4.itype & inttype1) != 0) {
												lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener4);
												anyimpure1 = anyimpure1 || !listener4.pure;
											}
										};
									})(lite1));
									if(this.prelisteners.head == null) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									callbackset1 = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset1 != null) callbackset1 = ncallbackset1;
										if(callbackset1 != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												var listener5 = cx_ite9.elt;
												if(listener5.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else callbackset1.COLLISIONstamp = this.stamp;
												cx_ite9 = cx_ite9.next;
											}
										}
										arb3.mutable = true;
										if(arb3.wrap_normal != null) arb3.wrap_normal.zpp_inner._immutable = false;
										if(arb3.wrap_contacts != null) arb3.wrap_contacts.zpp_inner.immutable = false;
										var pact1 = arb3.active;
										arb3.active = true;
										var emptycontacts1 = false;
										arb3.cleanupContacts();
										this.precb.zpp_inner.pre_arbiter = arb3;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite10 = this.prelisteners.head;
										while(cx_ite10 != null) {
											var listener6 = cx_ite10.elt;
											this.precb.zpp_inner.listener = listener6;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret4 = listener6.handlerp(this.precb);
											if(ret4 != null) if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret4 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite10 = cx_ite10.next;
										}
										arb3.mutable = false;
										if(arb3.wrap_normal != null) arb3.wrap_normal.zpp_inner._immutable = true;
										if(arb3.wrap_contacts != null) arb3.wrap_contacts.zpp_inner.immutable = true;
										arb3.active = pact1;
										if(callbackset1 != null) {
											var cx_ite11 = this.prelisteners.head;
											while(cx_ite11 != null) {
												var listener7 = cx_ite11.elt;
												if(listener7.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstate = arb3.immState;
													callbackset1.SENSORstate = arb3.immState;
													callbackset1.FLUIDstate = arb3.immState;
												} else callbackset1.COLLISIONstate = arb3.immState;
												cx_ite11 = cx_ite11.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb3.immState = callbackset1.COLLISIONstate;
									cx_ite8 = cx_ite8.next;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(anyimpure1 && (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o5 = arb3.b1;
									if(!o5.world) {
										o5.component.waket = this.stamp + (this.midstep?0:1);
										if(o5.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o5.kinematicDelaySleep = true;
										if(o5.component.sleeping) this.really_wake(o5,false);
									}
								}
								if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
									var o6 = arb3.b2;
									if(!o6.world) {
										o6.component.waket = this.stamp + (this.midstep?0:1);
										if(o6.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o6.kinematicDelaySleep = true;
										if(o6.component.sleeping) this.really_wake(o6,false);
									}
								}
							}
						}
						if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
							if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b1.component.sleeping) {
								var o7 = arb3.b1;
								if(!o7.world) {
									o7.component.waket = this.stamp + (this.midstep?0:1);
									if(o7.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o7.kinematicDelaySleep = true;
									if(o7.component.sleeping) this.really_wake(o7,false);
								}
							}
							if(arb3.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b2.component.sleeping) {
								var o8 = arb3.b2;
								if(!o8.world) {
									o8.component.waket = this.stamp + (this.midstep?0:1);
									if(o8.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o8.kinematicDelaySleep = true;
									if(o8.component.sleeping) this.really_wake(o8,false);
								}
							}
						}
						if(arb3.sleeping) {
							arb3.sleeping = false;
							carbs.inlined_add(arb3);
						}
						ret = arb3;
					} else if(first1) {
						var o9 = arb3;
						o9.userdef_dyn_fric = false;
						o9.userdef_stat_fric = false;
						o9.userdef_restitution = false;
						o9.userdef_rfric = false;
						o9.__ref_edge1 = o9.__ref_edge2 = null;
						o9.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o9;
						ret = null;
					} else ret = arb3;
				} else ret = arb3;
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret5 = null;
					var b4;
					if(b1.arbiters.length < b2.arbiters.length) b4 = b1; else b4 = b2;
					var cx_ite12 = b4.arbiters.head;
					while(cx_ite12 != null) {
						var arb4 = cx_ite12.elt;
						if(arb4.id == sa.id && arb4.di == sb.id) {
							ret5 = arb4;
							break;
						}
						cx_ite12 = cx_ite12.next;
					}
					xarb2 = ret5;
				} else xarb2 = in_arb;
				var first2 = xarb2 == null;
				var arb5;
				var swapped2 = false;
				if(first2) {
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					null;
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					xarb2.b1.arbiters.inlined_try_remove(xarb2);
					xarb2.b2.arbiters.inlined_try_remove(xarb2);
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					null;
					arb5.intchange = true;
					first2 = true;
					swapped2 = true;
				} else arb5 = xarb2.sensorarb;
				var inttype2 = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR;
				if(first2 || arb5.stamp != this.stamp || continuous) {
					arb5.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.testCollide(sa,sb)) {
						if(first2) {
							arb5.b1 = s1.body;
							arb5.ws1 = s1;
							arb5.b2 = s2.body;
							arb5.ws2 = s2;
							arb5.id = sa.id;
							arb5.di = sb.id;
							arb5.b1.arbiters.inlined_add(arb5);
							arb5.b2.arbiters.inlined_add(arb5);
							arb5.active = true;
							arb5.present = 0;
							arb5.cleared = false;
							arb5.sleeping = false;
							arb5.fresh = false;
							arb5.presentable = false;
							this.s_arbiters.inlined_add(arb5);
							arb5.fresh = !swapped2;
						} else arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
						arb5.up_stamp = arb5.stamp;
						if(arb5.fresh || (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
							var anyimpure2 = false;
							var arbs12;
							if(arb5.ws1.id > arb5.ws2.id) arbs12 = arb5.ws2; else arbs12 = arb5.ws1;
							var arbs22;
							if(arb5.ws1.id > arb5.ws2.id) arbs22 = arb5.ws1; else arbs22 = arb5.ws2;
							this.inlined_MRCA_chains(arbs12,arbs22);
							var cx_ite13 = this.mrca1.head;
							while(cx_ite13 != null) {
								var i12 = cx_ite13.elt;
								var cx_ite14 = this.mrca2.head;
								while(cx_ite14 != null) {
									var i22 = cx_ite14.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									if(cb12.manager.pair(cb12,cb22).empty_intersection()) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									this.prelisteners.inlined_clear();
									var lite2 = [null];
									cb12.manager.pair(cb12,cb22).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite2) {
										return function(listener8) {
											if((listener8.itype & inttype2) != 0) {
												lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener8);
												anyimpure2 = anyimpure2 || !listener8.pure;
											}
										};
									})(lite2));
									if(this.prelisteners.head == null) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									callbackset2 = zpp_nape.phys.ZPP_Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_nape.space.ZPP_CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset2 != null) callbackset2 = ncallbackset2;
										if(callbackset2 != null) {
											var cx_ite15 = this.prelisteners.head;
											while(cx_ite15 != null) {
												var listener9 = cx_ite15.elt;
												if(listener9.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else callbackset2.SENSORstamp = this.stamp;
												cx_ite15 = cx_ite15.next;
											}
										}
										var pact2 = arb5.active;
										arb5.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb5;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite16 = this.prelisteners.head;
										while(cx_ite16 != null) {
											var listener10 = cx_ite16.elt;
											this.precb.zpp_inner.listener = listener10;
											zpp_nape.phys.ZPP_Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret6 = listener10.handlerp(this.precb);
											if(ret6 != null) if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret6 == (function($this) {
												var $r;
												if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
													zpp_nape.util.ZPP_Flags.internal = true;
													zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
													zpp_nape.util.ZPP_Flags.internal = false;
												}
												$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
											cx_ite16 = cx_ite16.next;
										}
										arb5.active = pact2;
										if(callbackset2 != null) {
											var cx_ite17 = this.prelisteners.head;
											while(cx_ite17 != null) {
												var listener11 = cx_ite17.elt;
												if(listener11.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstate = arb5.immState;
													callbackset2.SENSORstate = arb5.immState;
													callbackset2.FLUIDstate = arb5.immState;
												} else callbackset2.SENSORstate = arb5.immState;
												cx_ite17 = cx_ite17.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
									} else arb5.immState = callbackset2.SENSORstate;
									cx_ite14 = cx_ite14.next;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(anyimpure2 && (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								if(!(arb5.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
									var o10 = arb5.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep?0:1);
										if(o10.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o10.kinematicDelaySleep = true;
										if(o10.component.sleeping) this.really_wake(o10,false);
									}
								}
								if(!(arb5.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
									var o11 = arb5.b2;
									if(!o11.world) {
										o11.component.waket = this.stamp + (this.midstep?0:1);
										if(o11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o11.kinematicDelaySleep = true;
										if(o11.component.sleeping) this.really_wake(o11,false);
									}
								}
							}
						}
						if(arb5.sleeping) {
							arb5.sleeping = false;
							this.s_arbiters.inlined_add(arb5);
						}
						ret = arb5;
					} else if(first2) {
						var o12 = arb5;
						o12.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o12;
						ret = null;
					} else ret = arb5;
				} else ret = arb5;
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) this.mrca1.inlined_add(s1);
		if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
		if(s2.cbSet != null) this.mrca2.inlined_add(s2);
		if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1;
			if(c1 == null) d1 = 0; else d1 = c1.depth;
			var d2;
			if(c2 == null) d2 = 0; else d2 = c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) this.mrca2.inlined_add(c2);
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) this.mrca1.inlined_add(c1);
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_nape.space.ZPP_Space
};
zpp_nape.space.ZPP_SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
zpp_nape.space.ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_nape.space.ZPP_SweepData.prototype = {
	free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,alloc: function() {
	}
	,gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,__class__: zpp_nape.space.ZPP_SweepData
};
zpp_nape.space.ZPP_SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
zpp_nape.space.ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_nape.space.ZPP_SweepPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_SweepPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_nape.space.ZPP_SweepData.zpp_pool == null) dat = new zpp_nape.space.ZPP_SweepData(); else {
			dat = zpp_nape.space.ZPP_SweepData.zpp_pool;
			zpp_nape.space.ZPP_SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		null;
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) this.list.prev = dat;
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
		if(dat.next != null) dat.next.prev = dat.prev;
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_nape.space.ZPP_SweepData.zpp_pool;
		zpp_nape.space.ZPP_SweepData.zpp_pool = o;
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) this.sync_broadphase_fast();
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) a.next.prev = prev;
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) break;
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false);
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
						if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					if(filter == null || shape.filter.shouldCollide(filter)) {
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(body);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(body);
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
						if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(a.aabb.intersect(ab)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(strict) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					} else if(containment) {
						if(!this.failed.has(body)) {
							var col1 = ab.contains(shape.aabb);
							if(!ret.has(body) && col1) ret.push(body); else if(!col1) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(shape2.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape.phys.BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				var body = shape2.body.outer;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(shape,shape2);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,shape2)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var mint = ray.maxdist;
		var minres = null;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result;
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(a.shape.circle,inner,mint); else result = ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							mint = result.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result;
						}
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0 && t1 < mint) {
						var result1;
						if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result1 = ray.circlesect(a1.shape.circle,inner,mint); else result1 = ray.polysect(a1.shape.polygon,inner,mint);
						if(result1 != null) {
							if(result1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							mint = result1.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result1;
						}
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0 && t2 < mint) {
						var result2;
						if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result2 = ray.circlesect(a2.shape.circle,inner,mint); else result2 = ray.polysect(a2.shape.polygon,inner,mint);
						if(result2 != null) {
							if(result2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							mint = result2.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result2;
						}
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var ret;
		if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0) {
						if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a1.shape.circle,inner,ret); else ray.polysect2(a1.shape.polygon,inner,ret);
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0) {
						if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a2.shape.circle,inner,ret); else ray.polysect2(a2.shape.polygon,inner,ret);
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_SweepPhase
});
zpp_nape.util.ZNPArray2_Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
zpp_nape.util.ZNPArray2_Float.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_Float
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_GeomVert
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_MarchPair
};
zpp_nape.util.Hashable2_Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
zpp_nape.util.Hashable2_Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
zpp_nape.util.Hashable2_Boolfalse.get = function(id,di,val) {
	var ret = zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_nape.util.Hashable2_Boolfalse.zpp_pool == null) ret = new zpp_nape.util.Hashable2_Boolfalse(); else {
		ret = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.get(id,di,val); else return zpp_nape.util.Hashable2_Boolfalse.get(di,id,val);
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di); else return zpp_nape.util.Hashable2_Boolfalse.getpersist(di,id);
};
zpp_nape.util.Hashable2_Boolfalse.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.Hashable2_Boolfalse
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = new Array();
	var _g1 = 0;
	var _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype = {
	empty: function() {
		return this.cnt == 0;
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this.table.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.table[i];
			if(n == null) continue;
			while(n != null) {
				var t = n.hnext;
				n.hnext = null;
				n;
				n = t;
			}
			this.table[i] = null;
		}
	}
	,get: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n;
		}
	}
	,ordered_get: function(id,di) {
		if(id > di) {
			var t = id;
			id = di;
			di = t;
		}
		return this.get(id,di);
	}
	,has: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n != null;
		}
	}
	,maybeAdd: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		var cont = true;
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else if(cont) {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		if(cont) this.cnt++;
	}
	,add: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		this.cnt++;
	}
	,remove: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == arb) this.table[h] = n.hnext; else if(n != null) {
			var pre;
			do {
				pre = n;
				n = n.hnext;
			} while(n != null && n != arb);
			pre.hnext = n.hnext;
		}
		arb.hnext = null;
		this.cnt--;
	}
	,hash: function(id,di) {
		return id * 106039 + di & 1048575;
	}
	,__class__: zpp_nape.util.FastHash2_Hashable2_Boolfalse
};
zpp_nape.util.ZNPList_ZPP_CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CallbackSet
};
zpp_nape.util.ZNPList_ZPP_Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_nape.util.ZNPList_ZPP_Body.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Body
};
zpp_nape.util.ZNPList_ZPP_Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_nape.util.ZNPList_ZPP_Compound.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Compound
};
zpp_nape.util.ZNPList_ZPP_Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Arbiter
};
zpp_nape.util.ZNPList_ZPP_CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSetPair
};
zpp_nape.util.ZNPList_ZPP_CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
zpp_nape.util.ZNPList_ZPP_CutInt.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutInt
};
zpp_nape.util.ZNPList_ZPP_CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
zpp_nape.util.ZNPList_ZPP_CutVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutVert
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionVertex
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionedPoly
};
zpp_nape.util.ZNPList_ZPP_SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimplifyP
};
zpp_nape.util.ZNPList_ZPP_GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomVert
};
zpp_nape.util.ZNPList_ZPP_SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleVert
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleEvent
};
zpp_nape.util.ZNPList_ZPP_AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBPair
};
zpp_nape.util.ZNPList_ZPP_Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_nape.util.ZNPList_ZPP_Edge.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Edge
};
zpp_nape.util.ZNPList_ZPP_AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBNode
};
zpp_nape.util.ZNPList_ZPP_Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_nape.util.ZNPList_ZPP_Component.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Component
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionGroup
};
zpp_nape.util.ZNPList_ZPP_ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ColArbiter
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_FluidArbiter
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SensorArbiter
};
zpp_nape.util.ZNPList_ZPP_Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_nape.util.ZNPList_ZPP_Listener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Listener
};
zpp_nape.util.ZNPList_ZPP_ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ToiEvent
};
zpp_nape.util.ZNPList_ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_nape.util.ZNPList_ConvexResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
			ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
			zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
			ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
			zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ConvexResult
};
zpp_nape.util.ZNPList_ZPP_GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
			ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
			zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomPoly
};
zpp_nape.util.ZNPList_RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_nape.util.ZNPList_RayResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
			ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
			zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
			ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
			zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_nape.util.ZNPList_RayResult
};
zpp_nape.util.ZNPNode_ZPP_CbType = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_nape.util.ZNPNode_ZPP_CbType.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbType
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CallbackSet
};
zpp_nape.util.ZNPNode_ZPP_Shape = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_nape.util.ZNPNode_ZPP_Shape.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Shape
};
zpp_nape.util.ZNPNode_ZPP_Body = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_nape.util.ZNPNode_ZPP_Body.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Body
};
zpp_nape.util.ZNPNode_ZPP_Constraint = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Constraint
};
zpp_nape.util.ZNPNode_ZPP_Compound = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_nape.util.ZNPNode_ZPP_Compound.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Compound
};
zpp_nape.util.ZNPNode_ZPP_Arbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Arbiter
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionListener
};
zpp_nape.util.ZNPNode_ZPP_CbSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSet
};
zpp_nape.util.ZNPNode_ZPP_Interactor = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Interactor
};
zpp_nape.util.ZNPNode_ZPP_BodyListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_BodyListener
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSetPair
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ConstraintListener
};
zpp_nape.util.ZNPNode_ZPP_CutInt = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutInt
};
zpp_nape.util.ZNPNode_ZPP_CutVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutVert
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionVertex
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionedPoly
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimplifyP
};
zpp_nape.util.ZNPNode_ZPP_GeomVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomVert
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleVert
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleEvent
};
zpp_nape.util.ZNPNode_ZPP_AABBPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBPair
};
zpp_nape.util.ZNPNode_ZPP_Vec2 = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Vec2
};
zpp_nape.util.ZNPNode_ZPP_Edge = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_nape.util.ZNPNode_ZPP_Edge.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Edge
};
zpp_nape.util.ZNPNode_ZPP_AABBNode = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBNode
};
zpp_nape.util.ZNPNode_ZPP_Component = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_nape.util.ZNPNode_ZPP_Component.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Component
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionGroup
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ColArbiter
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_FluidArbiter
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SensorArbiter
};
zpp_nape.util.ZNPNode_ZPP_Listener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_nape.util.ZNPNode_ZPP_Listener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Listener
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ToiEvent
};
zpp_nape.util.ZNPNode_ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_nape.util.ZNPNode_ConvexResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ConvexResult
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomPoly
};
zpp_nape.util.ZNPNode_RayResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_nape.util.ZNPNode_RayResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_nape.util.ZNPNode_RayResult
};
zpp_nape.util.ZPP_MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape.geom.Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
zpp_nape.util.ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_nape.util.ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_nape.util.ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_nape.util.ZPP_MixVec2List.__super__ = nape.geom.Vec2List;
zpp_nape.util.ZPP_MixVec2List.prototype = $extend(nape.geom.Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		return this.at_ite.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			} else this.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		} else {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		} else {
			ret = this.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.wrapper();
		return retx2;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(obj.zpp_inner == x) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,__class__: zpp_nape.util.ZPP_MixVec2List
});
zpp_nape.util.ZPP_ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_nape.util.ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.constraint.ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ConstraintList
};
zpp_nape.util.ZPP_BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Body();
	this._invalidated = true;
};
zpp_nape.util.ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_nape.util.ZPP_BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_BodyList
};
zpp_nape.util.ZPP_InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_nape.util.ZPP_InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_InteractorList
};
zpp_nape.util.ZPP_CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Compound();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_nape.util.ZPP_CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_CompoundList
};
zpp_nape.util.ZPP_ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Listener();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_nape.util.ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ListenerList
};
zpp_nape.util.ZPP_CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_CbType();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_nape.util.ZPP_CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_CbTypeList
};
zpp_nape.util.ZPP_Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Vec2();
	this._invalidated = true;
};
zpp_nape.util.ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_nape.util.ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_Vec2List
};
zpp_nape.util.ZPP_GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_GeomPoly();
	this._invalidated = true;
};
zpp_nape.util.ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_nape.util.ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_GeomPolyList
};
zpp_nape.util.ZPP_RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_RayResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_nape.util.ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_RayResultList
};
zpp_nape.util.ZPP_ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ConvexResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_nape.util.ZPP_ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ConvexResultList
};
zpp_nape.util.ZPP_EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Edge();
	this._invalidated = true;
};
zpp_nape.util.ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_nape.util.ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_EdgeList
};
zpp_nape.util.ZPP_ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Shape();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_nape.util.ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ShapeList
};
zpp_nape.util.ZPP_InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_nape.util.ZPP_InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_InteractionGroupList
};
zpp_nape.util.ZPP_ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_nape.util.ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ArbiterList
};
zpp_nape.util.ZPP_ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_Contact();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_nape.util.ZPP_ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_nape.util.ZPP_ContactList
};
zpp_nape.util.ZPP_Math = function() { };
zpp_nape.util.ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_nape.util.ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.sqr = function(x) {
	return x * x;
};
zpp_nape.util.ZPP_Math.clamp2 = function(x,a) {
	return zpp_nape.util.ZPP_Math.clamp(x,-a,a);
};
zpp_nape.util.ZPP_Math.clamp = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
zpp_nape.util.ZPP_PubPool = function() { };
zpp_nape.util.ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
zpp_nape.util.ZPP_Set_ZPP_Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
zpp_nape.util.ZPP_Set_ZPP_Body.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_Body
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSetPair
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionPair
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionVertex
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleVert
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleSeg
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleEvent
};
zpp_nape.util.ZPP_Set_ZPP_CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSet
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
haxe.Resource.content = [{ name : "version", data : "MS4wLjAtYWxwaGEuMQ"},{ name : "default.vert.glsl", data : "YXR0cmlidXRlIHZlYzMgdmVydGV4UG9zaXRpb247CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFRDb29yZDsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7CmF0dHJpYnV0ZSB2ZWMzIHZlcnRleE5vcm1hbDsKCnZhcnlpbmcgdmVjMiB0Y29vcmQ7CnZhcnlpbmcgdmVjNCBjb2xvcjsKCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4Owp1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OwoKdm9pZCBtYWluKHZvaWQpIHsKCiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGNvb3JkID0gdmVydGV4VENvb3JkOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKICAgICAgICAvL2htbSEgSSB0aGluayBzaGFkZXJzIGFyZSBjb21waWxlZCBvcHRpbWlzZWQsIHJlbW92aW5nIHVudXNlZCB2YWx1ZXMgd2hpY2ggbWVhbnMKICAgICAgICAvL3RoYXQgdGhlIHNoYWRlcnMgZ2V0VmVydGV4Tm9ybWFsIGF0dHJpYnV0ZSByZXR1cm5zIGludmFsaWQgKC0xKSB2YWx1ZXMhCiAgICB2ZWMzIG4gPSB2ZXJ0ZXhOb3JtYWw7CiAgICBnbF9Qb2ludFNpemUgPSAxLjA7Cgp9"},{ name : "build", data : "K2EwZDY2MWE5NGI"},{ name : "default.frag.glsl", data : "dmFyeWluZyB2ZWMyIHRjb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkgewogICAgZ2xfRnJhZ0NvbG9yID0gY29sb3I7Cn0"},{ name : "default.fnt", data : ""},{ name : "default.png", data : ""},{ name : "default.frag.textured.glsl", data : "dW5pZm9ybSBzYW1wbGVyMkQgdGV4MDsKdmFyeWluZyB2ZWMyIHRjb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkgewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgwLCB0Y29vcmQpOwogICAgLy8gZmxvYXQgbHVtaW5vc2l0eSA9ICh0ZXhjb2xvci5yICsgdGV4Y29sb3IuZyArIHRleGNvbG9yLmIpIC8gMy4wOwogICAgLy8gdmVjNCBncmF5ID0gdmVjNChsdW1pbm9zaXR5LGx1bWlub3NpdHksbHVtaW5vc2l0eSwxKTsKICAgIC8vIHZlYzQgb2NvbG9yID0gdmVjNCh0ZXhjb2xvci5yLCB0ZXhjb2xvci5nLCB0ZXhjb2xvci5iLCAxKTsKICAgIC8vIHZlYzQgdXZjb2xvciA9IHZlYzQodGNvb3JkLngsIHRjb29yZC55LCAodGNvb3JkLngrdGNvb3JkLnkpKjIuMCwgMSk7CiAgICAvLyB2ZWM0IHdoaXRlID0gdmVjNCgxLCAxLCAxLCAwLjYpOwogICAgLy8gZ2xfRnJhZ0NvbG9yID0gZ3JheSAqICgodGNvb3JkLngrdGNvb3JkLnkpLzIuMCk7CiAgICBnbF9GcmFnQ29sb3IgPSBjb2xvciAqIHRleGNvbG9yOyAvL3ZlYzQoMCwwLjksMC42LDEpOyA7CiAgICAvLyBnbF9GcmFnQ29sb3IgPSB2ZWM0KGdsX1BvaW50Q29vcmQueCwgZ2xfUG9pbnRDb29yZC55LCAwLCAxKTsKICAgIC8vIHZlYzQgY2MgPSB1dmNvbG9yICogZ3JheTsKICAgIC8vIGdsX0ZyYWdDb2xvciA9IHRleGNvbG9yOwp9"},{ name : "default.frag.bitmapfont.glsl", data : "I2RlZmluZSBPVVRMSU5FIDEKI2RlZmluZSBHTE9XIDEKI2RlZmluZSBTVVBFUlNBTVBMRSAxCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXgwOwp2YXJ5aW5nIHZlYzIgdGNvb3JkOwp2YXJ5aW5nIHZlYzQgY29sb3I7Cgp1bmlmb3JtIGZsb2F0IHNtb290aG5lc3M7CnVuaWZvcm0gZmxvYXQgdGhpY2tuZXNzOwoKdW5pZm9ybSB2ZWM0IG91dGxpbmVfY29sb3I7CnVuaWZvcm0gZmxvYXQgb3V0bGluZTsKCnVuaWZvcm0gdmVjNCBnbG93X2NvbG9yOwp1bmlmb3JtIGZsb2F0IGdsb3dfdGhyZXNob2xkOwp1bmlmb3JtIGZsb2F0IGdsb3dfYW1vdW50OwoKCmZsb2F0IGVkZ2UoZmxvYXQgdmFsdWUsIGZsb2F0IGFtb3VudCwgZmxvYXQgdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodmFsdWUgLSBhbW91bnQsIHZhbHVlICsgYW1vdW50LCB0KTsKfQoKZmxvYXQgZ2V0KHZlYzIgdXYsIGZsb2F0IHdpZHRoKSB7CiAgICBmbG9hdCB0ZXhhID0gdGV4dHVyZTJEKHRleDAsIHV2KS5hOwogICAgcmV0dXJuIHNtb290aHN0ZXAoMC41IC0gd2lkdGgsIDAuNSArIHdpZHRoLCB0ZXhhKTsKfQoKdm9pZCBtYWluKCkgewoKLy9iYXNpYyBzZGYKCiAgICBmbG9hdCBkaXN0ID0gdGV4dHVyZTJEKHRleDAsIHRjb29yZCkuYTsKICAgICAgICAvL2Z3aWR0aCBrZWVwcyB3aWR0aCBzaW1pbGFyIGRlc3BpdGUgc2NhbGluZywgc2VlIGJlbG93IGZvciBvcHRpb25zCiAgICBmbG9hdCBzbW9vdGhhbXQgPSBzbW9vdGhuZXNzICogZndpZHRoKGRpc3QpOwogICAgLy8gZmxvYXQgc21vb3RoYW10ID0gc21vb3RobmVzcyAqIGxlbmd0aCh2ZWMyKGRGZHgoZGlzdCksIGRGZHkoZGlzdCkpKTsKCiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIGVkZ2Ugc21vb3RoaW5nCiAgICBmbG9hdCBhbHBoYSA9IGVkZ2UoMS4wIC0gdGhpY2tuZXNzLCBzbW9vdGhhbXQsIGRpc3QpOwoKLy9zdXBlciBzYW1wbGluZwoKICAgICAgICAjaWYgU1VQRVJTQU1QTEUgPT0gMQoKICAgICAgICAgICAgICAgIC8vdGhlc2UgdmFsdWVzIGNhbiBiZSBleHBvc2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvL3RoZSBjdXJyZW50IGJlaW5nIDAuMjUvc3FydCgyKQogICAgICAgICAgICBmbG9hdCBmYWN0b3IgPSAwLjE3Njc3NjY5NTM7CiAgICAgICAgICAgIGZsb2F0IHNhbXBsZWFtdCA9IDAuNTsKICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIHNpbXBsZSBib3ggZmlsdGVyIGFyb3VuZCB0aGUgcG9pbnQsCiAgICAgICAgICAgICAgICAvL3dlIHVzZSBhIHNlcGFyYXRlIHdpZHRoIGZvciBub3cKICAgICAgICAgICAgZmxvYXQgc2FtcGxldyA9IHNhbXBsZWFtdCAqIGZ3aWR0aChkaXN0KTsKICAgICAgICAgICAgdmVjMiBzYW1wbGVvZmZzZXQgPSBmYWN0b3IgKiAoZEZkeCh0Y29vcmQpICsgZEZkeSh0Y29vcmQpKTsKICAgICAgICAgICAgdmVjNCBmbHRyID0gdmVjNCh0Y29vcmQgLSBzYW1wbGVvZmZzZXQsIHRjb29yZCArIHNhbXBsZW9mZnNldCk7CgogICAgICAgICAgICBmbG9hdCB0b3RhbCA9IGdldCggZmx0ci54eSwgc2FtcGxldyApICsgZ2V0KCBmbHRyLnp3LCBzYW1wbGV3ICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgIGdldCggZmx0ci54dywgc2FtcGxldyApICsgZ2V0KCBmbHRyLnp5LCBzYW1wbGV3ICk7CgogICAgICAgICAgICBhbHBoYSA9IChhbHBoYSArIDAuNSAqIHRvdGFsKSAvIDMuMDsKCiAgICAgICAgI2VuZGlmIC8vU1VQRVJTQU1QTEUKCiAgICAgICAgLy90aGUgYmFzZSBjb2xvciArIHNjYWxlZCBieSB0aGUgbmV3IGFscGhhCiAgICB2ZWM0IGZpbmFsQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgY29sb3IuYSAqIGFscGhhKTsKCi8vb3V0bGluZQoKICAgICNpZiBPVVRMSU5FID09IDEKCiAgICAgICAgICAgIC8vd2lwCiAgICAgICAgaWYob3V0bGluZSA+IDAuMCkgewoKICAgICAgICAgICAgLy9yYW5nZSBvZiAxLjAgfiAwLjEsIHdlIGdldCAwIH4gMQogICAgICAgICAgICBmbG9hdCBfb3V0bGluZSA9IDAuOSAtIChvdXRsaW5lICogMC45KTsKICAgICAgICAgICAgZmxvYXQgX291dGxpbmVfYSA9IGVkZ2UoX291dGxpbmUsIHNtb290aGFtdCwgZGlzdCk7CiAgICAgICAgICAgIHZlYzQgX291dGxpbmVfYyA9IHZlYzQob3V0bGluZV9jb2xvci5yZ2IsIG91dGxpbmVfY29sb3IuYSAqIF9vdXRsaW5lX2EpOwoKICAgICAgICAgICAgZmluYWxDb2xvciA9IG1peChfb3V0bGluZV9jLCBmaW5hbENvbG9yLCBhbHBoYSk7CgogICAgICAgIH0gLy9vdXRsaW5lID4gMC4wCgogICAgI2VuZGlmIC8vT1VUTElORQoKLy8gZ2xvdwoKICAgICNpZiBHTE9XID09IDEKCiAgICAgICAgICAgIC8vd2lwCiAgICAgICAgaWYoZ2xvd19hbW91bnQgPiAwLjApIHsKCiAgICAgICAgICAgIC8vOnRvZG86IGV4cG9zZSBvZmZzZXQgZm9yIGRpcmVjdGlvbmFsIHNoYWRvdwogICAgICAgICAgICAvLyB2ZWMyIF9nbG93X29mZnMgPSB2ZWMyKDAsMCk7CiAgICAgICAgICAgIC8vIGZsb2F0IF9nbG93X2Rpc3QgPSB0ZXh0dXJlMkQodGV4MCwgdGNvb3JkIC0gX2dsb3dfb2Zmc2V0KS5hOwoKICAgICAgICAgICAgZmxvYXQgX2dsb3dfYW10ID0gMS4wIC0gZ2xvd19hbW91bnQ7CiAgICAgICAgICAgIGZsb2F0IF9nbG93X2xpbWl0ID0gKF9nbG93X2FtdCAqIGdsb3dfdGhyZXNob2xkKTsKICAgICAgICAgICAgZmxvYXQgX2dsb3dfYSA9IGVkZ2UoX2dsb3dfYW10LCBfZ2xvd19saW1pdCwgZGlzdCk7CiAgICAgICAgICAgIHZlYzQgIF9nbG93X2MgPSB2ZWM0KGdsb3dfY29sb3IucmdiLCBnbG93X2NvbG9yLmEgKiBfZ2xvd19hKTsKCiAgICAgICAgICAgIGZpbmFsQ29sb3IgPSBtaXgoX2dsb3dfYywgZmluYWxDb2xvciwgZmluYWxDb2xvci5hKTsKCiAgICAgICAgfSAvL2dsb3dfYW1vdW50ID4gMAoKICAgICNlbmRpZiAvL0dMT1cKCi8vZG9uZQoKICAgIGdsX0ZyYWdDb2xvciA9IGZpbmFsQ29sb3I7CgoKfSAvL21haW4K"}];
zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_BODY = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT = new nape.callbacks.CbType();
zpp_nape.ZPP_ID._Constraint = 0;
zpp_nape.ZPP_ID._Interactor = 0;
zpp_nape.ZPP_ID._CbType = 0;
zpp_nape.ZPP_ID._CbSet = 0;
zpp_nape.ZPP_ID._Listener = 0;
zpp_nape.ZPP_ID._ZPP_SimpleVert = 0;
zpp_nape.ZPP_ID._ZPP_SimpleSeg = 0;
zpp_nape.ZPP_ID._InteractionGroup = 0;
zpp_nape.ZPP_ID._Space = 0;
CollisionLayers.PLAYER = new nape.callbacks.CbType();
CollisionLayers.PROJECTILE = new nape.callbacks.CbType();
CollisionLayers.WALL = new nape.callbacks.CbType();
CollisionLayers.ENEMY = new nape.callbacks.CbType();
CollisionLayers.PICKUP = new nape.callbacks.CbType();
CollisionFilters.PLAYER = new nape.dynamics.InteractionFilter(1,-3);
CollisionFilters.PROJECTILE = new nape.dynamics.InteractionFilter(2,-50);
CollisionFilters.WALL = new nape.dynamics.InteractionFilter(4,-1);
CollisionFilters.ENEMY = new nape.dynamics.InteractionFilter(8,-49);
CollisionFilters.PICKUP = new nape.dynamics.InteractionFilter(16,-43);
CollisionFilters.RAYFILTER = new nape.dynamics.InteractionFilter(32,-27);
Player.position = new nape.geom.Vec2(0,0);
Player.damageDealt = 0;
Enemy.numEnemiesActive = 0;
GlobalParams.shakeAmount = 0;
GlobalParams.creditCardMoney = 0;
GlobalParams.sobornoMoney = 0;
GlobalParams.stolenMoney = 0;
GlobalParams.bankMoney = 0;
GlobalParams.isPause = false;
Boss.numEnemiesActive = 0;
Luxe.version = "dev";
Luxe.build = "+a0d661a94b";
_Luxe.Ev_Impl_.unknown = 0;
_Luxe.Ev_Impl_.ready = 1;
_Luxe.Ev_Impl_.init = 2;
_Luxe.Ev_Impl_.reset = 3;
_Luxe.Ev_Impl_.update = 4;
_Luxe.Ev_Impl_.fixedupdate = 5;
_Luxe.Ev_Impl_.destroy = 6;
_Luxe.Ev_Impl_.prerender = 7;
_Luxe.Ev_Impl_.render = 8;
_Luxe.Ev_Impl_.postrender = 9;
_Luxe.Ev_Impl_.keydown = 10;
_Luxe.Ev_Impl_.keyup = 11;
_Luxe.Ev_Impl_.textinput = 12;
_Luxe.Ev_Impl_.inputdown = 13;
_Luxe.Ev_Impl_.inputup = 14;
_Luxe.Ev_Impl_.mousedown = 15;
_Luxe.Ev_Impl_.mouseup = 16;
_Luxe.Ev_Impl_.mousemove = 17;
_Luxe.Ev_Impl_.mousewheel = 18;
_Luxe.Ev_Impl_.touchdown = 19;
_Luxe.Ev_Impl_.touchup = 20;
_Luxe.Ev_Impl_.touchmove = 21;
_Luxe.Ev_Impl_.gamepadaxis = 22;
_Luxe.Ev_Impl_.gamepaddown = 23;
_Luxe.Ev_Impl_.gamepadup = 24;
_Luxe.Ev_Impl_.gamepaddevice = 25;
_Luxe.Ev_Impl_.window = 26;
_Luxe.Ev_Impl_.windowmoved = 27;
_Luxe.Ev_Impl_.windowresized = 28;
_Luxe.Ev_Impl_.windowsized = 29;
_Luxe.Ev_Impl_.windowminimized = 30;
_Luxe.Ev_Impl_.windowrestored = 31;
_Luxe.Ev_Impl_.last = 31;
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.ds.ObjectMap.count = 0;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe.zip.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
luxe.Tag.update = "real dt";
luxe.Tag.renderdt = "render dt";
luxe.Tag.game_update = "game.update";
luxe.Tag.render = "core.render";
luxe.Tag.debug = "core.debug";
luxe.Tag.updates = "core.updates";
luxe.Tag.events = "core.events";
luxe.Tag.audio = "core.audio";
luxe.Tag.input = "core.input";
luxe.Tag.timer = "core.timer";
luxe.Tag.scene = "core.scene";
luxe.Debug.shut_down = false;
luxe._Input.MouseButton_Impl_.none = 0;
luxe._Input.MouseButton_Impl_.left = 1;
luxe._Input.MouseButton_Impl_.middle = 2;
luxe._Input.MouseButton_Impl_.right = 3;
luxe._Input.MouseButton_Impl_.extra1 = 4;
luxe._Input.MouseButton_Impl_.extra2 = 5;
luxe.Log._level = 1;
luxe.Log._log_width = 16;
luxe.Physics.tag_physics = "physics";
luxe.components.sprite.SpriteAnimationData.frame_range_regex = new EReg("(\\d*)(\\b\\s*?-\\s*?\\b)(\\d*)","gi");
luxe.components.sprite.SpriteAnimationData.frame_hold_regex = new EReg("(\\d*)(\\shold\\s)(\\d*)","gi");
luxe.components.sprite.SpriteAnimationData.frame_hold_prev_regex = new EReg("(\\bhold\\s)(\\d*)","gi");
luxe.components.sprite.SpriteAnimationData.frame_regex = new EReg("(\\d*)","gi");
luxe.importers.tiled.TiledLayer.base_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
luxe.importers.tiled.TiledLayer.base_lookup = [];
luxe.macros.BuildVersion._save = false;
luxe.physics.nape.DebugDraw.cache_euler = new phoenix.Vector();
luxe.resource._Resource.ResourceType_Impl_.unknown = 0;
luxe.resource._Resource.ResourceType_Impl_.text = 1;
luxe.resource._Resource.ResourceType_Impl_.json = 2;
luxe.resource._Resource.ResourceType_Impl_.data = 3;
luxe.resource._Resource.ResourceType_Impl_.texture = 4;
luxe.resource._Resource.ResourceType_Impl_.sound = 5;
luxe.resource._Resource.ResourceType_Impl_.render_texture = 6;
luxe.resource._Resource.ResourceType_Impl_.font = 7;
luxe.resource._Resource.ResourceType_Impl_.shader = 8;
luxe.structural._BalancedBST.NodeColor.red = true;
luxe.structural._BalancedBST.NodeColor.black = false;
luxe.tween.actuators.SimpleActuator.actuators = new Array();
luxe.tween.actuators.SimpleActuator.actuatorsLength = 0;
luxe.tween.actuators.SimpleActuator.addedEvent = false;
luxe.tween.actuators.SimpleActuator.update_timer = 0;
luxe.tween.actuators.SimpleActuator.current_time = 0;
luxe.tween.Actuate.defaultActuator = luxe.tween.actuators.SimpleActuator;
luxe.tween.Actuate.defaultEase = luxe.tween.easing.Quad.get_easeOut();
luxe.tween.Actuate.targetLibraries = new haxe.ds.ObjectMap();
luxe.utils.GeometryUtils.two_pi = 6.283185307179586;
luxe.utils.Maths._PI_OVER_180 = 0.0174532925199432781;
luxe.utils.Maths._180_OVER_PI = 57.2957795130823797;
luxe.utils.unifill.Unicode.minCodePoint = 0;
luxe.utils.unifill.Unicode.maxCodePoint = 1114111;
luxe.utils.unifill.Unicode.minHighSurrogate = 55296;
luxe.utils.unifill.Unicode.maxHighSurrogate = 56319;
luxe.utils.unifill.Unicode.minLowSurrogate = 56320;
luxe.utils.unifill.Unicode.maxLowSurrogate = 57343;
nape.Config.epsilon = 1e-8;
nape.Config.fluidAngularDragFriction = 2.5;
nape.Config.fluidAngularDrag = 100;
nape.Config.fluidVacuumDrag = 0.5;
nape.Config.fluidLinearDrag = 0.5;
nape.Config.collisionSlop = 0.2;
nape.Config.collisionSlopCCD = 0.5;
nape.Config.distanceThresholdCCD = 0.05;
nape.Config.staticCCDLinearThreshold = 0.05;
nape.Config.staticCCDAngularThreshold = 0.005;
nape.Config.bulletCCDLinearThreshold = 0.125;
nape.Config.bulletCCDAngularThreshold = 0.0125;
nape.Config.dynamicSweepLinearThreshold = 17;
nape.Config.dynamicSweepAngularThreshold = 0.6;
nape.Config.angularCCDSlipScale = 0.75;
nape.Config.arbiterExpirationDelay = 6;
nape.Config.staticFrictionThreshold = 2;
nape.Config.elasticThreshold = 20;
nape.Config.sleepDelay = 60;
nape.Config.linearSleepThreshold = 0.2;
nape.Config.angularSleepThreshold = 0.4;
nape.Config.contactBiasCoef = 0.3;
nape.Config.contactStaticBiasCoef = 0.6;
nape.Config.contactContinuousBiasCoef = 0.4;
nape.Config.contactContinuousStaticBiasCoef = 0.5;
nape.Config.constraintLinearSlop = 0.1;
nape.Config.constraintAngularSlop = 1e-3;
nape.Config.illConditionedThreshold = 2e+8;
phoenix._Batcher.PrimitiveType_Impl_.unknown = -1;
phoenix._Batcher.PrimitiveType_Impl_.line_strip = 3;
phoenix._Batcher.PrimitiveType_Impl_.line_loop = 2;
phoenix._Batcher.PrimitiveType_Impl_.lines = 1;
phoenix._Batcher.PrimitiveType_Impl_.triangle_strip = 5;
phoenix._Batcher.PrimitiveType_Impl_.triangles = 4;
phoenix._Batcher.PrimitiveType_Impl_.triangle_fan = 6;
phoenix._Batcher.PrimitiveType_Impl_.points = 0;
phoenix._Batcher.BlendMode_Impl_.zero = 0;
phoenix._Batcher.BlendMode_Impl_.one = 1;
phoenix._Batcher.BlendMode_Impl_.src_color = 768;
phoenix._Batcher.BlendMode_Impl_.one_minus_src_color = 769;
phoenix._Batcher.BlendMode_Impl_.src_alpha = 770;
phoenix._Batcher.BlendMode_Impl_.one_minus_src_alpha = 771;
phoenix._Batcher.BlendMode_Impl_.dst_alpha = 772;
phoenix._Batcher.BlendMode_Impl_.one_minus_dst_alpha = 773;
phoenix._Batcher.BlendMode_Impl_.dst_color = 774;
phoenix._Batcher.BlendMode_Impl_.one_minus_dst_color = 775;
phoenix._Batcher.BlendMode_Impl_.src_alpha_saturate = 776;
phoenix._Batcher.BlendEquation_Impl_.add = 32774;
phoenix._Batcher.BlendEquation_Impl_.subtract = 32778;
phoenix._Batcher.BlendEquation_Impl_.reverse_subtract = 32779;
phoenix.Batcher._sequence_key = -1;
phoenix._BitmapFont.TextAlign_Impl_.left = 0;
phoenix._BitmapFont.TextAlign_Impl_.right = 1;
phoenix._BitmapFont.TextAlign_Impl_.center = 2;
phoenix._BitmapFont.TextAlign_Impl_.top = 3;
phoenix._BitmapFont.TextAlign_Impl_.bottom = 4;
phoenix.BitmapFont.generic_names = ["font",""," "];
phoenix._Shader.UniformType_Impl_.unknown = 0;
phoenix._Shader.UniformType_Impl_["int"] = 1;
phoenix._Shader.UniformType_Impl_["float"] = 2;
phoenix._Shader.UniformType_Impl_.vector2 = 3;
phoenix._Shader.UniformType_Impl_.vector3 = 4;
phoenix._Shader.UniformType_Impl_.vector4 = 5;
phoenix._Shader.UniformType_Impl_.color = 6;
phoenix._Shader.UniformType_Impl_.texture = 7;
phoenix._Vector.ComponentOrder_Impl_.XYZ = 0;
phoenix._Vector.ComponentOrder_Impl_.YXZ = 1;
phoenix._Vector.ComponentOrder_Impl_.ZXY = 2;
phoenix._Vector.ComponentOrder_Impl_.ZYX = 3;
phoenix._Vector.ComponentOrder_Impl_.YZX = 4;
phoenix._Vector.ComponentOrder_Impl_.XZY = 5;
phoenix.geometry.Geometry._sequence_key = -1;
phoenix.geometry._TextGeometry.EvTextGeometry_Impl_.unknown = 0;
phoenix.geometry._TextGeometry.EvTextGeometry_Impl_.update_text = 1;
phoenix.geometry.TextGeometry.tab_regex = new EReg("\t","gim");
snow.api.Debug._level = 1;
snow.api.Debug._log_width = 16;
snow.api.Promises.calls = [];
snow.api.Promises.defers = [];
snow.api._Promise.PromiseState_Impl_.pending = 0;
snow.api._Promise.PromiseState_Impl_.fulfilled = 1;
snow.api._Promise.PromiseState_Impl_.rejected = 2;
snow.api.Timer.running_timers = [];
snow.core.web.input.DOMKeys.dom_shift = 16;
snow.core.web.input.DOMKeys.dom_ctrl = 17;
snow.core.web.input.DOMKeys.dom_alt = 18;
snow.core.web.input.DOMKeys.dom_capslock = 20;
snow.core.web.input.DOMKeys.dom_pageup = 33;
snow.core.web.input.DOMKeys.dom_pagedown = 34;
snow.core.web.input.DOMKeys.dom_end = 35;
snow.core.web.input.DOMKeys.dom_home = 36;
snow.core.web.input.DOMKeys.dom_left = 37;
snow.core.web.input.DOMKeys.dom_up = 38;
snow.core.web.input.DOMKeys.dom_right = 39;
snow.core.web.input.DOMKeys.dom_down = 40;
snow.core.web.input.DOMKeys.dom_printscr = 44;
snow.core.web.input.DOMKeys.dom_insert = 45;
snow.core.web.input.DOMKeys.dom_delete = 46;
snow.core.web.input.DOMKeys.dom_lmeta = 91;
snow.core.web.input.DOMKeys.dom_rmeta = 93;
snow.core.web.input.DOMKeys.dom_kp_0 = 96;
snow.core.web.input.DOMKeys.dom_kp_1 = 97;
snow.core.web.input.DOMKeys.dom_kp_2 = 98;
snow.core.web.input.DOMKeys.dom_kp_3 = 99;
snow.core.web.input.DOMKeys.dom_kp_4 = 100;
snow.core.web.input.DOMKeys.dom_kp_5 = 101;
snow.core.web.input.DOMKeys.dom_kp_6 = 102;
snow.core.web.input.DOMKeys.dom_kp_7 = 103;
snow.core.web.input.DOMKeys.dom_kp_8 = 104;
snow.core.web.input.DOMKeys.dom_kp_9 = 105;
snow.core.web.input.DOMKeys.dom_kp_multiply = 106;
snow.core.web.input.DOMKeys.dom_kp_plus = 107;
snow.core.web.input.DOMKeys.dom_kp_minus = 109;
snow.core.web.input.DOMKeys.dom_kp_decimal = 110;
snow.core.web.input.DOMKeys.dom_kp_divide = 111;
snow.core.web.input.DOMKeys.dom_kp_numlock = 144;
snow.core.web.input.DOMKeys.dom_f1 = 112;
snow.core.web.input.DOMKeys.dom_f2 = 113;
snow.core.web.input.DOMKeys.dom_f3 = 114;
snow.core.web.input.DOMKeys.dom_f4 = 115;
snow.core.web.input.DOMKeys.dom_f5 = 116;
snow.core.web.input.DOMKeys.dom_f6 = 117;
snow.core.web.input.DOMKeys.dom_f7 = 118;
snow.core.web.input.DOMKeys.dom_f8 = 119;
snow.core.web.input.DOMKeys.dom_f9 = 120;
snow.core.web.input.DOMKeys.dom_f10 = 121;
snow.core.web.input.DOMKeys.dom_f11 = 122;
snow.core.web.input.DOMKeys.dom_f12 = 123;
snow.core.web.input.DOMKeys.dom_f13 = 124;
snow.core.web.input.DOMKeys.dom_f14 = 125;
snow.core.web.input.DOMKeys.dom_f15 = 126;
snow.core.web.input.DOMKeys.dom_f16 = 127;
snow.core.web.input.DOMKeys.dom_f17 = 128;
snow.core.web.input.DOMKeys.dom_f18 = 129;
snow.core.web.input.DOMKeys.dom_f19 = 130;
snow.core.web.input.DOMKeys.dom_f20 = 131;
snow.core.web.input.DOMKeys.dom_f21 = 132;
snow.core.web.input.DOMKeys.dom_f22 = 133;
snow.core.web.input.DOMKeys.dom_f23 = 134;
snow.core.web.input.DOMKeys.dom_f24 = 135;
snow.core.web.input.DOMKeys.dom_caret = 160;
snow.core.web.input.DOMKeys.dom_exclaim = 161;
snow.core.web.input.DOMKeys.dom_quotedbl = 162;
snow.core.web.input.DOMKeys.dom_hash = 163;
snow.core.web.input.DOMKeys.dom_dollar = 164;
snow.core.web.input.DOMKeys.dom_percent = 165;
snow.core.web.input.DOMKeys.dom_ampersand = 166;
snow.core.web.input.DOMKeys.dom_underscore = 167;
snow.core.web.input.DOMKeys.dom_leftparen = 168;
snow.core.web.input.DOMKeys.dom_rightparen = 169;
snow.core.web.input.DOMKeys.dom_asterisk = 170;
snow.core.web.input.DOMKeys.dom_plus = 171;
snow.core.web.input.DOMKeys.dom_pipe = 172;
snow.core.web.input.DOMKeys.dom_minus = 173;
snow.core.web.input.DOMKeys.dom_leftbrace = 174;
snow.core.web.input.DOMKeys.dom_rightbrace = 175;
snow.core.web.input.DOMKeys.dom_tilde = 176;
snow.core.web.input.DOMKeys.dom_audiomute = 181;
snow.core.web.input.DOMKeys.dom_volumedown = 182;
snow.core.web.input.DOMKeys.dom_volumeup = 183;
snow.core.web.input.DOMKeys.dom_comma = 188;
snow.core.web.input.DOMKeys.dom_period = 190;
snow.core.web.input.DOMKeys.dom_slash = 191;
snow.core.web.input.DOMKeys.dom_backquote = 192;
snow.core.web.input.DOMKeys.dom_leftbracket = 219;
snow.core.web.input.DOMKeys.dom_rightbracket = 221;
snow.core.web.input.DOMKeys.dom_backslash = 220;
snow.core.web.input.DOMKeys.dom_quote = 222;
snow.core.web.input.DOMKeys.dom_meta = 224;
snow.system.input.Scancodes.MASK = 1073741824;
snow.system.input.Scancodes.unknown = 0;
snow.system.input.Scancodes.key_a = 4;
snow.system.input.Scancodes.key_b = 5;
snow.system.input.Scancodes.key_c = 6;
snow.system.input.Scancodes.key_d = 7;
snow.system.input.Scancodes.key_e = 8;
snow.system.input.Scancodes.key_f = 9;
snow.system.input.Scancodes.key_g = 10;
snow.system.input.Scancodes.key_h = 11;
snow.system.input.Scancodes.key_i = 12;
snow.system.input.Scancodes.key_j = 13;
snow.system.input.Scancodes.key_k = 14;
snow.system.input.Scancodes.key_l = 15;
snow.system.input.Scancodes.key_m = 16;
snow.system.input.Scancodes.key_n = 17;
snow.system.input.Scancodes.key_o = 18;
snow.system.input.Scancodes.key_p = 19;
snow.system.input.Scancodes.key_q = 20;
snow.system.input.Scancodes.key_r = 21;
snow.system.input.Scancodes.key_s = 22;
snow.system.input.Scancodes.key_t = 23;
snow.system.input.Scancodes.key_u = 24;
snow.system.input.Scancodes.key_v = 25;
snow.system.input.Scancodes.key_w = 26;
snow.system.input.Scancodes.key_x = 27;
snow.system.input.Scancodes.key_y = 28;
snow.system.input.Scancodes.key_z = 29;
snow.system.input.Scancodes.key_1 = 30;
snow.system.input.Scancodes.key_2 = 31;
snow.system.input.Scancodes.key_3 = 32;
snow.system.input.Scancodes.key_4 = 33;
snow.system.input.Scancodes.key_5 = 34;
snow.system.input.Scancodes.key_6 = 35;
snow.system.input.Scancodes.key_7 = 36;
snow.system.input.Scancodes.key_8 = 37;
snow.system.input.Scancodes.key_9 = 38;
snow.system.input.Scancodes.key_0 = 39;
snow.system.input.Scancodes.enter = 40;
snow.system.input.Scancodes.escape = 41;
snow.system.input.Scancodes.backspace = 42;
snow.system.input.Scancodes.tab = 43;
snow.system.input.Scancodes.space = 44;
snow.system.input.Scancodes.minus = 45;
snow.system.input.Scancodes.equals = 46;
snow.system.input.Scancodes.leftbracket = 47;
snow.system.input.Scancodes.rightbracket = 48;
snow.system.input.Scancodes.backslash = 49;
snow.system.input.Scancodes.nonushash = 50;
snow.system.input.Scancodes.semicolon = 51;
snow.system.input.Scancodes.apostrophe = 52;
snow.system.input.Scancodes.grave = 53;
snow.system.input.Scancodes.comma = 54;
snow.system.input.Scancodes.period = 55;
snow.system.input.Scancodes.slash = 56;
snow.system.input.Scancodes.capslock = 57;
snow.system.input.Scancodes.f1 = 58;
snow.system.input.Scancodes.f2 = 59;
snow.system.input.Scancodes.f3 = 60;
snow.system.input.Scancodes.f4 = 61;
snow.system.input.Scancodes.f5 = 62;
snow.system.input.Scancodes.f6 = 63;
snow.system.input.Scancodes.f7 = 64;
snow.system.input.Scancodes.f8 = 65;
snow.system.input.Scancodes.f9 = 66;
snow.system.input.Scancodes.f10 = 67;
snow.system.input.Scancodes.f11 = 68;
snow.system.input.Scancodes.f12 = 69;
snow.system.input.Scancodes.printscreen = 70;
snow.system.input.Scancodes.scrolllock = 71;
snow.system.input.Scancodes.pause = 72;
snow.system.input.Scancodes.insert = 73;
snow.system.input.Scancodes.home = 74;
snow.system.input.Scancodes.pageup = 75;
snow.system.input.Scancodes["delete"] = 76;
snow.system.input.Scancodes.end = 77;
snow.system.input.Scancodes.pagedown = 78;
snow.system.input.Scancodes.right = 79;
snow.system.input.Scancodes.left = 80;
snow.system.input.Scancodes.down = 81;
snow.system.input.Scancodes.up = 82;
snow.system.input.Scancodes.numlockclear = 83;
snow.system.input.Scancodes.kp_divide = 84;
snow.system.input.Scancodes.kp_multiply = 85;
snow.system.input.Scancodes.kp_minus = 86;
snow.system.input.Scancodes.kp_plus = 87;
snow.system.input.Scancodes.kp_enter = 88;
snow.system.input.Scancodes.kp_1 = 89;
snow.system.input.Scancodes.kp_2 = 90;
snow.system.input.Scancodes.kp_3 = 91;
snow.system.input.Scancodes.kp_4 = 92;
snow.system.input.Scancodes.kp_5 = 93;
snow.system.input.Scancodes.kp_6 = 94;
snow.system.input.Scancodes.kp_7 = 95;
snow.system.input.Scancodes.kp_8 = 96;
snow.system.input.Scancodes.kp_9 = 97;
snow.system.input.Scancodes.kp_0 = 98;
snow.system.input.Scancodes.kp_period = 99;
snow.system.input.Scancodes.nonusbackslash = 100;
snow.system.input.Scancodes.application = 101;
snow.system.input.Scancodes.power = 102;
snow.system.input.Scancodes.kp_equals = 103;
snow.system.input.Scancodes.f13 = 104;
snow.system.input.Scancodes.f14 = 105;
snow.system.input.Scancodes.f15 = 106;
snow.system.input.Scancodes.f16 = 107;
snow.system.input.Scancodes.f17 = 108;
snow.system.input.Scancodes.f18 = 109;
snow.system.input.Scancodes.f19 = 110;
snow.system.input.Scancodes.f20 = 111;
snow.system.input.Scancodes.f21 = 112;
snow.system.input.Scancodes.f22 = 113;
snow.system.input.Scancodes.f23 = 114;
snow.system.input.Scancodes.f24 = 115;
snow.system.input.Scancodes.execute = 116;
snow.system.input.Scancodes.help = 117;
snow.system.input.Scancodes.menu = 118;
snow.system.input.Scancodes.select = 119;
snow.system.input.Scancodes.stop = 120;
snow.system.input.Scancodes.again = 121;
snow.system.input.Scancodes.undo = 122;
snow.system.input.Scancodes.cut = 123;
snow.system.input.Scancodes.copy = 124;
snow.system.input.Scancodes.paste = 125;
snow.system.input.Scancodes.find = 126;
snow.system.input.Scancodes.mute = 127;
snow.system.input.Scancodes.volumeup = 128;
snow.system.input.Scancodes.volumedown = 129;
snow.system.input.Scancodes.kp_comma = 133;
snow.system.input.Scancodes.kp_equalsas400 = 134;
snow.system.input.Scancodes.international1 = 135;
snow.system.input.Scancodes.international2 = 136;
snow.system.input.Scancodes.international3 = 137;
snow.system.input.Scancodes.international4 = 138;
snow.system.input.Scancodes.international5 = 139;
snow.system.input.Scancodes.international6 = 140;
snow.system.input.Scancodes.international7 = 141;
snow.system.input.Scancodes.international8 = 142;
snow.system.input.Scancodes.international9 = 143;
snow.system.input.Scancodes.lang1 = 144;
snow.system.input.Scancodes.lang2 = 145;
snow.system.input.Scancodes.lang3 = 146;
snow.system.input.Scancodes.lang4 = 147;
snow.system.input.Scancodes.lang5 = 148;
snow.system.input.Scancodes.lang6 = 149;
snow.system.input.Scancodes.lang7 = 150;
snow.system.input.Scancodes.lang8 = 151;
snow.system.input.Scancodes.lang9 = 152;
snow.system.input.Scancodes.alterase = 153;
snow.system.input.Scancodes.sysreq = 154;
snow.system.input.Scancodes.cancel = 155;
snow.system.input.Scancodes.clear = 156;
snow.system.input.Scancodes.prior = 157;
snow.system.input.Scancodes.return2 = 158;
snow.system.input.Scancodes.separator = 159;
snow.system.input.Scancodes.out = 160;
snow.system.input.Scancodes.oper = 161;
snow.system.input.Scancodes.clearagain = 162;
snow.system.input.Scancodes.crsel = 163;
snow.system.input.Scancodes.exsel = 164;
snow.system.input.Scancodes.kp_00 = 176;
snow.system.input.Scancodes.kp_000 = 177;
snow.system.input.Scancodes.thousandsseparator = 178;
snow.system.input.Scancodes.decimalseparator = 179;
snow.system.input.Scancodes.currencyunit = 180;
snow.system.input.Scancodes.currencysubunit = 181;
snow.system.input.Scancodes.kp_leftparen = 182;
snow.system.input.Scancodes.kp_rightparen = 183;
snow.system.input.Scancodes.kp_leftbrace = 184;
snow.system.input.Scancodes.kp_rightbrace = 185;
snow.system.input.Scancodes.kp_tab = 186;
snow.system.input.Scancodes.kp_backspace = 187;
snow.system.input.Scancodes.kp_a = 188;
snow.system.input.Scancodes.kp_b = 189;
snow.system.input.Scancodes.kp_c = 190;
snow.system.input.Scancodes.kp_d = 191;
snow.system.input.Scancodes.kp_e = 192;
snow.system.input.Scancodes.kp_f = 193;
snow.system.input.Scancodes.kp_xor = 194;
snow.system.input.Scancodes.kp_power = 195;
snow.system.input.Scancodes.kp_percent = 196;
snow.system.input.Scancodes.kp_less = 197;
snow.system.input.Scancodes.kp_greater = 198;
snow.system.input.Scancodes.kp_ampersand = 199;
snow.system.input.Scancodes.kp_dblampersand = 200;
snow.system.input.Scancodes.kp_verticalbar = 201;
snow.system.input.Scancodes.kp_dblverticalbar = 202;
snow.system.input.Scancodes.kp_colon = 203;
snow.system.input.Scancodes.kp_hash = 204;
snow.system.input.Scancodes.kp_space = 205;
snow.system.input.Scancodes.kp_at = 206;
snow.system.input.Scancodes.kp_exclam = 207;
snow.system.input.Scancodes.kp_memstore = 208;
snow.system.input.Scancodes.kp_memrecall = 209;
snow.system.input.Scancodes.kp_memclear = 210;
snow.system.input.Scancodes.kp_memadd = 211;
snow.system.input.Scancodes.kp_memsubtract = 212;
snow.system.input.Scancodes.kp_memmultiply = 213;
snow.system.input.Scancodes.kp_memdivide = 214;
snow.system.input.Scancodes.kp_plusminus = 215;
snow.system.input.Scancodes.kp_clear = 216;
snow.system.input.Scancodes.kp_clearentry = 217;
snow.system.input.Scancodes.kp_binary = 218;
snow.system.input.Scancodes.kp_octal = 219;
snow.system.input.Scancodes.kp_decimal = 220;
snow.system.input.Scancodes.kp_hexadecimal = 221;
snow.system.input.Scancodes.lctrl = 224;
snow.system.input.Scancodes.lshift = 225;
snow.system.input.Scancodes.lalt = 226;
snow.system.input.Scancodes.lmeta = 227;
snow.system.input.Scancodes.rctrl = 228;
snow.system.input.Scancodes.rshift = 229;
snow.system.input.Scancodes.ralt = 230;
snow.system.input.Scancodes.rmeta = 231;
snow.system.input.Scancodes.mode = 257;
snow.system.input.Scancodes.audionext = 258;
snow.system.input.Scancodes.audioprev = 259;
snow.system.input.Scancodes.audiostop = 260;
snow.system.input.Scancodes.audioplay = 261;
snow.system.input.Scancodes.audiomute = 262;
snow.system.input.Scancodes.mediaselect = 263;
snow.system.input.Scancodes.www = 264;
snow.system.input.Scancodes.mail = 265;
snow.system.input.Scancodes.calculator = 266;
snow.system.input.Scancodes.computer = 267;
snow.system.input.Scancodes.ac_search = 268;
snow.system.input.Scancodes.ac_home = 269;
snow.system.input.Scancodes.ac_back = 270;
snow.system.input.Scancodes.ac_forward = 271;
snow.system.input.Scancodes.ac_stop = 272;
snow.system.input.Scancodes.ac_refresh = 273;
snow.system.input.Scancodes.ac_bookmarks = 274;
snow.system.input.Scancodes.brightnessdown = 275;
snow.system.input.Scancodes.brightnessup = 276;
snow.system.input.Scancodes.displayswitch = 277;
snow.system.input.Scancodes.kbdillumtoggle = 278;
snow.system.input.Scancodes.kbdillumdown = 279;
snow.system.input.Scancodes.kbdillumup = 280;
snow.system.input.Scancodes.eject = 281;
snow.system.input.Scancodes.sleep = 282;
snow.system.input.Scancodes.app1 = 283;
snow.system.input.Scancodes.app2 = 284;
snow.system.input.Scancodes.scancode_names = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
snow.system.input.Keycodes.unknown = 0;
snow.system.input.Keycodes.enter = 13;
snow.system.input.Keycodes.escape = 27;
snow.system.input.Keycodes.backspace = 8;
snow.system.input.Keycodes.tab = 9;
snow.system.input.Keycodes.space = 32;
snow.system.input.Keycodes.exclaim = 33;
snow.system.input.Keycodes.quotedbl = 34;
snow.system.input.Keycodes.hash = 35;
snow.system.input.Keycodes.percent = 37;
snow.system.input.Keycodes.dollar = 36;
snow.system.input.Keycodes.ampersand = 38;
snow.system.input.Keycodes.quote = 39;
snow.system.input.Keycodes.leftparen = 40;
snow.system.input.Keycodes.rightparen = 41;
snow.system.input.Keycodes.asterisk = 42;
snow.system.input.Keycodes.plus = 43;
snow.system.input.Keycodes.comma = 44;
snow.system.input.Keycodes.minus = 45;
snow.system.input.Keycodes.period = 46;
snow.system.input.Keycodes.slash = 47;
snow.system.input.Keycodes.key_0 = 48;
snow.system.input.Keycodes.key_1 = 49;
snow.system.input.Keycodes.key_2 = 50;
snow.system.input.Keycodes.key_3 = 51;
snow.system.input.Keycodes.key_4 = 52;
snow.system.input.Keycodes.key_5 = 53;
snow.system.input.Keycodes.key_6 = 54;
snow.system.input.Keycodes.key_7 = 55;
snow.system.input.Keycodes.key_8 = 56;
snow.system.input.Keycodes.key_9 = 57;
snow.system.input.Keycodes.colon = 58;
snow.system.input.Keycodes.semicolon = 59;
snow.system.input.Keycodes.less = 60;
snow.system.input.Keycodes.equals = 61;
snow.system.input.Keycodes.greater = 62;
snow.system.input.Keycodes.question = 63;
snow.system.input.Keycodes.at = 64;
snow.system.input.Keycodes.leftbracket = 91;
snow.system.input.Keycodes.backslash = 92;
snow.system.input.Keycodes.rightbracket = 93;
snow.system.input.Keycodes.caret = 94;
snow.system.input.Keycodes.underscore = 95;
snow.system.input.Keycodes.backquote = 96;
snow.system.input.Keycodes.key_a = 97;
snow.system.input.Keycodes.key_b = 98;
snow.system.input.Keycodes.key_c = 99;
snow.system.input.Keycodes.key_d = 100;
snow.system.input.Keycodes.key_e = 101;
snow.system.input.Keycodes.key_f = 102;
snow.system.input.Keycodes.key_g = 103;
snow.system.input.Keycodes.key_h = 104;
snow.system.input.Keycodes.key_i = 105;
snow.system.input.Keycodes.key_j = 106;
snow.system.input.Keycodes.key_k = 107;
snow.system.input.Keycodes.key_l = 108;
snow.system.input.Keycodes.key_m = 109;
snow.system.input.Keycodes.key_n = 110;
snow.system.input.Keycodes.key_o = 111;
snow.system.input.Keycodes.key_p = 112;
snow.system.input.Keycodes.key_q = 113;
snow.system.input.Keycodes.key_r = 114;
snow.system.input.Keycodes.key_s = 115;
snow.system.input.Keycodes.key_t = 116;
snow.system.input.Keycodes.key_u = 117;
snow.system.input.Keycodes.key_v = 118;
snow.system.input.Keycodes.key_w = 119;
snow.system.input.Keycodes.key_x = 120;
snow.system.input.Keycodes.key_y = 121;
snow.system.input.Keycodes.key_z = 122;
snow.system.input.Keycodes.capslock = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.capslock);
snow.system.input.Keycodes.f1 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f1);
snow.system.input.Keycodes.f2 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f2);
snow.system.input.Keycodes.f3 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f3);
snow.system.input.Keycodes.f4 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f4);
snow.system.input.Keycodes.f5 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f5);
snow.system.input.Keycodes.f6 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f6);
snow.system.input.Keycodes.f7 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f7);
snow.system.input.Keycodes.f8 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f8);
snow.system.input.Keycodes.f9 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f9);
snow.system.input.Keycodes.f10 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f10);
snow.system.input.Keycodes.f11 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f11);
snow.system.input.Keycodes.f12 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f12);
snow.system.input.Keycodes.printscreen = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.printscreen);
snow.system.input.Keycodes.scrolllock = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.scrolllock);
snow.system.input.Keycodes.pause = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.pause);
snow.system.input.Keycodes.insert = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.insert);
snow.system.input.Keycodes.home = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.home);
snow.system.input.Keycodes.pageup = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.pageup);
snow.system.input.Keycodes["delete"] = 127;
snow.system.input.Keycodes.end = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.end);
snow.system.input.Keycodes.pagedown = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.pagedown);
snow.system.input.Keycodes.right = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.right);
snow.system.input.Keycodes.left = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.left);
snow.system.input.Keycodes.down = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.down);
snow.system.input.Keycodes.up = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.up);
snow.system.input.Keycodes.numlockclear = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.numlockclear);
snow.system.input.Keycodes.kp_divide = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_divide);
snow.system.input.Keycodes.kp_multiply = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_multiply);
snow.system.input.Keycodes.kp_minus = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_minus);
snow.system.input.Keycodes.kp_plus = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_plus);
snow.system.input.Keycodes.kp_enter = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_enter);
snow.system.input.Keycodes.kp_1 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_1);
snow.system.input.Keycodes.kp_2 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_2);
snow.system.input.Keycodes.kp_3 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_3);
snow.system.input.Keycodes.kp_4 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_4);
snow.system.input.Keycodes.kp_5 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_5);
snow.system.input.Keycodes.kp_6 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_6);
snow.system.input.Keycodes.kp_7 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_7);
snow.system.input.Keycodes.kp_8 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_8);
snow.system.input.Keycodes.kp_9 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_9);
snow.system.input.Keycodes.kp_0 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_0);
snow.system.input.Keycodes.kp_period = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_period);
snow.system.input.Keycodes.application = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.application);
snow.system.input.Keycodes.power = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.power);
snow.system.input.Keycodes.kp_equals = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_equals);
snow.system.input.Keycodes.f13 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f13);
snow.system.input.Keycodes.f14 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f14);
snow.system.input.Keycodes.f15 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f15);
snow.system.input.Keycodes.f16 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f16);
snow.system.input.Keycodes.f17 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f17);
snow.system.input.Keycodes.f18 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f18);
snow.system.input.Keycodes.f19 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f19);
snow.system.input.Keycodes.f20 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f20);
snow.system.input.Keycodes.f21 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f21);
snow.system.input.Keycodes.f22 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f22);
snow.system.input.Keycodes.f23 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f23);
snow.system.input.Keycodes.f24 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.f24);
snow.system.input.Keycodes.execute = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.execute);
snow.system.input.Keycodes.help = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.help);
snow.system.input.Keycodes.menu = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.menu);
snow.system.input.Keycodes.select = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.select);
snow.system.input.Keycodes.stop = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.stop);
snow.system.input.Keycodes.again = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.again);
snow.system.input.Keycodes.undo = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.undo);
snow.system.input.Keycodes.cut = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.cut);
snow.system.input.Keycodes.copy = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.copy);
snow.system.input.Keycodes.paste = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.paste);
snow.system.input.Keycodes.find = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.find);
snow.system.input.Keycodes.mute = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.mute);
snow.system.input.Keycodes.volumeup = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.volumeup);
snow.system.input.Keycodes.volumedown = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.volumedown);
snow.system.input.Keycodes.kp_comma = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_comma);
snow.system.input.Keycodes.kp_equalsas400 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_equalsas400);
snow.system.input.Keycodes.alterase = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.alterase);
snow.system.input.Keycodes.sysreq = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.sysreq);
snow.system.input.Keycodes.cancel = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.cancel);
snow.system.input.Keycodes.clear = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.clear);
snow.system.input.Keycodes.prior = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.prior);
snow.system.input.Keycodes.return2 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.return2);
snow.system.input.Keycodes.separator = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.separator);
snow.system.input.Keycodes.out = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.out);
snow.system.input.Keycodes.oper = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.oper);
snow.system.input.Keycodes.clearagain = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.clearagain);
snow.system.input.Keycodes.crsel = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.crsel);
snow.system.input.Keycodes.exsel = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.exsel);
snow.system.input.Keycodes.kp_00 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_00);
snow.system.input.Keycodes.kp_000 = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_000);
snow.system.input.Keycodes.thousandsseparator = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.thousandsseparator);
snow.system.input.Keycodes.decimalseparator = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.decimalseparator);
snow.system.input.Keycodes.currencyunit = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.currencyunit);
snow.system.input.Keycodes.currencysubunit = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.currencysubunit);
snow.system.input.Keycodes.kp_leftparen = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_leftparen);
snow.system.input.Keycodes.kp_rightparen = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_rightparen);
snow.system.input.Keycodes.kp_leftbrace = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_leftbrace);
snow.system.input.Keycodes.kp_rightbrace = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_rightbrace);
snow.system.input.Keycodes.kp_tab = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_tab);
snow.system.input.Keycodes.kp_backspace = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_backspace);
snow.system.input.Keycodes.kp_a = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_a);
snow.system.input.Keycodes.kp_b = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_b);
snow.system.input.Keycodes.kp_c = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_c);
snow.system.input.Keycodes.kp_d = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_d);
snow.system.input.Keycodes.kp_e = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_e);
snow.system.input.Keycodes.kp_f = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_f);
snow.system.input.Keycodes.kp_xor = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_xor);
snow.system.input.Keycodes.kp_power = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_power);
snow.system.input.Keycodes.kp_percent = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_percent);
snow.system.input.Keycodes.kp_less = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_less);
snow.system.input.Keycodes.kp_greater = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_greater);
snow.system.input.Keycodes.kp_ampersand = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_ampersand);
snow.system.input.Keycodes.kp_dblampersand = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_dblampersand);
snow.system.input.Keycodes.kp_verticalbar = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_verticalbar);
snow.system.input.Keycodes.kp_dblverticalbar = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_dblverticalbar);
snow.system.input.Keycodes.kp_colon = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_colon);
snow.system.input.Keycodes.kp_hash = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_hash);
snow.system.input.Keycodes.kp_space = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_space);
snow.system.input.Keycodes.kp_at = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_at);
snow.system.input.Keycodes.kp_exclam = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_exclam);
snow.system.input.Keycodes.kp_memstore = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memstore);
snow.system.input.Keycodes.kp_memrecall = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memrecall);
snow.system.input.Keycodes.kp_memclear = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memclear);
snow.system.input.Keycodes.kp_memadd = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memadd);
snow.system.input.Keycodes.kp_memsubtract = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memsubtract);
snow.system.input.Keycodes.kp_memmultiply = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memmultiply);
snow.system.input.Keycodes.kp_memdivide = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_memdivide);
snow.system.input.Keycodes.kp_plusminus = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_plusminus);
snow.system.input.Keycodes.kp_clear = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_clear);
snow.system.input.Keycodes.kp_clearentry = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_clearentry);
snow.system.input.Keycodes.kp_binary = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_binary);
snow.system.input.Keycodes.kp_octal = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_octal);
snow.system.input.Keycodes.kp_decimal = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_decimal);
snow.system.input.Keycodes.kp_hexadecimal = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kp_hexadecimal);
snow.system.input.Keycodes.lctrl = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.lctrl);
snow.system.input.Keycodes.lshift = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.lshift);
snow.system.input.Keycodes.lalt = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.lalt);
snow.system.input.Keycodes.lmeta = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.lmeta);
snow.system.input.Keycodes.rctrl = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.rctrl);
snow.system.input.Keycodes.rshift = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.rshift);
snow.system.input.Keycodes.ralt = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ralt);
snow.system.input.Keycodes.rmeta = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.rmeta);
snow.system.input.Keycodes.mode = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.mode);
snow.system.input.Keycodes.audionext = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.audionext);
snow.system.input.Keycodes.audioprev = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.audioprev);
snow.system.input.Keycodes.audiostop = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.audiostop);
snow.system.input.Keycodes.audioplay = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.audioplay);
snow.system.input.Keycodes.audiomute = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.audiomute);
snow.system.input.Keycodes.mediaselect = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.mediaselect);
snow.system.input.Keycodes.www = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.www);
snow.system.input.Keycodes.mail = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.mail);
snow.system.input.Keycodes.calculator = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.calculator);
snow.system.input.Keycodes.computer = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.computer);
snow.system.input.Keycodes.ac_search = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_search);
snow.system.input.Keycodes.ac_home = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_home);
snow.system.input.Keycodes.ac_back = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_back);
snow.system.input.Keycodes.ac_forward = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_forward);
snow.system.input.Keycodes.ac_stop = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_stop);
snow.system.input.Keycodes.ac_refresh = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_refresh);
snow.system.input.Keycodes.ac_bookmarks = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.ac_bookmarks);
snow.system.input.Keycodes.brightnessdown = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.brightnessdown);
snow.system.input.Keycodes.brightnessup = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.brightnessup);
snow.system.input.Keycodes.displayswitch = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.displayswitch);
snow.system.input.Keycodes.kbdillumtoggle = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kbdillumtoggle);
snow.system.input.Keycodes.kbdillumdown = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kbdillumdown);
snow.system.input.Keycodes.kbdillumup = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.kbdillumup);
snow.system.input.Keycodes.eject = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.eject);
snow.system.input.Keycodes.sleep = snow.system.input.Keycodes.from_scan(snow.system.input.Scancodes.sleep);
snow.core.web.input.Input._keypress_blacklist = [snow.system.input.Keycodes.backspace,snow.system.input.Keycodes.enter];
snow.modules.opengl.web.GL.DEPTH_BUFFER_BIT = 256;
snow.modules.opengl.web.GL.STENCIL_BUFFER_BIT = 1024;
snow.modules.opengl.web.GL.COLOR_BUFFER_BIT = 16384;
snow.modules.opengl.web.GL.POINTS = 0;
snow.modules.opengl.web.GL.LINES = 1;
snow.modules.opengl.web.GL.LINE_LOOP = 2;
snow.modules.opengl.web.GL.LINE_STRIP = 3;
snow.modules.opengl.web.GL.TRIANGLES = 4;
snow.modules.opengl.web.GL.TRIANGLE_STRIP = 5;
snow.modules.opengl.web.GL.TRIANGLE_FAN = 6;
snow.modules.opengl.web.GL.ZERO = 0;
snow.modules.opengl.web.GL.ONE = 1;
snow.modules.opengl.web.GL.SRC_COLOR = 768;
snow.modules.opengl.web.GL.ONE_MINUS_SRC_COLOR = 769;
snow.modules.opengl.web.GL.SRC_ALPHA = 770;
snow.modules.opengl.web.GL.ONE_MINUS_SRC_ALPHA = 771;
snow.modules.opengl.web.GL.DST_ALPHA = 772;
snow.modules.opengl.web.GL.ONE_MINUS_DST_ALPHA = 773;
snow.modules.opengl.web.GL.DST_COLOR = 774;
snow.modules.opengl.web.GL.ONE_MINUS_DST_COLOR = 775;
snow.modules.opengl.web.GL.SRC_ALPHA_SATURATE = 776;
snow.modules.opengl.web.GL.FUNC_ADD = 32774;
snow.modules.opengl.web.GL.BLEND_EQUATION = 32777;
snow.modules.opengl.web.GL.BLEND_EQUATION_RGB = 32777;
snow.modules.opengl.web.GL.BLEND_EQUATION_ALPHA = 34877;
snow.modules.opengl.web.GL.FUNC_SUBTRACT = 32778;
snow.modules.opengl.web.GL.FUNC_REVERSE_SUBTRACT = 32779;
snow.modules.opengl.web.GL.BLEND_DST_RGB = 32968;
snow.modules.opengl.web.GL.BLEND_SRC_RGB = 32969;
snow.modules.opengl.web.GL.BLEND_DST_ALPHA = 32970;
snow.modules.opengl.web.GL.BLEND_SRC_ALPHA = 32971;
snow.modules.opengl.web.GL.CONSTANT_COLOR = 32769;
snow.modules.opengl.web.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
snow.modules.opengl.web.GL.CONSTANT_ALPHA = 32771;
snow.modules.opengl.web.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
snow.modules.opengl.web.GL.BLEND_COLOR = 32773;
snow.modules.opengl.web.GL.ARRAY_BUFFER = 34962;
snow.modules.opengl.web.GL.ELEMENT_ARRAY_BUFFER = 34963;
snow.modules.opengl.web.GL.ARRAY_BUFFER_BINDING = 34964;
snow.modules.opengl.web.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
snow.modules.opengl.web.GL.STREAM_DRAW = 35040;
snow.modules.opengl.web.GL.STATIC_DRAW = 35044;
snow.modules.opengl.web.GL.DYNAMIC_DRAW = 35048;
snow.modules.opengl.web.GL.BUFFER_SIZE = 34660;
snow.modules.opengl.web.GL.BUFFER_USAGE = 34661;
snow.modules.opengl.web.GL.CURRENT_VERTEX_ATTRIB = 34342;
snow.modules.opengl.web.GL.FRONT = 1028;
snow.modules.opengl.web.GL.BACK = 1029;
snow.modules.opengl.web.GL.FRONT_AND_BACK = 1032;
snow.modules.opengl.web.GL.CULL_FACE = 2884;
snow.modules.opengl.web.GL.BLEND = 3042;
snow.modules.opengl.web.GL.DITHER = 3024;
snow.modules.opengl.web.GL.STENCIL_TEST = 2960;
snow.modules.opengl.web.GL.DEPTH_TEST = 2929;
snow.modules.opengl.web.GL.SCISSOR_TEST = 3089;
snow.modules.opengl.web.GL.POLYGON_OFFSET_FILL = 32823;
snow.modules.opengl.web.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
snow.modules.opengl.web.GL.SAMPLE_COVERAGE = 32928;
snow.modules.opengl.web.GL.NO_ERROR = 0;
snow.modules.opengl.web.GL.INVALID_ENUM = 1280;
snow.modules.opengl.web.GL.INVALID_VALUE = 1281;
snow.modules.opengl.web.GL.INVALID_OPERATION = 1282;
snow.modules.opengl.web.GL.OUT_OF_MEMORY = 1285;
snow.modules.opengl.web.GL.CW = 2304;
snow.modules.opengl.web.GL.CCW = 2305;
snow.modules.opengl.web.GL.LINE_WIDTH = 2849;
snow.modules.opengl.web.GL.ALIASED_POINT_SIZE_RANGE = 33901;
snow.modules.opengl.web.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
snow.modules.opengl.web.GL.CULL_FACE_MODE = 2885;
snow.modules.opengl.web.GL.FRONT_FACE = 2886;
snow.modules.opengl.web.GL.DEPTH_RANGE = 2928;
snow.modules.opengl.web.GL.DEPTH_WRITEMASK = 2930;
snow.modules.opengl.web.GL.DEPTH_CLEAR_VALUE = 2931;
snow.modules.opengl.web.GL.DEPTH_FUNC = 2932;
snow.modules.opengl.web.GL.STENCIL_CLEAR_VALUE = 2961;
snow.modules.opengl.web.GL.STENCIL_FUNC = 2962;
snow.modules.opengl.web.GL.STENCIL_FAIL = 2964;
snow.modules.opengl.web.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
snow.modules.opengl.web.GL.STENCIL_PASS_DEPTH_PASS = 2966;
snow.modules.opengl.web.GL.STENCIL_REF = 2967;
snow.modules.opengl.web.GL.STENCIL_VALUE_MASK = 2963;
snow.modules.opengl.web.GL.STENCIL_WRITEMASK = 2968;
snow.modules.opengl.web.GL.STENCIL_BACK_FUNC = 34816;
snow.modules.opengl.web.GL.STENCIL_BACK_FAIL = 34817;
snow.modules.opengl.web.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
snow.modules.opengl.web.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
snow.modules.opengl.web.GL.STENCIL_BACK_REF = 36003;
snow.modules.opengl.web.GL.STENCIL_BACK_VALUE_MASK = 36004;
snow.modules.opengl.web.GL.STENCIL_BACK_WRITEMASK = 36005;
snow.modules.opengl.web.GL.VIEWPORT = 2978;
snow.modules.opengl.web.GL.SCISSOR_BOX = 3088;
snow.modules.opengl.web.GL.COLOR_CLEAR_VALUE = 3106;
snow.modules.opengl.web.GL.COLOR_WRITEMASK = 3107;
snow.modules.opengl.web.GL.UNPACK_ALIGNMENT = 3317;
snow.modules.opengl.web.GL.PACK_ALIGNMENT = 3333;
snow.modules.opengl.web.GL.MAX_TEXTURE_SIZE = 3379;
snow.modules.opengl.web.GL.MAX_VIEWPORT_DIMS = 3386;
snow.modules.opengl.web.GL.SUBPIXEL_BITS = 3408;
snow.modules.opengl.web.GL.RED_BITS = 3410;
snow.modules.opengl.web.GL.GREEN_BITS = 3411;
snow.modules.opengl.web.GL.BLUE_BITS = 3412;
snow.modules.opengl.web.GL.ALPHA_BITS = 3413;
snow.modules.opengl.web.GL.DEPTH_BITS = 3414;
snow.modules.opengl.web.GL.STENCIL_BITS = 3415;
snow.modules.opengl.web.GL.POLYGON_OFFSET_UNITS = 10752;
snow.modules.opengl.web.GL.POLYGON_OFFSET_FACTOR = 32824;
snow.modules.opengl.web.GL.TEXTURE_BINDING_2D = 32873;
snow.modules.opengl.web.GL.SAMPLE_BUFFERS = 32936;
snow.modules.opengl.web.GL.SAMPLES = 32937;
snow.modules.opengl.web.GL.SAMPLE_COVERAGE_VALUE = 32938;
snow.modules.opengl.web.GL.SAMPLE_COVERAGE_INVERT = 32939;
snow.modules.opengl.web.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
snow.modules.opengl.web.GL.DONT_CARE = 4352;
snow.modules.opengl.web.GL.FASTEST = 4353;
snow.modules.opengl.web.GL.NICEST = 4354;
snow.modules.opengl.web.GL.GENERATE_MIPMAP_HINT = 33170;
snow.modules.opengl.web.GL.BYTE = 5120;
snow.modules.opengl.web.GL.UNSIGNED_BYTE = 5121;
snow.modules.opengl.web.GL.SHORT = 5122;
snow.modules.opengl.web.GL.UNSIGNED_SHORT = 5123;
snow.modules.opengl.web.GL.INT = 5124;
snow.modules.opengl.web.GL.UNSIGNED_INT = 5125;
snow.modules.opengl.web.GL.FLOAT = 5126;
snow.modules.opengl.web.GL.DEPTH_COMPONENT = 6402;
snow.modules.opengl.web.GL.ALPHA = 6406;
snow.modules.opengl.web.GL.RGB = 6407;
snow.modules.opengl.web.GL.RGBA = 6408;
snow.modules.opengl.web.GL.LUMINANCE = 6409;
snow.modules.opengl.web.GL.LUMINANCE_ALPHA = 6410;
snow.modules.opengl.web.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
snow.modules.opengl.web.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
snow.modules.opengl.web.GL.UNSIGNED_SHORT_5_6_5 = 33635;
snow.modules.opengl.web.GL.FRAGMENT_SHADER = 35632;
snow.modules.opengl.web.GL.VERTEX_SHADER = 35633;
snow.modules.opengl.web.GL.MAX_VERTEX_ATTRIBS = 34921;
snow.modules.opengl.web.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
snow.modules.opengl.web.GL.MAX_VARYING_VECTORS = 36348;
snow.modules.opengl.web.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
snow.modules.opengl.web.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
snow.modules.opengl.web.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
snow.modules.opengl.web.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
snow.modules.opengl.web.GL.SHADER_TYPE = 35663;
snow.modules.opengl.web.GL.DELETE_STATUS = 35712;
snow.modules.opengl.web.GL.LINK_STATUS = 35714;
snow.modules.opengl.web.GL.VALIDATE_STATUS = 35715;
snow.modules.opengl.web.GL.ATTACHED_SHADERS = 35717;
snow.modules.opengl.web.GL.ACTIVE_UNIFORMS = 35718;
snow.modules.opengl.web.GL.ACTIVE_ATTRIBUTES = 35721;
snow.modules.opengl.web.GL.SHADING_LANGUAGE_VERSION = 35724;
snow.modules.opengl.web.GL.CURRENT_PROGRAM = 35725;
snow.modules.opengl.web.GL.NEVER = 512;
snow.modules.opengl.web.GL.LESS = 513;
snow.modules.opengl.web.GL.EQUAL = 514;
snow.modules.opengl.web.GL.LEQUAL = 515;
snow.modules.opengl.web.GL.GREATER = 516;
snow.modules.opengl.web.GL.NOTEQUAL = 517;
snow.modules.opengl.web.GL.GEQUAL = 518;
snow.modules.opengl.web.GL.ALWAYS = 519;
snow.modules.opengl.web.GL.KEEP = 7680;
snow.modules.opengl.web.GL.REPLACE = 7681;
snow.modules.opengl.web.GL.INCR = 7682;
snow.modules.opengl.web.GL.DECR = 7683;
snow.modules.opengl.web.GL.INVERT = 5386;
snow.modules.opengl.web.GL.INCR_WRAP = 34055;
snow.modules.opengl.web.GL.DECR_WRAP = 34056;
snow.modules.opengl.web.GL.VENDOR = 7936;
snow.modules.opengl.web.GL.RENDERER = 7937;
snow.modules.opengl.web.GL.VERSION = 7938;
snow.modules.opengl.web.GL.NEAREST = 9728;
snow.modules.opengl.web.GL.LINEAR = 9729;
snow.modules.opengl.web.GL.NEAREST_MIPMAP_NEAREST = 9984;
snow.modules.opengl.web.GL.LINEAR_MIPMAP_NEAREST = 9985;
snow.modules.opengl.web.GL.NEAREST_MIPMAP_LINEAR = 9986;
snow.modules.opengl.web.GL.LINEAR_MIPMAP_LINEAR = 9987;
snow.modules.opengl.web.GL.TEXTURE_MAG_FILTER = 10240;
snow.modules.opengl.web.GL.TEXTURE_MIN_FILTER = 10241;
snow.modules.opengl.web.GL.TEXTURE_WRAP_S = 10242;
snow.modules.opengl.web.GL.TEXTURE_WRAP_T = 10243;
snow.modules.opengl.web.GL.TEXTURE_2D = 3553;
snow.modules.opengl.web.GL.TEXTURE = 5890;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP = 34067;
snow.modules.opengl.web.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
snow.modules.opengl.web.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
snow.modules.opengl.web.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
snow.modules.opengl.web.GL.TEXTURE0 = 33984;
snow.modules.opengl.web.GL.TEXTURE1 = 33985;
snow.modules.opengl.web.GL.TEXTURE2 = 33986;
snow.modules.opengl.web.GL.TEXTURE3 = 33987;
snow.modules.opengl.web.GL.TEXTURE4 = 33988;
snow.modules.opengl.web.GL.TEXTURE5 = 33989;
snow.modules.opengl.web.GL.TEXTURE6 = 33990;
snow.modules.opengl.web.GL.TEXTURE7 = 33991;
snow.modules.opengl.web.GL.TEXTURE8 = 33992;
snow.modules.opengl.web.GL.TEXTURE9 = 33993;
snow.modules.opengl.web.GL.TEXTURE10 = 33994;
snow.modules.opengl.web.GL.TEXTURE11 = 33995;
snow.modules.opengl.web.GL.TEXTURE12 = 33996;
snow.modules.opengl.web.GL.TEXTURE13 = 33997;
snow.modules.opengl.web.GL.TEXTURE14 = 33998;
snow.modules.opengl.web.GL.TEXTURE15 = 33999;
snow.modules.opengl.web.GL.TEXTURE16 = 34000;
snow.modules.opengl.web.GL.TEXTURE17 = 34001;
snow.modules.opengl.web.GL.TEXTURE18 = 34002;
snow.modules.opengl.web.GL.TEXTURE19 = 34003;
snow.modules.opengl.web.GL.TEXTURE20 = 34004;
snow.modules.opengl.web.GL.TEXTURE21 = 34005;
snow.modules.opengl.web.GL.TEXTURE22 = 34006;
snow.modules.opengl.web.GL.TEXTURE23 = 34007;
snow.modules.opengl.web.GL.TEXTURE24 = 34008;
snow.modules.opengl.web.GL.TEXTURE25 = 34009;
snow.modules.opengl.web.GL.TEXTURE26 = 34010;
snow.modules.opengl.web.GL.TEXTURE27 = 34011;
snow.modules.opengl.web.GL.TEXTURE28 = 34012;
snow.modules.opengl.web.GL.TEXTURE29 = 34013;
snow.modules.opengl.web.GL.TEXTURE30 = 34014;
snow.modules.opengl.web.GL.TEXTURE31 = 34015;
snow.modules.opengl.web.GL.ACTIVE_TEXTURE = 34016;
snow.modules.opengl.web.GL.REPEAT = 10497;
snow.modules.opengl.web.GL.CLAMP_TO_EDGE = 33071;
snow.modules.opengl.web.GL.MIRRORED_REPEAT = 33648;
snow.modules.opengl.web.GL.FLOAT_VEC2 = 35664;
snow.modules.opengl.web.GL.FLOAT_VEC3 = 35665;
snow.modules.opengl.web.GL.FLOAT_VEC4 = 35666;
snow.modules.opengl.web.GL.INT_VEC2 = 35667;
snow.modules.opengl.web.GL.INT_VEC3 = 35668;
snow.modules.opengl.web.GL.INT_VEC4 = 35669;
snow.modules.opengl.web.GL.BOOL = 35670;
snow.modules.opengl.web.GL.BOOL_VEC2 = 35671;
snow.modules.opengl.web.GL.BOOL_VEC3 = 35672;
snow.modules.opengl.web.GL.BOOL_VEC4 = 35673;
snow.modules.opengl.web.GL.FLOAT_MAT2 = 35674;
snow.modules.opengl.web.GL.FLOAT_MAT3 = 35675;
snow.modules.opengl.web.GL.FLOAT_MAT4 = 35676;
snow.modules.opengl.web.GL.SAMPLER_2D = 35678;
snow.modules.opengl.web.GL.SAMPLER_CUBE = 35680;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
snow.modules.opengl.web.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
snow.modules.opengl.web.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
snow.modules.opengl.web.GL.POINT_SPRITE = 34913;
snow.modules.opengl.web.GL.COMPILE_STATUS = 35713;
snow.modules.opengl.web.GL.LOW_FLOAT = 36336;
snow.modules.opengl.web.GL.MEDIUM_FLOAT = 36337;
snow.modules.opengl.web.GL.HIGH_FLOAT = 36338;
snow.modules.opengl.web.GL.LOW_INT = 36339;
snow.modules.opengl.web.GL.MEDIUM_INT = 36340;
snow.modules.opengl.web.GL.HIGH_INT = 36341;
snow.modules.opengl.web.GL.FRAMEBUFFER = 36160;
snow.modules.opengl.web.GL.RENDERBUFFER = 36161;
snow.modules.opengl.web.GL.RGBA4 = 32854;
snow.modules.opengl.web.GL.RGB5_A1 = 32855;
snow.modules.opengl.web.GL.RGB565 = 36194;
snow.modules.opengl.web.GL.DEPTH_COMPONENT16 = 33189;
snow.modules.opengl.web.GL.STENCIL_INDEX = 6401;
snow.modules.opengl.web.GL.STENCIL_INDEX8 = 36168;
snow.modules.opengl.web.GL.DEPTH_STENCIL = 34041;
snow.modules.opengl.web.GL.RENDERBUFFER_WIDTH = 36162;
snow.modules.opengl.web.GL.RENDERBUFFER_HEIGHT = 36163;
snow.modules.opengl.web.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
snow.modules.opengl.web.GL.RENDERBUFFER_RED_SIZE = 36176;
snow.modules.opengl.web.GL.RENDERBUFFER_GREEN_SIZE = 36177;
snow.modules.opengl.web.GL.RENDERBUFFER_BLUE_SIZE = 36178;
snow.modules.opengl.web.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
snow.modules.opengl.web.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
snow.modules.opengl.web.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
snow.modules.opengl.web.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
snow.modules.opengl.web.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
snow.modules.opengl.web.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
snow.modules.opengl.web.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
snow.modules.opengl.web.GL.COLOR_ATTACHMENT0 = 36064;
snow.modules.opengl.web.GL.DEPTH_ATTACHMENT = 36096;
snow.modules.opengl.web.GL.STENCIL_ATTACHMENT = 36128;
snow.modules.opengl.web.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
snow.modules.opengl.web.GL.NONE = 0;
snow.modules.opengl.web.GL.FRAMEBUFFER_COMPLETE = 36053;
snow.modules.opengl.web.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
snow.modules.opengl.web.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
snow.modules.opengl.web.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
snow.modules.opengl.web.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
snow.modules.opengl.web.GL.FRAMEBUFFER_BINDING = 36006;
snow.modules.opengl.web.GL.RENDERBUFFER_BINDING = 36007;
snow.modules.opengl.web.GL.MAX_RENDERBUFFER_SIZE = 34024;
snow.modules.opengl.web.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
snow.modules.opengl.web.GL.UNPACK_FLIP_Y_WEBGL = 37440;
snow.modules.opengl.web.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
snow.modules.opengl.web.GL.CONTEXT_LOST_WEBGL = 37442;
snow.modules.opengl.web.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
snow.modules.opengl.web.GL.BROWSER_DEFAULT_WEBGL = 37444;
snow.types._Types.AssetType_Impl_.unknown = 0;
snow.types._Types.AssetType_Impl_.bytes = 1;
snow.types._Types.AssetType_Impl_.text = 2;
snow.types._Types.AssetType_Impl_.json = 3;
snow.types._Types.AssetType_Impl_.image = 4;
snow.types._Types.AssetType_Impl_.audio = 5;
snow.types._Types.AudioFormatType_Impl_.unknown = 0;
snow.types._Types.AudioFormatType_Impl_.ogg = 1;
snow.types._Types.AudioFormatType_Impl_.wav = 2;
snow.types._Types.AudioFormatType_Impl_.pcm = 3;
snow.types._Types.OpenGLProfile_Impl_.compatibility = 0;
snow.types._Types.OpenGLProfile_Impl_.core = 1;
snow.types._Types.TextEventType_Impl_.unknown = 0;
snow.types._Types.TextEventType_Impl_.edit = 1;
snow.types._Types.TextEventType_Impl_.input = 2;
snow.types._Types.GamepadDeviceEventType_Impl_.unknown = 0;
snow.types._Types.GamepadDeviceEventType_Impl_.device_added = 1;
snow.types._Types.GamepadDeviceEventType_Impl_.device_removed = 2;
snow.types._Types.GamepadDeviceEventType_Impl_.device_remapped = 3;
snow.types._Types.SystemEventType_Impl_.unknown = 0;
snow.types._Types.SystemEventType_Impl_.init = 1;
snow.types._Types.SystemEventType_Impl_.ready = 2;
snow.types._Types.SystemEventType_Impl_.update = 3;
snow.types._Types.SystemEventType_Impl_.shutdown = 4;
snow.types._Types.SystemEventType_Impl_.window = 5;
snow.types._Types.SystemEventType_Impl_.input = 6;
snow.types._Types.SystemEventType_Impl_.quit = 7;
snow.types._Types.SystemEventType_Impl_.app_terminating = 8;
snow.types._Types.SystemEventType_Impl_.app_lowmemory = 9;
snow.types._Types.SystemEventType_Impl_.app_willenterbackground = 10;
snow.types._Types.SystemEventType_Impl_.app_didenterbackground = 11;
snow.types._Types.SystemEventType_Impl_.app_willenterforeground = 12;
snow.types._Types.SystemEventType_Impl_.app_didenterforeground = 13;
snow.types._Types.SystemEventType_Impl_.file = 14;
snow.types._Types.WindowEventType_Impl_.unknown = 0;
snow.types._Types.WindowEventType_Impl_.created = 1;
snow.types._Types.WindowEventType_Impl_.shown = 2;
snow.types._Types.WindowEventType_Impl_.hidden = 3;
snow.types._Types.WindowEventType_Impl_.exposed = 4;
snow.types._Types.WindowEventType_Impl_.moved = 5;
snow.types._Types.WindowEventType_Impl_.resized = 6;
snow.types._Types.WindowEventType_Impl_.size_changed = 7;
snow.types._Types.WindowEventType_Impl_.minimized = 8;
snow.types._Types.WindowEventType_Impl_.maximized = 9;
snow.types._Types.WindowEventType_Impl_.restored = 10;
snow.types._Types.WindowEventType_Impl_.enter = 11;
snow.types._Types.WindowEventType_Impl_.leave = 12;
snow.types._Types.WindowEventType_Impl_.focus_gained = 13;
snow.types._Types.WindowEventType_Impl_.focus_lost = 14;
snow.types._Types.WindowEventType_Impl_.close = 15;
snow.types._Types.WindowEventType_Impl_.destroy = 16;
snow.types._Types.InputEventType_Impl_.unknown = 0;
snow.types._Types.InputEventType_Impl_.key = 1;
snow.types._Types.InputEventType_Impl_.mouse = 2;
snow.types._Types.InputEventType_Impl_.touch = 3;
snow.types._Types.InputEventType_Impl_.joystick = 4;
snow.types._Types.InputEventType_Impl_.controller = 5;
snow.types._Types.FileEventType_Impl_.unknown = 0;
snow.types._Types.FileEventType_Impl_.modify = 1;
snow.types._Types.FileEventType_Impl_.remove = 2;
snow.types._Types.FileEventType_Impl_.create = 3;
snow.types._Types.FileEventType_Impl_.drop = 4;
zpp_nape.ZPP_Const.FMAX = 1e100;
zpp_nape.callbacks.ZPP_Callback.internal = false;
zpp_nape.util.ZPP_Flags.internal = false;
zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS = 4;
zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED = 2;
zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_MassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_STATIC = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC = 2;
zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC = 3;
zpp_nape.util.ZPP_Flags.id_ListenerType_BODY = 0;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION = 2;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT_ONCE = 3;
zpp_nape.util.ZPP_Flags.id_ListenerType_PRE = 3;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE_ONCE = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN = 0;
zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING = 6;
zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_CbEvent_END = 1;
zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE = 2;
zpp_nape.util.ZPP_Flags.id_InteractionType_ANY = 7;
zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP = 3;
zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_PRE = 5;
zpp_nape.util.ZPP_Flags.id_Winding_UNDEFINED = 0;
zpp_nape.util.ZPP_Flags.id_Winding_CLOCKWISE = 1;
zpp_nape.util.ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_VALID = 0;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
zpp_nape.util.ZPP_Flags.id_ValidationResult_CONCAVE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 3;
zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE = 0;
zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON = 1;
zpp_nape.util.ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_nape.util.ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_ArbiterType_FLUID = 4;
zpp_nape.callbacks.ZPP_Listener.internal = false;
zpp_nape.callbacks.ZPP_Listener.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_Listener.events = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_InteractionListener.UCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.VCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.WCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.UCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.VCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.WCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.dynamics.ZPP_Arbiter.internal = false;
zpp_nape.dynamics.ZPP_Arbiter.COL = 1;
zpp_nape.dynamics.ZPP_Arbiter.FLUID = 4;
zpp_nape.dynamics.ZPP_Arbiter.SENSOR = 2;
zpp_nape.dynamics.ZPP_Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
	return $r;
}(this))];
zpp_nape.dynamics.ZPP_ColArbiter.FACE1 = 0;
zpp_nape.dynamics.ZPP_ColArbiter.FACE2 = 1;
zpp_nape.dynamics.ZPP_ColArbiter.CIRCLE = 2;
zpp_nape.dynamics.ZPP_Contact.internal = false;
zpp_nape.dynamics.ZPP_InteractionGroup.SHAPE = 1;
zpp_nape.dynamics.ZPP_InteractionGroup.BODY = 2;
zpp_nape.geom.ZPP_Collide.flowpoly = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_Collide.flowsegs = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
zpp_nape.geom.ZPP_MarchingSquares.me = new zpp_nape.geom.ZPP_MarchingSquares();
zpp_nape.geom.ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
zpp_nape.geom.ZPP_PartitionVertex.nextId = 0;
zpp_nape.geom.ZPP_Ray.internal = false;
zpp_nape.phys.ZPP_Body.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
zpp_nape.phys.ZPP_Body.cur_graph_depth = 0;
zpp_nape.phys.ZPP_Material.WAKE = 1;
zpp_nape.phys.ZPP_Material.PROPS = 2;
zpp_nape.phys.ZPP_Material.ANGDRAG = 4;
zpp_nape.phys.ZPP_Material.ARBITERS = 8;
zpp_nape.shape.ZPP_Shape.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
	return $r;
}(this))];
zpp_nape.shape.ZPP_Edge.internal = false;
zpp_nape.space.ZPP_AABBTree.tmpaabb = new zpp_nape.geom.ZPP_AABB();
zpp_nape.space.ZPP_DynAABBPhase.FATTEN = 3.0;
zpp_nape.space.ZPP_DynAABBPhase.VEL_STEPS = 2.0;
zpp_nape.util.ZPP_ConstraintList.internal = false;
zpp_nape.util.ZPP_BodyList.internal = false;
zpp_nape.util.ZPP_InteractorList.internal = false;
zpp_nape.util.ZPP_CompoundList.internal = false;
zpp_nape.util.ZPP_ListenerList.internal = false;
zpp_nape.util.ZPP_CbTypeList.internal = false;
zpp_nape.util.ZPP_Vec2List.internal = false;
zpp_nape.util.ZPP_GeomPolyList.internal = false;
zpp_nape.util.ZPP_RayResultList.internal = false;
zpp_nape.util.ZPP_ConvexResultList.internal = false;
zpp_nape.util.ZPP_EdgeList.internal = false;
zpp_nape.util.ZPP_ShapeList.internal = false;
zpp_nape.util.ZPP_InteractionGroupList.internal = false;
zpp_nape.util.ZPP_ArbiterList.internal = false;
zpp_nape.util.ZPP_ContactList.internal = false;
LuxeApp.main();
})();
